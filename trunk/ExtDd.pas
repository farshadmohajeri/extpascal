unit ExtDd;

// Generated by ExtToPascal v.0.9.8, at 24/3/2010 15:23:52
// from "C:\Trabalho\ext\docs\output" detected as ExtJS v.3

interface

uses
  StrUtils, ExtPascal, ExtPascalUtils, ExtUtil;

type
  TExtDdDragDrop = class;
  TExtDdDragDropMgrSingleton = class;
  TExtDdPanelProxy = class;
  TExtDdStatusProxy = class;
  TExtDdScrollManagerSingleton = class;
  TExtDdRegistrySingleton = class;
  TExtDdDragTracker = class;
  TExtDdDDTarget = class;
  TExtDdDD = class;
  TExtDdDDProxy = class;
  TExtDdDropTarget = class;
  TExtDdDropZone = class;
  TExtDdDragSource = class;
  TExtDdDragZone = class;

  TExtDdDragDrop = class(TExtFunction)
  private
    FOnly : TExtObject;
    FAvailable : Boolean;
    FDefaultPadding : TExtObject;
    FGroups : TExtObject;
    FHasOuterHandles : Boolean;
    FId : String;
    FIgnoreSelf : Boolean;
    FInvalidHandleClasses : TExtObjectList;
    FInvalidHandleIds : TExtObject;
    FInvalidHandleTypes : TExtObject;
    FIsTarget : Boolean;
    FMaintainOffset : Boolean;
    FMoveOnly : Boolean;
    FPadding : TArrayOfInteger;
    FPrimaryButtonOnly : Boolean;
    FXTicks : TArrayOfInteger;
    FYTicks : TArrayOfInteger;
    procedure SetFOnly(Value : TExtObject);
    procedure SetFAvailable(Value : Boolean);
    procedure SetFDefaultPadding(Value : TExtObject);
    procedure SetFGroups(Value : TExtObject);
    procedure SetFHasOuterHandles(Value : Boolean);
    procedure SetFId(Value : String);
    procedure SetFIgnoreSelf(Value : Boolean);
    procedure SetFInvalidHandleClasses(Value : TExtObjectList);
    procedure SetFInvalidHandleIds(Value : TExtObject);
    procedure SetFInvalidHandleTypes(Value : TExtObject);
    procedure SetFIsTarget(Value : Boolean);
    procedure SetFMaintainOffset(Value : Boolean);
    procedure SetFMoveOnly(Value : Boolean);
    procedure SetFPadding(Value : TArrayOfInteger);
    procedure SetFPrimaryButtonOnly(Value : Boolean);
    procedure SetFXTicks(Value : TArrayOfInteger);
    procedure SetFYTicks(Value : TArrayOfInteger);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function AddInvalidHandleClass(CssClass : String) : TExtFunction;
    function AddInvalidHandleId(Id : String) : TExtFunction;
    function AddInvalidHandleType(TagName : String) : TExtFunction;
    function AddToGroup(SGroup : String) : TExtFunction;
    function ApplyConfig : TExtFunction;
    function ClearConstraints : TExtFunction;
    function ClearTicks : TExtFunction;
    function ConstrainTo(ConstrainTo : String; Pad : TExtObject = nil; InContent : Boolean = false) : TExtFunction; overload;
    function ConstrainTo(ConstrainTo : String; Pad : Integer; InContent : Boolean = false) : TExtFunction; overload;
    function EndDrag(E : TEvent) : TExtFunction;
    function GetDragEl : TExtFunction;
    function GetEl : TExtFunction;
    function Init(The : TId; SGroup : String; Config : TExtObject = nil) : TExtFunction;
    function InitTarget(The : TId; SGroup : String; Config : TExtObject = nil) : TExtFunction;
    function IsLocked : TExtFunction;
    function IsValidHandleChild(Node : THTMLElement) : TExtFunction;
    function Lock : TExtFunction;
    function OnAvailable : TExtFunction;
    function OnDrag(E : TEvent) : TExtFunction;
    function OnDragDrop(E : TEvent; Id : String) : TExtFunction; overload;
    function OnDragDrop(E : TEvent; Id : TExtObjectList) : TExtFunction; overload;
    function OnDragEnter(E : TEvent; Id : String) : TExtFunction; overload;
    function OnDragEnter(E : TEvent; Id : TExtObjectList) : TExtFunction; overload;
    function OnDragOut(E : TEvent; Id : String) : TExtFunction; overload;
    function OnDragOut(E : TEvent; Id : TExtObjectList) : TExtFunction; overload;
    function OnDragOver(E : TEvent; Id : String) : TExtFunction; overload;
    function OnDragOver(E : TEvent; Id : TExtObjectList) : TExtFunction; overload;
    function OnInvalidDrop(E : TEvent) : TExtFunction;
    function OnMouseDown(E : TEvent) : TExtFunction;
    function OnMouseUp(E : TEvent) : TExtFunction;
    function RemoveFromGroup(SGroup : String) : TExtFunction;
    function RemoveInvalidHandleClass(CssClass : String) : TExtFunction;
    function RemoveInvalidHandleId(Id : String) : TExtFunction;
    function RemoveInvalidHandleType(TagName : String) : TExtFunction;
    function ResetConstraints(MaintainOffset : Boolean) : TExtFunction;
    function SetDragElId(Id : String) : TExtFunction;
    function SetHandleElId(Id : String) : TExtFunction;
    function SetInitPosition(DiffX : Integer; DiffY : Integer) : TExtFunction;
    function SetOuterHandleElId(The : TId) : TExtFunction;
    function SetPadding(ITop : Integer; IRight : Integer; IBot : Integer; ILeft : Integer) : TExtFunction;
    function SetXConstraint(ILeft : Integer; IRight : Integer; ITickSize : Integer) : TExtFunction;
    function SetYConstraint(IUp : Integer; IDown : Integer; ITickSize : Integer) : TExtFunction;
    function StartDrag(X : Integer; Y : Integer) : TExtFunction;
    function ToString : TExtFunction;
    function Unlock : TExtFunction;
    function Unreg : TExtFunction;
    destructor Destroy; override;
    property Only : TExtObject read FOnly write SetFOnly;
    property Available : Boolean read FAvailable write SetFAvailable;
    property DefaultPadding : TExtObject read FDefaultPadding write SetFDefaultPadding;
    property Groups : TExtObject read FGroups write SetFGroups;
    property HasOuterHandles : Boolean read FHasOuterHandles write SetFHasOuterHandles;
    property Id : String read FId write SetFId;
    property IgnoreSelf : Boolean read FIgnoreSelf write SetFIgnoreSelf;
    property InvalidHandleClasses : TExtObjectList read FInvalidHandleClasses write SetFInvalidHandleClasses;
    property InvalidHandleIds : TExtObject read FInvalidHandleIds write SetFInvalidHandleIds;
    property InvalidHandleTypes : TExtObject read FInvalidHandleTypes write SetFInvalidHandleTypes;
    property IsTarget : Boolean read FIsTarget write SetFIsTarget;
    property MaintainOffset : Boolean read FMaintainOffset write SetFMaintainOffset;
    property MoveOnly : Boolean read FMoveOnly write SetFMoveOnly;
    property Padding : TArrayOfInteger read FPadding write SetFPadding;
    property PrimaryButtonOnly : Boolean read FPrimaryButtonOnly write SetFPrimaryButtonOnly;
    property XTicks : TArrayOfInteger read FXTicks write SetFXTicks;
    property YTicks : TArrayOfInteger read FYTicks write SetFYTicks;
  end;

  TExtDdDragDropMgrSingleton = class(TExtFunction)
  private
    FClickPixelThresh : Integer;
    FClickTimeThresh : Integer;
    FMode : Integer;
    FPreventDefault : Boolean;
    FStopPropagation : Boolean;
    FUseCache : Boolean;
    procedure SetFClickPixelThresh(Value : Integer);
    procedure SetFClickTimeThresh(Value : Integer);
    procedure SetFMode(Value : Integer);
    procedure SetFPreventDefault(Value : Boolean);
    procedure SetFStopPropagation(Value : Boolean);
    procedure SetFUseCache(Value : Boolean);
  public
    function JSClassName : string; override;
    class function INTERSECT : Integer;
    class function POINT : Integer;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetBestMatch(Dds : TExtObjectList) : TExtFunction;
    function GetCss(Id : String) : TExtFunction;
    function GetDDById(Id : String) : TExtFunction;
    function GetElement(Id : String) : TExtFunction;
    function GetLocation(ODD : TExtDdDragDrop) : TExtFunction;
    function GetRelated(P_oDD : TExtDdDragDrop; BTargetsOnly : Boolean) : TExtFunction;
    function IsDragDrop(Id : String) : TExtFunction;
    function IsHandle(Id : String) : TExtFunction;
    function IsLegalTarget(The : TExtDdDragDrop; The_ : TExtDdDragDrop) : TExtFunction;
    function IsLocked : TExtFunction;
    function IsTypeOfDD(The : TExtObject) : TExtFunction;
    function Lock : TExtFunction;
    function RefreshCache(Groups : TExtObject) : TExtFunction;
    function RegDragDrop(ODD : TExtDdDragDrop; SGroup : String) : TExtFunction;
    function RegHandle(SDDId : String; SHandleId : String) : TExtFunction;
    function StartDrag(X : Integer; Y : Integer) : TExtFunction;
    function StopEvent(E : TEvent) : TExtFunction;
    function Unlock : TExtFunction;
    function VerifyEl(El : THTMLElement) : TExtFunction;
    property ClickPixelThresh : Integer read FClickPixelThresh write SetFClickPixelThresh;
    property ClickTimeThresh : Integer read FClickTimeThresh write SetFClickTimeThresh;
    property Mode : Integer read FMode write SetFMode;
    property PreventDefault : Boolean read FPreventDefault write SetFPreventDefault;
    property StopPropagation : Boolean read FStopPropagation write SetFStopPropagation;
    property UseCache : Boolean read FUseCache write SetFUseCache;
  end;

  TExtDdPanelProxy = class(TExtFunction)
  private
    FInsertProxy : Boolean; // true
    procedure SetFInsertProxy(Value : Boolean);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function GetEl : TExtFunction;
    function GetGhost : TExtFunction;
    function GetProxy : TExtFunction;
    function Hide : TExtFunction;
    function MoveProxy(ParentNode : THTMLElement; Before : THTMLElement = nil) : TExtFunction;
    function Show : TExtFunction;
    property InsertProxy : Boolean read FInsertProxy write SetFInsertProxy;
  end;

  TExtDdStatusProxy = class(TExtFunction)
  private
    FDropAllowed : String; // 'x-dd-drop-ok'
    FDropNotAllowed : String; // 'x-dd-drop-nodrop'
    procedure SetFDropAllowed(Value : String);
    procedure SetFDropNotAllowed(Value : String);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function GetEl : TExtFunction;
    function GetGhost : TExtFunction;
    function Hide(Clear : Boolean) : TExtFunction;
    function Repair(Xy : TExtObjectList; Callback : TExtFunction; Scope : TExtObject) : TExtFunction;
    function Reset(ClearGhost : Boolean) : TExtFunction;
    function SetStatus(CssClass : String) : TExtFunction;
    function Show : TExtFunction;
    function Stop : TExtFunction;
    function Sync : TExtFunction;
    function Update(Html : String) : TExtFunction; overload;
    function Update(Html : THTMLElement) : TExtFunction; overload;
    property DropAllowed : String read FDropAllowed write SetFDropAllowed;
    property DropNotAllowed : String read FDropNotAllowed write SetFDropNotAllowed;
  end;

  TExtDdScrollManagerSingleton = class(TExtFunction)
  private
    FAnimDuration : Integer; // 4
    FAnimate : Boolean; // true
    FFrequency : Integer; // 500
    FHthresh : Integer; // 25
    FIncrement : Integer; // 50
    FVthresh : Integer; // 25
    procedure SetFAnimDuration(Value : Integer);
    procedure SetFAnimate(Value : Boolean);
    procedure SetFFrequency(Value : Integer);
    procedure SetFHthresh(Value : Integer);
    procedure SetFIncrement(Value : Integer);
    procedure SetFVthresh(Value : Integer);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function RefreshCache : TExtFunction;
    function Register(El : String) : TExtFunction; overload;
    function Register(El : TExtObjectList) : TExtFunction; overload;
    function Unregister(El : String) : TExtFunction; overload;
    function Unregister(El : TExtObjectList) : TExtFunction; overload;
    property AnimDuration : Integer read FAnimDuration write SetFAnimDuration;
    property Animate : Boolean read FAnimate write SetFAnimate;
    property Frequency : Integer read FFrequency write SetFFrequency;
    property Hthresh : Integer read FHthresh write SetFHthresh;
    property Increment : Integer read FIncrement write SetFIncrement;
    property Vthresh : Integer read FVthresh write SetFVthresh;
  end;

  TExtDdRegistrySingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetHandle(Id : String) : TExtFunction; overload;
    function GetHandle(Id : THTMLElement) : TExtFunction; overload;
    function GetHandleFromEvent(E : TEvent) : TExtFunction;
    function GetTarget(Id : String) : TExtFunction; overload;
    function GetTarget(Id : THTMLElement) : TExtFunction; overload;
    function GetTargetFromEvent(E : TEvent) : TExtFunction;
    function Register : TExtFunction;
    function Unregister : TExtFunction;
  end;

  // Procedural types for events TExtDdDragTracker
  TExtDdDragTrackerOnDrag = procedure(This : TExtDdDragTracker; E : TExtObject) of object;
  TExtDdDragTrackerOnDragend = procedure(This : TExtDdDragTracker; E : TExtObject) of object;
  TExtDdDragTrackerOnDragstart = procedure(This : TExtDdDragTracker; StartXY : TExtObject) of object;
  TExtDdDragTrackerOnMousedown = procedure(This : TExtDdDragTracker; E : TExtObject) of object;
  TExtDdDragTrackerOnMousemove = procedure(This : TExtDdDragTracker; E : TExtObject) of object;
  TExtDdDragTrackerOnMouseup = procedure(This : TExtDdDragTracker; E : TExtObject) of object;

  TExtDdDragTracker = class(TExtUtilObservable)
  private
    FActive : Boolean;
    FAutoStart : Boolean;
    FAutoStartNumber : Integer;
    FTolerance : Integer;
    FOnDrag : TExtDdDragTrackerOnDrag;
    FOnDragend : TExtDdDragTrackerOnDragend;
    FOnDragstart : TExtDdDragTrackerOnDragstart;
    FOnMousedown : TExtDdDragTrackerOnMousedown;
    FOnMousemove : TExtDdDragTrackerOnMousemove;
    FOnMouseup : TExtDdDragTrackerOnMouseup;
    procedure SetFActive(Value : Boolean);
    procedure SetFAutoStart(Value : Boolean);
    procedure SetFAutoStartNumber(Value : Integer);
    procedure SetFTolerance(Value : Integer);
    procedure SetFOnDrag(Value : TExtDdDragTrackerOnDrag);
    procedure SetFOnDragend(Value : TExtDdDragTrackerOnDragend);
    procedure SetFOnDragstart(Value : TExtDdDragTrackerOnDragstart);
    procedure SetFOnMousedown(Value : TExtDdDragTrackerOnMousedown);
    procedure SetFOnMousemove(Value : TExtDdDragTrackerOnMousemove);
    procedure SetFOnMouseup(Value : TExtDdDragTrackerOnMouseup);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property Active : Boolean read FActive write SetFActive;
    property AutoStart : Boolean read FAutoStart write SetFAutoStart;
    property AutoStartNumber : Integer read FAutoStartNumber write SetFAutoStartNumber;
    property Tolerance : Integer read FTolerance write SetFTolerance;
    property OnDrag : TExtDdDragTrackerOnDrag read FOnDrag write SetFOnDrag;
    property OnDragend : TExtDdDragTrackerOnDragend read FOnDragend write SetFOnDragend;
    property OnDragstart : TExtDdDragTrackerOnDragstart read FOnDragstart write SetFOnDragstart;
    property OnMousedown : TExtDdDragTrackerOnMousedown read FOnMousedown write SetFOnMousedown;
    property OnMousemove : TExtDdDragTrackerOnMousemove read FOnMousemove write SetFOnMousemove;
    property OnMouseup : TExtDdDragTrackerOnMouseup read FOnMouseup write SetFOnMouseup;
  end;

  TExtDdDDTarget = class(TExtDdDragDrop)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Id : String; SGroup : String; Config : TExtObject = nil);
  end;

  TExtDdDD = class(TExtDdDragDrop)
  private
    FScroll : Boolean;
    procedure SetFScroll(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Id : String; SGroup : String; Config : TExtObject = nil);
    function AlignElWithMouse(El : THTMLElement; IPageX : Integer; IPageY : Integer) : TExtFunction;
    function ApplyConfig : TExtFunction;
    function AutoOffset(IPageX : Integer; IPageY : Integer) : TExtFunction;
    function B4Drag : TExtFunction;
    function B4MouseDown : TExtFunction;
    function CachePosition(The : TIPageX; The_ : TIPageY) : TExtFunction;
    function SetDelta(IDeltaX : Integer; IDeltaY : Integer) : TExtFunction;
    function SetDragElPos(IPageX : Integer; IPageY : Integer) : TExtFunction;
    property Scroll : Boolean read FScroll write SetFScroll;
  end;

  TExtDdDDProxy = class(TExtDdDD)
  private
    FCenterFrame : Boolean;
    FResizeFrame : Boolean;
    procedure SetFCenterFrame(Value : Boolean);
    procedure SetFResizeFrame(Value : Boolean);
  public
    function JSClassName : string; override;
    class function DragElId : String;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Id : String; SGroup : String; Config : TExtObject = nil);
    function CreateFrame : TExtFunction;
    function InitFrame : TExtFunction;
    property CenterFrame : Boolean read FCenterFrame write SetFCenterFrame;
    property ResizeFrame : Boolean read FResizeFrame write SetFResizeFrame;
  end;

  TExtDdDropTarget = class(TExtDdDDTarget)
  private
    FDdGroup : String;
    FDropAllowed : String; // 'x-dd-drop-ok'
    FDropNotAllowed : String; // 'x-dd-drop-nodrop'
    FOverClass : String;
    procedure SetFDdGroup(Value : String);
    procedure SetFDropAllowed(Value : String);
    procedure SetFDropNotAllowed(Value : String);
    procedure SetFOverClass(Value : String);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function NotifyDrop(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function NotifyEnter(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function NotifyOut(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function NotifyOver(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    property DdGroup : String read FDdGroup write SetFDdGroup;
    property DropAllowed : String read FDropAllowed write SetFDropAllowed;
    property DropNotAllowed : String read FDropNotAllowed write SetFDropNotAllowed;
    property OverClass : String read FOverClass write SetFOverClass;
  end;

  TExtDdDropZone = class(TExtDdDropTarget)
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function GetTargetFromEvent(E : TEvent) : TExtFunction;
    function NotifyDrop(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function NotifyEnter(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function NotifyOut(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function NotifyOver(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function OnContainerDrop(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function OnContainerOver(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function OnNodeDrop(NodeData : TExtObject; Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function OnNodeEnter(NodeData : TExtObject; Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function OnNodeOut(NodeData : TExtObject; Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function OnNodeOver(NodeData : TExtObject; Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
  end;

  TExtDdDragSource = class(TExtDdDDProxy)
  private
    FDdGroup : String;
    FDropAllowed : String; // 'x-dd-drop-ok'
    FDropNotAllowed : String; // 'x-dd-drop-nodrop'
    procedure SetFDdGroup(Value : String);
    procedure SetFDropAllowed(Value : String);
    procedure SetFDropNotAllowed(Value : String);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function AfterDragDrop(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction;
    function AfterDragEnter(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction;
    function AfterDragOut(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction;
    function AfterDragOver(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction;
    function AfterInvalidDrop(E : TEvent; Id : String) : TExtFunction;
    function BeforeDragDrop(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction;
    function BeforeDragEnter(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction;
    function BeforeDragOut(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction;
    function BeforeDragOver(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction;
    function BeforeInvalidDrop(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction;
    function GetDragData : TExtFunction;
    function GetProxy : TExtFunction;
    function HideProxy : TExtFunction;
    function OnBeforeDrag(Data : TExtObject; E : TEvent) : TExtFunction;
    function OnStartDrag(X : Integer; Y : Integer) : TExtFunction;
    property DdGroup : String read FDdGroup write SetFDdGroup;
    property DropAllowed : String read FDropAllowed write SetFDropAllowed;
    property DropNotAllowed : String read FDropNotAllowed write SetFDropNotAllowed;
  end;

  TExtDdDragZone = class(TExtDdDragSource)
  private
    FContainerScroll : Boolean;
    FHlColor : String; // 'c3daf9'
    FDragData : TExtObject;
    procedure SetFContainerScroll(Value : Boolean);
    procedure SetFHlColor(Value : String);
    procedure SetFDragData(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function AfterRepair : TExtFunction;
    function GetDragData(E : TEventObject) : TExtFunction;
    function GetRepairXY(E : TEventObject) : TExtFunction;
    function OnInitDrag(X : Integer; Y : Integer) : TExtFunction;
    destructor Destroy; override;
    property ContainerScroll : Boolean read FContainerScroll write SetFContainerScroll;
    property HlColor : String read FHlColor write SetFHlColor;
    property DragData : TExtObject read FDragData write SetFDragData;
  end;

var
  ExtDdDragDropMgr : TExtDdDragDropMgrSingleton;
  ExtDdScrollManager : TExtDdScrollManagerSingleton;
  ExtDdRegistry : TExtDdRegistrySingleton;

implementation

procedure TExtDdDragDrop.SetFOnly(Value : TExtObject); begin
  FOnly := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.only=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDdDragDrop.SetFAvailable(Value : Boolean); begin
  FAvailable := Value;
  JSCode(JSName + '.available=' + VarToJSON([Value]) + ';');
end;

procedure TExtDdDragDrop.SetFDefaultPadding(Value : TExtObject); begin
  FDefaultPadding := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.defaultPadding=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDdDragDrop.SetFGroups(Value : TExtObject); begin
  FGroups := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.groups=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDdDragDrop.SetFHasOuterHandles(Value : Boolean); begin
  FHasOuterHandles := Value;
  JSCode(JSName + '.hasOuterHandles=' + VarToJSON([Value]) + ';');
end;

procedure TExtDdDragDrop.SetFId(Value : String); begin
  FId := Value;
  JSCode(JSName + '.id=' + VarToJSON([Value]) + ';');
end;

procedure TExtDdDragDrop.SetFIgnoreSelf(Value : Boolean); begin
  FIgnoreSelf := Value;
  JSCode(JSName + '.ignoreSelf=' + VarToJSON([Value]) + ';');
end;

procedure TExtDdDragDrop.SetFInvalidHandleClasses(Value : TExtObjectList); begin
  FInvalidHandleClasses := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.invalidHandleClasses=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDdDragDrop.SetFInvalidHandleIds(Value : TExtObject); begin
  FInvalidHandleIds := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.invalidHandleIds=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDdDragDrop.SetFInvalidHandleTypes(Value : TExtObject); begin
  FInvalidHandleTypes := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.invalidHandleTypes=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDdDragDrop.SetFIsTarget(Value : Boolean); begin
  FIsTarget := Value;
  JSCode(JSName + '.isTarget=' + VarToJSON([Value]) + ';');
end;

procedure TExtDdDragDrop.SetFMaintainOffset(Value : Boolean); begin
  FMaintainOffset := Value;
  JSCode(JSName + '.maintainOffset=' + VarToJSON([Value]) + ';');
end;

procedure TExtDdDragDrop.SetFMoveOnly(Value : Boolean); begin
  FMoveOnly := Value;
  JSCode(JSName + '.moveOnly=' + VarToJSON([Value]) + ';');
end;

procedure TExtDdDragDrop.SetFPadding(Value : TArrayOfInteger); begin
  FPadding := Value;
  JSCode(JSName + '.padding=' + ArrayToJSON(Value) + ';');
end;

procedure TExtDdDragDrop.SetFPrimaryButtonOnly(Value : Boolean); begin
  FPrimaryButtonOnly := Value;
  JSCode(JSName + '.primaryButtonOnly=' + VarToJSON([Value]) + ';');
end;

procedure TExtDdDragDrop.SetFXTicks(Value : TArrayOfInteger); begin
  FXTicks := Value;
  JSCode(JSName + '.xTicks=' + ArrayToJSON(Value) + ';');
end;

procedure TExtDdDragDrop.SetFYTicks(Value : TArrayOfInteger); begin
  FYTicks := Value;
  JSCode(JSName + '.yTicks=' + ArrayToJSON(Value) + ';');
end;

function TExtDdDragDrop.JSClassName : string; begin
  Result := 'Ext.dd.DragDrop';
end;

procedure TExtDdDragDrop.InitDefaults; begin
  inherited;
  FOnly := TExtObject.CreateInternal(Self, 'only');
  FDefaultPadding := TExtObject.CreateInternal(Self, 'defaultPadding');
  FGroups := TExtObject.CreateInternal(Self, 'groups');
  FInvalidHandleClasses := TExtObjectList.Create(Self, 'invalidHandleClasses');
  FInvalidHandleIds := TExtObject.CreateInternal(Self, 'invalidHandleIds');
  FInvalidHandleTypes := TExtObject.CreateInternal(Self, 'invalidHandleTypes');
end;

{$IFDEF FPC}constructor TExtDdDragDrop.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDdDragDrop.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDdDragDrop.AddInvalidHandleClass(CssClass : String) : TExtFunction; begin
  JSCode(JSName + '.addInvalidHandleClass(' + VarToJSON([CssClass]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.AddInvalidHandleId(Id : String) : TExtFunction; begin
  JSCode(JSName + '.addInvalidHandleId(' + VarToJSON([Id]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.AddInvalidHandleType(TagName : String) : TExtFunction; begin
  JSCode(JSName + '.addInvalidHandleType(' + VarToJSON([TagName]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.AddToGroup(SGroup : String) : TExtFunction; begin
  JSCode(JSName + '.addToGroup(' + VarToJSON([SGroup]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.ApplyConfig : TExtFunction; begin
  JSCode(JSName + '.applyConfig();', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.ClearConstraints : TExtFunction; begin
  JSCode(JSName + '.clearConstraints();', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.ClearTicks : TExtFunction; begin
  JSCode(JSName + '.clearTicks();', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.ConstrainTo(ConstrainTo : String; Pad : TExtObject = nil; InContent : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.constrainTo(' + VarToJSON([ConstrainTo, Pad, false, InContent]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.ConstrainTo(ConstrainTo : String; Pad : Integer; InContent : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.constrainTo(' + VarToJSON([ConstrainTo, Pad, InContent]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.EndDrag(E : TEvent) : TExtFunction; begin
  JSCode(JSName + '.endDrag(' + VarToJSON([E, false]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.GetDragEl : TExtFunction; begin
  JSCode(JSName + '.getDragEl();', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.GetEl : TExtFunction; begin
  JSCode(JSName + '.getEl();', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.Init(The : TId; SGroup : String; Config : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.init(' + VarToJSON([The, false, SGroup, Config, false]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.InitTarget(The : TId; SGroup : String; Config : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.initTarget(' + VarToJSON([The, false, SGroup, Config, false]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.IsLocked : TExtFunction; begin
  JSCode(JSName + '.isLocked();', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.IsValidHandleChild(Node : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.isValidHandleChild(' + VarToJSON([Node, false]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.Lock : TExtFunction; begin
  JSCode(JSName + '.lock();', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnAvailable : TExtFunction; begin
  JSCode(JSName + '.onAvailable();', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnDrag(E : TEvent) : TExtFunction; begin
  JSCode(JSName + '.onDrag(' + VarToJSON([E, false]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnDragDrop(E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.onDragDrop(' + VarToJSON([E, false, Id]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnDragDrop(E : TEvent; Id : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.onDragDrop(' + VarToJSON([E, false]) + ',' + VarToJSON(Id) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnDragEnter(E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.onDragEnter(' + VarToJSON([E, false, Id]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnDragEnter(E : TEvent; Id : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.onDragEnter(' + VarToJSON([E, false]) + ',' + VarToJSON(Id) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnDragOut(E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.onDragOut(' + VarToJSON([E, false, Id]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnDragOut(E : TEvent; Id : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.onDragOut(' + VarToJSON([E, false]) + ',' + VarToJSON(Id) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnDragOver(E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.onDragOver(' + VarToJSON([E, false, Id]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnDragOver(E : TEvent; Id : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.onDragOver(' + VarToJSON([E, false]) + ',' + VarToJSON(Id) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnInvalidDrop(E : TEvent) : TExtFunction; begin
  JSCode(JSName + '.onInvalidDrop(' + VarToJSON([E, false]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnMouseDown(E : TEvent) : TExtFunction; begin
  JSCode(JSName + '.onMouseDown(' + VarToJSON([E, false]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnMouseUp(E : TEvent) : TExtFunction; begin
  JSCode(JSName + '.onMouseUp(' + VarToJSON([E, false]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.RemoveFromGroup(SGroup : String) : TExtFunction; begin
  JSCode(JSName + '.removeFromGroup(' + VarToJSON([SGroup]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.RemoveInvalidHandleClass(CssClass : String) : TExtFunction; begin
  JSCode(JSName + '.removeInvalidHandleClass(' + VarToJSON([CssClass]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.RemoveInvalidHandleId(Id : String) : TExtFunction; begin
  JSCode(JSName + '.removeInvalidHandleId(' + VarToJSON([Id]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.RemoveInvalidHandleType(TagName : String) : TExtFunction; begin
  JSCode(JSName + '.removeInvalidHandleType(' + VarToJSON([TagName]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.ResetConstraints(MaintainOffset : Boolean) : TExtFunction; begin
  JSCode(JSName + '.resetConstraints(' + VarToJSON([MaintainOffset]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.SetDragElId(Id : String) : TExtFunction; begin
  JSCode(JSName + '.setDragElId(' + VarToJSON([Id]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.SetHandleElId(Id : String) : TExtFunction; begin
  JSCode(JSName + '.setHandleElId(' + VarToJSON([Id]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.SetInitPosition(DiffX : Integer; DiffY : Integer) : TExtFunction; begin
  JSCode(JSName + '.setInitPosition(' + VarToJSON([DiffX, DiffY]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.SetOuterHandleElId(The : TId) : TExtFunction; begin
  JSCode(JSName + '.setOuterHandleElId(' + VarToJSON([The, false]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.SetPadding(ITop : Integer; IRight : Integer; IBot : Integer; ILeft : Integer) : TExtFunction; begin
  JSCode(JSName + '.setPadding(' + VarToJSON([ITop, IRight, IBot, ILeft]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.SetXConstraint(ILeft : Integer; IRight : Integer; ITickSize : Integer) : TExtFunction; begin
  JSCode(JSName + '.setXConstraint(' + VarToJSON([ILeft, IRight, ITickSize]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.SetYConstraint(IUp : Integer; IDown : Integer; ITickSize : Integer) : TExtFunction; begin
  JSCode(JSName + '.setYConstraint(' + VarToJSON([IUp, IDown, ITickSize]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.StartDrag(X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.startDrag(' + VarToJSON([X, Y]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.ToString : TExtFunction; begin
  JSCode(JSName + '.toString();', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.Unlock : TExtFunction; begin
  JSCode(JSName + '.unlock();', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.Unreg : TExtFunction; begin
  JSCode(JSName + '.unreg();', 'TExtDdDragDrop');
  Result := Self;
end;

destructor TExtDdDragDrop.Destroy; begin
  try
    FOnly.Free;
    FDefaultPadding.Free;
    FGroups.Free;
    FInvalidHandleClasses.Free;
    FInvalidHandleIds.Free;
    FInvalidHandleTypes.Free;
  except end;
  inherited;
end;

procedure TExtDdDragDropMgrSingleton.SetFClickPixelThresh(Value : Integer); begin
  FClickPixelThresh := Value;
  JSCode(JSName + '.clickPixelThresh=' + VarToJSON([Value]) + ';');
end;

procedure TExtDdDragDropMgrSingleton.SetFClickTimeThresh(Value : Integer); begin
  FClickTimeThresh := Value;
  JSCode(JSName + '.clickTimeThresh=' + VarToJSON([Value]) + ';');
end;

procedure TExtDdDragDropMgrSingleton.SetFMode(Value : Integer); begin
  FMode := Value;
  JSCode(JSName + '.mode=' + VarToJSON([Value]) + ';');
end;

procedure TExtDdDragDropMgrSingleton.SetFPreventDefault(Value : Boolean); begin
  FPreventDefault := Value;
  JSCode(JSName + '.preventDefault=' + VarToJSON([Value]) + ';');
end;

procedure TExtDdDragDropMgrSingleton.SetFStopPropagation(Value : Boolean); begin
  FStopPropagation := Value;
  JSCode(JSName + '.stopPropagation=' + VarToJSON([Value]) + ';');
end;

procedure TExtDdDragDropMgrSingleton.SetFUseCache(Value : Boolean); begin
  FUseCache := Value;
  JSCode(JSName + '.useCache=' + VarToJSON([Value]) + ';');
end;

function TExtDdDragDropMgrSingleton.JSClassName : string; begin
  Result := 'Ext.dd.DragDropMgr';
end;

class function TExtDdDragDropMgrSingleton.INTERSECT : Integer; begin
  Result := 0
end;

class function TExtDdDragDropMgrSingleton.POINT : Integer; begin
  Result := 0
end;

{$IFDEF FPC}constructor TExtDdDragDropMgrSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDdDragDropMgrSingleton.GetBestMatch(Dds : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.getBestMatch(' + VarToJSON(Dds) + ');', 'TExtDdDragDropMgrSingleton');
  Result := Self;
end;

function TExtDdDragDropMgrSingleton.GetCss(Id : String) : TExtFunction; begin
  JSCode(JSName + '.getCss(' + VarToJSON([Id]) + ');', 'TExtDdDragDropMgrSingleton');
  Result := Self;
end;

function TExtDdDragDropMgrSingleton.GetDDById(Id : String) : TExtFunction; begin
  JSCode(JSName + '.getDDById(' + VarToJSON([Id]) + ');', 'TExtDdDragDropMgrSingleton');
  Result := Self;
end;

function TExtDdDragDropMgrSingleton.GetElement(Id : String) : TExtFunction; begin
  JSCode(JSName + '.getElement(' + VarToJSON([Id]) + ');', 'TExtDdDragDropMgrSingleton');
  Result := Self;
end;

function TExtDdDragDropMgrSingleton.GetLocation(ODD : TExtDdDragDrop) : TExtFunction; begin
  JSCode(JSName + '.getLocation(' + VarToJSON([ODD, false]) + ');', 'TExtDdDragDropMgrSingleton');
  Result := Self;
end;

function TExtDdDragDropMgrSingleton.GetRelated(P_oDD : TExtDdDragDrop; BTargetsOnly : Boolean) : TExtFunction; begin
  JSCode(JSName + '.getRelated(' + VarToJSON([P_oDD, false, BTargetsOnly]) + ');', 'TExtDdDragDropMgrSingleton');
  Result := Self;
end;

function TExtDdDragDropMgrSingleton.IsDragDrop(Id : String) : TExtFunction; begin
  JSCode(JSName + '.isDragDrop(' + VarToJSON([Id]) + ');', 'TExtDdDragDropMgrSingleton');
  Result := Self;
end;

function TExtDdDragDropMgrSingleton.IsHandle(Id : String) : TExtFunction; begin
  JSCode(JSName + '.isHandle(' + VarToJSON([Id]) + ');', 'TExtDdDragDropMgrSingleton');
  Result := Self;
end;

function TExtDdDragDropMgrSingleton.IsLegalTarget(The : TExtDdDragDrop; The_ : TExtDdDragDrop) : TExtFunction; begin
  JSCode(JSName + '.isLegalTarget(' + VarToJSON([The, false, The_, false]) + ');', 'TExtDdDragDropMgrSingleton');
  Result := Self;
end;

function TExtDdDragDropMgrSingleton.IsLocked : TExtFunction; begin
  JSCode(JSName + '.isLocked();', 'TExtDdDragDropMgrSingleton');
  Result := Self;
end;

function TExtDdDragDropMgrSingleton.IsTypeOfDD(The : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.isTypeOfDD(' + VarToJSON([The, false]) + ');', 'TExtDdDragDropMgrSingleton');
  Result := Self;
end;

function TExtDdDragDropMgrSingleton.Lock : TExtFunction; begin
  JSCode(JSName + '.lock();', 'TExtDdDragDropMgrSingleton');
  Result := Self;
end;

function TExtDdDragDropMgrSingleton.RefreshCache(Groups : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.refreshCache(' + VarToJSON([Groups, false]) + ');', 'TExtDdDragDropMgrSingleton');
  Result := Self;
end;

function TExtDdDragDropMgrSingleton.RegDragDrop(ODD : TExtDdDragDrop; SGroup : String) : TExtFunction; begin
  JSCode(JSName + '.regDragDrop(' + VarToJSON([ODD, false, SGroup]) + ');', 'TExtDdDragDropMgrSingleton');
  Result := Self;
end;

function TExtDdDragDropMgrSingleton.RegHandle(SDDId : String; SHandleId : String) : TExtFunction; begin
  JSCode(JSName + '.regHandle(' + VarToJSON([SDDId, SHandleId]) + ');', 'TExtDdDragDropMgrSingleton');
  Result := Self;
end;

function TExtDdDragDropMgrSingleton.StartDrag(X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.startDrag(' + VarToJSON([X, Y]) + ');', 'TExtDdDragDropMgrSingleton');
  Result := Self;
end;

function TExtDdDragDropMgrSingleton.StopEvent(E : TEvent) : TExtFunction; begin
  JSCode(JSName + '.stopEvent(' + VarToJSON([E, false]) + ');', 'TExtDdDragDropMgrSingleton');
  Result := Self;
end;

function TExtDdDragDropMgrSingleton.Unlock : TExtFunction; begin
  JSCode(JSName + '.unlock();', 'TExtDdDragDropMgrSingleton');
  Result := Self;
end;

function TExtDdDragDropMgrSingleton.VerifyEl(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.verifyEl(' + VarToJSON([El, false]) + ');', 'TExtDdDragDropMgrSingleton');
  Result := Self;
end;

procedure TExtDdPanelProxy.SetFInsertProxy(Value : Boolean); begin
  FInsertProxy := Value;
  JSCode('insertProxy:' + VarToJSON([Value]));
end;

function TExtDdPanelProxy.JSClassName : string; begin
  Result := 'Ext.dd.PanelProxy';
end;

procedure TExtDdPanelProxy.InitDefaults; begin
  inherited;
  FInsertProxy := true;
end;

{$IFDEF FPC}constructor TExtDdPanelProxy.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDdPanelProxy.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDdPanelProxy.GetEl : TExtFunction; begin
  JSCode(JSName + '.getEl();', 'TExtDdPanelProxy');
  Result := Self;
end;

function TExtDdPanelProxy.GetGhost : TExtFunction; begin
  JSCode(JSName + '.getGhost();', 'TExtDdPanelProxy');
  Result := Self;
end;

function TExtDdPanelProxy.GetProxy : TExtFunction; begin
  JSCode(JSName + '.getProxy();', 'TExtDdPanelProxy');
  Result := Self;
end;

function TExtDdPanelProxy.Hide : TExtFunction; begin
  JSCode(JSName + '.hide();', 'TExtDdPanelProxy');
  Result := Self;
end;

function TExtDdPanelProxy.MoveProxy(ParentNode : THTMLElement; Before : THTMLElement = nil) : TExtFunction; begin
  JSCode(JSName + '.moveProxy(' + VarToJSON([ParentNode, false, Before, false]) + ');', 'TExtDdPanelProxy');
  Result := Self;
end;

function TExtDdPanelProxy.Show : TExtFunction; begin
  JSCode(JSName + '.show();', 'TExtDdPanelProxy');
  Result := Self;
end;

procedure TExtDdStatusProxy.SetFDropAllowed(Value : String); begin
  FDropAllowed := Value;
  JSCode('dropAllowed:' + VarToJSON([Value]));
end;

procedure TExtDdStatusProxy.SetFDropNotAllowed(Value : String); begin
  FDropNotAllowed := Value;
  JSCode('dropNotAllowed:' + VarToJSON([Value]));
end;

function TExtDdStatusProxy.JSClassName : string; begin
  Result := 'Ext.dd.StatusProxy';
end;

procedure TExtDdStatusProxy.InitDefaults; begin
  inherited;
  FDropAllowed := 'x-dd-drop-ok';
  FDropNotAllowed := 'x-dd-drop-nodrop';
end;

{$IFDEF FPC}constructor TExtDdStatusProxy.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDdStatusProxy.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDdStatusProxy.GetEl : TExtFunction; begin
  JSCode(JSName + '.getEl();', 'TExtDdStatusProxy');
  Result := Self;
end;

function TExtDdStatusProxy.GetGhost : TExtFunction; begin
  JSCode(JSName + '.getGhost();', 'TExtDdStatusProxy');
  Result := Self;
end;

function TExtDdStatusProxy.Hide(Clear : Boolean) : TExtFunction; begin
  JSCode(JSName + '.hide(' + VarToJSON([Clear]) + ');', 'TExtDdStatusProxy');
  Result := Self;
end;

function TExtDdStatusProxy.Repair(Xy : TExtObjectList; Callback : TExtFunction; Scope : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.repair(' + VarToJSON(Xy) + ',' + VarToJSON([Callback, true, Scope, false]) + ');', 'TExtDdStatusProxy');
  Result := Self;
end;

function TExtDdStatusProxy.Reset(ClearGhost : Boolean) : TExtFunction; begin
  JSCode(JSName + '.reset(' + VarToJSON([ClearGhost]) + ');', 'TExtDdStatusProxy');
  Result := Self;
end;

function TExtDdStatusProxy.SetStatus(CssClass : String) : TExtFunction; begin
  JSCode(JSName + '.setStatus(' + VarToJSON([CssClass]) + ');', 'TExtDdStatusProxy');
  Result := Self;
end;

function TExtDdStatusProxy.Show : TExtFunction; begin
  JSCode(JSName + '.show();', 'TExtDdStatusProxy');
  Result := Self;
end;

function TExtDdStatusProxy.Stop : TExtFunction; begin
  JSCode(JSName + '.stop();', 'TExtDdStatusProxy');
  Result := Self;
end;

function TExtDdStatusProxy.Sync : TExtFunction; begin
  JSCode(JSName + '.sync();', 'TExtDdStatusProxy');
  Result := Self;
end;

function TExtDdStatusProxy.Update(Html : String) : TExtFunction; begin
  JSCode(JSName + '.update(' + VarToJSON([Html]) + ');', 'TExtDdStatusProxy');
  Result := Self;
end;

function TExtDdStatusProxy.Update(Html : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.update(' + VarToJSON([Html, false]) + ');', 'TExtDdStatusProxy');
  Result := Self;
end;

procedure TExtDdScrollManagerSingleton.SetFAnimDuration(Value : Integer); begin
  FAnimDuration := Value;
  JSCode(JSName + '.animDuration=' + VarToJSON([Value]) + ';');
end;

procedure TExtDdScrollManagerSingleton.SetFAnimate(Value : Boolean); begin
  FAnimate := Value;
  JSCode(JSName + '.animate=' + VarToJSON([Value]) + ';');
end;

procedure TExtDdScrollManagerSingleton.SetFFrequency(Value : Integer); begin
  FFrequency := Value;
  JSCode(JSName + '.frequency=' + VarToJSON([Value]) + ';');
end;

procedure TExtDdScrollManagerSingleton.SetFHthresh(Value : Integer); begin
  FHthresh := Value;
  JSCode(JSName + '.hthresh=' + VarToJSON([Value]) + ';');
end;

procedure TExtDdScrollManagerSingleton.SetFIncrement(Value : Integer); begin
  FIncrement := Value;
  JSCode(JSName + '.increment=' + VarToJSON([Value]) + ';');
end;

procedure TExtDdScrollManagerSingleton.SetFVthresh(Value : Integer); begin
  FVthresh := Value;
  JSCode(JSName + '.vthresh=' + VarToJSON([Value]) + ';');
end;

function TExtDdScrollManagerSingleton.JSClassName : string; begin
  Result := 'Ext.dd.ScrollManager';
end;

procedure TExtDdScrollManagerSingleton.InitDefaults; begin
  inherited;
  FAnimDuration := 4;
  FAnimate := true;
  FFrequency := 500;
  FHthresh := 25;
  FIncrement := 50;
  FVthresh := 25;
end;

{$IFDEF FPC}constructor TExtDdScrollManagerSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDdScrollManagerSingleton.RefreshCache : TExtFunction; begin
  JSCode(JSName + '.refreshCache();', 'TExtDdScrollManagerSingleton');
  Result := Self;
end;

function TExtDdScrollManagerSingleton.Register(El : String) : TExtFunction; begin
  JSCode(JSName + '.register(' + VarToJSON([El]) + ');', 'TExtDdScrollManagerSingleton');
  Result := Self;
end;

function TExtDdScrollManagerSingleton.Register(El : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.register(' + VarToJSON(El) + ');', 'TExtDdScrollManagerSingleton');
  Result := Self;
end;

function TExtDdScrollManagerSingleton.Unregister(El : String) : TExtFunction; begin
  JSCode(JSName + '.unregister(' + VarToJSON([El]) + ');', 'TExtDdScrollManagerSingleton');
  Result := Self;
end;

function TExtDdScrollManagerSingleton.Unregister(El : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.unregister(' + VarToJSON(El) + ');', 'TExtDdScrollManagerSingleton');
  Result := Self;
end;

function TExtDdRegistrySingleton.JSClassName : string; begin
  Result := 'Ext.dd.Registry';
end;

{$IFDEF FPC}constructor TExtDdRegistrySingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDdRegistrySingleton.GetHandle(Id : String) : TExtFunction; begin
  JSCode(JSName + '.getHandle(' + VarToJSON([Id]) + ');', 'TExtDdRegistrySingleton');
  Result := Self;
end;

function TExtDdRegistrySingleton.GetHandle(Id : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.getHandle(' + VarToJSON([Id, false]) + ');', 'TExtDdRegistrySingleton');
  Result := Self;
end;

function TExtDdRegistrySingleton.GetHandleFromEvent(E : TEvent) : TExtFunction; begin
  JSCode(JSName + '.getHandleFromEvent(' + VarToJSON([E, false]) + ');', 'TExtDdRegistrySingleton');
  Result := Self;
end;

function TExtDdRegistrySingleton.GetTarget(Id : String) : TExtFunction; begin
  JSCode(JSName + '.getTarget(' + VarToJSON([Id]) + ');', 'TExtDdRegistrySingleton');
  Result := Self;
end;

function TExtDdRegistrySingleton.GetTarget(Id : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.getTarget(' + VarToJSON([Id, false]) + ');', 'TExtDdRegistrySingleton');
  Result := Self;
end;

function TExtDdRegistrySingleton.GetTargetFromEvent(E : TEvent) : TExtFunction; begin
  JSCode(JSName + '.getTargetFromEvent(' + VarToJSON([E, false]) + ');', 'TExtDdRegistrySingleton');
  Result := Self;
end;

function TExtDdRegistrySingleton.Register : TExtFunction; begin
  JSCode(JSName + '.register();', 'TExtDdRegistrySingleton');
  Result := Self;
end;

function TExtDdRegistrySingleton.Unregister : TExtFunction; begin
  JSCode(JSName + '.unregister();', 'TExtDdRegistrySingleton');
  Result := Self;
end;

procedure TExtDdDragTracker.SetFActive(Value : Boolean); begin
  FActive := Value;
  JSCode('active:' + VarToJSON([Value]));
end;

procedure TExtDdDragTracker.SetFAutoStart(Value : Boolean); begin
  FAutoStart := Value;
  JSCode('autoStart:' + VarToJSON([Value]));
end;

procedure TExtDdDragTracker.SetFAutoStartNumber(Value : Integer); begin
  FAutoStartNumber := Value;
  JSCode('autoStart:' + VarToJSON([Value]));
end;

procedure TExtDdDragTracker.SetFTolerance(Value : Integer); begin
  FTolerance := Value;
  JSCode('tolerance:' + VarToJSON([Value]));
end;

procedure TExtDdDragTracker.SetFOnDrag(Value : TExtDdDragTrackerOnDrag); begin
  if Assigned(FOnDrag) then
    JSCode(JSName+'.events ["drag"].listeners=[];');
  if Assigned(Value) then
    On('drag', Ajax('drag', ['This', '%0.nm','E', '%1.nm'], true));
  FOnDrag := Value;
end;

procedure TExtDdDragTracker.SetFOnDragend(Value : TExtDdDragTrackerOnDragend); begin
  if Assigned(FOnDragend) then
    JSCode(JSName+'.events ["dragend"].listeners=[];');
  if Assigned(Value) then
    On('dragend', Ajax('dragend', ['This', '%0.nm','E', '%1.nm'], true));
  FOnDragend := Value;
end;

procedure TExtDdDragTracker.SetFOnDragstart(Value : TExtDdDragTrackerOnDragstart); begin
  if Assigned(FOnDragstart) then
    JSCode(JSName+'.events ["dragstart"].listeners=[];');
  if Assigned(Value) then
    On('dragstart', Ajax('dragstart', ['This', '%0.nm','StartXY', '%1.nm'], true));
  FOnDragstart := Value;
end;

procedure TExtDdDragTracker.SetFOnMousedown(Value : TExtDdDragTrackerOnMousedown); begin
  if Assigned(FOnMousedown) then
    JSCode(JSName+'.events ["mousedown"].listeners=[];');
  if Assigned(Value) then
    On('mousedown', Ajax('mousedown', ['This', '%0.nm','E', '%1.nm'], true));
  FOnMousedown := Value;
end;

procedure TExtDdDragTracker.SetFOnMousemove(Value : TExtDdDragTrackerOnMousemove); begin
  if Assigned(FOnMousemove) then
    JSCode(JSName+'.events ["mousemove"].listeners=[];');
  if Assigned(Value) then
    On('mousemove', Ajax('mousemove', ['This', '%0.nm','E', '%1.nm'], true));
  FOnMousemove := Value;
end;

procedure TExtDdDragTracker.SetFOnMouseup(Value : TExtDdDragTrackerOnMouseup); begin
  if Assigned(FOnMouseup) then
    JSCode(JSName+'.events ["mouseup"].listeners=[];');
  if Assigned(Value) then
    On('mouseup', Ajax('mouseup', ['This', '%0.nm','E', '%1.nm'], true));
  FOnMouseup := Value;
end;

function TExtDdDragTracker.JSClassName : string; begin
  Result := 'Ext.dd.DragTracker';
end;

{$IFDEF FPC}constructor TExtDdDragTracker.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtDdDragTracker.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'drag') and Assigned(FOnDrag) then
    FOnDrag(TExtDdDragTracker(ParamAsObject('This')), TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'dragend') and Assigned(FOnDragend) then
    FOnDragend(TExtDdDragTracker(ParamAsObject('This')), TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'dragstart') and Assigned(FOnDragstart) then
    FOnDragstart(TExtDdDragTracker(ParamAsObject('This')), TExtObject(ParamAsObject('StartXY')))
  else if (AEvtName = 'mousedown') and Assigned(FOnMousedown) then
    FOnMousedown(TExtDdDragTracker(ParamAsObject('This')), TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'mousemove') and Assigned(FOnMousemove) then
    FOnMousemove(TExtDdDragTracker(ParamAsObject('This')), TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'mouseup') and Assigned(FOnMouseup) then
    FOnMouseup(TExtDdDragTracker(ParamAsObject('This')), TExtObject(ParamAsObject('E')));
end;

function TExtDdDDTarget.JSClassName : string; begin
  Result := 'Ext.dd.DDTarget';
end;

{$IFDEF FPC}constructor TExtDdDDTarget.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDdDDTarget.Create(Id : String; SGroup : String; Config : TExtObject = nil); begin
  CreateVar(JSClassName + '(' + VarToJSON([Id, SGroup, Config, false]) + ');');
  InitDefaults;
end;

procedure TExtDdDD.SetFScroll(Value : Boolean); begin
  FScroll := Value;
  JSCode(JSName + '.scroll=' + VarToJSON([Value]) + ';');
end;

function TExtDdDD.JSClassName : string; begin
  Result := 'Ext.dd.DD';
end;

{$IFDEF FPC}constructor TExtDdDD.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDdDD.Create(Id : String; SGroup : String; Config : TExtObject = nil); begin
  CreateVar(JSClassName + '(' + VarToJSON([Id, SGroup, Config, false]) + ');');
  InitDefaults;
end;

function TExtDdDD.AlignElWithMouse(El : THTMLElement; IPageX : Integer; IPageY : Integer) : TExtFunction; begin
  JSCode(JSName + '.alignElWithMouse(' + VarToJSON([El, false, IPageX, IPageY]) + ');', 'TExtDdDD');
  Result := Self;
end;

function TExtDdDD.ApplyConfig : TExtFunction; begin
  JSCode(JSName + '.applyConfig();', 'TExtDdDD');
  Result := Self;
end;

function TExtDdDD.AutoOffset(IPageX : Integer; IPageY : Integer) : TExtFunction; begin
  JSCode(JSName + '.autoOffset(' + VarToJSON([IPageX, IPageY]) + ');', 'TExtDdDD');
  Result := Self;
end;

function TExtDdDD.B4Drag : TExtFunction; begin
  JSCode(JSName + '.b4Drag();', 'TExtDdDD');
  Result := Self;
end;

function TExtDdDD.B4MouseDown : TExtFunction; begin
  JSCode(JSName + '.b4MouseDown();', 'TExtDdDD');
  Result := Self;
end;

function TExtDdDD.CachePosition(The : TIPageX; The_ : TIPageY) : TExtFunction; begin
  JSCode(JSName + '.cachePosition(' + VarToJSON([The, false, The_, false]) + ');', 'TExtDdDD');
  Result := Self;
end;

function TExtDdDD.SetDelta(IDeltaX : Integer; IDeltaY : Integer) : TExtFunction; begin
  JSCode(JSName + '.setDelta(' + VarToJSON([IDeltaX, IDeltaY]) + ');', 'TExtDdDD');
  Result := Self;
end;

function TExtDdDD.SetDragElPos(IPageX : Integer; IPageY : Integer) : TExtFunction; begin
  JSCode(JSName + '.setDragElPos(' + VarToJSON([IPageX, IPageY]) + ');', 'TExtDdDD');
  Result := Self;
end;

procedure TExtDdDDProxy.SetFCenterFrame(Value : Boolean); begin
  FCenterFrame := Value;
  JSCode(JSName + '.centerFrame=' + VarToJSON([Value]) + ';');
end;

procedure TExtDdDDProxy.SetFResizeFrame(Value : Boolean); begin
  FResizeFrame := Value;
  JSCode(JSName + '.resizeFrame=' + VarToJSON([Value]) + ';');
end;

function TExtDdDDProxy.JSClassName : string; begin
  Result := 'Ext.dd.DDProxy';
end;

class function TExtDdDDProxy.DragElId : String; begin
  Result := ''
end;

{$IFDEF FPC}constructor TExtDdDDProxy.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDdDDProxy.Create(Id : String; SGroup : String; Config : TExtObject = nil); begin
  CreateVar(JSClassName + '(' + VarToJSON([Id, SGroup, Config, false]) + ');');
  InitDefaults;
end;

function TExtDdDDProxy.CreateFrame : TExtFunction; begin
  JSCode(JSName + '.createFrame();', 'TExtDdDDProxy');
  Result := Self;
end;

function TExtDdDDProxy.InitFrame : TExtFunction; begin
  JSCode(JSName + '.initFrame();', 'TExtDdDDProxy');
  Result := Self;
end;

procedure TExtDdDropTarget.SetFDdGroup(Value : String); begin
  FDdGroup := Value;
  JSCode('ddGroup:' + VarToJSON([Value]));
end;

procedure TExtDdDropTarget.SetFDropAllowed(Value : String); begin
  FDropAllowed := Value;
  JSCode('dropAllowed:' + VarToJSON([Value]));
end;

procedure TExtDdDropTarget.SetFDropNotAllowed(Value : String); begin
  FDropNotAllowed := Value;
  JSCode('dropNotAllowed:' + VarToJSON([Value]));
end;

procedure TExtDdDropTarget.SetFOverClass(Value : String); begin
  FOverClass := Value;
  JSCode('overClass:' + VarToJSON([Value]));
end;

function TExtDdDropTarget.JSClassName : string; begin
  Result := 'Ext.dd.DropTarget';
end;

procedure TExtDdDropTarget.InitDefaults; begin
  inherited;
  FDropAllowed := 'x-dd-drop-ok';
  FDropNotAllowed := 'x-dd-drop-nodrop';
end;

{$IFDEF FPC}constructor TExtDdDropTarget.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDdDropTarget.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDdDropTarget.NotifyDrop(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.notifyDrop(' + VarToJSON([Source, false, E, false, Data, false]) + ');', 'TExtDdDropTarget');
  Result := Self;
end;

function TExtDdDropTarget.NotifyEnter(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.notifyEnter(' + VarToJSON([Source, false, E, false, Data, false]) + ');', 'TExtDdDropTarget');
  Result := Self;
end;

function TExtDdDropTarget.NotifyOut(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.notifyOut(' + VarToJSON([Source, false, E, false, Data, false]) + ');', 'TExtDdDropTarget');
  Result := Self;
end;

function TExtDdDropTarget.NotifyOver(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.notifyOver(' + VarToJSON([Source, false, E, false, Data, false]) + ');', 'TExtDdDropTarget');
  Result := Self;
end;

function TExtDdDropZone.JSClassName : string; begin
  Result := 'Ext.dd.DropZone';
end;

procedure TExtDdDropZone.InitDefaults; begin
  inherited;
end;

{$IFDEF FPC}constructor TExtDdDropZone.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDdDropZone.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDdDropZone.GetTargetFromEvent(E : TEvent) : TExtFunction; begin
  JSCode(JSName + '.getTargetFromEvent(' + VarToJSON([E, false]) + ');', 'TExtDdDropZone');
  Result := Self;
end;

function TExtDdDropZone.NotifyDrop(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.notifyDrop(' + VarToJSON([Source, false, E, false, Data, false]) + ');', 'TExtDdDropZone');
  Result := Self;
end;

function TExtDdDropZone.NotifyEnter(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.notifyEnter(' + VarToJSON([Source, false, E, false, Data, false]) + ');', 'TExtDdDropZone');
  Result := Self;
end;

function TExtDdDropZone.NotifyOut(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.notifyOut(' + VarToJSON([Source, false, E, false, Data, false]) + ');', 'TExtDdDropZone');
  Result := Self;
end;

function TExtDdDropZone.NotifyOver(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.notifyOver(' + VarToJSON([Source, false, E, false, Data, false]) + ');', 'TExtDdDropZone');
  Result := Self;
end;

function TExtDdDropZone.OnContainerDrop(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.onContainerDrop(' + VarToJSON([Source, false, E, false, Data, false]) + ');', 'TExtDdDropZone');
  Result := Self;
end;

function TExtDdDropZone.OnContainerOver(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.onContainerOver(' + VarToJSON([Source, false, E, false, Data, false]) + ');', 'TExtDdDropZone');
  Result := Self;
end;

function TExtDdDropZone.OnNodeDrop(NodeData : TExtObject; Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.onNodeDrop(' + VarToJSON([NodeData, false, Source, false, E, false, Data, false]) + ');', 'TExtDdDropZone');
  Result := Self;
end;

function TExtDdDropZone.OnNodeEnter(NodeData : TExtObject; Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.onNodeEnter(' + VarToJSON([NodeData, false, Source, false, E, false, Data, false]) + ');', 'TExtDdDropZone');
  Result := Self;
end;

function TExtDdDropZone.OnNodeOut(NodeData : TExtObject; Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.onNodeOut(' + VarToJSON([NodeData, false, Source, false, E, false, Data, false]) + ');', 'TExtDdDropZone');
  Result := Self;
end;

function TExtDdDropZone.OnNodeOver(NodeData : TExtObject; Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.onNodeOver(' + VarToJSON([NodeData, false, Source, false, E, false, Data, false]) + ');', 'TExtDdDropZone');
  Result := Self;
end;

procedure TExtDdDragSource.SetFDdGroup(Value : String); begin
  FDdGroup := Value;
  JSCode('ddGroup:' + VarToJSON([Value]));
end;

procedure TExtDdDragSource.SetFDropAllowed(Value : String); begin
  FDropAllowed := Value;
  JSCode('dropAllowed:' + VarToJSON([Value]));
end;

procedure TExtDdDragSource.SetFDropNotAllowed(Value : String); begin
  FDropNotAllowed := Value;
  JSCode('dropNotAllowed:' + VarToJSON([Value]));
end;

function TExtDdDragSource.JSClassName : string; begin
  Result := 'Ext.dd.DragSource';
end;

procedure TExtDdDragSource.InitDefaults; begin
  inherited;
  FDropAllowed := 'x-dd-drop-ok';
  FDropNotAllowed := 'x-dd-drop-nodrop';
end;

{$IFDEF FPC}constructor TExtDdDragSource.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDdDragSource.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDdDragSource.AfterDragDrop(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.afterDragDrop(' + VarToJSON([Target, false, E, false, Id]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.AfterDragEnter(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.afterDragEnter(' + VarToJSON([Target, false, E, false, Id]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.AfterDragOut(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.afterDragOut(' + VarToJSON([Target, false, E, false, Id]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.AfterDragOver(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.afterDragOver(' + VarToJSON([Target, false, E, false, Id]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.AfterInvalidDrop(E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.afterInvalidDrop(' + VarToJSON([E, false, Id]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.BeforeDragDrop(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.beforeDragDrop(' + VarToJSON([Target, false, E, false, Id]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.BeforeDragEnter(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.beforeDragEnter(' + VarToJSON([Target, false, E, false, Id]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.BeforeDragOut(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.beforeDragOut(' + VarToJSON([Target, false, E, false, Id]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.BeforeDragOver(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.beforeDragOver(' + VarToJSON([Target, false, E, false, Id]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.BeforeInvalidDrop(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.beforeInvalidDrop(' + VarToJSON([Target, false, E, false, Id]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.GetDragData : TExtFunction; begin
  JSCode(JSName + '.getDragData();', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.GetProxy : TExtFunction; begin
  JSCode(JSName + '.getProxy();', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.HideProxy : TExtFunction; begin
  JSCode(JSName + '.hideProxy();', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.OnBeforeDrag(Data : TExtObject; E : TEvent) : TExtFunction; begin
  JSCode(JSName + '.onBeforeDrag(' + VarToJSON([Data, false, E, false]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.OnStartDrag(X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.onStartDrag(' + VarToJSON([X, Y]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

procedure TExtDdDragZone.SetFContainerScroll(Value : Boolean); begin
  FContainerScroll := Value;
  JSCode('containerScroll:' + VarToJSON([Value]));
end;

procedure TExtDdDragZone.SetFHlColor(Value : String); begin
  FHlColor := Value;
  JSCode('hlColor:' + VarToJSON([Value]));
end;

procedure TExtDdDragZone.SetFDragData(Value : TExtObject); begin
  FDragData := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.dragData=' + VarToJSON([Value, false]) + ';');
end;

function TExtDdDragZone.JSClassName : string; begin
  Result := 'Ext.dd.DragZone';
end;

procedure TExtDdDragZone.InitDefaults; begin
  inherited;
  FHlColor := 'c3daf9';
  FDragData := TExtObject.CreateInternal(Self, 'dragData');
end;

{$IFDEF FPC}constructor TExtDdDragZone.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDdDragZone.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDdDragZone.AfterRepair : TExtFunction; begin
  JSCode(JSName + '.afterRepair();', 'TExtDdDragZone');
  Result := Self;
end;

function TExtDdDragZone.GetDragData(E : TEventObject) : TExtFunction; begin
  JSCode(JSName + '.getDragData(' + VarToJSON([E, false]) + ');', 'TExtDdDragZone');
  Result := Self;
end;

function TExtDdDragZone.GetRepairXY(E : TEventObject) : TExtFunction; begin
  JSCode(JSName + '.getRepairXY(' + VarToJSON([E, false]) + ');', 'TExtDdDragZone');
  Result := Self;
end;

function TExtDdDragZone.OnInitDrag(X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.onInitDrag(' + VarToJSON([X, Y]) + ');', 'TExtDdDragZone');
  Result := Self;
end;

destructor TExtDdDragZone.Destroy; begin
  try
    FDragData.Free;
  except end;
  inherited;
end;

initialization
  ExtDdDragDropMgr := TExtDdDragDropMgrSingleton.CreateSingleton;
  ExtDdScrollManager := TExtDdScrollManagerSingleton.CreateSingleton;
  ExtDdRegistry := TExtDdRegistrySingleton.CreateSingleton;

finalization
  ExtDdRegistry.Destroy;
  ExtDdScrollManager.Destroy;
  ExtDdDragDropMgr.Destroy;
end.