unit ExtList;

// Generated by ExtToPascal v.0.9.8, at 6/1/2010 17:09:44
// from "C:\Trabalho\ext-3.1.0\docs\output" detected as ExtJS v.3

interface

uses
  StrUtils, ExtPascal, ExtPascalUtils, ExtUtil, Ext;

type
  TExtListColumn = class;
  TExtListNumberColumn = class;
  TExtListSorter = class;
  TExtListDateColumn = class;
  TExtListBooleanColumn = class;
  TExtListColumnResizer = class;
  TExtListListView = class;

  TExtListColumn = class(TExtFunction)
  private
    FAlign : string;
    FCls : string;
    FDataIndex : string;
    FHeader : string;
    FTpl : string;
    FWidth : Integer;
    procedure SetFAlign(Value : string);
    procedure SetFCls(Value : string);
    procedure SetFDataIndex(Value : string);
    procedure SetFHeader(Value : string);
    procedure SetFTpl(Value : string);
    procedure SetFWidth(Value : Integer);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property Align : string read FAlign write SetFAlign;
    property Cls : string read FCls write SetFCls;
    property DataIndex : string read FDataIndex write SetFDataIndex;
    property Header : string read FHeader write SetFHeader;
    property Tpl : string read FTpl write SetFTpl;
    property Width : Integer read FWidth write SetFWidth;
  end;

  TExtListNumberColumn = class(TExtListColumn)
  private
    FFormat : string; // '0,000.00'
    procedure SetFFormat(Value : string);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    property Format : string read FFormat write SetFFormat;
  end;

  TExtListSorter = class(TExtUtilObservable)
  private
    FSortClasses : TExtObjectList;
    procedure SetFSortClasses(Value : TExtObjectList);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    destructor Destroy; override;
    property SortClasses : TExtObjectList read FSortClasses write SetFSortClasses;
  end;

  TExtListDateColumn = class(TExtListColumn)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtListBooleanColumn = class(TExtListColumn)
  private
    FFalseText : string; // 'false'
    FTrueText : string; // 'true'
    FUndefinedText : string;
    procedure SetFFalseText(Value : string);
    procedure SetFTrueText(Value : string);
    procedure SetFUndefinedText(Value : string);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    property FalseText : string read FFalseText write SetFFalseText;
    property TrueText : string read FTrueText write SetFTrueText;
    property UndefinedText : string read FUndefinedText write SetFUndefinedText;
  end;

  TExtListColumnResizer = class(TExtUtilObservable)
  private
    FMinPct : Integer; // 05
    procedure SetFMinPct(Value : Integer);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    property MinPct : Integer read FMinPct write SetFMinPct;
  end;

  TExtListListView = class(TExtDataView)
  private
    FColumnResize : Boolean; // true
    FColumnResizeObject : TExtObject;
    FColumnSort : Boolean; // true
    FColumnSortObject : TExtObject;
    FColumns : TExtObjectList;
    FHideHeaders : Boolean;
    FInternalTpl : string;
    FInternalTplArray : TExtObjectList;
    FItemSelector : string;
    FOverClass : string; // 'x-list-over'
    FReserveScrollOffset : Boolean;
    FScrollOffset : Integer;
    FSelectedClass : string; // 'x-list-selected'
    FDisableHeaders : Boolean;
    procedure SetFColumnResize(Value : Boolean);
    procedure SetFColumnResizeObject(Value : TExtObject);
    procedure SetFColumnSort(Value : Boolean);
    procedure SetFColumnSortObject(Value : TExtObject);
    procedure SetFColumns(Value : TExtObjectList);
    procedure SetFHideHeaders(Value : Boolean);
    procedure SetFInternalTpl(Value : string);
    procedure SetFInternalTplArray(Value : TExtObjectList);
    procedure SetFItemSelector(Value : string);
    procedure SetFOverClass(Value : string);
    procedure SetFReserveScrollOffset(Value : Boolean);
    procedure SetFScrollOffset(Value : Integer);
    procedure SetFSelectedClass(Value : string);
    procedure SetFDisableHeaders(Value : Boolean);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function CollectData(Records : TExtObjectList; StartIndex : Integer) : TExtFunction;
    destructor Destroy; override;
    property ColumnResize : Boolean read FColumnResize write SetFColumnResize;
    property ColumnResizeObject : TExtObject read FColumnResizeObject write SetFColumnResizeObject;
    property ColumnSort : Boolean read FColumnSort write SetFColumnSort;
    property ColumnSortObject : TExtObject read FColumnSortObject write SetFColumnSortObject;
    property Columns : TExtObjectList read FColumns write SetFColumns;
    property HideHeaders : Boolean read FHideHeaders write SetFHideHeaders;
    property InternalTpl : string read FInternalTpl write SetFInternalTpl;
    property InternalTplArray : TExtObjectList read FInternalTplArray write SetFInternalTplArray;
    property ItemSelector : string read FItemSelector write SetFItemSelector;
    property OverClass : string read FOverClass write SetFOverClass;
    property ReserveScrollOffset : Boolean read FReserveScrollOffset write SetFReserveScrollOffset;
    property ScrollOffset : Integer read FScrollOffset write SetFScrollOffset;
    property SelectedClass : string read FSelectedClass write SetFSelectedClass;
    property DisableHeaders : Boolean read FDisableHeaders write SetFDisableHeaders;
  end;

implementation

procedure TExtListColumn.SetFAlign(Value : string); begin
  FAlign := Value;
  JSCode('align:' + VarToJSON([Value]));
end;

procedure TExtListColumn.SetFCls(Value : string); begin
  FCls := Value;
  JSCode('cls:' + VarToJSON([Value]));
end;

procedure TExtListColumn.SetFDataIndex(Value : string); begin
  FDataIndex := Value;
  JSCode('dataIndex:' + VarToJSON([Value]));
end;

procedure TExtListColumn.SetFHeader(Value : string); begin
  FHeader := Value;
  JSCode('header:' + VarToJSON([Value]));
end;

procedure TExtListColumn.SetFTpl(Value : string); begin
  FTpl := Value;
  JSCode('tpl:' + VarToJSON([Value]));
end;

procedure TExtListColumn.SetFWidth(Value : Integer); begin
  FWidth := Value;
  JSCode('width:' + VarToJSON([Value]));
end;

function TExtListColumn.JSClassName : string; begin
  Result := 'Ext.list.Column';
end;

{$IFDEF FPC}constructor TExtListColumn.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtListNumberColumn.SetFFormat(Value : string); begin
  FFormat := Value;
  JSCode('format:' + VarToJSON([Value]));
end;

function TExtListNumberColumn.JSClassName : string; begin
  Result := 'Ext.list.NumberColumn';
end;

procedure TExtListNumberColumn.InitDefaults; begin
  inherited;
  FFormat := '0,000.00';
end;

{$IFDEF FPC}constructor TExtListNumberColumn.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtListNumberColumn.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

procedure TExtListSorter.SetFSortClasses(Value : TExtObjectList); begin
  FSortClasses := Value;
  Value.DeleteFromGarbage;
  JSCode('sortClasses:' + VarToJSON([Value, false]));
end;

function TExtListSorter.JSClassName : string; begin
  Result := 'Ext.list.Sorter';
end;

procedure TExtListSorter.InitDefaults; begin
  inherited;
  FSortClasses := TExtObjectList.Create(Self, 'sortClasses');
end;

{$IFDEF FPC}constructor TExtListSorter.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtListSorter.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

destructor TExtListSorter.Destroy; begin
  try
    FSortClasses.Free;
  except end;
  inherited;
end;

function TExtListDateColumn.JSClassName : string; begin
  Result := 'Ext.list.DateColumn';
end;

{$IFDEF FPC}constructor TExtListDateColumn.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtListBooleanColumn.SetFFalseText(Value : string); begin
  FFalseText := Value;
  JSCode('falseText:' + VarToJSON([Value]));
end;

procedure TExtListBooleanColumn.SetFTrueText(Value : string); begin
  FTrueText := Value;
  JSCode('trueText:' + VarToJSON([Value]));
end;

procedure TExtListBooleanColumn.SetFUndefinedText(Value : string); begin
  FUndefinedText := Value;
  JSCode('undefinedText:' + VarToJSON([Value]));
end;

function TExtListBooleanColumn.JSClassName : string; begin
  Result := 'Ext.list.BooleanColumn';
end;

procedure TExtListBooleanColumn.InitDefaults; begin
  inherited;
  FFalseText := 'false';
  FTrueText := 'true';
end;

{$IFDEF FPC}constructor TExtListBooleanColumn.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtListBooleanColumn.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

procedure TExtListColumnResizer.SetFMinPct(Value : Integer); begin
  FMinPct := Value;
  JSCode('minPct:' + VarToJSON([Value]));
end;

function TExtListColumnResizer.JSClassName : string; begin
  Result := 'Ext.list.ColumnResizer';
end;

procedure TExtListColumnResizer.InitDefaults; begin
  inherited;
  FMinPct := 05;
end;

{$IFDEF FPC}constructor TExtListColumnResizer.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtListColumnResizer.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

procedure TExtListListView.SetFColumnResize(Value : Boolean); begin
  FColumnResize := Value;
  JSCode('columnResize:' + VarToJSON([Value]));
end;

procedure TExtListListView.SetFColumnResizeObject(Value : TExtObject); begin
  FColumnResizeObject := Value;
  Value.DeleteFromGarbage;
  JSCode('columnResize:' + VarToJSON([Value, false]));
end;

procedure TExtListListView.SetFColumnSort(Value : Boolean); begin
  FColumnSort := Value;
  JSCode('columnSort:' + VarToJSON([Value]));
end;

procedure TExtListListView.SetFColumnSortObject(Value : TExtObject); begin
  FColumnSortObject := Value;
  Value.DeleteFromGarbage;
  JSCode('columnSort:' + VarToJSON([Value, false]));
end;

procedure TExtListListView.SetFColumns(Value : TExtObjectList); begin
  FColumns := Value;
  Value.DeleteFromGarbage;
  JSCode('columns:' + VarToJSON([Value, false]));
end;

procedure TExtListListView.SetFHideHeaders(Value : Boolean); begin
  FHideHeaders := Value;
  JSCode('hideHeaders:' + VarToJSON([Value]));
end;

procedure TExtListListView.SetFInternalTpl(Value : string); begin
  FInternalTpl := Value;
  JSCode('internalTpl:' + VarToJSON([Value]));
end;

procedure TExtListListView.SetFInternalTplArray(Value : TExtObjectList); begin
  FInternalTplArray := Value;
  Value.DeleteFromGarbage;
  JSCode('internalTpl:' + VarToJSON([Value, false]));
end;

procedure TExtListListView.SetFItemSelector(Value : string); begin
  FItemSelector := Value;
  JSCode('itemSelector:' + VarToJSON([Value]));
end;

procedure TExtListListView.SetFOverClass(Value : string); begin
  FOverClass := Value;
  JSCode('overClass:' + VarToJSON([Value]));
end;

procedure TExtListListView.SetFReserveScrollOffset(Value : Boolean); begin
  FReserveScrollOffset := Value;
  JSCode('reserveScrollOffset:' + VarToJSON([Value]));
end;

procedure TExtListListView.SetFScrollOffset(Value : Integer); begin
  FScrollOffset := Value;
  JSCode('scrollOffset:' + VarToJSON([Value]));
end;

procedure TExtListListView.SetFSelectedClass(Value : string); begin
  FSelectedClass := Value;
  JSCode('selectedClass:' + VarToJSON([Value]));
end;

procedure TExtListListView.SetFDisableHeaders(Value : Boolean); begin
  FDisableHeaders := Value;
  JSCode(JSName + '.disableHeaders=' + VarToJSON([Value]) + ';');
end;

function TExtListListView.JSClassName : string; begin
  Result := 'Ext.list.ListView';
end;

procedure TExtListListView.InitDefaults; begin
  inherited;
  FColumnResize := true;
  FColumnResizeObject := TExtObject.CreateInternal(Self, 'columnResize');
  FColumnSort := true;
  FColumnSortObject := TExtObject.CreateInternal(Self, 'columnSort');
  FColumns := TExtObjectList.Create(Self, 'columns');
  FInternalTplArray := TExtObjectList.Create(Self, 'internalTpl');
  FOverClass := 'x-list-over';
  FSelectedClass := 'x-list-selected';
end;

{$IFDEF FPC}constructor TExtListListView.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtListListView.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtListListView.CollectData(Records : TExtObjectList; StartIndex : Integer) : TExtFunction; begin
  JSCode(JSName + '.collectData(' + VarToJSON(Records) + ',' + VarToJSON([StartIndex]) + ');', 'TExtListListView');
  Result := Self;
end;

destructor TExtListListView.Destroy; begin
  try
    FColumnResizeObject.Free;
    FColumnSortObject.Free;
    FColumns.Free;
    FInternalTplArray.Free;
  except end;
  inherited;
end;

end.