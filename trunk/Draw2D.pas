unit Draw2D;

// Generated by ExtToPascal v.0.9.7, at 21/7/2009 10:32:54
// from C:\Trabalho\ExtPascal\Draw2D\with_namespace\jsdoc

interface

uses
  StrUtils, ExtPascal, ExtPascalUtils;

type
  TDropTargetConstruct = class;
  TDraggablePrototypeConstruct = class;
  TDraggable = class;
  TDropTarget = class;
  TEditPolicy = class;
  TEditPartFactory = class;
  TDropTargetPrototypeConstruct = class;
  TConnectionAnchor = class;
  TCommandStackEventListener = class;
  TCommandStackEvent = class;
  TConnectionDecorator = class;
  TDraggableConstruct = class;
  TDragDropEvent = class;
  TConnectionRouter = class;
  TPropertyChangeEvent = class;
  TPoint = class;
  TMenuItem = class;
  TSnapToGeometryEntry = class;
  TUUID = class;
  TToolGeneric = class;
  TSnapToHelper = class;
  TFigure = class;
  TEventTarget = class;
  TEvent = class;
  TGraphicalEditor = class;
  TLocator = class;
  TLine = class;
  TGraphics = class;
  TCommandStack = class;
  TCanvasDocument = class;
  TCanvas = class;
  TCommand = class;
  TColor = class;
  TArrayList = class;
  TAbstractObjectModel = class;
  TButton = class;
  TBorder = class;
  TNullConnectionRouter = class;
  TNode = class;
  TCommandSetColor = class;
  TArrowConnectionDecorator = class;
  TMenu = class;
  TLineBorder = class;
  TLabel = class;
  TManhattanConnectionRouter = class;
  TBezierConnectionRouter = class;
  TAbstractConnectionModel = class;
  TCommandSetText = class;
  TWorkflow = class;
  TWindowFigure = class;
  TToggleButton = class;
  TSnapToGeometry = class;
  TRectangle = class;
  TAnnotation = class;
  TSnapToGrid = class;
  TCommandDelete = class;
  TChopboxConnectionAnchor = class;
  TCommandResize = class;
  TCommandMove = class;
  TConnectionLocator = class;
  TCommandReconnect = class;
  TCommandConnect = class;
  TCommandAdd = class;
  TCommandMovePort = class;
  TConnection = class;
  TDimension = class;
  TCommandMoveLine = class;
  TCommandSetBackgroundColor = class;
  TPropertyWindow = class;
  TDialog = class;
  TResizeHandle = class;
  TToolPalette = class;
  TSVGFigure = class;
  TVectorFigure = class;
  TFanConnectionRouter = class;
  TImageFigure = class;
  TManhattanMidpointLocator = class;
  TCompartmentFigure = class;
  TGraphicalViewer = class;
  TPort = class;
  TInputPort = class;
  TPropertyDialog = class;
  TColorDialog = class;
  TOutputPort = class;
  TAnnotationDialog = class;
  TOval = class;
  TInputDialog = class;
  TCircle = class;
  TBackgroundColorDialog = class;
  TLineColorDialog = class;

  TDropTargetConstruct = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TDraggablePrototypeConstruct = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TDraggable = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(OElement : THTMLElement; IConstraints : Integer);
    function DetachEventHandlers : TExtFunction;
    function GetDropTarget(X : Integer; Y : Integer) : TExtFunction;
    function GetLeft : TExtFunction;
    function GetTop : TExtFunction;
  end;

  TDropTarget = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(OElement : TExtObject);
    function GetHeight : TExtFunction;
    function GetLeft : TExtFunction;
    function GetTop : TExtFunction;
    function GetWidth : TExtFunction;
  end;

  TEditPolicy = class(TExtFunction)
  private
    FPolicy : TExtObject;
    FTypeJS : TExtObject;
    procedure SetFPolicy(Value : TExtObject);
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    class function CONNECT : TExtObject;
    class function DELETE : TExtObject;
    class function MOVE : TExtObject;
    class function RESIZE : TExtObject;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Policy : TExtObject);
    function GetPolicy : TExtFunction;
    destructor Destroy; override;
    property Policy : TExtObject read FPolicy write SetFPolicy;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TEditPartFactory = class(TExtFunction)
  private
    FTypet : TExtObject;
    procedure SetFTypet(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function CreateEditPart(Model : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property Typet : TExtObject read FTypet write SetFTypet;
  end;

  TDropTargetPrototypeConstruct = class(TExtFunction)
  private
    FElement : TExtObject;
    procedure SetFElement(Value : TExtObject);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property Element : TExtObject read FElement write SetFElement;
  end;

  TConnectionAnchor = class(TExtFunction)
  private
    FOwner : TExtObject;
    FTypeJS : TExtObject;
    procedure SetFOwner(Value : TExtObject);
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Owner : TExtObject);
    function GetBox : TExtFunction;
    function GetLocation(Reference : TExtObject) : TExtFunction;
    function GetOwner : TExtFunction;
    function GetReferencePoint : TExtFunction;
    function SetOwner(Owner : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property Owner : TExtObject read FOwner write SetFOwner;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TCommandStackEventListener = class(TExtFunction)
  private
    FTypeJS : TExtObject;
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function StackChanged(Event : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TCommandStackEvent = class(TExtFunction)
  private
    FCommand : TExtObject;
    FDetails : TExtObject;
    FTypeJS : TExtObject;
    procedure SetFCommand(Value : TExtObject);
    procedure SetFDetails(Value : TExtObject);
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Command : TExtObject; Details : TExtObject);
    function GetCommand : TExtFunction;
    function GetDetails : TExtFunction;
    function IsPostChangeEvent : TExtFunction;
    function IsPreChangeEvent : TExtFunction;
    destructor Destroy; override;
    property Command : TExtObject read FCommand write SetFCommand;
    property Details : TExtObject read FDetails write SetFDetails;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TConnectionDecorator = class(TExtFunction)
  private
    FBackgroundColor : TExtObject;
    FColor : TExtObject;
    FTypeJS : TExtObject;
    procedure SetFBackgroundColor(Value : TExtObject);
    procedure SetFColor(Value : TExtObject);
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function Paint(G : TExtObject) : TExtFunction;
    function SetBackgroundColor(C : TExtObject) : TExtFunction;
    function SetColor(C : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property BackgroundColor : TExtObject read FBackgroundColor write SetFBackgroundColor;
    property Color : TExtObject read FColor write SetFColor;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TDraggableConstruct = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TDragDropEvent = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function InitDragDropEvent(SType : string; BCancelable : Boolean; ORelatedTarget : TExtObject) : TExtFunction;
  end;

  TConnectionRouter = class(TExtFunction)
  private
    FTypeJS : TExtObject;
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function GetDirection(R : TExtObject; P : TExtObject) : TExtFunction;
    function GetEndDirection(Conn : TExtObject) : TExtFunction;
    function GetStartDirection(Conn : TExtObject) : TExtFunction;
    function Route(Connection : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TPropertyChangeEvent = class(TExtFunction)
  private
    FModel : TExtObject;
    FNewValue : TExtObject;
    FOldValue : TExtObject;
    FPropertyJS : TExtObject;
    procedure SetFModel(Value : TExtObject);
    procedure SetFNewValue(Value : TExtObject);
    procedure SetFOldValue(Value : TExtObject);
    procedure SetFPropertyJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Model : TExtObject; PropertyJS : TExtObject; OldValue : TExtObject; NewValue : TExtObject);
    destructor Destroy; override;
    property Model : TExtObject read FModel write SetFModel;
    property NewValue : TExtObject read FNewValue write SetFNewValue;
    property OldValue : TExtObject read FOldValue write SetFOldValue;
    property PropertyJS : TExtObject read FPropertyJS write SetFPropertyJS;
  end;

  TPoint = class(TExtFunction)
  private
    FTypeJS : TExtObject;
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(X : Integer; Y : Integer);
    function Equals(O : TExtObject) : TExtFunction;
    function GetDistance(Other : TExtObject) : TExtFunction;
    function GetPersistentAttributes : TExtFunction;
    function GetPosition(P : TExtObject) : TExtFunction;
    function GetTranslated(Other : TExtObject) : TExtFunction;
    function GetX : TExtFunction;
    function GetY : TExtFunction;
    destructor Destroy; override;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TMenuItem = class(TExtFunction)
  private
    FAction : TExtObject;
    FIconUrl : TExtObject;
    FLabelJS : TExtObject;
    FParentMenu : TExtObject;
    procedure SetFAction(Value : TExtObject);
    procedure SetFIconUrl(Value : TExtObject);
    procedure SetFLabelJS(Value : TExtObject);
    procedure SetFParentMenu(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(LabelJS : TExtObject; IconUrl : TExtObject; Action : TExtObject);
    function GetLabel : TExtFunction;
    function IsEnabled : TExtFunction;
    destructor Destroy; override;
    property Action : TExtObject read FAction write SetFAction;
    property IconUrl : TExtObject read FIconUrl write SetFIconUrl;
    property LabelJS : TExtObject read FLabelJS write SetFLabelJS;
    property ParentMenu : TExtObject read FParentMenu write SetFParentMenu;
  end;

  TSnapToGeometryEntry = class(TExtFunction)
  private
    FLocation : TExtObject;
    FTypeJS : TExtObject;
    procedure SetFLocation(Value : TExtObject);
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(TypeJS : TExtObject; Location : TExtObject);
    function GetLocation : TExtFunction;
    function GetType : TExtFunction;
    destructor Destroy; override;
    property Location : TExtObject read FLocation write SetFLocation;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TUUID = class(TExtFunction)
  private
    FTypeJS : TExtObject;
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    destructor Destroy; override;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TToolGeneric = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Palette : TExtObject);
    function Execute(X : Integer; Y : Integer) : TExtFunction;
    function GetHeight : TExtFunction;
    function GetImageUrl : TExtFunction;
    function GetPosition : TExtFunction;
    function GetWidth : TExtFunction;
    function GetX : TExtFunction;
    function GetY : TExtFunction;
    function SetDimension(W : Integer; H : Integer) : TExtFunction;
    function SetPosition(XPos : Integer; YPos : Integer) : TExtFunction;
    function SetTooltip(TooltipText : string) : TExtFunction;
  end;

  TSnapToHelper = class(TExtFunction)
  private
    FWorkflow : TExtObject;
    procedure SetFWorkflow(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    class function CENTER : TExtObject;
    class function EAST : TExtObject;
    class function EAST_WEST : TExtObject;
    class function NORTH : TExtObject;
    class function NORTH_EAST : TExtObject;
    class function NORTH_SOUTH : TExtObject;
    class function NORTH_WEST : TExtObject;
    class function NSEW : TExtObject;
    class function SOUTH : TExtObject;
    class function SOUTH_EAST : TExtObject;
    class function SOUTH_WEST : TExtObject;
    class function WEST : TExtObject;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Workflow : TExtObject);
    function SnapPoint(SnapOrientation : TExtObject; InputPoint : TExtObject; ResultPoint : TExtObject) : TExtFunction;
    function SnapRectangle(InputBounds : TExtObject; ResultBounds : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property Workflow : TExtObject read FWorkflow write SetFWorkflow;
  end;

  TFigure = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function AttachMoveListener(Figure : TFigure) : TExtFunction;
    function CreateCommand(Request : TEditPolicy) : TExtFunction;
    function DetachMoveListener(Figure : TFigure) : TExtFunction;
    function GetAbsoluteX : TExtFunction;
    function GetAbsoluteY : TExtFunction;
    function GetBounds : TExtFunction;
    function GetCanSnapToHelper : TExtFunction;
    function GetContextMenu : TExtFunction;
    function GetHeight : TExtFunction;
    function GetId : TExtFunction;
    function GetMinHeight : TExtFunction;
    function GetMinWidth : TExtFunction;
    function GetModel : TExtFunction;
    function GetParent : TExtFunction;
    function GetPosition : TExtFunction;
    function GetProperties : TExtFunction;
    function GetProperty(Key : TExtObject) : TExtFunction;
    function GetSnapToGridAnchor : TExtFunction;
    function GetWidth : TExtFunction;
    function GetWorkflow : TExtFunction;
    function GetX : TExtFunction;
    function GetY : TExtFunction;
    function GetZOrder : TExtFunction;
    function HasFixedPosition : TExtFunction;
    function IsDeleteable : TExtFunction;
    function IsOver(IX : Integer; IY : Integer) : TExtFunction;
    function IsResizeable : TExtFunction;
    function IsSelectable : TExtFunction;
    function IsStrechable : TExtFunction;
    function OnDoubleClick : TExtFunction;
    function OnDragstart(X : Integer; Y : Integer) : TExtFunction;
    function OnKeyDown(KeyCode : Integer; Ctrl : TExtObject) : TExtFunction;
    function OnMouseEnter : TExtFunction;
    function OnMouseLeave : TExtFunction;
    function SetAlpha(Percent : Double) : TExtFunction;
    function SetBorder(Border : TBorder) : TExtFunction;
    function SetCanDrag(Flag : Boolean) : TExtFunction;
    function SetCanSnapToHelper(Flag : Boolean) : TExtFunction;
    function SetDeleteable(Flag : Boolean) : TExtFunction;
    function SetDimension(W : Integer; H : Integer) : TExtFunction;
    function SetId(Id : string) : TExtFunction;
    function SetModel(Model : TAbstractObjectModel) : TExtFunction;
    function SetPosition(XPos : Integer; YPos : Integer) : TExtFunction;
    function SetProperty(Key : string; Value : string) : TExtFunction;
    function SetResizeable(Flag : Boolean) : TExtFunction;
    function SetSelectable(Flag : Boolean) : TExtFunction;
    function SetSnapToGridAnchor(Point : TExtObject) : TExtFunction;
    function SetZOrder(Index : Integer) : TExtFunction;
    function SetZOrderBaseIndex(Index : Integer) : TExtFunction;
  end;

  TEventTarget = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function AddEventListener(SType : string; FnListener : TExtObject) : TExtFunction;
    function DispatchEvent(OEvent : TExtObject) : TExtFunction;
    function RemoveEventListener(SType : string; FnListener : TExtObject) : TExtFunction;
  end;

  TEvent = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function InitEvent(SType : string; BCancelable : Boolean) : TExtFunction;
    function PreventDefault : TExtFunction;
    function FireDOMEvent(EventType : TExtObject; Element : TExtObject) : TExtFunction;
  end;

  TGraphicalEditor = class(TExtFunction)
  private
    FTypeJS : TExtObject;
    FView : TExtObject;
    procedure SetFTypeJS(Value : TExtObject);
    procedure SetFView(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Id : string);
    function GetGraphicalViewer : TExtFunction;
    function InitializeGraphicalViewer : TExtFunction;
    destructor Destroy; override;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
    property View : TExtObject read FView write SetFView;
  end;

  TLocator = class(TExtFunction)
  private
    FTypeJS : TExtObject;
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function Relocate(Target : TFigure) : TExtFunction;
    destructor Destroy; override;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TLine = class(TExtFunction)
  private
    FTypeJS : TExtObject;
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    class function CoronaWidth : TExtObject;
    class function ZOrderBaseIndex : TExtObject;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function AttachMoveListener(Figure : TFigure) : TExtFunction;
    function ContainsPoint(Px : Integer; Py : Integer) : TExtFunction;
    function CreateCommand(Request : TEditPolicy) : TExtFunction;
    function DetachMoveListener(Figure : TFigure) : TExtFunction;
    function GetAngle : TExtFunction;
    function GetColor : TExtFunction;
    function GetContextMenu : TExtFunction;
    function GetEndPoint : TExtFunction;
    function GetEndX : TExtFunction;
    function GetEndY : TExtFunction;
    function GetLength : TExtFunction;
    function GetModel : TExtFunction;
    function GetProperties : TExtFunction;
    function GetProperty(Key : TExtObject) : TExtFunction;
    function GetStartPoint : TExtFunction;
    function GetStartX : TExtFunction;
    function GetStartY : TExtFunction;
    function GetWorkflow : TExtFunction;
    function GetZOrder : TExtFunction;
    function IsDeleteable : TExtFunction;
    function IsResizeable : TExtFunction;
    function IsSelectable : TExtFunction;
    function OnDoubleClick : TExtFunction;
    function SetAlpha(Percent : Double) : TExtFunction;
    function SetColor(Color : TColor) : TExtFunction;
    function SetCoronaWidth(Width : Integer) : TExtFunction;
    function SetDeleteable(Flag : Boolean) : TExtFunction;
    function SetEndPoint(X : Integer; Y : Integer) : TExtFunction;
    function SetId(Id : string) : TExtFunction;
    function SetLineWidth(W : Integer) : TExtFunction;
    function SetModel(Model : TAbstractObjectModel) : TExtFunction;
    function SetProperty(Key : string; Value : string) : TExtFunction;
    function SetSelectable(Flag : Boolean) : TExtFunction;
    function SetStartPoint(X : Integer; Y : Integer) : TExtFunction;
    function SetZOrder(Index : Integer) : TExtFunction;
    function SetDefaultCoronaWidth(Width : Integer) : TExtFunction;
    function SetZOrderBaseIndex(Index : Integer) : TExtFunction;
    destructor Destroy; override;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TGraphics = class(TExtFunction)
  private
    FCosRadian : TExtObject;
    FRadian : TExtObject;
    FSinRadian : TExtObject;
    FXt : TExtObject;
    FYt : TExtObject;
    procedure SetFCosRadian(Value : TExtObject);
    procedure SetFRadian(Value : TExtObject);
    procedure SetFSinRadian(Value : TExtObject);
    procedure SetFXt(Value : TExtObject);
    procedure SetFYt(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(JsGraphics : TExtObject; Rotation : TExtObject; Translation : TExtObject);
    function DrawLine(X1 : Integer; Y1 : Integer; X2 : Integer; Y2 : Integer) : TExtFunction;
    function DrawPolygon(XArray : TExtObjectList; YArray : TExtObjectList) : TExtFunction;
    function FillPolygon(XArray : TExtObjectList; YArray : TExtObjectList) : TExtFunction;
    function FillRect(X : Integer; Y : Integer; W : Integer; H : Integer) : TExtFunction;
    function JsGraphics(Id : string; Wnd : TExtObject) : TExtFunction;
    function SetColor(Color : TExtObject) : TExtFunction;
    function SetStroke(X : Integer) : TExtFunction;
    destructor Destroy; override;
    property CosRadian : TExtObject read FCosRadian write SetFCosRadian;
    property Radian : TExtObject read FRadian write SetFRadian;
    property SinRadian : TExtObject read FSinRadian write SetFSinRadian;
    property Xt : TExtObject read FXt write SetFXt;
    property Yt : TExtObject read FYt write SetFYt;
  end;

  TCommandStack = class(TExtFunction)
  private
  public
    function JSClassName : string; override;
    class function POST_EXECUTE : TExtObject;
    class function POST_MASK : TExtObject;
    class function POST_REDO : TExtObject;
    class function POST_UNDO : TExtObject;
    class function PRE_EXECUTE : TExtObject;
    class function PRE_MASK : TExtObject;
    class function PRE_REDO : TExtObject;
    class function PRE_UNDO : TExtObject;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function AddCommandStackEventListener(Listener : TCommandStackEventListener) : TExtFunction;
    function CanRedo : TExtFunction;
    function CanUndo : TExtFunction;
    function Execute(Command : TCommand) : TExtFunction;
    function MarkSaveLocation : TExtFunction;
    function NotifyListeners(Command : TCommand; State : Integer) : TExtFunction;
    function Redo : TExtFunction;
    function RemoveCommandStackEventListener(Listener : TCommandStackEventListener) : TExtFunction;
    function SetUndoLimit(Count : Integer) : TExtFunction;
    function Undo : TExtFunction;
  end;

  TCanvasDocument = class(TExtFunction)
  private
    FCanvas : TExtObject;
    FTypeJS : TExtObject;
    procedure SetFCanvas(Value : TExtObject);
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Canvas : TExtObject);
    function GetFigure(Id : string) : TExtFunction;
    function GetFigures : TExtFunction;
    function GetLine(Id : string) : TExtFunction;
    function GetLines : TExtFunction;
    destructor Destroy; override;
    property Canvas : TExtObject read FCanvas write SetFCanvas;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TCanvas = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(CanvasId : string);
    function AddFigure(Figure : TFigure; XPos : Integer; YPos : Integer; AvoidPaint : TExtObject) : TExtFunction;
    function GetAbsoluteX : TExtFunction;
    function GetAbsoluteY : TExtFunction;
    function GetEnableSmoothFigureHandling : TExtFunction;
    function GetHeight : TExtFunction;
    function GetScrollLeft : TExtFunction;
    function GetScrollTop : TExtFunction;
    function GetWidth : TExtFunction;
    function GetX : TExtFunction;
    function GetY : TExtFunction;
    function RemoveFigure(Figure : TFigure) : TExtFunction;
    function SetBackgroundImage(ImageUrl : string; RepeatJS : TExtObject) : TExtFunction;
    function SetEnableSmoothFigureHandling(Flag : Boolean) : TExtFunction;
    function SetViewPort(DivId : string) : TExtFunction;
  end;

  TCommand = class(TExtFunction)
  private
    FLabelJS : TExtObject;
    procedure SetFLabelJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(LabelJS : TExtObject);
    function Cancel : TExtFunction;
    function CanExecute : TExtFunction;
    function Execute : TExtFunction;
    function GetLabel : TExtFunction;
    function Redo : TExtFunction;
    function Undo : TExtFunction;
    destructor Destroy; override;
    property LabelJS : TExtObject read FLabelJS write SetFLabelJS;
  end;

  TColor = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Red : TExtObject; Green : TExtObject; Blue : TExtObject);
    function Darker(Fraction : Double) : TExtFunction;
    function GetBlue : TExtFunction;
    function GetGreen : TExtFunction;
    function GetIdealTextColor : TExtFunction;
    function GetRed : TExtFunction;
    function Lighter(Fraction : Double) : TExtFunction;
  end;

  TArrayList = class(TExtFunction)
  private
    FData : TExtObject;
    FIncrement : TExtObject;
    FSize : TExtObject;
    FTypeJS : TExtObject;
    procedure SetFData(Value : TExtObject);
    procedure SetFIncrement(Value : TExtObject);
    procedure SetFSize(Value : TExtObject);
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    class function EMPTY_LIST : TExtObject;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function Add(Obj : TExtObject) : TExtFunction;
    function AddAll(Obj : TExtObject) : TExtFunction;
    function Clone : TExtFunction;
    function Contains(Obj : TExtObject) : TExtFunction;
    function Get(I : Integer) : TExtFunction;
    function GetCapacity : TExtFunction;
    function GetFirstElement : TExtFunction;
    function GetLastElement : TExtFunction;
    function GetPersistentAttributes : TExtFunction;
    function GetSize : TExtFunction;
    function IndexOf(Obj : TExtObject) : TExtFunction;
    function InsertElementAt(Obj : TExtObject; Index : Integer) : TExtFunction;
    function IsEmpty : TExtFunction;
    function OverwriteElementAt(Obj : TExtObject; Index : Integer) : TExtFunction;
    function Remove(Obj : TExtObject) : TExtFunction;
    function RemoveAllElements : TExtFunction;
    function RemoveElementAt(Index : Integer) : TExtFunction;
    function Resize : TExtFunction;
    function Reverse : TExtFunction;
    function Sort(F : TExtObject) : TExtFunction;
    function TrimToSize : TExtFunction;
    destructor Destroy; override;
    property Data : TExtObject read FData write SetFData;
    property Increment : TExtObject read FIncrement write SetFIncrement;
    property Size : TExtObject read FSize write SetFSize;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TAbstractObjectModel = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function AddPropertyChangeListener(Listener : TExtObject) : TExtFunction;
    function FirePropertyChange(PropertyName : string; OldValue : TExtObject; NewValue : TExtObject) : TExtFunction;
    function GetId : TExtFunction;
    function GetModelChildren : TExtFunction;
    function GetModelParent : TExtFunction;
    function GetPersistentAttributes : TExtFunction;
    function RemovePropertyChangeListener(Listener : TExtObject) : TExtFunction;
    function SetModelParent(Parent : TExtObject) : TExtFunction;
  end;

  TButton = class(TExtFunction)
  private
    FTypeJS : TExtObject;
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Palette : TExtObject; Width : Integer; Height : Integer);
    function Execute : TExtFunction;
    function GetHeight : TExtFunction;
    function GetImageUrl : TExtFunction;
    function GetPosition : TExtFunction;
    function GetToolPalette : TExtFunction;
    function GetWidth : TExtFunction;
    function GetX : TExtFunction;
    function GetY : TExtFunction;
    function IsActive : TExtFunction;
    function SetActive(Flag : Boolean) : TExtFunction;
    function SetDimension(W : Integer; H : Integer) : TExtFunction;
    function SetPosition(XPos : Integer; YPos : Integer) : TExtFunction;
    function SetTooltip(TooltipText : string) : TExtFunction;
    destructor Destroy; override;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TBorder = class(TExtFunction)
  private
    FTypeJS : TExtObject;
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function GetColor : TExtFunction;
    function SetColor(C : TColor) : TExtFunction;
    destructor Destroy; override;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TNullConnectionRouter = class(TConnectionRouter)
  private
    FTypeJS : TExtObject;
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function Invalidate : TExtFunction;
    function Route(Connection : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TNode = class(TFigure)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function AddPort(Port : TPort; X : Integer; Y : Integer) : TExtFunction;
    function GetBackgroundColor : TExtFunction;
    function GetModelSourceConnections : TExtFunction;
    function GetPort(PortName : string) : TExtFunction;
    function GetPorts : TExtFunction;
    function RemovePort(Port : TPort) : TExtFunction;
    function SetBackgroundColor(Color : TColor) : TExtFunction;
    function SetColor(Color : TExtObject) : TExtFunction;
    function SetLineWidth(W : Integer) : TExtFunction;
  end;

  TCommandSetColor = class(TCommand)
  private
    FFigure : TExtObject;
    FNewColor : TExtObject;
    FOldColor : TExtObject;
    procedure SetFFigure(Value : TExtObject);
    procedure SetFNewColor(Value : TExtObject);
    procedure SetFOldColor(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Figure : TExtObject; Color : TExtObject);
    function Execute : TExtFunction;
    function Redo : TExtFunction;
    function Undo : TExtFunction;
    destructor Destroy; override;
    property Figure : TExtObject read FFigure write SetFFigure;
    property NewColor : TExtObject read FNewColor write SetFNewColor;
    property OldColor : TExtObject read FOldColor write SetFOldColor;
  end;

  TArrowConnectionDecorator = class(TConnectionDecorator)
  private
    FTypeJS : TExtObject;
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function Paint(G : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TMenu = class(TFigure)
  private
    FDirty : TExtObject;
    FMenuItems : TExtObject;
    procedure SetFDirty(Value : TExtObject);
    procedure SetFMenuItems(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function AppendMenuItem(Item : TExtObject) : TExtFunction;
    function CreateList : TExtFunction;
    destructor Destroy; override;
    property Dirty : TExtObject read FDirty write SetFDirty;
    property MenuItems : TExtObject read FMenuItems write SetFMenuItems;
  end;

  TLineBorder = class(TBorder)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Width : Integer);
    function SetLineWidth(W : Integer) : TExtFunction;
  end;

  TLabel = class(TFigure)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Msg : string);
    function GetHeight : TExtFunction;
    function GetText : TExtFunction;
    function GetWidth : TExtFunction;
    function IsResizeable : TExtFunction;
    function SetAlign(Align : string) : TExtFunction;
    function SetBackgroundColor(Color : TColor) : TExtFunction;
    function SetColor(Color : TColor) : TExtFunction;
    function SetFontSize(Size : Integer) : TExtFunction;
    function SetStyledText(Text : string) : TExtFunction;
    function SetText(Text : string) : TExtFunction;
    function SetWordwrap(Flag : Boolean) : TExtFunction;
  end;

  TManhattanConnectionRouter = class(TConnectionRouter)
  private
    FTypeJS : TExtObject;
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    class function MINDIST : TExtObject;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function _route(Conn : TExtObject; FromPt : TExtObject; FromDir : TExtObject; ToPt : TExtObject; ToDir : TExtObject) : TExtFunction;
    function Route(Conn : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TBezierConnectionRouter = class(TConnectionRouter)
  private
    FCheapRouter : TExtObject;
    FIteration : TExtObject;
    FTypeJS : TExtObject;
    procedure SetFCheapRouter(Value : TExtObject);
    procedure SetFIteration(Value : TExtObject);
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(NoCheapRouter : TExtObject);
    function DrawBezier(PointArray : TExtObjectList; ResultArray : TExtObjectList; T : TExtObject; Iter : TExtObject) : TExtFunction;
    function Route(Conn : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property CheapRouter : TExtObject read FCheapRouter write SetFCheapRouter;
    property Iteration : TExtObject read FIteration write SetFIteration;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TAbstractConnectionModel = class(TAbstractObjectModel)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function GetSourceModel : TExtFunction;
    function GetSourcePortName : TExtFunction;
    function GetTargetModel : TExtFunction;
    function GetTargetPortName : TExtFunction;
  end;

  TCommandSetText = class(TCommand)
  private
    FFigure : TExtObject;
    FNewText : TExtObject;
    FOldText : TExtObject;
    procedure SetFFigure(Value : TExtObject);
    procedure SetFNewText(Value : TExtObject);
    procedure SetFOldText(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Figure : TExtObject; Text : string);
    function Execute : TExtFunction;
    function Redo : TExtFunction;
    function Undo : TExtFunction;
    destructor Destroy; override;
    property Figure : TExtObject read FFigure write SetFFigure;
    property NewText : TExtObject read FNewText write SetFNewText;
    property OldText : TExtObject read FOldText write SetFOldText;
  end;

  TWorkflow = class(TCanvas)
  private
    FOldScrollPosTop : TExtObject;
    FResizeHandleHalfWidth : TExtObject;
    FTooltip : TExtObject;
    FScrollArea : TExtObject;
    procedure SetFOldScrollPosTop(Value : TExtObject);
    procedure SetFResizeHandleHalfWidth(Value : TExtObject);
    procedure SetFTooltip(Value : TExtObject);
    procedure SetFScrollArea(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Id : string);
    function AddFigure(Figure : TFigure; XPos : Integer; YPos : Integer) : TExtFunction;
    function AddSelectionListener(W : TWindowFigure) : TExtFunction;
    function Clear : TExtFunction;
    function GetBestCompartmentFigure(X : Integer; Y : Integer; FigureToIgnore : TFigure) : TExtFunction;
    function GetCommandStack : TExtFunction;
    function GetContextMenu : TExtFunction;
    function GetCurrentSelection : TExtFunction;
    function GetDocument : TExtFunction;
    function MoveBack(Figure : TFigure) : TExtFunction;
    function MoveFront(Figure : TFigure) : TExtFunction;
    function RemoveFigure(Figure : TFigure) : TExtFunction;
    function RemoveSelectionListener(W : TWindowFigure) : TExtFunction;
    function ScrollTo(X : Integer; Y : Integer; Fast : TExtObject) : TExtFunction;
    function SetCurrentSelection(Figure : TFigure) : TExtFunction;
    function SetGridWidth(Dx : Integer; Dy : Integer) : TExtFunction;
    function SetPanning(Flag : Boolean) : TExtFunction;
    function SetSnapToGeometry(Flag : Boolean) : TExtFunction;
    function SetSnapToGrid(Flag : Boolean) : TExtFunction;
    function SetToolWindow(ToolWindow : TWindowFigure; X : Integer; Y : Integer) : TExtFunction;
    function ShowDialog(Dialog : TDialog; XPos : Integer; YPos : Integer) : TExtFunction;
    function ShowTooltip(Tooltip : TFigure; AutoHide : Boolean) : TExtFunction;
    destructor Destroy; override;
    property OldScrollPosTop : TExtObject read FOldScrollPosTop write SetFOldScrollPosTop;
    property ResizeHandleHalfWidth : TExtObject read FResizeHandleHalfWidth write SetFResizeHandleHalfWidth;
    property Tooltip : TExtObject read FTooltip write SetFTooltip;
    property ScrollArea : TExtObject read FScrollArea write SetFScrollArea;
  end;

  TWindowFigure = class(TFigure)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Title : TExtObject);
    function GetMinHeight : TExtFunction;
    function GetMinWidth : TExtFunction;
    function HasFixedPosition : TExtFunction;
    function HasTitleBar : TExtFunction;
    function IsResizeable : TExtFunction;
    function OnDragstart(X : Integer; Y : Integer) : TExtFunction;
    function OnSelectionChanged(Figure : TFigure) : TExtFunction;
    function SetBackgroundColor(Color : TColor) : TExtFunction;
    function SetCanDrag(Flag : Boolean) : TExtFunction;
    function SetColor(Color : TColor) : TExtFunction;
    function SetDimension(W : Integer; H : Integer) : TExtFunction;
    function SetLineWidth(W : Integer) : TExtFunction;
    function SetTitle(Title : string) : TExtFunction;
    function SetZOrderBaseIndex(Index : Integer) : TExtFunction;
  end;

  TToggleButton = class(TButton)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Palette : TExtObject);
    function Execute : TExtFunction;
    function IsDown : TExtFunction;
  end;

  TSnapToGeometry = class(TSnapToHelper)
  private
  public
    function JSClassName : string; override;
    class function THRESHOLD : TExtObject;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Workflow : TExtObject);
    function GetCorrectionFor(Entries : TExtObject; Value : TExtObject; Side : TExtObject) : TExtFunction;
    function PopulateRowsAndCols : TExtFunction;
    function SnapPoint(SnapOrientation : TExtObject; InputPoint : TExtObject; ResultPoint : TExtObject) : TExtFunction;
    function SnapRectangle(InputBounds : TExtObject; ResultBounds : TExtObject) : TExtFunction;
  end;

  TRectangle = class(TFigure)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Width : Integer; Height : Integer);
    function GetBackgroundColor : TExtFunction;
    function GetColor : TExtFunction;
    function GetHeight : TExtFunction;
    function GetLineWidth : TExtFunction;
    function GetWidth : TExtFunction;
    function SetBackgroundColor(Color : TColor) : TExtFunction;
    function SetColor(Color : TColor) : TExtFunction;
    function SetDimension(W : Integer; H : Integer) : TExtFunction;
    function SetLineWidth(W : Integer) : TExtFunction;
  end;

  TAnnotation = class(TFigure)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Msg : string);
    function GetBackgroundColor : TExtFunction;
    function GetText : TExtFunction;
    function OnDoubleClick : TExtFunction;
    function SetBackgroundColor(Color : TColor) : TExtFunction;
    function SetFontSize(Size : Integer) : TExtFunction;
    function SetStyledText(Text : string) : TExtFunction;
    function SetText(Text : string) : TExtFunction;
  end;

  TSnapToGrid = class(TSnapToHelper)
  private
    FTypeJS : TExtObject;
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Workflow : TExtObject);
    function SnapPoint(Direction : TExtObject; InputPoint : TExtObject; ResultPoint : TExtObject) : TExtFunction;
    function SnapRectangle(InputBounds : TExtObject; ResultBounds : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TCommandDelete = class(TCommand)
  private
    FFigure : TExtObject;
    FParent : TExtObject;
    procedure SetFFigure(Value : TExtObject);
    procedure SetFParent(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Figure : TExtObject);
    function Execute : TExtFunction;
    function Redo : TExtFunction;
    function Undo : TExtFunction;
    destructor Destroy; override;
    property Figure : TExtObject read FFigure write SetFFigure;
    property Parent : TExtObject read FParent write SetFParent;
  end;

  TChopboxConnectionAnchor = class(TConnectionAnchor)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Owner : TExtObject);
    function GetBox : TExtFunction;
    function GetLocation(Reference : TExtObject) : TExtFunction;
    function GetReferencePoint : TExtFunction;
  end;

  TCommandResize = class(TCommand)
  private
    FFigure : TExtObject;
    FOldHeight : TExtObject;
    FOldWidth : TExtObject;
    procedure SetFFigure(Value : TExtObject);
    procedure SetFOldHeight(Value : TExtObject);
    procedure SetFOldWidth(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Figure : TExtObject; Width : Integer; Height : Integer);
    function CanExecute : TExtFunction;
    function Execute : TExtFunction;
    function Redo : TExtFunction;
    function SetDimension(Width : Integer; Height : Integer) : TExtFunction;
    function Undo : TExtFunction;
    destructor Destroy; override;
    property Figure : TExtObject read FFigure write SetFFigure;
    property OldHeight : TExtObject read FOldHeight write SetFOldHeight;
    property OldWidth : TExtObject read FOldWidth write SetFOldWidth;
  end;

  TCommandMove = class(TCommand)
  private
    FFigure : TExtObject;
    FOldCompartment : TExtObject;
    FOldX : TExtObject;
    FOldY : TExtObject;
    procedure SetFFigure(Value : TExtObject);
    procedure SetFOldCompartment(Value : TExtObject);
    procedure SetFOldX(Value : TExtObject);
    procedure SetFOldY(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Figure : TExtObject; X : Integer; Y : Integer);
    function CanExecute : TExtFunction;
    function Execute : TExtFunction;
    function Redo : TExtFunction;
    function SetPosition(X : Integer; Y : Integer) : TExtFunction;
    function SetStartPosition(X : Integer; Y : Integer) : TExtFunction;
    function Undo : TExtFunction;
    destructor Destroy; override;
    property Figure : TExtObject read FFigure write SetFFigure;
    property OldCompartment : TExtObject read FOldCompartment write SetFOldCompartment;
    property OldX : TExtObject read FOldX write SetFOldX;
    property OldY : TExtObject read FOldY write SetFOldY;
  end;

  TConnectionLocator = class(TLocator)
  private
    FConnection : TExtObject;
    procedure SetFConnection(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Connection : TExtObject);
    function GetConnection : TExtFunction;
    destructor Destroy; override;
    property Connection : TExtObject read FConnection write SetFConnection;
  end;

  TCommandReconnect = class(TCommand)
  private
    FCon : TExtObject;
    FOldRouter : TExtObject;
    FOldSourcePort : TExtObject;
    FOldTargetPort : TExtObject;
    procedure SetFCon(Value : TExtObject);
    procedure SetFOldRouter(Value : TExtObject);
    procedure SetFOldSourcePort(Value : TExtObject);
    procedure SetFOldTargetPort(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Con : TExtObject);
    function Cancel : TExtFunction;
    function CanExecute : TExtFunction;
    function Execute : TExtFunction;
    function Redo : TExtFunction;
    function SetNewPorts(Source : TExtObject; Target : TExtObject) : TExtFunction;
    function Undo : TExtFunction;
    destructor Destroy; override;
    property Con : TExtObject read FCon write SetFCon;
    property OldRouter : TExtObject read FOldRouter write SetFOldRouter;
    property OldSourcePort : TExtObject read FOldSourcePort write SetFOldSourcePort;
    property OldTargetPort : TExtObject read FOldTargetPort write SetFOldTargetPort;
  end;

  TCommandConnect = class(TCommand)
  private
    FConnection : TExtObject;
    FSource : TExtObject;
    FTarget : TExtObject;
    FWorkflow : TExtObject;
    procedure SetFConnection(Value : TExtObject);
    procedure SetFSource(Value : TExtObject);
    procedure SetFTarget(Value : TExtObject);
    procedure SetFWorkflow(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Canvas : TExtObject; Source : TExtObject; Target : TExtObject);
    function Execute : TExtFunction;
    function Redo : TExtFunction;
    function SetConnection(Connection : TExtObject) : TExtFunction;
    function Undo : TExtFunction;
    destructor Destroy; override;
    property Connection : TExtObject read FConnection write SetFConnection;
    property Source : TExtObject read FSource write SetFSource;
    property Target : TExtObject read FTarget write SetFTarget;
    property Workflow : TExtObject read FWorkflow write SetFWorkflow;
  end;

  TCommandAdd = class(TCommand)
  private
    FFigure : TExtObject;
    FParent : TExtObject;
    FWorkflow : TExtObject;
    FX : TExtObject;
    FY : TExtObject;
    procedure SetFFigure(Value : TExtObject);
    procedure SetFParent(Value : TExtObject);
    procedure SetFWorkflow(Value : TExtObject);
    procedure SetFX(Value : TExtObject);
    procedure SetFY(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Canvas : TExtObject; Figure : TExtObject; X : Integer; Y : Integer; Parent : TExtObject);
    function Execute : TExtFunction;
    function Redo : TExtFunction;
    function Undo : TExtFunction;
    destructor Destroy; override;
    property Figure : TExtObject read FFigure write SetFFigure;
    property Parent : TExtObject read FParent write SetFParent;
    property Workflow : TExtObject read FWorkflow write SetFWorkflow;
    property X : TExtObject read FX write SetFX;
    property Y : TExtObject read FY write SetFY;
  end;

  TCommandMovePort = class(TCommand)
  private
    FPort : TExtObject;
    procedure SetFPort(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Port : TExtObject);
    function Execute : TExtFunction;
    function Redo : TExtFunction;
    function SetPosition(X : Integer; Y : Integer) : TExtFunction;
    function Undo : TExtFunction;
    destructor Destroy; override;
    property Port : TExtObject read FPort write SetFPort;
  end;

  TConnection = class(TLine)
  private
    FChildren : TExtObject;
    FTypeJS : TExtObject;
    procedure SetFChildren(Value : TExtObject);
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    class function DefaultRouter : TExtObject;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function AddFigure(Figure : TFigure; Locator : TConnectionLocator) : TExtFunction;
    function AddPoint(P : TExtObject) : TExtFunction;
    function ContainsPoint(Px : Integer; Py : Integer) : TExtFunction;
    function CreateCommand(Request : TEditPolicy) : TExtFunction;
    function FinishStroke : TExtFunction;
    function GetEndAngle : TExtFunction;
    function GetEndPoint : TExtFunction;
    function GetPoints : TExtFunction;
    function GetRouter : TExtFunction;
    function GetSource : TExtFunction;
    function GetStartAngle : TExtFunction;
    function GetStartPoint : TExtFunction;
    function GetTarget : TExtFunction;
    function IsResizeable : TExtFunction;
    function SetRouter(Router : TExtObject) : TExtFunction;
    function SetSource(Port : TPort) : TExtFunction;
    function SetSourceAnchor(Anchor : TExtObject) : TExtFunction;
    function SetSourceDecorator(Decorator : TExtObject) : TExtFunction;
    function SetTarget(Port : TPort) : TExtFunction;
    function SetTargetAnchor(Anchor : TExtObject) : TExtFunction;
    function SetTargetDecorator(Decorator : TExtObject) : TExtFunction;
    function StartStroke : TExtFunction;
    function SetDefaultRouter(Router : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property Children : TExtObject read FChildren write SetFChildren;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TDimension = class(TPoint)
  private
    FTypeJS : TExtObject;
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(X : Integer; Y : Integer; W : Integer; H : Integer);
    function Equals(O : TExtObject) : TExtFunction;
    function GetBottom : TExtFunction;
    function GetBottomRight : TExtFunction;
    function GetCenter : TExtFunction;
    function GetHeight : TExtFunction;
    function GetRight : TExtFunction;
    function GetTopLeft : TExtFunction;
    function GetWidth : TExtFunction;
    function IsEmpty : TExtFunction;
    function Resize(Dw : Integer; Dh : Integer) : TExtFunction;
    function SetBounds(Rect : TExtObject) : TExtFunction;
    function Translate(Dx : Integer; Dy : Integer) : TExtFunction;
    destructor Destroy; override;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TCommandMoveLine = class(TCommand)
  private
    FEndX1 : TExtObject;
    FEndY1 : TExtObject;
    FLine : TExtObject;
    FStartX1 : TExtObject;
    FStartY1 : TExtObject;
    procedure SetFEndX1(Value : TExtObject);
    procedure SetFEndY1(Value : TExtObject);
    procedure SetFLine(Value : TExtObject);
    procedure SetFStartX1(Value : TExtObject);
    procedure SetFStartY1(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Line : TExtObject; StartX : TExtObject; StartY : TExtObject; EndX : TExtObject; EndY : TExtObject);
    function CanExecute : TExtFunction;
    function Execute : TExtFunction;
    function Redo : TExtFunction;
    function Undo : TExtFunction;
    destructor Destroy; override;
    property EndX1 : TExtObject read FEndX1 write SetFEndX1;
    property EndY1 : TExtObject read FEndY1 write SetFEndY1;
    property Line : TExtObject read FLine write SetFLine;
    property StartX1 : TExtObject read FStartX1 write SetFStartX1;
    property StartY1 : TExtObject read FStartY1 write SetFStartY1;
  end;

  TCommandSetBackgroundColor = class(TCommand)
  private
    FFigure : TExtObject;
    FNewColor : TExtObject;
    FOldColor : TExtObject;
    procedure SetFFigure(Value : TExtObject);
    procedure SetFNewColor(Value : TExtObject);
    procedure SetFOldColor(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Figure : TExtObject; Color : TExtObject);
    function Execute : TExtFunction;
    function Redo : TExtFunction;
    function Undo : TExtFunction;
    destructor Destroy; override;
    property Figure : TExtObject read FFigure write SetFFigure;
    property NewColor : TExtObject read FNewColor write SetFNewColor;
    property OldColor : TExtObject read FOldColor write SetFOldColor;
  end;

  TPropertyWindow = class(TWindowFigure)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function CreateLabel(Text : string; X : Integer; Y : Integer) : TExtFunction;
    function GetCurrentSelection : TExtFunction;
    function OnSelectionChanged(Figure : TFigure) : TExtFunction;
  end;

  TDialog = class(TWindowFigure)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Title : string);
    function OnCancel : TExtFunction;
    function OnOk : TExtFunction;
    function OnSetDocumentDirty : TExtFunction;
    function SetDimension(W : Integer; H : Integer) : TExtFunction;
    function SetFocus : TExtFunction;
  end;

  TResizeHandle = class(TRectangle)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Workflow : TExtObject; TypeJS : TExtObject);
    function GetSnapToDirection : TExtFunction;
    function OnDragstart(X : Integer; Y : Integer) : TExtFunction;
    function OnKeyDown(KeyCode : Integer; Ctrl : TExtObject) : TExtFunction;
    function SetCanDrag(Flag : Boolean) : TExtFunction;
    function SetPosition(XPos : Integer; YPos : Integer) : TExtFunction;
  end;

  TToolPalette = class(TWindowFigure)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Title : TExtObject);
    function AddChild(Item : TExtObject) : TExtFunction;
    function GetActiveTool : TExtFunction;
    function GetChild(Id : string) : TExtFunction;
    function SetActiveTool(Tool : TExtObject) : TExtFunction;
    function SetDimension(W : Integer; H : Integer) : TExtFunction;
  end;

  TSVGFigure = class(TNode)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Width : Integer; Height : Integer);
    function GetBackgroundColor : TExtFunction;
    function GetColor : TExtFunction;
    function SetBackgroundColor(Color : TColor) : TExtFunction;
    function SetColor(Color : TColor) : TExtFunction;
    function SetDimension(W : Integer; H : Integer) : TExtFunction;
    function SetLineWidth(W : Integer) : TExtFunction;
  end;

  TVectorFigure = class(TNode)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function GetBackgroundColor : TExtFunction;
    function GetColor : TExtFunction;
    function SetBackgroundColor(Color : TColor) : TExtFunction;
    function SetColor(Color : TColor) : TExtFunction;
    function SetDimension(W : Integer; H : Integer) : TExtFunction;
    function SetLineWidth(W : Integer) : TExtFunction;
  end;

  TFanConnectionRouter = class(TNullConnectionRouter)
  private
    FTypeJS : TExtObject;
    procedure SetFTypeJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function Route(Conn : TExtObject) : TExtFunction;
    function RouteCollision(Conn : TExtObject; Index : Integer) : TExtFunction;
    function RouteNormal(Conn : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property TypeJS : TExtObject read FTypeJS write SetFTypeJS;
  end;

  TImageFigure = class(TNode)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Url : TExtObject);
    function IsResizeable : TExtFunction;
    function SetImage(Url : string) : TExtFunction;
  end;

  TManhattanMidpointLocator = class(TConnectionLocator)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Connection : TExtObject);
    function Relocate(Target : TFigure) : TExtFunction;
  end;

  TCompartmentFigure = class(TNode)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function AddChild(Figure : TFigure) : TExtFunction;
    function GetChildren : TExtFunction;
    function OnFigureDrop(Figure : TFigure) : TExtFunction;
    function OnFigureEnter(Figure : TFigure) : TExtFunction;
    function RemoveChild(Figure : TFigure) : TExtFunction;
    function SetPosition(XPos : Integer; YPos : Integer) : TExtFunction;
    function SetZOrder(Index : Integer) : TExtFunction;
  end;

  TGraphicalViewer = class(TWorkflow)
  private
    FFactory : TExtObject;
    FInitDone : TExtObject;
    FModel : TExtObject;
    procedure SetFFactory(Value : TExtObject);
    procedure SetFInitDone(Value : TExtObject);
    procedure SetFModel(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Id : string);
    function SetEditPartFactory(Factory : TExtObject) : TExtFunction;
    function SetModel(Model : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property Factory : TExtObject read FFactory write SetFFactory;
    property InitDone : TExtObject read FInitDone write SetFInitDone;
    property Model : TExtObject read FModel write SetFModel;
  end;

  TPort = class(TRectangle)
  private
    FConnectedUIRepresentation : TExtObject;
    FCurrentUIRepresentation : TExtObject;
    FDisconnectedUIRepresentation : TExtObject;
    FHideIfConnected : TExtObject;
    FUiRepresentationAdded : TExtObject;
    procedure SetFConnectedUIRepresentation(Value : TExtObject);
    procedure SetFCurrentUIRepresentation(Value : TExtObject);
    procedure SetFDisconnectedUIRepresentation(Value : TExtObject);
    procedure SetFHideIfConnected(Value : TExtObject);
    procedure SetFUiRepresentationAdded(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(DisconnectedUIRepresentation : TExtObject; ConnectedUIRepresentation : TExtObject);
    function AttachMoveListener(Figure : TFigure) : TExtFunction;
    function CreateCommand(Request : TEditPolicy) : TExtFunction;
    function DetachMoveListener(Figure : TFigure) : TExtFunction;
    function GetAbsoluteBounds : TExtFunction;
    function GetAbsolutePosition : TExtFunction;
    function GetAbsoluteX : TExtFunction;
    function GetAbsoluteY : TExtFunction;
    function GetBackgroundColor : TExtFunction;
    function GetColor : TExtFunction;
    function GetConnections : TExtFunction;
    function GetCoronaWidth : TExtFunction;
    function GetLineWidth : TExtFunction;
    function GetName : TExtFunction;
    function GetParent : TExtFunction;
    function IsOver(IX : Integer; IY : Integer) : TExtFunction;
    function OnOtherFigureMoved(Figure : TFigure) : TExtFunction;
    function SetBackgroundColor(Color : TColor) : TExtFunction;
    function SetColor(Color : TColor) : TExtFunction;
    function SetCoronaWidth(Width : Integer) : TExtFunction;
    function SetDimension(Width : Integer; Height : Integer) : TExtFunction;
    function SetHideIfConnected(Flag : Boolean) : TExtFunction;
    function SetLineWidth(Width : Integer) : TExtFunction;
    function SetName(Name : string) : TExtFunction;
    function SetPosition(XPos : Integer; YPos : Integer) : TExtFunction;
    function SetUiRepresentation(Figure : TFigure) : TExtFunction;
    function SetZOrderBaseIndex(Index : Integer) : TExtFunction;
    destructor Destroy; override;
    property ConnectedUIRepresentation : TExtObject read FConnectedUIRepresentation write SetFConnectedUIRepresentation;
    property CurrentUIRepresentation : TExtObject read FCurrentUIRepresentation write SetFCurrentUIRepresentation;
    property DisconnectedUIRepresentation : TExtObject read FDisconnectedUIRepresentation write SetFDisconnectedUIRepresentation;
    property HideIfConnected : TExtObject read FHideIfConnected write SetFHideIfConnected;
    property UiRepresentationAdded : TExtObject read FUiRepresentationAdded write SetFUiRepresentationAdded;
  end;

  TInputPort = class(TPort)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(UiRepresentation : TExtObject);
    function CreateCommand(Request : TEditPolicy) : TExtFunction;
  end;

  TPropertyDialog = class(TDialog)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Figure : TExtObject; PropertyName : string; LabelJS : TExtObject);
    function OnOk : TExtFunction;
  end;

  TColorDialog = class(TDialog)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function OnOk : TExtFunction;
  end;

  TOutputPort = class(TPort)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(UiRepresentation : TExtObject);
    function CreateCommand(Request : TEditPolicy) : TExtFunction;
    function GetFanOut : TExtFunction;
    function GetMaxFanOut : TExtFunction;
    function SetMaxFanOut(Count : TExtObject) : TExtFunction;
  end;

  TAnnotationDialog = class(TDialog)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(AnnotationFigure : TAnnotation);
    function OnOk : TExtFunction;
  end;

  TOval = class(TVectorFigure)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
  end;

  TInputDialog = class(TDialog)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function OnCancel : TExtFunction;
    function OnOk : TExtFunction;
  end;

  TCircle = class(TOval)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Radius : Integer);
    function IsStrechable : TExtFunction;
    function SetDimension(W : Integer; H : Integer) : TExtFunction;
  end;

  TBackgroundColorDialog = class(TColorDialog)
  private
    FFigure : TExtObject;
    procedure SetFFigure(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Figure : TExtObject);
    destructor Destroy; override;
    property Figure : TExtObject read FFigure write SetFFigure;
  end;

  TLineColorDialog = class(TColorDialog)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Figure : TExtObject);
    function OnOk : TExtFunction;
  end;

implementation

function TDropTargetConstruct.JSClassName : string; begin
  Result := 'DropTarget.construct';
end;

{$IFDEF FPC}constructor TDropTargetConstruct.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TDraggablePrototypeConstruct.JSClassName : string; begin
  Result := 'Draggable.prototype.construct';
end;

{$IFDEF FPC}constructor TDraggablePrototypeConstruct.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TDraggable.JSClassName : string; begin
  Result := 'Draggable';
end;

{$IFDEF FPC}constructor TDraggable.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TDraggable.Create(OElement : THTMLElement; IConstraints : Integer); begin
  CreateVar(JSClassName + '(' + VarToJSON([OElement, false, IConstraints]) + ');');
  InitDefaults;
end;

function TDraggable.DetachEventHandlers : TExtFunction; begin
  JSCode(JSName + '.detachEventHandlers();', 'TDraggable');
  Result := Self;
end;

function TDraggable.GetDropTarget(X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.getDropTarget(' + VarToJSON([X, Y]) + ');', 'TDraggable');
  Result := Self;
end;

function TDraggable.GetLeft : TExtFunction; begin
  JSCode(JSName + '.getLeft();', 'TDraggable');
  Result := Self;
end;

function TDraggable.GetTop : TExtFunction; begin
  JSCode(JSName + '.getTop();', 'TDraggable');
  Result := Self;
end;

function TDropTarget.JSClassName : string; begin
  Result := 'DropTarget';
end;

{$IFDEF FPC}constructor TDropTarget.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TDropTarget.Create(OElement : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([OElement, false]) + ');');
  InitDefaults;
end;

function TDropTarget.GetHeight : TExtFunction; begin
  JSCode(JSName + '.getHeight();', 'TDropTarget');
  Result := Self;
end;

function TDropTarget.GetLeft : TExtFunction; begin
  JSCode(JSName + '.getLeft();', 'TDropTarget');
  Result := Self;
end;

function TDropTarget.GetTop : TExtFunction; begin
  JSCode(JSName + '.getTop();', 'TDropTarget');
  Result := Self;
end;

function TDropTarget.GetWidth : TExtFunction; begin
  JSCode(JSName + '.getWidth();', 'TDropTarget');
  Result := Self;
end;

procedure TEditPolicy.SetFPolicy(Value : TExtObject); begin
  FPolicy := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.policy=' + VarToJSON([Value, false]) + ';');
end;

procedure TEditPolicy.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TEditPolicy.JSClassName : string; begin
  Result := 'EditPolicy';
end;

class function TEditPolicy.CONNECT : TExtObject;
const
  lCONNECT : TExtObject = nil;
begin
  if lCONNECT = nil then lCONNECT := TExtObject.CreateSingleton('EditPolicy.CONNECT');
  Result := lCONNECT
end;

class function TEditPolicy.DELETE : TExtObject;
const
  lDELETE : TExtObject = nil;
begin
  if lDELETE = nil then lDELETE := TExtObject.CreateSingleton('EditPolicy.DELETE');
  Result := lDELETE
end;

class function TEditPolicy.MOVE : TExtObject;
const
  lMOVE : TExtObject = nil;
begin
  if lMOVE = nil then lMOVE := TExtObject.CreateSingleton('EditPolicy.MOVE');
  Result := lMOVE
end;

class function TEditPolicy.RESIZE : TExtObject;
const
  lRESIZE : TExtObject = nil;
begin
  if lRESIZE = nil then lRESIZE := TExtObject.CreateSingleton('EditPolicy.RESIZE');
  Result := lRESIZE
end;

procedure TEditPolicy.InitDefaults; begin
  inherited;
  FPolicy := TExtObject.CreateInternal(Self, 'policy');
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TEditPolicy.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TEditPolicy.Create(Policy : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Policy, false]) + ');');
  InitDefaults;
end;

function TEditPolicy.GetPolicy : TExtFunction; begin
  JSCode(JSName + '.getPolicy();', 'TEditPolicy');
  Result := Self;
end;

destructor TEditPolicy.Destroy; begin
  try
    FPolicy.Free;
    FTypeJS.Free;
  except end;
  inherited;
end;

procedure TEditPartFactory.SetFTypet(Value : TExtObject); begin
  FTypet := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.typet=' + VarToJSON([Value, false]) + ';');
end;

function TEditPartFactory.JSClassName : string; begin
  Result := 'EditPartFactory';
end;

procedure TEditPartFactory.InitDefaults; begin
  inherited;
  FTypet := TExtObject.CreateInternal(Self, 'typet');
end;

{$IFDEF FPC}constructor TEditPartFactory.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TEditPartFactory.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TEditPartFactory.CreateEditPart(Model : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.createEditPart(' + VarToJSON([Model, false]) + ');', 'TEditPartFactory');
  Result := Self;
end;

destructor TEditPartFactory.Destroy; begin
  try
    FTypet.Free;
  except end;
  inherited;
end;

procedure TDropTargetPrototypeConstruct.SetFElement(Value : TExtObject); begin
  FElement := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.element=' + VarToJSON([Value, false]) + ';');
end;

function TDropTargetPrototypeConstruct.JSClassName : string; begin
  Result := 'DropTarget.prototype.construct';
end;

{$IFDEF FPC}constructor TDropTargetPrototypeConstruct.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TConnectionAnchor.SetFOwner(Value : TExtObject); begin
  FOwner := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.owner=' + VarToJSON([Value, false]) + ';');
end;

procedure TConnectionAnchor.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TConnectionAnchor.JSClassName : string; begin
  Result := 'ConnectionAnchor';
end;

procedure TConnectionAnchor.InitDefaults; begin
  inherited;
  FOwner := TExtObject.CreateInternal(Self, 'owner');
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TConnectionAnchor.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TConnectionAnchor.Create(Owner : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Owner, false]) + ');');
  InitDefaults;
end;

function TConnectionAnchor.GetBox : TExtFunction; begin
  JSCode(JSName + '.getBox();', 'TConnectionAnchor');
  Result := Self;
end;

function TConnectionAnchor.GetLocation(Reference : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getLocation(' + VarToJSON([Reference, false]) + ');', 'TConnectionAnchor');
  Result := Self;
end;

function TConnectionAnchor.GetOwner : TExtFunction; begin
  JSCode(JSName + '.getOwner();', 'TConnectionAnchor');
  Result := Self;
end;

function TConnectionAnchor.GetReferencePoint : TExtFunction; begin
  JSCode(JSName + '.getReferencePoint();', 'TConnectionAnchor');
  Result := Self;
end;

function TConnectionAnchor.SetOwner(Owner : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setOwner(' + VarToJSON([Owner, false]) + ');', 'TConnectionAnchor');
  Result := Self;
end;

destructor TConnectionAnchor.Destroy; begin
  try
    FOwner.Free;
    FTypeJS.Free;
  except end;
  inherited;
end;

procedure TCommandStackEventListener.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TCommandStackEventListener.JSClassName : string; begin
  Result := 'CommandStackEventListener';
end;

procedure TCommandStackEventListener.InitDefaults; begin
  inherited;
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TCommandStackEventListener.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TCommandStackEventListener.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TCommandStackEventListener.StackChanged(Event : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.stackChanged(' + VarToJSON([Event, false]) + ');', 'TCommandStackEventListener');
  Result := Self;
end;

destructor TCommandStackEventListener.Destroy; begin
  try
    FTypeJS.Free;
  except end;
  inherited;
end;

procedure TCommandStackEvent.SetFCommand(Value : TExtObject); begin
  FCommand := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.command=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandStackEvent.SetFDetails(Value : TExtObject); begin
  FDetails := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.details=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandStackEvent.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TCommandStackEvent.JSClassName : string; begin
  Result := 'CommandStackEvent';
end;

procedure TCommandStackEvent.InitDefaults; begin
  inherited;
  FCommand := TExtObject.CreateInternal(Self, 'command');
  FDetails := TExtObject.CreateInternal(Self, 'details');
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TCommandStackEvent.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TCommandStackEvent.Create(Command : TExtObject; Details : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Command, false, Details, false]) + ');');
  InitDefaults;
end;

function TCommandStackEvent.GetCommand : TExtFunction; begin
  JSCode(JSName + '.getCommand();', 'TCommandStackEvent');
  Result := Self;
end;

function TCommandStackEvent.GetDetails : TExtFunction; begin
  JSCode(JSName + '.getDetails();', 'TCommandStackEvent');
  Result := Self;
end;

function TCommandStackEvent.IsPostChangeEvent : TExtFunction; begin
  JSCode(JSName + '.isPostChangeEvent();', 'TCommandStackEvent');
  Result := Self;
end;

function TCommandStackEvent.IsPreChangeEvent : TExtFunction; begin
  JSCode(JSName + '.isPreChangeEvent();', 'TCommandStackEvent');
  Result := Self;
end;

destructor TCommandStackEvent.Destroy; begin
  try
    FCommand.Free;
    FDetails.Free;
    FTypeJS.Free;
  except end;
  inherited;
end;

procedure TConnectionDecorator.SetFBackgroundColor(Value : TExtObject); begin
  FBackgroundColor := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.backgroundColor=' + VarToJSON([Value, false]) + ';');
end;

procedure TConnectionDecorator.SetFColor(Value : TExtObject); begin
  FColor := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.color=' + VarToJSON([Value, false]) + ';');
end;

procedure TConnectionDecorator.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TConnectionDecorator.JSClassName : string; begin
  Result := 'ConnectionDecorator';
end;

procedure TConnectionDecorator.InitDefaults; begin
  inherited;
  FBackgroundColor := TExtObject.CreateInternal(Self, 'backgroundColor');
  FColor := TExtObject.CreateInternal(Self, 'color');
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TConnectionDecorator.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TConnectionDecorator.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TConnectionDecorator.Paint(G : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.paint(' + VarToJSON([G, false]) + ');', 'TConnectionDecorator');
  Result := Self;
end;

function TConnectionDecorator.SetBackgroundColor(C : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setBackgroundColor(' + VarToJSON([C, false]) + ');', 'TConnectionDecorator');
  Result := Self;
end;

function TConnectionDecorator.SetColor(C : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setColor(' + VarToJSON([C, false]) + ');', 'TConnectionDecorator');
  Result := Self;
end;

destructor TConnectionDecorator.Destroy; begin
  try
    FBackgroundColor.Free;
    FColor.Free;
    FTypeJS.Free;
  except end;
  inherited;
end;

function TDraggableConstruct.JSClassName : string; begin
  Result := 'Draggable.construct';
end;

{$IFDEF FPC}constructor TDraggableConstruct.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TDragDropEvent.JSClassName : string; begin
  Result := 'DragDropEvent';
end;

{$IFDEF FPC}constructor TDragDropEvent.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TDragDropEvent.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TDragDropEvent.InitDragDropEvent(SType : string; BCancelable : Boolean; ORelatedTarget : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.initDragDropEvent(' + VarToJSON([SType, BCancelable, ORelatedTarget, false]) + ');', 'TDragDropEvent');
  Result := Self;
end;

procedure TConnectionRouter.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TConnectionRouter.JSClassName : string; begin
  Result := 'ConnectionRouter';
end;

procedure TConnectionRouter.InitDefaults; begin
  inherited;
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TConnectionRouter.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TConnectionRouter.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TConnectionRouter.GetDirection(R : TExtObject; P : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getDirection(' + VarToJSON([R, false, P, false]) + ');', 'TConnectionRouter');
  Result := Self;
end;

function TConnectionRouter.GetEndDirection(Conn : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getEndDirection(' + VarToJSON([Conn, false]) + ');', 'TConnectionRouter');
  Result := Self;
end;

function TConnectionRouter.GetStartDirection(Conn : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getStartDirection(' + VarToJSON([Conn, false]) + ');', 'TConnectionRouter');
  Result := Self;
end;

function TConnectionRouter.Route(Connection : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.route(' + VarToJSON([Connection, false]) + ');', 'TConnectionRouter');
  Result := Self;
end;

destructor TConnectionRouter.Destroy; begin
  try
    FTypeJS.Free;
  except end;
  inherited;
end;

procedure TPropertyChangeEvent.SetFModel(Value : TExtObject); begin
  FModel := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.model=' + VarToJSON([Value, false]) + ';');
end;

procedure TPropertyChangeEvent.SetFNewValue(Value : TExtObject); begin
  FNewValue := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.newValue=' + VarToJSON([Value, false]) + ';');
end;

procedure TPropertyChangeEvent.SetFOldValue(Value : TExtObject); begin
  FOldValue := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.oldValue=' + VarToJSON([Value, false]) + ';');
end;

procedure TPropertyChangeEvent.SetFPropertyJS(Value : TExtObject); begin
  FPropertyJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.property=' + VarToJSON([Value, false]) + ';');
end;

function TPropertyChangeEvent.JSClassName : string; begin
  Result := 'PropertyChangeEvent';
end;

procedure TPropertyChangeEvent.InitDefaults; begin
  inherited;
  FModel := TExtObject.CreateInternal(Self, 'model');
  FNewValue := TExtObject.CreateInternal(Self, 'newValue');
  FOldValue := TExtObject.CreateInternal(Self, 'oldValue');
  FPropertyJS := TExtObject.CreateInternal(Self, 'property');
end;

{$IFDEF FPC}constructor TPropertyChangeEvent.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TPropertyChangeEvent.Create(Model : TExtObject; PropertyJS : TExtObject; OldValue : TExtObject; NewValue : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Model, false, PropertyJS, false, OldValue, false, NewValue, false]) + ');');
  InitDefaults;
end;

destructor TPropertyChangeEvent.Destroy; begin
  try
    FModel.Free;
    FNewValue.Free;
    FOldValue.Free;
    FPropertyJS.Free;
  except end;
  inherited;
end;

procedure TPoint.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TPoint.JSClassName : string; begin
  Result := 'Point';
end;

procedure TPoint.InitDefaults; begin
  inherited;
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TPoint.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TPoint.Create(X : Integer; Y : Integer); begin
  CreateVar(JSClassName + '(' + VarToJSON([X, Y]) + ');');
  InitDefaults;
end;

function TPoint.Equals(O : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.equals(' + VarToJSON([O, false]) + ');', 'TPoint');
  Result := Self;
end;

function TPoint.GetDistance(Other : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getDistance(' + VarToJSON([Other, false]) + ');', 'TPoint');
  Result := Self;
end;

function TPoint.GetPersistentAttributes : TExtFunction; begin
  JSCode(JSName + '.getPersistentAttributes();', 'TPoint');
  Result := Self;
end;

function TPoint.GetPosition(P : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getPosition(' + VarToJSON([P, false]) + ');', 'TPoint');
  Result := Self;
end;

function TPoint.GetTranslated(Other : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getTranslated(' + VarToJSON([Other, false]) + ');', 'TPoint');
  Result := Self;
end;

function TPoint.GetX : TExtFunction; begin
  JSCode(JSName + '.getX();', 'TPoint');
  Result := Self;
end;

function TPoint.GetY : TExtFunction; begin
  JSCode(JSName + '.getY();', 'TPoint');
  Result := Self;
end;

destructor TPoint.Destroy; begin
  try
    FTypeJS.Free;
  except end;
  inherited;
end;

procedure TMenuItem.SetFAction(Value : TExtObject); begin
  FAction := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.action=' + VarToJSON([Value, false]) + ';');
end;

procedure TMenuItem.SetFIconUrl(Value : TExtObject); begin
  FIconUrl := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.iconUrl=' + VarToJSON([Value, false]) + ';');
end;

procedure TMenuItem.SetFLabelJS(Value : TExtObject); begin
  FLabelJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.label=' + VarToJSON([Value, false]) + ';');
end;

procedure TMenuItem.SetFParentMenu(Value : TExtObject); begin
  FParentMenu := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.parentMenu=' + VarToJSON([Value, false]) + ';');
end;

function TMenuItem.JSClassName : string; begin
  Result := 'MenuItem';
end;

procedure TMenuItem.InitDefaults; begin
  inherited;
  FAction := TExtObject.CreateInternal(Self, 'action');
  FIconUrl := TExtObject.CreateInternal(Self, 'iconUrl');
  FLabelJS := TExtObject.CreateInternal(Self, 'label');
  FParentMenu := TExtObject.CreateInternal(Self, 'parentMenu');
end;

{$IFDEF FPC}constructor TMenuItem.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TMenuItem.Create(LabelJS : TExtObject; IconUrl : TExtObject; Action : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([LabelJS, false, IconUrl, false, Action, false]) + ');');
  InitDefaults;
end;

function TMenuItem.GetLabel : TExtFunction; begin
  JSCode(JSName + '.getLabel();', 'TMenuItem');
  Result := Self;
end;

function TMenuItem.IsEnabled : TExtFunction; begin
  JSCode(JSName + '.isEnabled();', 'TMenuItem');
  Result := Self;
end;

destructor TMenuItem.Destroy; begin
  try
    FAction.Free;
    FIconUrl.Free;
    FLabelJS.Free;
    FParentMenu.Free;
  except end;
  inherited;
end;

procedure TSnapToGeometryEntry.SetFLocation(Value : TExtObject); begin
  FLocation := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.location=' + VarToJSON([Value, false]) + ';');
end;

procedure TSnapToGeometryEntry.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TSnapToGeometryEntry.JSClassName : string; begin
  Result := 'SnapToGeometryEntry';
end;

procedure TSnapToGeometryEntry.InitDefaults; begin
  inherited;
  FLocation := TExtObject.CreateInternal(Self, 'location');
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TSnapToGeometryEntry.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TSnapToGeometryEntry.Create(TypeJS : TExtObject; Location : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([TypeJS, false, Location, false]) + ');');
  InitDefaults;
end;

function TSnapToGeometryEntry.GetLocation : TExtFunction; begin
  JSCode(JSName + '.getLocation();', 'TSnapToGeometryEntry');
  Result := Self;
end;

function TSnapToGeometryEntry.GetType : TExtFunction; begin
  JSCode(JSName + '.getType();', 'TSnapToGeometryEntry');
  Result := Self;
end;

destructor TSnapToGeometryEntry.Destroy; begin
  try
    FLocation.Free;
    FTypeJS.Free;
  except end;
  inherited;
end;

procedure TUUID.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TUUID.JSClassName : string; begin
  Result := 'UUID';
end;

procedure TUUID.InitDefaults; begin
  inherited;
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TUUID.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TUUID.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

destructor TUUID.Destroy; begin
  try
    FTypeJS.Free;
  except end;
  inherited;
end;

function TToolGeneric.JSClassName : string; begin
  Result := 'ToolGeneric';
end;

{$IFDEF FPC}constructor TToolGeneric.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TToolGeneric.Create(Palette : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Palette, false]) + ');');
  InitDefaults;
end;

function TToolGeneric.Execute(X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.execute(' + VarToJSON([X, Y]) + ');', 'TToolGeneric');
  Result := Self;
end;

function TToolGeneric.GetHeight : TExtFunction; begin
  JSCode(JSName + '.getHeight();', 'TToolGeneric');
  Result := Self;
end;

function TToolGeneric.GetImageUrl : TExtFunction; begin
  JSCode(JSName + '.getImageUrl();', 'TToolGeneric');
  Result := Self;
end;

function TToolGeneric.GetPosition : TExtFunction; begin
  JSCode(JSName + '.getPosition();', 'TToolGeneric');
  Result := Self;
end;

function TToolGeneric.GetWidth : TExtFunction; begin
  JSCode(JSName + '.getWidth();', 'TToolGeneric');
  Result := Self;
end;

function TToolGeneric.GetX : TExtFunction; begin
  JSCode(JSName + '.getX();', 'TToolGeneric');
  Result := Self;
end;

function TToolGeneric.GetY : TExtFunction; begin
  JSCode(JSName + '.getY();', 'TToolGeneric');
  Result := Self;
end;

function TToolGeneric.SetDimension(W : Integer; H : Integer) : TExtFunction; begin
  JSCode(JSName + '.setDimension(' + VarToJSON([W, H]) + ');', 'TToolGeneric');
  Result := Self;
end;

function TToolGeneric.SetPosition(XPos : Integer; YPos : Integer) : TExtFunction; begin
  JSCode(JSName + '.setPosition(' + VarToJSON([XPos, YPos]) + ');', 'TToolGeneric');
  Result := Self;
end;

function TToolGeneric.SetTooltip(TooltipText : string) : TExtFunction; begin
  JSCode(JSName + '.setTooltip(' + VarToJSON([TooltipText]) + ');', 'TToolGeneric');
  Result := Self;
end;

procedure TSnapToHelper.SetFWorkflow(Value : TExtObject); begin
  FWorkflow := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.workflow=' + VarToJSON([Value, false]) + ';');
end;

function TSnapToHelper.JSClassName : string; begin
  Result := 'SnapToHelper';
end;

class function TSnapToHelper.CENTER : TExtObject;
const
  lCENTER : TExtObject = nil;
begin
  if lCENTER = nil then lCENTER := TExtObject.CreateSingleton('SnapToHelper.CENTER');
  Result := lCENTER
end;

class function TSnapToHelper.EAST : TExtObject;
const
  lEAST : TExtObject = nil;
begin
  if lEAST = nil then lEAST := TExtObject.CreateSingleton('SnapToHelper.EAST');
  Result := lEAST
end;

class function TSnapToHelper.EAST_WEST : TExtObject;
const
  lEAST_WEST : TExtObject = nil;
begin
  if lEAST_WEST = nil then lEAST_WEST := TExtObject.CreateSingleton('SnapToHelper.EASTWEST');
  Result := lEAST_WEST
end;

class function TSnapToHelper.NORTH : TExtObject;
const
  lNORTH : TExtObject = nil;
begin
  if lNORTH = nil then lNORTH := TExtObject.CreateSingleton('SnapToHelper.NORTH');
  Result := lNORTH
end;

class function TSnapToHelper.NORTH_EAST : TExtObject;
const
  lNORTH_EAST : TExtObject = nil;
begin
  if lNORTH_EAST = nil then lNORTH_EAST := TExtObject.CreateSingleton('SnapToHelper.NORTHEAST');
  Result := lNORTH_EAST
end;

class function TSnapToHelper.NORTH_SOUTH : TExtObject;
const
  lNORTH_SOUTH : TExtObject = nil;
begin
  if lNORTH_SOUTH = nil then lNORTH_SOUTH := TExtObject.CreateSingleton('SnapToHelper.NORTHSOUTH');
  Result := lNORTH_SOUTH
end;

class function TSnapToHelper.NORTH_WEST : TExtObject;
const
  lNORTH_WEST : TExtObject = nil;
begin
  if lNORTH_WEST = nil then lNORTH_WEST := TExtObject.CreateSingleton('SnapToHelper.NORTHWEST');
  Result := lNORTH_WEST
end;

class function TSnapToHelper.NSEW : TExtObject;
const
  lNSEW : TExtObject = nil;
begin
  if lNSEW = nil then lNSEW := TExtObject.CreateSingleton('SnapToHelper.NSEW');
  Result := lNSEW
end;

class function TSnapToHelper.SOUTH : TExtObject;
const
  lSOUTH : TExtObject = nil;
begin
  if lSOUTH = nil then lSOUTH := TExtObject.CreateSingleton('SnapToHelper.SOUTH');
  Result := lSOUTH
end;

class function TSnapToHelper.SOUTH_EAST : TExtObject;
const
  lSOUTH_EAST : TExtObject = nil;
begin
  if lSOUTH_EAST = nil then lSOUTH_EAST := TExtObject.CreateSingleton('SnapToHelper.SOUTHEAST');
  Result := lSOUTH_EAST
end;

class function TSnapToHelper.SOUTH_WEST : TExtObject;
const
  lSOUTH_WEST : TExtObject = nil;
begin
  if lSOUTH_WEST = nil then lSOUTH_WEST := TExtObject.CreateSingleton('SnapToHelper.SOUTHWEST');
  Result := lSOUTH_WEST
end;

class function TSnapToHelper.WEST : TExtObject;
const
  lWEST : TExtObject = nil;
begin
  if lWEST = nil then lWEST := TExtObject.CreateSingleton('SnapToHelper.WEST');
  Result := lWEST
end;

procedure TSnapToHelper.InitDefaults; begin
  inherited;
  FWorkflow := TExtObject.CreateInternal(Self, 'workflow');
end;

{$IFDEF FPC}constructor TSnapToHelper.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TSnapToHelper.Create(Workflow : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Workflow, false]) + ');');
  InitDefaults;
end;

function TSnapToHelper.SnapPoint(SnapOrientation : TExtObject; InputPoint : TExtObject; ResultPoint : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.snapPoint(' + VarToJSON([SnapOrientation, false, InputPoint, false, ResultPoint, false]) + ');', 'TSnapToHelper');
  Result := Self;
end;

function TSnapToHelper.SnapRectangle(InputBounds : TExtObject; ResultBounds : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.snapRectangle(' + VarToJSON([InputBounds, false, ResultBounds, false]) + ');', 'TSnapToHelper');
  Result := Self;
end;

destructor TSnapToHelper.Destroy; begin
  try
    FWorkflow.Free;
  except end;
  inherited;
end;

function TFigure.JSClassName : string; begin
  Result := 'Figure';
end;

{$IFDEF FPC}constructor TFigure.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TFigure.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TFigure.AttachMoveListener(Figure : TFigure) : TExtFunction; begin
  JSCode(JSName + '.attachMoveListener(' + VarToJSON([Figure, false]) + ');', 'TFigure');
  Result := Self;
end;

function TFigure.CreateCommand(Request : TEditPolicy) : TExtFunction; begin
  JSCode(JSName + '.createCommand(' + VarToJSON([Request, false]) + ');', 'TFigure');
  Result := Self;
end;

function TFigure.DetachMoveListener(Figure : TFigure) : TExtFunction; begin
  JSCode(JSName + '.detachMoveListener(' + VarToJSON([Figure, false]) + ');', 'TFigure');
  Result := Self;
end;

function TFigure.GetAbsoluteX : TExtFunction; begin
  JSCode(JSName + '.getAbsoluteX();', 'TFigure');
  Result := Self;
end;

function TFigure.GetAbsoluteY : TExtFunction; begin
  JSCode(JSName + '.getAbsoluteY();', 'TFigure');
  Result := Self;
end;

function TFigure.GetBounds : TExtFunction; begin
  JSCode(JSName + '.getBounds();', 'TFigure');
  Result := Self;
end;

function TFigure.GetCanSnapToHelper : TExtFunction; begin
  JSCode(JSName + '.getCanSnapToHelper();', 'TFigure');
  Result := Self;
end;

function TFigure.GetContextMenu : TExtFunction; begin
  JSCode(JSName + '.getContextMenu();', 'TFigure');
  Result := Self;
end;

function TFigure.GetHeight : TExtFunction; begin
  JSCode(JSName + '.getHeight();', 'TFigure');
  Result := Self;
end;

function TFigure.GetId : TExtFunction; begin
  JSCode(JSName + '.getId();', 'TFigure');
  Result := Self;
end;

function TFigure.GetMinHeight : TExtFunction; begin
  JSCode(JSName + '.getMinHeight();', 'TFigure');
  Result := Self;
end;

function TFigure.GetMinWidth : TExtFunction; begin
  JSCode(JSName + '.getMinWidth();', 'TFigure');
  Result := Self;
end;

function TFigure.GetModel : TExtFunction; begin
  JSCode(JSName + '.getModel();', 'TFigure');
  Result := Self;
end;

function TFigure.GetParent : TExtFunction; begin
  JSCode(JSName + '.getParent();', 'TFigure');
  Result := Self;
end;

function TFigure.GetPosition : TExtFunction; begin
  JSCode(JSName + '.getPosition();', 'TFigure');
  Result := Self;
end;

function TFigure.GetProperties : TExtFunction; begin
  JSCode(JSName + '.getProperties();', 'TFigure');
  Result := Self;
end;

function TFigure.GetProperty(Key : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getProperty(' + VarToJSON([Key, false]) + ');', 'TFigure');
  Result := Self;
end;

function TFigure.GetSnapToGridAnchor : TExtFunction; begin
  JSCode(JSName + '.getSnapToGridAnchor();', 'TFigure');
  Result := Self;
end;

function TFigure.GetWidth : TExtFunction; begin
  JSCode(JSName + '.getWidth();', 'TFigure');
  Result := Self;
end;

function TFigure.GetWorkflow : TExtFunction; begin
  JSCode(JSName + '.getWorkflow();', 'TFigure');
  Result := Self;
end;

function TFigure.GetX : TExtFunction; begin
  JSCode(JSName + '.getX();', 'TFigure');
  Result := Self;
end;

function TFigure.GetY : TExtFunction; begin
  JSCode(JSName + '.getY();', 'TFigure');
  Result := Self;
end;

function TFigure.GetZOrder : TExtFunction; begin
  JSCode(JSName + '.getZOrder();', 'TFigure');
  Result := Self;
end;

function TFigure.HasFixedPosition : TExtFunction; begin
  JSCode(JSName + '.hasFixedPosition();', 'TFigure');
  Result := Self;
end;

function TFigure.IsDeleteable : TExtFunction; begin
  JSCode(JSName + '.isDeleteable();', 'TFigure');
  Result := Self;
end;

function TFigure.IsOver(IX : Integer; IY : Integer) : TExtFunction; begin
  JSCode(JSName + '.isOver(' + VarToJSON([IX, IY]) + ');', 'TFigure');
  Result := Self;
end;

function TFigure.IsResizeable : TExtFunction; begin
  JSCode(JSName + '.isResizeable();', 'TFigure');
  Result := Self;
end;

function TFigure.IsSelectable : TExtFunction; begin
  JSCode(JSName + '.isSelectable();', 'TFigure');
  Result := Self;
end;

function TFigure.IsStrechable : TExtFunction; begin
  JSCode(JSName + '.isStrechable();', 'TFigure');
  Result := Self;
end;

function TFigure.OnDoubleClick : TExtFunction; begin
  JSCode(JSName + '.onDoubleClick();', 'TFigure');
  Result := Self;
end;

function TFigure.OnDragstart(X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.onDragstart(' + VarToJSON([X, Y]) + ');', 'TFigure');
  Result := Self;
end;

function TFigure.OnKeyDown(KeyCode : Integer; Ctrl : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.onKeyDown(' + VarToJSON([KeyCode, Ctrl, false]) + ');', 'TFigure');
  Result := Self;
end;

function TFigure.OnMouseEnter : TExtFunction; begin
  JSCode(JSName + '.onMouseEnter();', 'TFigure');
  Result := Self;
end;

function TFigure.OnMouseLeave : TExtFunction; begin
  JSCode(JSName + '.onMouseLeave();', 'TFigure');
  Result := Self;
end;

function TFigure.SetAlpha(Percent : Double) : TExtFunction; begin
  JSCode(JSName + '.setAlpha(' + VarToJSON([Percent]) + ');', 'TFigure');
  Result := Self;
end;

function TFigure.SetBorder(Border : TBorder) : TExtFunction; begin
  JSCode(JSName + '.setBorder(' + VarToJSON([Border, false]) + ');', 'TFigure');
  Result := Self;
end;

function TFigure.SetCanDrag(Flag : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setCanDrag(' + VarToJSON([Flag]) + ');', 'TFigure');
  Result := Self;
end;

function TFigure.SetCanSnapToHelper(Flag : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setCanSnapToHelper(' + VarToJSON([Flag]) + ');', 'TFigure');
  Result := Self;
end;

function TFigure.SetDeleteable(Flag : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setDeleteable(' + VarToJSON([Flag]) + ');', 'TFigure');
  Result := Self;
end;

function TFigure.SetDimension(W : Integer; H : Integer) : TExtFunction; begin
  JSCode(JSName + '.setDimension(' + VarToJSON([W, H]) + ');', 'TFigure');
  Result := Self;
end;

function TFigure.SetId(Id : string) : TExtFunction; begin
  JSCode(JSName + '.setId(' + VarToJSON([Id]) + ');', 'TFigure');
  Result := Self;
end;

function TFigure.SetModel(Model : TAbstractObjectModel) : TExtFunction; begin
  JSCode(JSName + '.setModel(' + VarToJSON([Model, false]) + ');', 'TFigure');
  Result := Self;
end;

function TFigure.SetPosition(XPos : Integer; YPos : Integer) : TExtFunction; begin
  JSCode(JSName + '.setPosition(' + VarToJSON([XPos, YPos]) + ');', 'TFigure');
  Result := Self;
end;

function TFigure.SetProperty(Key : string; Value : string) : TExtFunction; begin
  JSCode(JSName + '.setProperty(' + VarToJSON([Key, Value]) + ');', 'TFigure');
  Result := Self;
end;

function TFigure.SetResizeable(Flag : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setResizeable(' + VarToJSON([Flag]) + ');', 'TFigure');
  Result := Self;
end;

function TFigure.SetSelectable(Flag : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setSelectable(' + VarToJSON([Flag]) + ');', 'TFigure');
  Result := Self;
end;

function TFigure.SetSnapToGridAnchor(Point : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setSnapToGridAnchor(' + VarToJSON([Point, false]) + ');', 'TFigure');
  Result := Self;
end;

function TFigure.SetZOrder(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.setZOrder(' + VarToJSON([Index]) + ');', 'TFigure');
  Result := Self;
end;

function TFigure.SetZOrderBaseIndex(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.setZOrderBaseIndex(' + VarToJSON([Index]) + ');', 'TFigure');
  Result := Self;
end;

function TEventTarget.JSClassName : string; begin
  Result := 'EventTarget';
end;

{$IFDEF FPC}constructor TEventTarget.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TEventTarget.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TEventTarget.AddEventListener(SType : string; FnListener : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.addEventListener(' + VarToJSON([SType, FnListener, false]) + ');', 'TEventTarget');
  Result := Self;
end;

function TEventTarget.DispatchEvent(OEvent : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.dispatchEvent(' + VarToJSON([OEvent, false]) + ');', 'TEventTarget');
  Result := Self;
end;

function TEventTarget.RemoveEventListener(SType : string; FnListener : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.removeEventListener(' + VarToJSON([SType, FnListener, false]) + ');', 'TEventTarget');
  Result := Self;
end;

function TEvent.JSClassName : string; begin
  Result := 'Event';
end;

{$IFDEF FPC}constructor TEvent.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TEvent.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TEvent.InitEvent(SType : string; BCancelable : Boolean) : TExtFunction; begin
  JSCode(JSName + '.initEvent(' + VarToJSON([SType, BCancelable]) + ');', 'TEvent');
  Result := Self;
end;

function TEvent.PreventDefault : TExtFunction; begin
  JSCode(JSName + '.preventDefault();', 'TEvent');
  Result := Self;
end;

function TEvent.FireDOMEvent(EventType : TExtObject; Element : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.fireDOMEvent(' + VarToJSON([EventType, false, Element, false]) + ');', 'TEvent');
  Result := Self;
end;

procedure TGraphicalEditor.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

procedure TGraphicalEditor.SetFView(Value : TExtObject); begin
  FView := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.view=' + VarToJSON([Value, false]) + ';');
end;

function TGraphicalEditor.JSClassName : string; begin
  Result := 'GraphicalEditor';
end;

procedure TGraphicalEditor.InitDefaults; begin
  inherited;
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
  FView := TExtObject.CreateInternal(Self, 'view');
end;

{$IFDEF FPC}constructor TGraphicalEditor.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TGraphicalEditor.Create(Id : string); begin
  CreateVar(JSClassName + '(' + VarToJSON([Id]) + ');');
  InitDefaults;
end;

function TGraphicalEditor.GetGraphicalViewer : TExtFunction; begin
  JSCode(JSName + '.getGraphicalViewer();', 'TGraphicalEditor');
  Result := Self;
end;

function TGraphicalEditor.InitializeGraphicalViewer : TExtFunction; begin
  JSCode(JSName + '.initializeGraphicalViewer();', 'TGraphicalEditor');
  Result := Self;
end;

destructor TGraphicalEditor.Destroy; begin
  try
    FTypeJS.Free;
    FView.Free;
  except end;
  inherited;
end;

procedure TLocator.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TLocator.JSClassName : string; begin
  Result := 'Locator';
end;

procedure TLocator.InitDefaults; begin
  inherited;
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TLocator.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TLocator.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TLocator.Relocate(Target : TFigure) : TExtFunction; begin
  JSCode(JSName + '.relocate(' + VarToJSON([Target, false]) + ');', 'TLocator');
  Result := Self;
end;

destructor TLocator.Destroy; begin
  try
    FTypeJS.Free;
  except end;
  inherited;
end;

procedure TLine.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TLine.JSClassName : string; begin
  Result := 'Line';
end;

class function TLine.CoronaWidth : TExtObject;
const
  lCoronaWidth : TExtObject = nil;
begin
  if lCoronaWidth = nil then lCoronaWidth := TExtObject.CreateSingleton('Line.CoronaWidth');
  Result := lCoronaWidth
end;

class function TLine.ZOrderBaseIndex : TExtObject;
const
  lZOrderBaseIndex : TExtObject = nil;
begin
  if lZOrderBaseIndex = nil then lZOrderBaseIndex := TExtObject.CreateSingleton('Line.ZOrderBaseIndex');
  Result := lZOrderBaseIndex
end;

procedure TLine.InitDefaults; begin
  inherited;
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TLine.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TLine.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TLine.AttachMoveListener(Figure : TFigure) : TExtFunction; begin
  JSCode(JSName + '.attachMoveListener(' + VarToJSON([Figure, false]) + ');', 'TLine');
  Result := Self;
end;

function TLine.ContainsPoint(Px : Integer; Py : Integer) : TExtFunction; begin
  JSCode(JSName + '.containsPoint(' + VarToJSON([Px, Py]) + ');', 'TLine');
  Result := Self;
end;

function TLine.CreateCommand(Request : TEditPolicy) : TExtFunction; begin
  JSCode(JSName + '.createCommand(' + VarToJSON([Request, false]) + ');', 'TLine');
  Result := Self;
end;

function TLine.DetachMoveListener(Figure : TFigure) : TExtFunction; begin
  JSCode(JSName + '.detachMoveListener(' + VarToJSON([Figure, false]) + ');', 'TLine');
  Result := Self;
end;

function TLine.GetAngle : TExtFunction; begin
  JSCode(JSName + '.getAngle();', 'TLine');
  Result := Self;
end;

function TLine.GetColor : TExtFunction; begin
  JSCode(JSName + '.getColor();', 'TLine');
  Result := Self;
end;

function TLine.GetContextMenu : TExtFunction; begin
  JSCode(JSName + '.getContextMenu();', 'TLine');
  Result := Self;
end;

function TLine.GetEndPoint : TExtFunction; begin
  JSCode(JSName + '.getEndPoint();', 'TLine');
  Result := Self;
end;

function TLine.GetEndX : TExtFunction; begin
  JSCode(JSName + '.getEndX();', 'TLine');
  Result := Self;
end;

function TLine.GetEndY : TExtFunction; begin
  JSCode(JSName + '.getEndY();', 'TLine');
  Result := Self;
end;

function TLine.GetLength : TExtFunction; begin
  JSCode(JSName + '.getLength();', 'TLine');
  Result := Self;
end;

function TLine.GetModel : TExtFunction; begin
  JSCode(JSName + '.getModel();', 'TLine');
  Result := Self;
end;

function TLine.GetProperties : TExtFunction; begin
  JSCode(JSName + '.getProperties();', 'TLine');
  Result := Self;
end;

function TLine.GetProperty(Key : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getProperty(' + VarToJSON([Key, false]) + ');', 'TLine');
  Result := Self;
end;

function TLine.GetStartPoint : TExtFunction; begin
  JSCode(JSName + '.getStartPoint();', 'TLine');
  Result := Self;
end;

function TLine.GetStartX : TExtFunction; begin
  JSCode(JSName + '.getStartX();', 'TLine');
  Result := Self;
end;

function TLine.GetStartY : TExtFunction; begin
  JSCode(JSName + '.getStartY();', 'TLine');
  Result := Self;
end;

function TLine.GetWorkflow : TExtFunction; begin
  JSCode(JSName + '.getWorkflow();', 'TLine');
  Result := Self;
end;

function TLine.GetZOrder : TExtFunction; begin
  JSCode(JSName + '.getZOrder();', 'TLine');
  Result := Self;
end;

function TLine.IsDeleteable : TExtFunction; begin
  JSCode(JSName + '.isDeleteable();', 'TLine');
  Result := Self;
end;

function TLine.IsResizeable : TExtFunction; begin
  JSCode(JSName + '.isResizeable();', 'TLine');
  Result := Self;
end;

function TLine.IsSelectable : TExtFunction; begin
  JSCode(JSName + '.isSelectable();', 'TLine');
  Result := Self;
end;

function TLine.OnDoubleClick : TExtFunction; begin
  JSCode(JSName + '.onDoubleClick();', 'TLine');
  Result := Self;
end;

function TLine.SetAlpha(Percent : Double) : TExtFunction; begin
  JSCode(JSName + '.setAlpha(' + VarToJSON([Percent]) + ');', 'TLine');
  Result := Self;
end;

function TLine.SetColor(Color : TColor) : TExtFunction; begin
  JSCode(JSName + '.setColor(' + VarToJSON([Color, false]) + ');', 'TLine');
  Result := Self;
end;

function TLine.SetCoronaWidth(Width : Integer) : TExtFunction; begin
  JSCode(JSName + '.setCoronaWidth(' + VarToJSON([Width]) + ');', 'TLine');
  Result := Self;
end;

function TLine.SetDeleteable(Flag : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setDeleteable(' + VarToJSON([Flag]) + ');', 'TLine');
  Result := Self;
end;

function TLine.SetEndPoint(X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.setEndPoint(' + VarToJSON([X, Y]) + ');', 'TLine');
  Result := Self;
end;

function TLine.SetId(Id : string) : TExtFunction; begin
  JSCode(JSName + '.setId(' + VarToJSON([Id]) + ');', 'TLine');
  Result := Self;
end;

function TLine.SetLineWidth(W : Integer) : TExtFunction; begin
  JSCode(JSName + '.setLineWidth(' + VarToJSON([W]) + ');', 'TLine');
  Result := Self;
end;

function TLine.SetModel(Model : TAbstractObjectModel) : TExtFunction; begin
  JSCode(JSName + '.setModel(' + VarToJSON([Model, false]) + ');', 'TLine');
  Result := Self;
end;

function TLine.SetProperty(Key : string; Value : string) : TExtFunction; begin
  JSCode(JSName + '.setProperty(' + VarToJSON([Key, Value]) + ');', 'TLine');
  Result := Self;
end;

function TLine.SetSelectable(Flag : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setSelectable(' + VarToJSON([Flag]) + ');', 'TLine');
  Result := Self;
end;

function TLine.SetStartPoint(X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.setStartPoint(' + VarToJSON([X, Y]) + ');', 'TLine');
  Result := Self;
end;

function TLine.SetZOrder(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.setZOrder(' + VarToJSON([Index]) + ');', 'TLine');
  Result := Self;
end;

function TLine.SetDefaultCoronaWidth(Width : Integer) : TExtFunction; begin
  JSCode(JSName + '.setDefaultCoronaWidth(' + VarToJSON([Width]) + ');', 'TLine');
  Result := Self;
end;

function TLine.SetZOrderBaseIndex(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.setZOrderBaseIndex(' + VarToJSON([Index]) + ');', 'TLine');
  Result := Self;
end;

destructor TLine.Destroy; begin
  try
    FTypeJS.Free;
  except end;
  inherited;
end;

procedure TGraphics.SetFCosRadian(Value : TExtObject); begin
  FCosRadian := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.cosRadian=' + VarToJSON([Value, false]) + ';');
end;

procedure TGraphics.SetFRadian(Value : TExtObject); begin
  FRadian := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.radian=' + VarToJSON([Value, false]) + ';');
end;

procedure TGraphics.SetFSinRadian(Value : TExtObject); begin
  FSinRadian := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.sinRadian=' + VarToJSON([Value, false]) + ';');
end;

procedure TGraphics.SetFXt(Value : TExtObject); begin
  FXt := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.xt=' + VarToJSON([Value, false]) + ';');
end;

procedure TGraphics.SetFYt(Value : TExtObject); begin
  FYt := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.yt=' + VarToJSON([Value, false]) + ';');
end;

function TGraphics.JSClassName : string; begin
  Result := 'Graphics';
end;

procedure TGraphics.InitDefaults; begin
  inherited;
  FCosRadian := TExtObject.CreateInternal(Self, 'cosRadian');
  FRadian := TExtObject.CreateInternal(Self, 'radian');
  FSinRadian := TExtObject.CreateInternal(Self, 'sinRadian');
  FXt := TExtObject.CreateInternal(Self, 'xt');
  FYt := TExtObject.CreateInternal(Self, 'yt');
end;

{$IFDEF FPC}constructor TGraphics.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TGraphics.Create(JsGraphics : TExtObject; Rotation : TExtObject; Translation : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([JsGraphics, false, Rotation, false, Translation, false]) + ');');
  InitDefaults;
end;

function TGraphics.DrawLine(X1 : Integer; Y1 : Integer; X2 : Integer; Y2 : Integer) : TExtFunction; begin
  JSCode(JSName + '.drawLine(' + VarToJSON([X1, Y1, X2, Y2]) + ');', 'TGraphics');
  Result := Self;
end;

function TGraphics.DrawPolygon(XArray : TExtObjectList; YArray : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.drawPolygon(' + VarToJSON(XArray) + ',' + VarToJSON(YArray) + ');', 'TGraphics');
  Result := Self;
end;

function TGraphics.FillPolygon(XArray : TExtObjectList; YArray : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.fillPolygon(' + VarToJSON(XArray) + ',' + VarToJSON(YArray) + ');', 'TGraphics');
  Result := Self;
end;

function TGraphics.FillRect(X : Integer; Y : Integer; W : Integer; H : Integer) : TExtFunction; begin
  JSCode(JSName + '.fillRect(' + VarToJSON([X, Y, W, H]) + ');', 'TGraphics');
  Result := Self;
end;

function TGraphics.JsGraphics(Id : string; Wnd : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.jsGraphics(' + VarToJSON([Id, Wnd, false]) + ');', 'TGraphics');
  Result := Self;
end;

function TGraphics.SetColor(Color : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setColor(' + VarToJSON([Color, false]) + ');', 'TGraphics');
  Result := Self;
end;

function TGraphics.SetStroke(X : Integer) : TExtFunction; begin
  JSCode(JSName + '.setStroke(' + VarToJSON([X]) + ');', 'TGraphics');
  Result := Self;
end;

destructor TGraphics.Destroy; begin
  try
    FCosRadian.Free;
    FRadian.Free;
    FSinRadian.Free;
    FXt.Free;
    FYt.Free;
  except end;
  inherited;
end;

function TCommandStack.JSClassName : string; begin
  Result := 'CommandStack';
end;

class function TCommandStack.POST_EXECUTE : TExtObject;
const
  lPOST_EXECUTE : TExtObject = nil;
begin
  if lPOST_EXECUTE = nil then lPOST_EXECUTE := TExtObject.CreateSingleton('CommandStack.POSTEXECUTE');
  Result := lPOST_EXECUTE
end;

class function TCommandStack.POST_MASK : TExtObject;
const
  lPOST_MASK : TExtObject = nil;
begin
  if lPOST_MASK = nil then lPOST_MASK := TExtObject.CreateSingleton('CommandStack.POSTMASK');
  Result := lPOST_MASK
end;

class function TCommandStack.POST_REDO : TExtObject;
const
  lPOST_REDO : TExtObject = nil;
begin
  if lPOST_REDO = nil then lPOST_REDO := TExtObject.CreateSingleton('CommandStack.POSTREDO');
  Result := lPOST_REDO
end;

class function TCommandStack.POST_UNDO : TExtObject;
const
  lPOST_UNDO : TExtObject = nil;
begin
  if lPOST_UNDO = nil then lPOST_UNDO := TExtObject.CreateSingleton('CommandStack.POSTUNDO');
  Result := lPOST_UNDO
end;

class function TCommandStack.PRE_EXECUTE : TExtObject;
const
  lPRE_EXECUTE : TExtObject = nil;
begin
  if lPRE_EXECUTE = nil then lPRE_EXECUTE := TExtObject.CreateSingleton('CommandStack.PREEXECUTE');
  Result := lPRE_EXECUTE
end;

class function TCommandStack.PRE_MASK : TExtObject;
const
  lPRE_MASK : TExtObject = nil;
begin
  if lPRE_MASK = nil then lPRE_MASK := TExtObject.CreateSingleton('CommandStack.PREMASK');
  Result := lPRE_MASK
end;

class function TCommandStack.PRE_REDO : TExtObject;
const
  lPRE_REDO : TExtObject = nil;
begin
  if lPRE_REDO = nil then lPRE_REDO := TExtObject.CreateSingleton('CommandStack.PREREDO');
  Result := lPRE_REDO
end;

class function TCommandStack.PRE_UNDO : TExtObject;
const
  lPRE_UNDO : TExtObject = nil;
begin
  if lPRE_UNDO = nil then lPRE_UNDO := TExtObject.CreateSingleton('CommandStack.PREUNDO');
  Result := lPRE_UNDO
end;

{$IFDEF FPC}constructor TCommandStack.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TCommandStack.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TCommandStack.AddCommandStackEventListener(Listener : TCommandStackEventListener) : TExtFunction; begin
  JSCode(JSName + '.addCommandStackEventListener(' + VarToJSON([Listener, false]) + ');', 'TCommandStack');
  Result := Self;
end;

function TCommandStack.CanRedo : TExtFunction; begin
  JSCode(JSName + '.canRedo();', 'TCommandStack');
  Result := Self;
end;

function TCommandStack.CanUndo : TExtFunction; begin
  JSCode(JSName + '.canUndo();', 'TCommandStack');
  Result := Self;
end;

function TCommandStack.Execute(Command : TCommand) : TExtFunction; begin
  JSCode(JSName + '.execute(' + VarToJSON([Command, false]) + ');', 'TCommandStack');
  Result := Self;
end;

function TCommandStack.MarkSaveLocation : TExtFunction; begin
  JSCode(JSName + '.markSaveLocation();', 'TCommandStack');
  Result := Self;
end;

function TCommandStack.NotifyListeners(Command : TCommand; State : Integer) : TExtFunction; begin
  JSCode(JSName + '.notifyListeners(' + VarToJSON([Command, false, State]) + ');', 'TCommandStack');
  Result := Self;
end;

function TCommandStack.Redo : TExtFunction; begin
  JSCode(JSName + '.redo();', 'TCommandStack');
  Result := Self;
end;

function TCommandStack.RemoveCommandStackEventListener(Listener : TCommandStackEventListener) : TExtFunction; begin
  JSCode(JSName + '.removeCommandStackEventListener(' + VarToJSON([Listener, false]) + ');', 'TCommandStack');
  Result := Self;
end;

function TCommandStack.SetUndoLimit(Count : Integer) : TExtFunction; begin
  JSCode(JSName + '.setUndoLimit(' + VarToJSON([Count]) + ');', 'TCommandStack');
  Result := Self;
end;

function TCommandStack.Undo : TExtFunction; begin
  JSCode(JSName + '.undo();', 'TCommandStack');
  Result := Self;
end;

procedure TCanvasDocument.SetFCanvas(Value : TExtObject); begin
  FCanvas := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.canvas=' + VarToJSON([Value, false]) + ';');
end;

procedure TCanvasDocument.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TCanvasDocument.JSClassName : string; begin
  Result := 'CanvasDocument';
end;

procedure TCanvasDocument.InitDefaults; begin
  inherited;
  FCanvas := TExtObject.CreateInternal(Self, 'canvas');
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TCanvasDocument.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TCanvasDocument.Create(Canvas : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Canvas, false]) + ');');
  InitDefaults;
end;

function TCanvasDocument.GetFigure(Id : string) : TExtFunction; begin
  JSCode(JSName + '.getFigure(' + VarToJSON([Id]) + ');', 'TCanvasDocument');
  Result := Self;
end;

function TCanvasDocument.GetFigures : TExtFunction; begin
  JSCode(JSName + '.getFigures();', 'TCanvasDocument');
  Result := Self;
end;

function TCanvasDocument.GetLine(Id : string) : TExtFunction; begin
  JSCode(JSName + '.getLine(' + VarToJSON([Id]) + ');', 'TCanvasDocument');
  Result := Self;
end;

function TCanvasDocument.GetLines : TExtFunction; begin
  JSCode(JSName + '.getLines();', 'TCanvasDocument');
  Result := Self;
end;

destructor TCanvasDocument.Destroy; begin
  try
    FCanvas.Free;
    FTypeJS.Free;
  except end;
  inherited;
end;

function TCanvas.JSClassName : string; begin
  Result := 'Canvas';
end;

{$IFDEF FPC}constructor TCanvas.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TCanvas.Create(CanvasId : string); begin
  CreateVar(JSClassName + '(' + VarToJSON([CanvasId]) + ');');
  InitDefaults;
end;

function TCanvas.AddFigure(Figure : TFigure; XPos : Integer; YPos : Integer; AvoidPaint : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.addFigure(' + VarToJSON([Figure, false, XPos, YPos, AvoidPaint, false]) + ');', 'TCanvas');
  Result := Self;
end;

function TCanvas.GetAbsoluteX : TExtFunction; begin
  JSCode(JSName + '.getAbsoluteX();', 'TCanvas');
  Result := Self;
end;

function TCanvas.GetAbsoluteY : TExtFunction; begin
  JSCode(JSName + '.getAbsoluteY();', 'TCanvas');
  Result := Self;
end;

function TCanvas.GetEnableSmoothFigureHandling : TExtFunction; begin
  JSCode(JSName + '.getEnableSmoothFigureHandling();', 'TCanvas');
  Result := Self;
end;

function TCanvas.GetHeight : TExtFunction; begin
  JSCode(JSName + '.getHeight();', 'TCanvas');
  Result := Self;
end;

function TCanvas.GetScrollLeft : TExtFunction; begin
  JSCode(JSName + '.getScrollLeft();', 'TCanvas');
  Result := Self;
end;

function TCanvas.GetScrollTop : TExtFunction; begin
  JSCode(JSName + '.getScrollTop();', 'TCanvas');
  Result := Self;
end;

function TCanvas.GetWidth : TExtFunction; begin
  JSCode(JSName + '.getWidth();', 'TCanvas');
  Result := Self;
end;

function TCanvas.GetX : TExtFunction; begin
  JSCode(JSName + '.getX();', 'TCanvas');
  Result := Self;
end;

function TCanvas.GetY : TExtFunction; begin
  JSCode(JSName + '.getY();', 'TCanvas');
  Result := Self;
end;

function TCanvas.RemoveFigure(Figure : TFigure) : TExtFunction; begin
  JSCode(JSName + '.removeFigure(' + VarToJSON([Figure, false]) + ');', 'TCanvas');
  Result := Self;
end;

function TCanvas.SetBackgroundImage(ImageUrl : string; RepeatJS : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setBackgroundImage(' + VarToJSON([ImageUrl, RepeatJS, false]) + ');', 'TCanvas');
  Result := Self;
end;

function TCanvas.SetEnableSmoothFigureHandling(Flag : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setEnableSmoothFigureHandling(' + VarToJSON([Flag]) + ');', 'TCanvas');
  Result := Self;
end;

function TCanvas.SetViewPort(DivId : string) : TExtFunction; begin
  JSCode(JSName + '.setViewPort(' + VarToJSON([DivId]) + ');', 'TCanvas');
  Result := Self;
end;

procedure TCommand.SetFLabelJS(Value : TExtObject); begin
  FLabelJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.label=' + VarToJSON([Value, false]) + ';');
end;

function TCommand.JSClassName : string; begin
  Result := 'Command';
end;

procedure TCommand.InitDefaults; begin
  inherited;
  FLabelJS := TExtObject.CreateInternal(Self, 'label');
end;

{$IFDEF FPC}constructor TCommand.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TCommand.Create(LabelJS : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([LabelJS, false]) + ');');
  InitDefaults;
end;

function TCommand.Cancel : TExtFunction; begin
  JSCode(JSName + '.cancel();', 'TCommand');
  Result := Self;
end;

function TCommand.CanExecute : TExtFunction; begin
  JSCode(JSName + '.canExecute();', 'TCommand');
  Result := Self;
end;

function TCommand.Execute : TExtFunction; begin
  JSCode(JSName + '.execute();', 'TCommand');
  Result := Self;
end;

function TCommand.GetLabel : TExtFunction; begin
  JSCode(JSName + '.getLabel();', 'TCommand');
  Result := Self;
end;

function TCommand.Redo : TExtFunction; begin
  JSCode(JSName + '.redo();', 'TCommand');
  Result := Self;
end;

function TCommand.Undo : TExtFunction; begin
  JSCode(JSName + '.undo();', 'TCommand');
  Result := Self;
end;

destructor TCommand.Destroy; begin
  try
    FLabelJS.Free;
  except end;
  inherited;
end;

function TColor.JSClassName : string; begin
  Result := 'Color';
end;

{$IFDEF FPC}constructor TColor.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TColor.Create(Red : TExtObject; Green : TExtObject; Blue : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Red, false, Green, false, Blue, false]) + ');');
  InitDefaults;
end;

function TColor.Darker(Fraction : Double) : TExtFunction; begin
  JSCode(JSName + '.darker(' + VarToJSON([Fraction]) + ');', 'TColor');
  Result := Self;
end;

function TColor.GetBlue : TExtFunction; begin
  JSCode(JSName + '.getBlue();', 'TColor');
  Result := Self;
end;

function TColor.GetGreen : TExtFunction; begin
  JSCode(JSName + '.getGreen();', 'TColor');
  Result := Self;
end;

function TColor.GetIdealTextColor : TExtFunction; begin
  JSCode(JSName + '.getIdealTextColor();', 'TColor');
  Result := Self;
end;

function TColor.GetRed : TExtFunction; begin
  JSCode(JSName + '.getRed();', 'TColor');
  Result := Self;
end;

function TColor.Lighter(Fraction : Double) : TExtFunction; begin
  JSCode(JSName + '.lighter(' + VarToJSON([Fraction]) + ');', 'TColor');
  Result := Self;
end;

procedure TArrayList.SetFData(Value : TExtObject); begin
  FData := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.data=' + VarToJSON([Value, false]) + ';');
end;

procedure TArrayList.SetFIncrement(Value : TExtObject); begin
  FIncrement := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.increment=' + VarToJSON([Value, false]) + ';');
end;

procedure TArrayList.SetFSize(Value : TExtObject); begin
  FSize := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.size=' + VarToJSON([Value, false]) + ';');
end;

procedure TArrayList.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TArrayList.JSClassName : string; begin
  Result := 'ArrayList';
end;

class function TArrayList.EMPTY_LIST : TExtObject;
const
  lEMPTY_LIST : TExtObject = nil;
begin
  if lEMPTY_LIST = nil then lEMPTY_LIST := TExtObject.CreateSingleton('ArrayList.EMPTYLIST');
  Result := lEMPTY_LIST
end;

procedure TArrayList.InitDefaults; begin
  inherited;
  FData := TExtObject.CreateInternal(Self, 'data');
  FIncrement := TExtObject.CreateInternal(Self, 'increment');
  FSize := TExtObject.CreateInternal(Self, 'size');
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TArrayList.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TArrayList.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TArrayList.Add(Obj : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.add(' + VarToJSON([Obj, false]) + ');', 'TArrayList');
  Result := Self;
end;

function TArrayList.AddAll(Obj : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.addAll(' + VarToJSON([Obj, false]) + ');', 'TArrayList');
  Result := Self;
end;

function TArrayList.Clone : TExtFunction; begin
  JSCode(JSName + '.clone();', 'TArrayList');
  Result := Self;
end;

function TArrayList.Contains(Obj : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.contains(' + VarToJSON([Obj, false]) + ');', 'TArrayList');
  Result := Self;
end;

function TArrayList.Get(I : Integer) : TExtFunction; begin
  JSCode(JSName + '.get(' + VarToJSON([I]) + ');', 'TArrayList');
  Result := Self;
end;

function TArrayList.GetCapacity : TExtFunction; begin
  JSCode(JSName + '.getCapacity();', 'TArrayList');
  Result := Self;
end;

function TArrayList.GetFirstElement : TExtFunction; begin
  JSCode(JSName + '.getFirstElement();', 'TArrayList');
  Result := Self;
end;

function TArrayList.GetLastElement : TExtFunction; begin
  JSCode(JSName + '.getLastElement();', 'TArrayList');
  Result := Self;
end;

function TArrayList.GetPersistentAttributes : TExtFunction; begin
  JSCode(JSName + '.getPersistentAttributes();', 'TArrayList');
  Result := Self;
end;

function TArrayList.GetSize : TExtFunction; begin
  JSCode(JSName + '.getSize();', 'TArrayList');
  Result := Self;
end;

function TArrayList.IndexOf(Obj : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.indexOf(' + VarToJSON([Obj, false]) + ');', 'TArrayList');
  Result := Self;
end;

function TArrayList.InsertElementAt(Obj : TExtObject; Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.insertElementAt(' + VarToJSON([Obj, false, Index]) + ');', 'TArrayList');
  Result := Self;
end;

function TArrayList.IsEmpty : TExtFunction; begin
  JSCode(JSName + '.isEmpty();', 'TArrayList');
  Result := Self;
end;

function TArrayList.OverwriteElementAt(Obj : TExtObject; Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.overwriteElementAt(' + VarToJSON([Obj, false, Index]) + ');', 'TArrayList');
  Result := Self;
end;

function TArrayList.Remove(Obj : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.remove(' + VarToJSON([Obj, false]) + ');', 'TArrayList');
  Result := Self;
end;

function TArrayList.RemoveAllElements : TExtFunction; begin
  JSCode(JSName + '.removeAllElements();', 'TArrayList');
  Result := Self;
end;

function TArrayList.RemoveElementAt(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.removeElementAt(' + VarToJSON([Index]) + ');', 'TArrayList');
  Result := Self;
end;

function TArrayList.Resize : TExtFunction; begin
  JSCode(JSName + '.resize();', 'TArrayList');
  Result := Self;
end;

function TArrayList.Reverse : TExtFunction; begin
  JSCode(JSName + '.reverse();', 'TArrayList');
  Result := Self;
end;

function TArrayList.Sort(F : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.sort(' + VarToJSON([F, false]) + ');', 'TArrayList');
  Result := Self;
end;

function TArrayList.TrimToSize : TExtFunction; begin
  JSCode(JSName + '.trimToSize();', 'TArrayList');
  Result := Self;
end;

destructor TArrayList.Destroy; begin
  try
    FData.Free;
    FIncrement.Free;
    FSize.Free;
    FTypeJS.Free;
  except end;
  inherited;
end;

function TAbstractObjectModel.JSClassName : string; begin
  Result := 'AbstractObjectModel';
end;

{$IFDEF FPC}constructor TAbstractObjectModel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TAbstractObjectModel.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TAbstractObjectModel.AddPropertyChangeListener(Listener : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.addPropertyChangeListener(' + VarToJSON([Listener, false]) + ');', 'TAbstractObjectModel');
  Result := Self;
end;

function TAbstractObjectModel.FirePropertyChange(PropertyName : string; OldValue : TExtObject; NewValue : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.firePropertyChange(' + VarToJSON([PropertyName, OldValue, false, NewValue, false]) + ');', 'TAbstractObjectModel');
  Result := Self;
end;

function TAbstractObjectModel.GetId : TExtFunction; begin
  JSCode(JSName + '.getId();', 'TAbstractObjectModel');
  Result := Self;
end;

function TAbstractObjectModel.GetModelChildren : TExtFunction; begin
  JSCode(JSName + '.getModelChildren();', 'TAbstractObjectModel');
  Result := Self;
end;

function TAbstractObjectModel.GetModelParent : TExtFunction; begin
  JSCode(JSName + '.getModelParent();', 'TAbstractObjectModel');
  Result := Self;
end;

function TAbstractObjectModel.GetPersistentAttributes : TExtFunction; begin
  JSCode(JSName + '.getPersistentAttributes();', 'TAbstractObjectModel');
  Result := Self;
end;

function TAbstractObjectModel.RemovePropertyChangeListener(Listener : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.removePropertyChangeListener(' + VarToJSON([Listener, false]) + ');', 'TAbstractObjectModel');
  Result := Self;
end;

function TAbstractObjectModel.SetModelParent(Parent : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setModelParent(' + VarToJSON([Parent, false]) + ');', 'TAbstractObjectModel');
  Result := Self;
end;

procedure TButton.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TButton.JSClassName : string; begin
  Result := 'Button';
end;

procedure TButton.InitDefaults; begin
  inherited;
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TButton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TButton.Create(Palette : TExtObject; Width : Integer; Height : Integer); begin
  CreateVar(JSClassName + '(' + VarToJSON([Palette, false, Width, Height]) + ');');
  InitDefaults;
end;

function TButton.Execute : TExtFunction; begin
  JSCode(JSName + '.execute();', 'TButton');
  Result := Self;
end;

function TButton.GetHeight : TExtFunction; begin
  JSCode(JSName + '.getHeight();', 'TButton');
  Result := Self;
end;

function TButton.GetImageUrl : TExtFunction; begin
  JSCode(JSName + '.getImageUrl();', 'TButton');
  Result := Self;
end;

function TButton.GetPosition : TExtFunction; begin
  JSCode(JSName + '.getPosition();', 'TButton');
  Result := Self;
end;

function TButton.GetToolPalette : TExtFunction; begin
  JSCode(JSName + '.getToolPalette();', 'TButton');
  Result := Self;
end;

function TButton.GetWidth : TExtFunction; begin
  JSCode(JSName + '.getWidth();', 'TButton');
  Result := Self;
end;

function TButton.GetX : TExtFunction; begin
  JSCode(JSName + '.getX();', 'TButton');
  Result := Self;
end;

function TButton.GetY : TExtFunction; begin
  JSCode(JSName + '.getY();', 'TButton');
  Result := Self;
end;

function TButton.IsActive : TExtFunction; begin
  JSCode(JSName + '.isActive();', 'TButton');
  Result := Self;
end;

function TButton.SetActive(Flag : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setActive(' + VarToJSON([Flag]) + ');', 'TButton');
  Result := Self;
end;

function TButton.SetDimension(W : Integer; H : Integer) : TExtFunction; begin
  JSCode(JSName + '.setDimension(' + VarToJSON([W, H]) + ');', 'TButton');
  Result := Self;
end;

function TButton.SetPosition(XPos : Integer; YPos : Integer) : TExtFunction; begin
  JSCode(JSName + '.setPosition(' + VarToJSON([XPos, YPos]) + ');', 'TButton');
  Result := Self;
end;

function TButton.SetTooltip(TooltipText : string) : TExtFunction; begin
  JSCode(JSName + '.setTooltip(' + VarToJSON([TooltipText]) + ');', 'TButton');
  Result := Self;
end;

destructor TButton.Destroy; begin
  try
    FTypeJS.Free;
  except end;
  inherited;
end;

procedure TBorder.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TBorder.JSClassName : string; begin
  Result := 'Border';
end;

procedure TBorder.InitDefaults; begin
  inherited;
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TBorder.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TBorder.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TBorder.GetColor : TExtFunction; begin
  JSCode(JSName + '.getColor();', 'TBorder');
  Result := Self;
end;

function TBorder.SetColor(C : TColor) : TExtFunction; begin
  JSCode(JSName + '.setColor(' + VarToJSON([C, false]) + ');', 'TBorder');
  Result := Self;
end;

destructor TBorder.Destroy; begin
  try
    FTypeJS.Free;
  except end;
  inherited;
end;

procedure TNullConnectionRouter.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TNullConnectionRouter.JSClassName : string; begin
  Result := 'NullConnectionRouter';
end;

procedure TNullConnectionRouter.InitDefaults; begin
  inherited;
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TNullConnectionRouter.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TNullConnectionRouter.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TNullConnectionRouter.Invalidate : TExtFunction; begin
  JSCode(JSName + '.invalidate();', 'TNullConnectionRouter');
  Result := Self;
end;

function TNullConnectionRouter.Route(Connection : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.route(' + VarToJSON([Connection, false]) + ');', 'TNullConnectionRouter');
  Result := Self;
end;

destructor TNullConnectionRouter.Destroy; begin
  try
    FTypeJS.Free;
  except end;
  inherited;
end;

function TNode.JSClassName : string; begin
  Result := 'Node';
end;

{$IFDEF FPC}constructor TNode.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TNode.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TNode.AddPort(Port : TPort; X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.addPort(' + VarToJSON([Port, false, X, Y]) + ');', 'TNode');
  Result := Self;
end;

function TNode.GetBackgroundColor : TExtFunction; begin
  JSCode(JSName + '.getBackgroundColor();', 'TNode');
  Result := Self;
end;

function TNode.GetModelSourceConnections : TExtFunction; begin
  JSCode(JSName + '.getModelSourceConnections();', 'TNode');
  Result := Self;
end;

function TNode.GetPort(PortName : string) : TExtFunction; begin
  JSCode(JSName + '.getPort(' + VarToJSON([PortName]) + ');', 'TNode');
  Result := Self;
end;

function TNode.GetPorts : TExtFunction; begin
  JSCode(JSName + '.getPorts();', 'TNode');
  Result := Self;
end;

function TNode.RemovePort(Port : TPort) : TExtFunction; begin
  JSCode(JSName + '.removePort(' + VarToJSON([Port, false]) + ');', 'TNode');
  Result := Self;
end;

function TNode.SetBackgroundColor(Color : TColor) : TExtFunction; begin
  JSCode(JSName + '.setBackgroundColor(' + VarToJSON([Color, false]) + ');', 'TNode');
  Result := Self;
end;

function TNode.SetColor(Color : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setColor(' + VarToJSON([Color, false]) + ');', 'TNode');
  Result := Self;
end;

function TNode.SetLineWidth(W : Integer) : TExtFunction; begin
  JSCode(JSName + '.setLineWidth(' + VarToJSON([W]) + ');', 'TNode');
  Result := Self;
end;

procedure TCommandSetColor.SetFFigure(Value : TExtObject); begin
  FFigure := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.figure=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandSetColor.SetFNewColor(Value : TExtObject); begin
  FNewColor := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.newColor=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandSetColor.SetFOldColor(Value : TExtObject); begin
  FOldColor := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.oldColor=' + VarToJSON([Value, false]) + ';');
end;

function TCommandSetColor.JSClassName : string; begin
  Result := 'CommandSetColor';
end;

procedure TCommandSetColor.InitDefaults; begin
  inherited;
  FFigure := TExtObject.CreateInternal(Self, 'figure');
  FNewColor := TExtObject.CreateInternal(Self, 'newColor');
  FOldColor := TExtObject.CreateInternal(Self, 'oldColor');
end;

{$IFDEF FPC}constructor TCommandSetColor.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TCommandSetColor.Create(Figure : TExtObject; Color : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Figure, false, Color, false]) + ');');
  InitDefaults;
end;

function TCommandSetColor.Execute : TExtFunction; begin
  JSCode(JSName + '.execute();', 'TCommandSetColor');
  Result := Self;
end;

function TCommandSetColor.Redo : TExtFunction; begin
  JSCode(JSName + '.redo();', 'TCommandSetColor');
  Result := Self;
end;

function TCommandSetColor.Undo : TExtFunction; begin
  JSCode(JSName + '.undo();', 'TCommandSetColor');
  Result := Self;
end;

destructor TCommandSetColor.Destroy; begin
  try
    FFigure.Free;
    FNewColor.Free;
    FOldColor.Free;
  except end;
  inherited;
end;

procedure TArrowConnectionDecorator.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TArrowConnectionDecorator.JSClassName : string; begin
  Result := 'ArrowConnectionDecorator';
end;

procedure TArrowConnectionDecorator.InitDefaults; begin
  inherited;
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TArrowConnectionDecorator.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TArrowConnectionDecorator.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TArrowConnectionDecorator.Paint(G : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.paint(' + VarToJSON([G, false]) + ');', 'TArrowConnectionDecorator');
  Result := Self;
end;

destructor TArrowConnectionDecorator.Destroy; begin
  try
    FTypeJS.Free;
  except end;
  inherited;
end;

procedure TMenu.SetFDirty(Value : TExtObject); begin
  FDirty := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.dirty=' + VarToJSON([Value, false]) + ';');
end;

procedure TMenu.SetFMenuItems(Value : TExtObject); begin
  FMenuItems := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.menuItems=' + VarToJSON([Value, false]) + ';');
end;

function TMenu.JSClassName : string; begin
  Result := 'Menu';
end;

procedure TMenu.InitDefaults; begin
  inherited;
  FDirty := TExtObject.CreateInternal(Self, 'dirty');
  FMenuItems := TExtObject.CreateInternal(Self, 'menuItems');
end;

{$IFDEF FPC}constructor TMenu.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TMenu.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TMenu.AppendMenuItem(Item : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.appendMenuItem(' + VarToJSON([Item, false]) + ');', 'TMenu');
  Result := Self;
end;

function TMenu.CreateList : TExtFunction; begin
  JSCode(JSName + '.createList();', 'TMenu');
  Result := Self;
end;

destructor TMenu.Destroy; begin
  try
    FDirty.Free;
    FMenuItems.Free;
  except end;
  inherited;
end;

function TLineBorder.JSClassName : string; begin
  Result := 'LineBorder';
end;

{$IFDEF FPC}constructor TLineBorder.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TLineBorder.Create(Width : Integer); begin
  CreateVar(JSClassName + '(' + VarToJSON([Width]) + ');');
  InitDefaults;
end;

function TLineBorder.SetLineWidth(W : Integer) : TExtFunction; begin
  JSCode(JSName + '.setLineWidth(' + VarToJSON([W]) + ');', 'TLineBorder');
  Result := Self;
end;

function TLabel.JSClassName : string; begin
  Result := 'Label';
end;

{$IFDEF FPC}constructor TLabel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TLabel.Create(Msg : string); begin
  CreateVar(JSClassName + '(' + VarToJSON([Msg]) + ');');
  InitDefaults;
end;

function TLabel.GetHeight : TExtFunction; begin
  JSCode(JSName + '.getHeight();', 'TLabel');
  Result := Self;
end;

function TLabel.GetText : TExtFunction; begin
  JSCode(JSName + '.getText();', 'TLabel');
  Result := Self;
end;

function TLabel.GetWidth : TExtFunction; begin
  JSCode(JSName + '.getWidth();', 'TLabel');
  Result := Self;
end;

function TLabel.IsResizeable : TExtFunction; begin
  JSCode(JSName + '.isResizeable();', 'TLabel');
  Result := Self;
end;

function TLabel.SetAlign(Align : string) : TExtFunction; begin
  JSCode(JSName + '.setAlign(' + VarToJSON([Align]) + ');', 'TLabel');
  Result := Self;
end;

function TLabel.SetBackgroundColor(Color : TColor) : TExtFunction; begin
  JSCode(JSName + '.setBackgroundColor(' + VarToJSON([Color, false]) + ');', 'TLabel');
  Result := Self;
end;

function TLabel.SetColor(Color : TColor) : TExtFunction; begin
  JSCode(JSName + '.setColor(' + VarToJSON([Color, false]) + ');', 'TLabel');
  Result := Self;
end;

function TLabel.SetFontSize(Size : Integer) : TExtFunction; begin
  JSCode(JSName + '.setFontSize(' + VarToJSON([Size]) + ');', 'TLabel');
  Result := Self;
end;

function TLabel.SetStyledText(Text : string) : TExtFunction; begin
  JSCode(JSName + '.setStyledText(' + VarToJSON([Text]) + ');', 'TLabel');
  Result := Self;
end;

function TLabel.SetText(Text : string) : TExtFunction; begin
  JSCode(JSName + '.setText(' + VarToJSON([Text]) + ');', 'TLabel');
  Result := Self;
end;

function TLabel.SetWordwrap(Flag : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setWordwrap(' + VarToJSON([Flag]) + ');', 'TLabel');
  Result := Self;
end;

procedure TManhattanConnectionRouter.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TManhattanConnectionRouter.JSClassName : string; begin
  Result := 'ManhattanConnectionRouter';
end;

class function TManhattanConnectionRouter.MINDIST : TExtObject;
const
  lMINDIST : TExtObject = nil;
begin
  if lMINDIST = nil then lMINDIST := TExtObject.CreateSingleton('ManhattanConnectionRouter.MINDIST');
  Result := lMINDIST
end;

procedure TManhattanConnectionRouter.InitDefaults; begin
  inherited;
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TManhattanConnectionRouter.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TManhattanConnectionRouter.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TManhattanConnectionRouter._route(Conn : TExtObject; FromPt : TExtObject; FromDir : TExtObject; ToPt : TExtObject; ToDir : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.route(' + VarToJSON([Conn, false, FromPt, false, FromDir, false, ToPt, false, ToDir, false]) + ');', 'TManhattanConnectionRouter');
  Result := Self;
end;

function TManhattanConnectionRouter.Route(Conn : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.route(' + VarToJSON([Conn, false]) + ');', 'TManhattanConnectionRouter');
  Result := Self;
end;

destructor TManhattanConnectionRouter.Destroy; begin
  try
    FTypeJS.Free;
  except end;
  inherited;
end;

procedure TBezierConnectionRouter.SetFCheapRouter(Value : TExtObject); begin
  FCheapRouter := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.cheapRouter=' + VarToJSON([Value, false]) + ';');
end;

procedure TBezierConnectionRouter.SetFIteration(Value : TExtObject); begin
  FIteration := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.iteration=' + VarToJSON([Value, false]) + ';');
end;

procedure TBezierConnectionRouter.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TBezierConnectionRouter.JSClassName : string; begin
  Result := 'BezierConnectionRouter';
end;

procedure TBezierConnectionRouter.InitDefaults; begin
  inherited;
  FCheapRouter := TExtObject.CreateInternal(Self, 'cheapRouter');
  FIteration := TExtObject.CreateInternal(Self, 'iteration');
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TBezierConnectionRouter.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TBezierConnectionRouter.Create(NoCheapRouter : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([NoCheapRouter, false]) + ');');
  InitDefaults;
end;

function TBezierConnectionRouter.DrawBezier(PointArray : TExtObjectList; ResultArray : TExtObjectList; T : TExtObject; Iter : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.drawBezier(' + VarToJSON(PointArray) + ',' + VarToJSON(ResultArray) + ',' + VarToJSON([T, false, Iter, false]) + ');', 'TBezierConnectionRouter');
  Result := Self;
end;

function TBezierConnectionRouter.Route(Conn : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.route(' + VarToJSON([Conn, false]) + ');', 'TBezierConnectionRouter');
  Result := Self;
end;

destructor TBezierConnectionRouter.Destroy; begin
  try
    FCheapRouter.Free;
    FIteration.Free;
    FTypeJS.Free;
  except end;
  inherited;
end;

function TAbstractConnectionModel.JSClassName : string; begin
  Result := 'AbstractConnectionModel';
end;

{$IFDEF FPC}constructor TAbstractConnectionModel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TAbstractConnectionModel.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TAbstractConnectionModel.GetSourceModel : TExtFunction; begin
  JSCode(JSName + '.getSourceModel();', 'TAbstractConnectionModel');
  Result := Self;
end;

function TAbstractConnectionModel.GetSourcePortName : TExtFunction; begin
  JSCode(JSName + '.getSourcePortName();', 'TAbstractConnectionModel');
  Result := Self;
end;

function TAbstractConnectionModel.GetTargetModel : TExtFunction; begin
  JSCode(JSName + '.getTargetModel();', 'TAbstractConnectionModel');
  Result := Self;
end;

function TAbstractConnectionModel.GetTargetPortName : TExtFunction; begin
  JSCode(JSName + '.getTargetPortName();', 'TAbstractConnectionModel');
  Result := Self;
end;

procedure TCommandSetText.SetFFigure(Value : TExtObject); begin
  FFigure := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.figure=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandSetText.SetFNewText(Value : TExtObject); begin
  FNewText := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.newText=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandSetText.SetFOldText(Value : TExtObject); begin
  FOldText := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.oldText=' + VarToJSON([Value, false]) + ';');
end;

function TCommandSetText.JSClassName : string; begin
  Result := 'CommandSetText';
end;

procedure TCommandSetText.InitDefaults; begin
  inherited;
  FFigure := TExtObject.CreateInternal(Self, 'figure');
  FNewText := TExtObject.CreateInternal(Self, 'newText');
  FOldText := TExtObject.CreateInternal(Self, 'oldText');
end;

{$IFDEF FPC}constructor TCommandSetText.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TCommandSetText.Create(Figure : TExtObject; Text : string); begin
  CreateVar(JSClassName + '(' + VarToJSON([Figure, false, Text]) + ');');
  InitDefaults;
end;

function TCommandSetText.Execute : TExtFunction; begin
  JSCode(JSName + '.execute();', 'TCommandSetText');
  Result := Self;
end;

function TCommandSetText.Redo : TExtFunction; begin
  JSCode(JSName + '.redo();', 'TCommandSetText');
  Result := Self;
end;

function TCommandSetText.Undo : TExtFunction; begin
  JSCode(JSName + '.undo();', 'TCommandSetText');
  Result := Self;
end;

destructor TCommandSetText.Destroy; begin
  try
    FFigure.Free;
    FNewText.Free;
    FOldText.Free;
  except end;
  inherited;
end;

procedure TWorkflow.SetFOldScrollPosTop(Value : TExtObject); begin
  FOldScrollPosTop := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.oldScrollPosTop=' + VarToJSON([Value, false]) + ';');
end;

procedure TWorkflow.SetFResizeHandleHalfWidth(Value : TExtObject); begin
  FResizeHandleHalfWidth := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.resizeHandleHalfWidth=' + VarToJSON([Value, false]) + ';');
end;

procedure TWorkflow.SetFTooltip(Value : TExtObject); begin
  FTooltip := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.tooltip=' + VarToJSON([Value, false]) + ';');
end;

procedure TWorkflow.SetFScrollArea(Value : TExtObject); begin
  FScrollArea := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.scrollArea=' + VarToJSON([Value, false]) + ';');
end;

function TWorkflow.JSClassName : string; begin
  Result := 'Workflow';
end;

procedure TWorkflow.InitDefaults; begin
  inherited;
  FOldScrollPosTop := TExtObject.CreateInternal(Self, 'oldScrollPosTop');
  FResizeHandleHalfWidth := TExtObject.CreateInternal(Self, 'resizeHandleHalfWidth');
  FTooltip := TExtObject.CreateInternal(Self, 'tooltip');
  FScrollArea := TExtObject.CreateInternal(Self, 'scrollArea');
end;

{$IFDEF FPC}constructor TWorkflow.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TWorkflow.Create(Id : string); begin
  CreateVar(JSClassName + '(' + VarToJSON([Id]) + ');');
  InitDefaults;
end;

function TWorkflow.AddFigure(Figure : TFigure; XPos : Integer; YPos : Integer) : TExtFunction; begin
  JSCode(JSName + '.addFigure(' + VarToJSON([Figure, false, XPos, YPos]) + ');', 'TWorkflow');
  Result := Self;
end;

function TWorkflow.AddSelectionListener(W : TWindowFigure) : TExtFunction; begin
  JSCode(JSName + '.addSelectionListener(' + VarToJSON([W, false]) + ');', 'TWorkflow');
  Result := Self;
end;

function TWorkflow.Clear : TExtFunction; begin
  JSCode(JSName + '.clear();', 'TWorkflow');
  Result := Self;
end;

function TWorkflow.GetBestCompartmentFigure(X : Integer; Y : Integer; FigureToIgnore : TFigure) : TExtFunction; begin
  JSCode(JSName + '.getBestCompartmentFigure(' + VarToJSON([X, Y, FigureToIgnore, false]) + ');', 'TWorkflow');
  Result := Self;
end;

function TWorkflow.GetCommandStack : TExtFunction; begin
  JSCode(JSName + '.getCommandStack();', 'TWorkflow');
  Result := Self;
end;

function TWorkflow.GetContextMenu : TExtFunction; begin
  JSCode(JSName + '.getContextMenu();', 'TWorkflow');
  Result := Self;
end;

function TWorkflow.GetCurrentSelection : TExtFunction; begin
  JSCode(JSName + '.getCurrentSelection();', 'TWorkflow');
  Result := Self;
end;

function TWorkflow.GetDocument : TExtFunction; begin
  JSCode(JSName + '.getDocument();', 'TWorkflow');
  Result := Self;
end;

function TWorkflow.MoveBack(Figure : TFigure) : TExtFunction; begin
  JSCode(JSName + '.moveBack(' + VarToJSON([Figure, false]) + ');', 'TWorkflow');
  Result := Self;
end;

function TWorkflow.MoveFront(Figure : TFigure) : TExtFunction; begin
  JSCode(JSName + '.moveFront(' + VarToJSON([Figure, false]) + ');', 'TWorkflow');
  Result := Self;
end;

function TWorkflow.RemoveFigure(Figure : TFigure) : TExtFunction; begin
  JSCode(JSName + '.removeFigure(' + VarToJSON([Figure, false]) + ');', 'TWorkflow');
  Result := Self;
end;

function TWorkflow.RemoveSelectionListener(W : TWindowFigure) : TExtFunction; begin
  JSCode(JSName + '.removeSelectionListener(' + VarToJSON([W, false]) + ');', 'TWorkflow');
  Result := Self;
end;

function TWorkflow.ScrollTo(X : Integer; Y : Integer; Fast : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.scrollTo(' + VarToJSON([X, Y, Fast, false]) + ');', 'TWorkflow');
  Result := Self;
end;

function TWorkflow.SetCurrentSelection(Figure : TFigure) : TExtFunction; begin
  JSCode(JSName + '.setCurrentSelection(' + VarToJSON([Figure, false]) + ');', 'TWorkflow');
  Result := Self;
end;

function TWorkflow.SetGridWidth(Dx : Integer; Dy : Integer) : TExtFunction; begin
  JSCode(JSName + '.setGridWidth(' + VarToJSON([Dx, Dy]) + ');', 'TWorkflow');
  Result := Self;
end;

function TWorkflow.SetPanning(Flag : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setPanning(' + VarToJSON([Flag]) + ');', 'TWorkflow');
  Result := Self;
end;

function TWorkflow.SetSnapToGeometry(Flag : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setSnapToGeometry(' + VarToJSON([Flag]) + ');', 'TWorkflow');
  Result := Self;
end;

function TWorkflow.SetSnapToGrid(Flag : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setSnapToGrid(' + VarToJSON([Flag]) + ');', 'TWorkflow');
  Result := Self;
end;

function TWorkflow.SetToolWindow(ToolWindow : TWindowFigure; X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.setToolWindow(' + VarToJSON([ToolWindow, false, X, Y]) + ');', 'TWorkflow');
  Result := Self;
end;

function TWorkflow.ShowDialog(Dialog : TDialog; XPos : Integer; YPos : Integer) : TExtFunction; begin
  JSCode(JSName + '.showDialog(' + VarToJSON([Dialog, false, XPos, YPos]) + ');', 'TWorkflow');
  Result := Self;
end;

function TWorkflow.ShowTooltip(Tooltip : TFigure; AutoHide : Boolean) : TExtFunction; begin
  JSCode(JSName + '.showTooltip(' + VarToJSON([Tooltip, false, AutoHide]) + ');', 'TWorkflow');
  Result := Self;
end;

destructor TWorkflow.Destroy; begin
  try
    FOldScrollPosTop.Free;
    FResizeHandleHalfWidth.Free;
    FTooltip.Free;
    FScrollArea.Free;
  except end;
  inherited;
end;

function TWindowFigure.JSClassName : string; begin
  Result := 'WindowFigure';
end;

{$IFDEF FPC}constructor TWindowFigure.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TWindowFigure.Create(Title : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Title, false]) + ');');
  InitDefaults;
end;

function TWindowFigure.GetMinHeight : TExtFunction; begin
  JSCode(JSName + '.getMinHeight();', 'TWindowFigure');
  Result := Self;
end;

function TWindowFigure.GetMinWidth : TExtFunction; begin
  JSCode(JSName + '.getMinWidth();', 'TWindowFigure');
  Result := Self;
end;

function TWindowFigure.HasFixedPosition : TExtFunction; begin
  JSCode(JSName + '.hasFixedPosition();', 'TWindowFigure');
  Result := Self;
end;

function TWindowFigure.HasTitleBar : TExtFunction; begin
  JSCode(JSName + '.hasTitleBar();', 'TWindowFigure');
  Result := Self;
end;

function TWindowFigure.IsResizeable : TExtFunction; begin
  JSCode(JSName + '.isResizeable();', 'TWindowFigure');
  Result := Self;
end;

function TWindowFigure.OnDragstart(X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.onDragstart(' + VarToJSON([X, Y]) + ');', 'TWindowFigure');
  Result := Self;
end;

function TWindowFigure.OnSelectionChanged(Figure : TFigure) : TExtFunction; begin
  JSCode(JSName + '.onSelectionChanged(' + VarToJSON([Figure, false]) + ');', 'TWindowFigure');
  Result := Self;
end;

function TWindowFigure.SetBackgroundColor(Color : TColor) : TExtFunction; begin
  JSCode(JSName + '.setBackgroundColor(' + VarToJSON([Color, false]) + ');', 'TWindowFigure');
  Result := Self;
end;

function TWindowFigure.SetCanDrag(Flag : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setCanDrag(' + VarToJSON([Flag]) + ');', 'TWindowFigure');
  Result := Self;
end;

function TWindowFigure.SetColor(Color : TColor) : TExtFunction; begin
  JSCode(JSName + '.setColor(' + VarToJSON([Color, false]) + ');', 'TWindowFigure');
  Result := Self;
end;

function TWindowFigure.SetDimension(W : Integer; H : Integer) : TExtFunction; begin
  JSCode(JSName + '.setDimension(' + VarToJSON([W, H]) + ');', 'TWindowFigure');
  Result := Self;
end;

function TWindowFigure.SetLineWidth(W : Integer) : TExtFunction; begin
  JSCode(JSName + '.setLineWidth(' + VarToJSON([W]) + ');', 'TWindowFigure');
  Result := Self;
end;

function TWindowFigure.SetTitle(Title : string) : TExtFunction; begin
  JSCode(JSName + '.setTitle(' + VarToJSON([Title]) + ');', 'TWindowFigure');
  Result := Self;
end;

function TWindowFigure.SetZOrderBaseIndex(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.setZOrderBaseIndex(' + VarToJSON([Index]) + ');', 'TWindowFigure');
  Result := Self;
end;

function TToggleButton.JSClassName : string; begin
  Result := 'ToggleButton';
end;

{$IFDEF FPC}constructor TToggleButton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TToggleButton.Create(Palette : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Palette, false]) + ');');
  InitDefaults;
end;

function TToggleButton.Execute : TExtFunction; begin
  JSCode(JSName + '.execute();', 'TToggleButton');
  Result := Self;
end;

function TToggleButton.IsDown : TExtFunction; begin
  JSCode(JSName + '.isDown();', 'TToggleButton');
  Result := Self;
end;

function TSnapToGeometry.JSClassName : string; begin
  Result := 'SnapToGeometry';
end;

class function TSnapToGeometry.THRESHOLD : TExtObject;
const
  lTHRESHOLD : TExtObject = nil;
begin
  if lTHRESHOLD = nil then lTHRESHOLD := TExtObject.CreateSingleton('SnapToGeometry.THRESHOLD');
  Result := lTHRESHOLD
end;

{$IFDEF FPC}constructor TSnapToGeometry.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TSnapToGeometry.Create(Workflow : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Workflow, false]) + ');');
  InitDefaults;
end;

function TSnapToGeometry.GetCorrectionFor(Entries : TExtObject; Value : TExtObject; Side : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getCorrectionFor(' + VarToJSON([Entries, false, Value, false, Side, false]) + ');', 'TSnapToGeometry');
  Result := Self;
end;

function TSnapToGeometry.PopulateRowsAndCols : TExtFunction; begin
  JSCode(JSName + '.populateRowsAndCols();', 'TSnapToGeometry');
  Result := Self;
end;

function TSnapToGeometry.SnapPoint(SnapOrientation : TExtObject; InputPoint : TExtObject; ResultPoint : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.snapPoint(' + VarToJSON([SnapOrientation, false, InputPoint, false, ResultPoint, false]) + ');', 'TSnapToGeometry');
  Result := Self;
end;

function TSnapToGeometry.SnapRectangle(InputBounds : TExtObject; ResultBounds : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.snapRectangle(' + VarToJSON([InputBounds, false, ResultBounds, false]) + ');', 'TSnapToGeometry');
  Result := Self;
end;

function TRectangle.JSClassName : string; begin
  Result := 'Rectangle';
end;

{$IFDEF FPC}constructor TRectangle.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TRectangle.Create(Width : Integer; Height : Integer); begin
  CreateVar(JSClassName + '(' + VarToJSON([Width, Height]) + ');');
  InitDefaults;
end;

function TRectangle.GetBackgroundColor : TExtFunction; begin
  JSCode(JSName + '.getBackgroundColor();', 'TRectangle');
  Result := Self;
end;

function TRectangle.GetColor : TExtFunction; begin
  JSCode(JSName + '.getColor();', 'TRectangle');
  Result := Self;
end;

function TRectangle.GetHeight : TExtFunction; begin
  JSCode(JSName + '.getHeight();', 'TRectangle');
  Result := Self;
end;

function TRectangle.GetLineWidth : TExtFunction; begin
  JSCode(JSName + '.getLineWidth();', 'TRectangle');
  Result := Self;
end;

function TRectangle.GetWidth : TExtFunction; begin
  JSCode(JSName + '.getWidth();', 'TRectangle');
  Result := Self;
end;

function TRectangle.SetBackgroundColor(Color : TColor) : TExtFunction; begin
  JSCode(JSName + '.setBackgroundColor(' + VarToJSON([Color, false]) + ');', 'TRectangle');
  Result := Self;
end;

function TRectangle.SetColor(Color : TColor) : TExtFunction; begin
  JSCode(JSName + '.setColor(' + VarToJSON([Color, false]) + ');', 'TRectangle');
  Result := Self;
end;

function TRectangle.SetDimension(W : Integer; H : Integer) : TExtFunction; begin
  JSCode(JSName + '.setDimension(' + VarToJSON([W, H]) + ');', 'TRectangle');
  Result := Self;
end;

function TRectangle.SetLineWidth(W : Integer) : TExtFunction; begin
  JSCode(JSName + '.setLineWidth(' + VarToJSON([W]) + ');', 'TRectangle');
  Result := Self;
end;

function TAnnotation.JSClassName : string; begin
  Result := 'Annotation';
end;

{$IFDEF FPC}constructor TAnnotation.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TAnnotation.Create(Msg : string); begin
  CreateVar(JSClassName + '(' + VarToJSON([Msg]) + ');');
  InitDefaults;
end;

function TAnnotation.GetBackgroundColor : TExtFunction; begin
  JSCode(JSName + '.getBackgroundColor();', 'TAnnotation');
  Result := Self;
end;

function TAnnotation.GetText : TExtFunction; begin
  JSCode(JSName + '.getText();', 'TAnnotation');
  Result := Self;
end;

function TAnnotation.OnDoubleClick : TExtFunction; begin
  JSCode(JSName + '.onDoubleClick();', 'TAnnotation');
  Result := Self;
end;

function TAnnotation.SetBackgroundColor(Color : TColor) : TExtFunction; begin
  JSCode(JSName + '.setBackgroundColor(' + VarToJSON([Color, false]) + ');', 'TAnnotation');
  Result := Self;
end;

function TAnnotation.SetFontSize(Size : Integer) : TExtFunction; begin
  JSCode(JSName + '.setFontSize(' + VarToJSON([Size]) + ');', 'TAnnotation');
  Result := Self;
end;

function TAnnotation.SetStyledText(Text : string) : TExtFunction; begin
  JSCode(JSName + '.setStyledText(' + VarToJSON([Text]) + ');', 'TAnnotation');
  Result := Self;
end;

function TAnnotation.SetText(Text : string) : TExtFunction; begin
  JSCode(JSName + '.setText(' + VarToJSON([Text]) + ');', 'TAnnotation');
  Result := Self;
end;

procedure TSnapToGrid.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TSnapToGrid.JSClassName : string; begin
  Result := 'SnapToGrid';
end;

procedure TSnapToGrid.InitDefaults; begin
  inherited;
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TSnapToGrid.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TSnapToGrid.Create(Workflow : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Workflow, false]) + ');');
  InitDefaults;
end;

function TSnapToGrid.SnapPoint(Direction : TExtObject; InputPoint : TExtObject; ResultPoint : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.snapPoint(' + VarToJSON([Direction, false, InputPoint, false, ResultPoint, false]) + ');', 'TSnapToGrid');
  Result := Self;
end;

function TSnapToGrid.SnapRectangle(InputBounds : TExtObject; ResultBounds : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.snapRectangle(' + VarToJSON([InputBounds, false, ResultBounds, false]) + ');', 'TSnapToGrid');
  Result := Self;
end;

destructor TSnapToGrid.Destroy; begin
  try
    FTypeJS.Free;
  except end;
  inherited;
end;

procedure TCommandDelete.SetFFigure(Value : TExtObject); begin
  FFigure := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.figure=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandDelete.SetFParent(Value : TExtObject); begin
  FParent := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.parent=' + VarToJSON([Value, false]) + ';');
end;

function TCommandDelete.JSClassName : string; begin
  Result := 'CommandDelete';
end;

procedure TCommandDelete.InitDefaults; begin
  inherited;
  FFigure := TExtObject.CreateInternal(Self, 'figure');
  FParent := TExtObject.CreateInternal(Self, 'parent');
end;

{$IFDEF FPC}constructor TCommandDelete.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TCommandDelete.Create(Figure : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Figure, false]) + ');');
  InitDefaults;
end;

function TCommandDelete.Execute : TExtFunction; begin
  JSCode(JSName + '.execute();', 'TCommandDelete');
  Result := Self;
end;

function TCommandDelete.Redo : TExtFunction; begin
  JSCode(JSName + '.redo();', 'TCommandDelete');
  Result := Self;
end;

function TCommandDelete.Undo : TExtFunction; begin
  JSCode(JSName + '.undo();', 'TCommandDelete');
  Result := Self;
end;

destructor TCommandDelete.Destroy; begin
  try
    FFigure.Free;
    FParent.Free;
  except end;
  inherited;
end;

function TChopboxConnectionAnchor.JSClassName : string; begin
  Result := 'ChopboxConnectionAnchor';
end;

{$IFDEF FPC}constructor TChopboxConnectionAnchor.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TChopboxConnectionAnchor.Create(Owner : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Owner, false]) + ');');
  InitDefaults;
end;

function TChopboxConnectionAnchor.GetBox : TExtFunction; begin
  JSCode(JSName + '.getBox();', 'TChopboxConnectionAnchor');
  Result := Self;
end;

function TChopboxConnectionAnchor.GetLocation(Reference : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getLocation(' + VarToJSON([Reference, false]) + ');', 'TChopboxConnectionAnchor');
  Result := Self;
end;

function TChopboxConnectionAnchor.GetReferencePoint : TExtFunction; begin
  JSCode(JSName + '.getReferencePoint();', 'TChopboxConnectionAnchor');
  Result := Self;
end;

procedure TCommandResize.SetFFigure(Value : TExtObject); begin
  FFigure := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.figure=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandResize.SetFOldHeight(Value : TExtObject); begin
  FOldHeight := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.oldHeight=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandResize.SetFOldWidth(Value : TExtObject); begin
  FOldWidth := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.oldWidth=' + VarToJSON([Value, false]) + ';');
end;

function TCommandResize.JSClassName : string; begin
  Result := 'CommandResize';
end;

procedure TCommandResize.InitDefaults; begin
  inherited;
  FFigure := TExtObject.CreateInternal(Self, 'figure');
  FOldHeight := TExtObject.CreateInternal(Self, 'oldHeight');
  FOldWidth := TExtObject.CreateInternal(Self, 'oldWidth');
end;

{$IFDEF FPC}constructor TCommandResize.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TCommandResize.Create(Figure : TExtObject; Width : Integer; Height : Integer); begin
  CreateVar(JSClassName + '(' + VarToJSON([Figure, false, Width, Height]) + ');');
  InitDefaults;
end;

function TCommandResize.CanExecute : TExtFunction; begin
  JSCode(JSName + '.canExecute();', 'TCommandResize');
  Result := Self;
end;

function TCommandResize.Execute : TExtFunction; begin
  JSCode(JSName + '.execute();', 'TCommandResize');
  Result := Self;
end;

function TCommandResize.Redo : TExtFunction; begin
  JSCode(JSName + '.redo();', 'TCommandResize');
  Result := Self;
end;

function TCommandResize.SetDimension(Width : Integer; Height : Integer) : TExtFunction; begin
  JSCode(JSName + '.setDimension(' + VarToJSON([Width, Height]) + ');', 'TCommandResize');
  Result := Self;
end;

function TCommandResize.Undo : TExtFunction; begin
  JSCode(JSName + '.undo();', 'TCommandResize');
  Result := Self;
end;

destructor TCommandResize.Destroy; begin
  try
    FFigure.Free;
    FOldHeight.Free;
    FOldWidth.Free;
  except end;
  inherited;
end;

procedure TCommandMove.SetFFigure(Value : TExtObject); begin
  FFigure := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.figure=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandMove.SetFOldCompartment(Value : TExtObject); begin
  FOldCompartment := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.oldCompartment=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandMove.SetFOldX(Value : TExtObject); begin
  FOldX := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.oldX=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandMove.SetFOldY(Value : TExtObject); begin
  FOldY := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.oldY=' + VarToJSON([Value, false]) + ';');
end;

function TCommandMove.JSClassName : string; begin
  Result := 'CommandMove';
end;

procedure TCommandMove.InitDefaults; begin
  inherited;
  FFigure := TExtObject.CreateInternal(Self, 'figure');
  FOldCompartment := TExtObject.CreateInternal(Self, 'oldCompartment');
  FOldX := TExtObject.CreateInternal(Self, 'oldX');
  FOldY := TExtObject.CreateInternal(Self, 'oldY');
end;

{$IFDEF FPC}constructor TCommandMove.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TCommandMove.Create(Figure : TExtObject; X : Integer; Y : Integer); begin
  CreateVar(JSClassName + '(' + VarToJSON([Figure, false, X, Y]) + ');');
  InitDefaults;
end;

function TCommandMove.CanExecute : TExtFunction; begin
  JSCode(JSName + '.canExecute();', 'TCommandMove');
  Result := Self;
end;

function TCommandMove.Execute : TExtFunction; begin
  JSCode(JSName + '.execute();', 'TCommandMove');
  Result := Self;
end;

function TCommandMove.Redo : TExtFunction; begin
  JSCode(JSName + '.redo();', 'TCommandMove');
  Result := Self;
end;

function TCommandMove.SetPosition(X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.setPosition(' + VarToJSON([X, Y]) + ');', 'TCommandMove');
  Result := Self;
end;

function TCommandMove.SetStartPosition(X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.setStartPosition(' + VarToJSON([X, Y]) + ');', 'TCommandMove');
  Result := Self;
end;

function TCommandMove.Undo : TExtFunction; begin
  JSCode(JSName + '.undo();', 'TCommandMove');
  Result := Self;
end;

destructor TCommandMove.Destroy; begin
  try
    FFigure.Free;
    FOldCompartment.Free;
    FOldX.Free;
    FOldY.Free;
  except end;
  inherited;
end;

procedure TConnectionLocator.SetFConnection(Value : TExtObject); begin
  FConnection := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.connection=' + VarToJSON([Value, false]) + ';');
end;

function TConnectionLocator.JSClassName : string; begin
  Result := 'ConnectionLocator';
end;

procedure TConnectionLocator.InitDefaults; begin
  inherited;
  FConnection := TExtObject.CreateInternal(Self, 'connection');
end;

{$IFDEF FPC}constructor TConnectionLocator.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TConnectionLocator.Create(Connection : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Connection, false]) + ');');
  InitDefaults;
end;

function TConnectionLocator.GetConnection : TExtFunction; begin
  JSCode(JSName + '.getConnection();', 'TConnectionLocator');
  Result := Self;
end;

destructor TConnectionLocator.Destroy; begin
  try
    FConnection.Free;
  except end;
  inherited;
end;

procedure TCommandReconnect.SetFCon(Value : TExtObject); begin
  FCon := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.con=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandReconnect.SetFOldRouter(Value : TExtObject); begin
  FOldRouter := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.oldRouter=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandReconnect.SetFOldSourcePort(Value : TExtObject); begin
  FOldSourcePort := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.oldSourcePort=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandReconnect.SetFOldTargetPort(Value : TExtObject); begin
  FOldTargetPort := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.oldTargetPort=' + VarToJSON([Value, false]) + ';');
end;

function TCommandReconnect.JSClassName : string; begin
  Result := 'CommandReconnect';
end;

procedure TCommandReconnect.InitDefaults; begin
  inherited;
  FCon := TExtObject.CreateInternal(Self, 'con');
  FOldRouter := TExtObject.CreateInternal(Self, 'oldRouter');
  FOldSourcePort := TExtObject.CreateInternal(Self, 'oldSourcePort');
  FOldTargetPort := TExtObject.CreateInternal(Self, 'oldTargetPort');
end;

{$IFDEF FPC}constructor TCommandReconnect.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TCommandReconnect.Create(Con : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Con, false]) + ');');
  InitDefaults;
end;

function TCommandReconnect.Cancel : TExtFunction; begin
  JSCode(JSName + '.cancel();', 'TCommandReconnect');
  Result := Self;
end;

function TCommandReconnect.CanExecute : TExtFunction; begin
  JSCode(JSName + '.canExecute();', 'TCommandReconnect');
  Result := Self;
end;

function TCommandReconnect.Execute : TExtFunction; begin
  JSCode(JSName + '.execute();', 'TCommandReconnect');
  Result := Self;
end;

function TCommandReconnect.Redo : TExtFunction; begin
  JSCode(JSName + '.redo();', 'TCommandReconnect');
  Result := Self;
end;

function TCommandReconnect.SetNewPorts(Source : TExtObject; Target : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setNewPorts(' + VarToJSON([Source, false, Target, false]) + ');', 'TCommandReconnect');
  Result := Self;
end;

function TCommandReconnect.Undo : TExtFunction; begin
  JSCode(JSName + '.undo();', 'TCommandReconnect');
  Result := Self;
end;

destructor TCommandReconnect.Destroy; begin
  try
    FCon.Free;
    FOldRouter.Free;
    FOldSourcePort.Free;
    FOldTargetPort.Free;
  except end;
  inherited;
end;

procedure TCommandConnect.SetFConnection(Value : TExtObject); begin
  FConnection := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.connection=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandConnect.SetFSource(Value : TExtObject); begin
  FSource := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.source=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandConnect.SetFTarget(Value : TExtObject); begin
  FTarget := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.target=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandConnect.SetFWorkflow(Value : TExtObject); begin
  FWorkflow := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.workflow=' + VarToJSON([Value, false]) + ';');
end;

function TCommandConnect.JSClassName : string; begin
  Result := 'CommandConnect';
end;

procedure TCommandConnect.InitDefaults; begin
  inherited;
  FConnection := TExtObject.CreateInternal(Self, 'connection');
  FSource := TExtObject.CreateInternal(Self, 'source');
  FTarget := TExtObject.CreateInternal(Self, 'target');
  FWorkflow := TExtObject.CreateInternal(Self, 'workflow');
end;

{$IFDEF FPC}constructor TCommandConnect.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TCommandConnect.Create(Canvas : TExtObject; Source : TExtObject; Target : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Canvas, false, Source, false, Target, false]) + ');');
  InitDefaults;
end;

function TCommandConnect.Execute : TExtFunction; begin
  JSCode(JSName + '.execute();', 'TCommandConnect');
  Result := Self;
end;

function TCommandConnect.Redo : TExtFunction; begin
  JSCode(JSName + '.redo();', 'TCommandConnect');
  Result := Self;
end;

function TCommandConnect.SetConnection(Connection : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setConnection(' + VarToJSON([Connection, false]) + ');', 'TCommandConnect');
  Result := Self;
end;

function TCommandConnect.Undo : TExtFunction; begin
  JSCode(JSName + '.undo();', 'TCommandConnect');
  Result := Self;
end;

destructor TCommandConnect.Destroy; begin
  try
    FConnection.Free;
    FSource.Free;
    FTarget.Free;
    FWorkflow.Free;
  except end;
  inherited;
end;

procedure TCommandAdd.SetFFigure(Value : TExtObject); begin
  FFigure := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.figure=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandAdd.SetFParent(Value : TExtObject); begin
  FParent := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.parent=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandAdd.SetFWorkflow(Value : TExtObject); begin
  FWorkflow := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.workflow=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandAdd.SetFX(Value : TExtObject); begin
  FX := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.x=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandAdd.SetFY(Value : TExtObject); begin
  FY := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.y=' + VarToJSON([Value, false]) + ';');
end;

function TCommandAdd.JSClassName : string; begin
  Result := 'CommandAdd';
end;

procedure TCommandAdd.InitDefaults; begin
  inherited;
  FFigure := TExtObject.CreateInternal(Self, 'figure');
  FParent := TExtObject.CreateInternal(Self, 'parent');
  FWorkflow := TExtObject.CreateInternal(Self, 'workflow');
  FX := TExtObject.CreateInternal(Self, 'x');
  FY := TExtObject.CreateInternal(Self, 'y');
end;

{$IFDEF FPC}constructor TCommandAdd.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TCommandAdd.Create(Canvas : TExtObject; Figure : TExtObject; X : Integer; Y : Integer; Parent : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Canvas, false, Figure, false, X, Y, Parent, false]) + ');');
  InitDefaults;
end;

function TCommandAdd.Execute : TExtFunction; begin
  JSCode(JSName + '.execute();', 'TCommandAdd');
  Result := Self;
end;

function TCommandAdd.Redo : TExtFunction; begin
  JSCode(JSName + '.redo();', 'TCommandAdd');
  Result := Self;
end;

function TCommandAdd.Undo : TExtFunction; begin
  JSCode(JSName + '.undo();', 'TCommandAdd');
  Result := Self;
end;

destructor TCommandAdd.Destroy; begin
  try
    FFigure.Free;
    FParent.Free;
    FWorkflow.Free;
    FX.Free;
    FY.Free;
  except end;
  inherited;
end;

procedure TCommandMovePort.SetFPort(Value : TExtObject); begin
  FPort := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.port=' + VarToJSON([Value, false]) + ';');
end;

function TCommandMovePort.JSClassName : string; begin
  Result := 'CommandMovePort';
end;

procedure TCommandMovePort.InitDefaults; begin
  inherited;
  FPort := TExtObject.CreateInternal(Self, 'port');
end;

{$IFDEF FPC}constructor TCommandMovePort.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TCommandMovePort.Create(Port : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Port, false]) + ');');
  InitDefaults;
end;

function TCommandMovePort.Execute : TExtFunction; begin
  JSCode(JSName + '.execute();', 'TCommandMovePort');
  Result := Self;
end;

function TCommandMovePort.Redo : TExtFunction; begin
  JSCode(JSName + '.redo();', 'TCommandMovePort');
  Result := Self;
end;

function TCommandMovePort.SetPosition(X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.setPosition(' + VarToJSON([X, Y]) + ');', 'TCommandMovePort');
  Result := Self;
end;

function TCommandMovePort.Undo : TExtFunction; begin
  JSCode(JSName + '.undo();', 'TCommandMovePort');
  Result := Self;
end;

destructor TCommandMovePort.Destroy; begin
  try
    FPort.Free;
  except end;
  inherited;
end;

procedure TConnection.SetFChildren(Value : TExtObject); begin
  FChildren := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.children=' + VarToJSON([Value, false]) + ';');
end;

procedure TConnection.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TConnection.JSClassName : string; begin
  Result := 'Connection';
end;

class function TConnection.DefaultRouter : TExtObject;
const
  lDefaultRouter : TExtObject = nil;
begin
  if lDefaultRouter = nil then lDefaultRouter := TExtObject.CreateSingleton('Connection.defaultRouter');
  Result := lDefaultRouter
end;

procedure TConnection.InitDefaults; begin
  inherited;
  FChildren := TExtObject.CreateInternal(Self, 'children');
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TConnection.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TConnection.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TConnection.AddFigure(Figure : TFigure; Locator : TConnectionLocator) : TExtFunction; begin
  JSCode(JSName + '.addFigure(' + VarToJSON([Figure, false, Locator, false]) + ');', 'TConnection');
  Result := Self;
end;

function TConnection.AddPoint(P : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.addPoint(' + VarToJSON([P, false]) + ');', 'TConnection');
  Result := Self;
end;

function TConnection.ContainsPoint(Px : Integer; Py : Integer) : TExtFunction; begin
  JSCode(JSName + '.containsPoint(' + VarToJSON([Px, Py]) + ');', 'TConnection');
  Result := Self;
end;

function TConnection.CreateCommand(Request : TEditPolicy) : TExtFunction; begin
  JSCode(JSName + '.createCommand(' + VarToJSON([Request, false]) + ');', 'TConnection');
  Result := Self;
end;

function TConnection.FinishStroke : TExtFunction; begin
  JSCode(JSName + '.finishStroke();', 'TConnection');
  Result := Self;
end;

function TConnection.GetEndAngle : TExtFunction; begin
  JSCode(JSName + '.getEndAngle();', 'TConnection');
  Result := Self;
end;

function TConnection.GetEndPoint : TExtFunction; begin
  JSCode(JSName + '.getEndPoint();', 'TConnection');
  Result := Self;
end;

function TConnection.GetPoints : TExtFunction; begin
  JSCode(JSName + '.getPoints();', 'TConnection');
  Result := Self;
end;

function TConnection.GetRouter : TExtFunction; begin
  JSCode(JSName + '.getRouter();', 'TConnection');
  Result := Self;
end;

function TConnection.GetSource : TExtFunction; begin
  JSCode(JSName + '.getSource();', 'TConnection');
  Result := Self;
end;

function TConnection.GetStartAngle : TExtFunction; begin
  JSCode(JSName + '.getStartAngle();', 'TConnection');
  Result := Self;
end;

function TConnection.GetStartPoint : TExtFunction; begin
  JSCode(JSName + '.getStartPoint();', 'TConnection');
  Result := Self;
end;

function TConnection.GetTarget : TExtFunction; begin
  JSCode(JSName + '.getTarget();', 'TConnection');
  Result := Self;
end;

function TConnection.IsResizeable : TExtFunction; begin
  JSCode(JSName + '.isResizeable();', 'TConnection');
  Result := Self;
end;

function TConnection.SetRouter(Router : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setRouter(' + VarToJSON([Router, false]) + ');', 'TConnection');
  Result := Self;
end;

function TConnection.SetSource(Port : TPort) : TExtFunction; begin
  JSCode(JSName + '.setSource(' + VarToJSON([Port, false]) + ');', 'TConnection');
  Result := Self;
end;

function TConnection.SetSourceAnchor(Anchor : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setSourceAnchor(' + VarToJSON([Anchor, false]) + ');', 'TConnection');
  Result := Self;
end;

function TConnection.SetSourceDecorator(Decorator : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setSourceDecorator(' + VarToJSON([Decorator, false]) + ');', 'TConnection');
  Result := Self;
end;

function TConnection.SetTarget(Port : TPort) : TExtFunction; begin
  JSCode(JSName + '.setTarget(' + VarToJSON([Port, false]) + ');', 'TConnection');
  Result := Self;
end;

function TConnection.SetTargetAnchor(Anchor : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setTargetAnchor(' + VarToJSON([Anchor, false]) + ');', 'TConnection');
  Result := Self;
end;

function TConnection.SetTargetDecorator(Decorator : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setTargetDecorator(' + VarToJSON([Decorator, false]) + ');', 'TConnection');
  Result := Self;
end;

function TConnection.StartStroke : TExtFunction; begin
  JSCode(JSName + '.startStroke();', 'TConnection');
  Result := Self;
end;

function TConnection.SetDefaultRouter(Router : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setDefaultRouter(' + VarToJSON([Router, false]) + ');', 'TConnection');
  Result := Self;
end;

destructor TConnection.Destroy; begin
  try
    FChildren.Free;
    FTypeJS.Free;
  except end;
  inherited;
end;

procedure TDimension.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TDimension.JSClassName : string; begin
  Result := 'Dimension';
end;

procedure TDimension.InitDefaults; begin
  inherited;
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TDimension.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TDimension.Create(X : Integer; Y : Integer; W : Integer; H : Integer); begin
  CreateVar(JSClassName + '(' + VarToJSON([X, Y, W, H]) + ');');
  InitDefaults;
end;

function TDimension.Equals(O : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.equals(' + VarToJSON([O, false]) + ');', 'TDimension');
  Result := Self;
end;

function TDimension.GetBottom : TExtFunction; begin
  JSCode(JSName + '.getBottom();', 'TDimension');
  Result := Self;
end;

function TDimension.GetBottomRight : TExtFunction; begin
  JSCode(JSName + '.getBottomRight();', 'TDimension');
  Result := Self;
end;

function TDimension.GetCenter : TExtFunction; begin
  JSCode(JSName + '.getCenter();', 'TDimension');
  Result := Self;
end;

function TDimension.GetHeight : TExtFunction; begin
  JSCode(JSName + '.getHeight();', 'TDimension');
  Result := Self;
end;

function TDimension.GetRight : TExtFunction; begin
  JSCode(JSName + '.getRight();', 'TDimension');
  Result := Self;
end;

function TDimension.GetTopLeft : TExtFunction; begin
  JSCode(JSName + '.getTopLeft();', 'TDimension');
  Result := Self;
end;

function TDimension.GetWidth : TExtFunction; begin
  JSCode(JSName + '.getWidth();', 'TDimension');
  Result := Self;
end;

function TDimension.IsEmpty : TExtFunction; begin
  JSCode(JSName + '.isEmpty();', 'TDimension');
  Result := Self;
end;

function TDimension.Resize(Dw : Integer; Dh : Integer) : TExtFunction; begin
  JSCode(JSName + '.resize(' + VarToJSON([Dw, Dh]) + ');', 'TDimension');
  Result := Self;
end;

function TDimension.SetBounds(Rect : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setBounds(' + VarToJSON([Rect, false]) + ');', 'TDimension');
  Result := Self;
end;

function TDimension.Translate(Dx : Integer; Dy : Integer) : TExtFunction; begin
  JSCode(JSName + '.translate(' + VarToJSON([Dx, Dy]) + ');', 'TDimension');
  Result := Self;
end;

destructor TDimension.Destroy; begin
  try
    FTypeJS.Free;
  except end;
  inherited;
end;

procedure TCommandMoveLine.SetFEndX1(Value : TExtObject); begin
  FEndX1 := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.endX1=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandMoveLine.SetFEndY1(Value : TExtObject); begin
  FEndY1 := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.endY1=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandMoveLine.SetFLine(Value : TExtObject); begin
  FLine := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.line=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandMoveLine.SetFStartX1(Value : TExtObject); begin
  FStartX1 := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.startX1=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandMoveLine.SetFStartY1(Value : TExtObject); begin
  FStartY1 := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.startY1=' + VarToJSON([Value, false]) + ';');
end;

function TCommandMoveLine.JSClassName : string; begin
  Result := 'CommandMoveLine';
end;

procedure TCommandMoveLine.InitDefaults; begin
  inherited;
  FEndX1 := TExtObject.CreateInternal(Self, 'endX1');
  FEndY1 := TExtObject.CreateInternal(Self, 'endY1');
  FLine := TExtObject.CreateInternal(Self, 'line');
  FStartX1 := TExtObject.CreateInternal(Self, 'startX1');
  FStartY1 := TExtObject.CreateInternal(Self, 'startY1');
end;

{$IFDEF FPC}constructor TCommandMoveLine.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TCommandMoveLine.Create(Line : TExtObject; StartX : TExtObject; StartY : TExtObject; EndX : TExtObject; EndY : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Line, false, StartX, false, StartY, false, EndX, false, EndY, false]) + ');');
  InitDefaults;
end;

function TCommandMoveLine.CanExecute : TExtFunction; begin
  JSCode(JSName + '.canExecute();', 'TCommandMoveLine');
  Result := Self;
end;

function TCommandMoveLine.Execute : TExtFunction; begin
  JSCode(JSName + '.execute();', 'TCommandMoveLine');
  Result := Self;
end;

function TCommandMoveLine.Redo : TExtFunction; begin
  JSCode(JSName + '.redo();', 'TCommandMoveLine');
  Result := Self;
end;

function TCommandMoveLine.Undo : TExtFunction; begin
  JSCode(JSName + '.undo();', 'TCommandMoveLine');
  Result := Self;
end;

destructor TCommandMoveLine.Destroy; begin
  try
    FEndX1.Free;
    FEndY1.Free;
    FLine.Free;
    FStartX1.Free;
    FStartY1.Free;
  except end;
  inherited;
end;

procedure TCommandSetBackgroundColor.SetFFigure(Value : TExtObject); begin
  FFigure := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.figure=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandSetBackgroundColor.SetFNewColor(Value : TExtObject); begin
  FNewColor := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.newColor=' + VarToJSON([Value, false]) + ';');
end;

procedure TCommandSetBackgroundColor.SetFOldColor(Value : TExtObject); begin
  FOldColor := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.oldColor=' + VarToJSON([Value, false]) + ';');
end;

function TCommandSetBackgroundColor.JSClassName : string; begin
  Result := 'CommandSetBackgroundColor';
end;

procedure TCommandSetBackgroundColor.InitDefaults; begin
  inherited;
  FFigure := TExtObject.CreateInternal(Self, 'figure');
  FNewColor := TExtObject.CreateInternal(Self, 'newColor');
  FOldColor := TExtObject.CreateInternal(Self, 'oldColor');
end;

{$IFDEF FPC}constructor TCommandSetBackgroundColor.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TCommandSetBackgroundColor.Create(Figure : TExtObject; Color : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Figure, false, Color, false]) + ');');
  InitDefaults;
end;

function TCommandSetBackgroundColor.Execute : TExtFunction; begin
  JSCode(JSName + '.execute();', 'TCommandSetBackgroundColor');
  Result := Self;
end;

function TCommandSetBackgroundColor.Redo : TExtFunction; begin
  JSCode(JSName + '.redo();', 'TCommandSetBackgroundColor');
  Result := Self;
end;

function TCommandSetBackgroundColor.Undo : TExtFunction; begin
  JSCode(JSName + '.undo();', 'TCommandSetBackgroundColor');
  Result := Self;
end;

destructor TCommandSetBackgroundColor.Destroy; begin
  try
    FFigure.Free;
    FNewColor.Free;
    FOldColor.Free;
  except end;
  inherited;
end;

function TPropertyWindow.JSClassName : string; begin
  Result := 'PropertyWindow';
end;

{$IFDEF FPC}constructor TPropertyWindow.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TPropertyWindow.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TPropertyWindow.CreateLabel(Text : string; X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.createLabel(' + VarToJSON([Text, X, Y]) + ');', 'TPropertyWindow');
  Result := Self;
end;

function TPropertyWindow.GetCurrentSelection : TExtFunction; begin
  JSCode(JSName + '.getCurrentSelection();', 'TPropertyWindow');
  Result := Self;
end;

function TPropertyWindow.OnSelectionChanged(Figure : TFigure) : TExtFunction; begin
  JSCode(JSName + '.onSelectionChanged(' + VarToJSON([Figure, false]) + ');', 'TPropertyWindow');
  Result := Self;
end;

function TDialog.JSClassName : string; begin
  Result := 'Dialog';
end;

{$IFDEF FPC}constructor TDialog.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TDialog.Create(Title : string); begin
  CreateVar(JSClassName + '(' + VarToJSON([Title]) + ');');
  InitDefaults;
end;

function TDialog.OnCancel : TExtFunction; begin
  JSCode(JSName + '.onCancel();', 'TDialog');
  Result := Self;
end;

function TDialog.OnOk : TExtFunction; begin
  JSCode(JSName + '.onOk();', 'TDialog');
  Result := Self;
end;

function TDialog.OnSetDocumentDirty : TExtFunction; begin
  JSCode(JSName + '.onSetDocumentDirty();', 'TDialog');
  Result := Self;
end;

function TDialog.SetDimension(W : Integer; H : Integer) : TExtFunction; begin
  JSCode(JSName + '.setDimension(' + VarToJSON([W, H]) + ');', 'TDialog');
  Result := Self;
end;

function TDialog.SetFocus : TExtFunction; begin
  JSCode(JSName + '.setFocus();', 'TDialog');
  Result := Self;
end;

function TResizeHandle.JSClassName : string; begin
  Result := 'ResizeHandle';
end;

{$IFDEF FPC}constructor TResizeHandle.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TResizeHandle.Create(Workflow : TExtObject; TypeJS : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Workflow, false, TypeJS, false]) + ');');
  InitDefaults;
end;

function TResizeHandle.GetSnapToDirection : TExtFunction; begin
  JSCode(JSName + '.getSnapToDirection();', 'TResizeHandle');
  Result := Self;
end;

function TResizeHandle.OnDragstart(X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.onDragstart(' + VarToJSON([X, Y]) + ');', 'TResizeHandle');
  Result := Self;
end;

function TResizeHandle.OnKeyDown(KeyCode : Integer; Ctrl : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.onKeyDown(' + VarToJSON([KeyCode, Ctrl, false]) + ');', 'TResizeHandle');
  Result := Self;
end;

function TResizeHandle.SetCanDrag(Flag : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setCanDrag(' + VarToJSON([Flag]) + ');', 'TResizeHandle');
  Result := Self;
end;

function TResizeHandle.SetPosition(XPos : Integer; YPos : Integer) : TExtFunction; begin
  JSCode(JSName + '.setPosition(' + VarToJSON([XPos, YPos]) + ');', 'TResizeHandle');
  Result := Self;
end;

function TToolPalette.JSClassName : string; begin
  Result := 'ToolPalette';
end;

{$IFDEF FPC}constructor TToolPalette.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TToolPalette.Create(Title : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Title, false]) + ');');
  InitDefaults;
end;

function TToolPalette.AddChild(Item : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.addChild(' + VarToJSON([Item, false]) + ');', 'TToolPalette');
  Result := Self;
end;

function TToolPalette.GetActiveTool : TExtFunction; begin
  JSCode(JSName + '.getActiveTool();', 'TToolPalette');
  Result := Self;
end;

function TToolPalette.GetChild(Id : string) : TExtFunction; begin
  JSCode(JSName + '.getChild(' + VarToJSON([Id]) + ');', 'TToolPalette');
  Result := Self;
end;

function TToolPalette.SetActiveTool(Tool : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setActiveTool(' + VarToJSON([Tool, false]) + ');', 'TToolPalette');
  Result := Self;
end;

function TToolPalette.SetDimension(W : Integer; H : Integer) : TExtFunction; begin
  JSCode(JSName + '.setDimension(' + VarToJSON([W, H]) + ');', 'TToolPalette');
  Result := Self;
end;

function TSVGFigure.JSClassName : string; begin
  Result := 'SVGFigure';
end;

{$IFDEF FPC}constructor TSVGFigure.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TSVGFigure.Create(Width : Integer; Height : Integer); begin
  CreateVar(JSClassName + '(' + VarToJSON([Width, Height]) + ');');
  InitDefaults;
end;

function TSVGFigure.GetBackgroundColor : TExtFunction; begin
  JSCode(JSName + '.getBackgroundColor();', 'TSVGFigure');
  Result := Self;
end;

function TSVGFigure.GetColor : TExtFunction; begin
  JSCode(JSName + '.getColor();', 'TSVGFigure');
  Result := Self;
end;

function TSVGFigure.SetBackgroundColor(Color : TColor) : TExtFunction; begin
  JSCode(JSName + '.setBackgroundColor(' + VarToJSON([Color, false]) + ');', 'TSVGFigure');
  Result := Self;
end;

function TSVGFigure.SetColor(Color : TColor) : TExtFunction; begin
  JSCode(JSName + '.setColor(' + VarToJSON([Color, false]) + ');', 'TSVGFigure');
  Result := Self;
end;

function TSVGFigure.SetDimension(W : Integer; H : Integer) : TExtFunction; begin
  JSCode(JSName + '.setDimension(' + VarToJSON([W, H]) + ');', 'TSVGFigure');
  Result := Self;
end;

function TSVGFigure.SetLineWidth(W : Integer) : TExtFunction; begin
  JSCode(JSName + '.setLineWidth(' + VarToJSON([W]) + ');', 'TSVGFigure');
  Result := Self;
end;

function TVectorFigure.JSClassName : string; begin
  Result := 'VectorFigure';
end;

{$IFDEF FPC}constructor TVectorFigure.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TVectorFigure.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TVectorFigure.GetBackgroundColor : TExtFunction; begin
  JSCode(JSName + '.getBackgroundColor();', 'TVectorFigure');
  Result := Self;
end;

function TVectorFigure.GetColor : TExtFunction; begin
  JSCode(JSName + '.getColor();', 'TVectorFigure');
  Result := Self;
end;

function TVectorFigure.SetBackgroundColor(Color : TColor) : TExtFunction; begin
  JSCode(JSName + '.setBackgroundColor(' + VarToJSON([Color, false]) + ');', 'TVectorFigure');
  Result := Self;
end;

function TVectorFigure.SetColor(Color : TColor) : TExtFunction; begin
  JSCode(JSName + '.setColor(' + VarToJSON([Color, false]) + ');', 'TVectorFigure');
  Result := Self;
end;

function TVectorFigure.SetDimension(W : Integer; H : Integer) : TExtFunction; begin
  JSCode(JSName + '.setDimension(' + VarToJSON([W, H]) + ');', 'TVectorFigure');
  Result := Self;
end;

function TVectorFigure.SetLineWidth(W : Integer) : TExtFunction; begin
  JSCode(JSName + '.setLineWidth(' + VarToJSON([W]) + ');', 'TVectorFigure');
  Result := Self;
end;

procedure TFanConnectionRouter.SetFTypeJS(Value : TExtObject); begin
  FTypeJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.type=' + VarToJSON([Value, false]) + ';');
end;

function TFanConnectionRouter.JSClassName : string; begin
  Result := 'FanConnectionRouter';
end;

procedure TFanConnectionRouter.InitDefaults; begin
  inherited;
  FTypeJS := TExtObject.CreateInternal(Self, 'type');
end;

{$IFDEF FPC}constructor TFanConnectionRouter.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TFanConnectionRouter.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TFanConnectionRouter.Route(Conn : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.route(' + VarToJSON([Conn, false]) + ');', 'TFanConnectionRouter');
  Result := Self;
end;

function TFanConnectionRouter.RouteCollision(Conn : TExtObject; Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.routeCollision(' + VarToJSON([Conn, false, Index]) + ');', 'TFanConnectionRouter');
  Result := Self;
end;

function TFanConnectionRouter.RouteNormal(Conn : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.routeNormal(' + VarToJSON([Conn, false]) + ');', 'TFanConnectionRouter');
  Result := Self;
end;

destructor TFanConnectionRouter.Destroy; begin
  try
    FTypeJS.Free;
  except end;
  inherited;
end;

function TImageFigure.JSClassName : string; begin
  Result := 'ImageFigure';
end;

{$IFDEF FPC}constructor TImageFigure.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TImageFigure.Create(Url : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Url, false]) + ');');
  InitDefaults;
end;

function TImageFigure.IsResizeable : TExtFunction; begin
  JSCode(JSName + '.isResizeable();', 'TImageFigure');
  Result := Self;
end;

function TImageFigure.SetImage(Url : string) : TExtFunction; begin
  JSCode(JSName + '.setImage(' + VarToJSON([Url]) + ');', 'TImageFigure');
  Result := Self;
end;

function TManhattanMidpointLocator.JSClassName : string; begin
  Result := 'ManhattanMidpointLocator';
end;

{$IFDEF FPC}constructor TManhattanMidpointLocator.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TManhattanMidpointLocator.Create(Connection : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Connection, false]) + ');');
  InitDefaults;
end;

function TManhattanMidpointLocator.Relocate(Target : TFigure) : TExtFunction; begin
  JSCode(JSName + '.relocate(' + VarToJSON([Target, false]) + ');', 'TManhattanMidpointLocator');
  Result := Self;
end;

function TCompartmentFigure.JSClassName : string; begin
  Result := 'CompartmentFigure';
end;

{$IFDEF FPC}constructor TCompartmentFigure.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TCompartmentFigure.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TCompartmentFigure.AddChild(Figure : TFigure) : TExtFunction; begin
  JSCode(JSName + '.addChild(' + VarToJSON([Figure, false]) + ');', 'TCompartmentFigure');
  Result := Self;
end;

function TCompartmentFigure.GetChildren : TExtFunction; begin
  JSCode(JSName + '.getChildren();', 'TCompartmentFigure');
  Result := Self;
end;

function TCompartmentFigure.OnFigureDrop(Figure : TFigure) : TExtFunction; begin
  JSCode(JSName + '.onFigureDrop(' + VarToJSON([Figure, false]) + ');', 'TCompartmentFigure');
  Result := Self;
end;

function TCompartmentFigure.OnFigureEnter(Figure : TFigure) : TExtFunction; begin
  JSCode(JSName + '.onFigureEnter(' + VarToJSON([Figure, false]) + ');', 'TCompartmentFigure');
  Result := Self;
end;

function TCompartmentFigure.RemoveChild(Figure : TFigure) : TExtFunction; begin
  JSCode(JSName + '.removeChild(' + VarToJSON([Figure, false]) + ');', 'TCompartmentFigure');
  Result := Self;
end;

function TCompartmentFigure.SetPosition(XPos : Integer; YPos : Integer) : TExtFunction; begin
  JSCode(JSName + '.setPosition(' + VarToJSON([XPos, YPos]) + ');', 'TCompartmentFigure');
  Result := Self;
end;

function TCompartmentFigure.SetZOrder(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.setZOrder(' + VarToJSON([Index]) + ');', 'TCompartmentFigure');
  Result := Self;
end;

procedure TGraphicalViewer.SetFFactory(Value : TExtObject); begin
  FFactory := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.factory=' + VarToJSON([Value, false]) + ';');
end;

procedure TGraphicalViewer.SetFInitDone(Value : TExtObject); begin
  FInitDone := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.initDone=' + VarToJSON([Value, false]) + ';');
end;

procedure TGraphicalViewer.SetFModel(Value : TExtObject); begin
  FModel := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.model=' + VarToJSON([Value, false]) + ';');
end;

function TGraphicalViewer.JSClassName : string; begin
  Result := 'GraphicalViewer';
end;

procedure TGraphicalViewer.InitDefaults; begin
  inherited;
  FFactory := TExtObject.CreateInternal(Self, 'factory');
  FInitDone := TExtObject.CreateInternal(Self, 'initDone');
  FModel := TExtObject.CreateInternal(Self, 'model');
end;

{$IFDEF FPC}constructor TGraphicalViewer.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TGraphicalViewer.Create(Id : string); begin
  CreateVar(JSClassName + '(' + VarToJSON([Id]) + ');');
  InitDefaults;
end;

function TGraphicalViewer.SetEditPartFactory(Factory : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setEditPartFactory(' + VarToJSON([Factory, false]) + ');', 'TGraphicalViewer');
  Result := Self;
end;

function TGraphicalViewer.SetModel(Model : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setModel(' + VarToJSON([Model, false]) + ');', 'TGraphicalViewer');
  Result := Self;
end;

destructor TGraphicalViewer.Destroy; begin
  try
    FFactory.Free;
    FInitDone.Free;
    FModel.Free;
  except end;
  inherited;
end;

procedure TPort.SetFConnectedUIRepresentation(Value : TExtObject); begin
  FConnectedUIRepresentation := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.connectedUIRepresentation=' + VarToJSON([Value, false]) + ';');
end;

procedure TPort.SetFCurrentUIRepresentation(Value : TExtObject); begin
  FCurrentUIRepresentation := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.currentUIRepresentation=' + VarToJSON([Value, false]) + ';');
end;

procedure TPort.SetFDisconnectedUIRepresentation(Value : TExtObject); begin
  FDisconnectedUIRepresentation := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.disconnectedUIRepresentation=' + VarToJSON([Value, false]) + ';');
end;

procedure TPort.SetFHideIfConnected(Value : TExtObject); begin
  FHideIfConnected := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.hideIfConnected=' + VarToJSON([Value, false]) + ';');
end;

procedure TPort.SetFUiRepresentationAdded(Value : TExtObject); begin
  FUiRepresentationAdded := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.uiRepresentationAdded=' + VarToJSON([Value, false]) + ';');
end;

function TPort.JSClassName : string; begin
  Result := 'Port';
end;

procedure TPort.InitDefaults; begin
  inherited;
  FConnectedUIRepresentation := TExtObject.CreateInternal(Self, 'connectedUIRepresentation');
  FCurrentUIRepresentation := TExtObject.CreateInternal(Self, 'currentUIRepresentation');
  FDisconnectedUIRepresentation := TExtObject.CreateInternal(Self, 'disconnectedUIRepresentation');
  FHideIfConnected := TExtObject.CreateInternal(Self, 'hideIfConnected');
  FUiRepresentationAdded := TExtObject.CreateInternal(Self, 'uiRepresentationAdded');
end;

{$IFDEF FPC}constructor TPort.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TPort.Create(DisconnectedUIRepresentation : TExtObject; ConnectedUIRepresentation : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([DisconnectedUIRepresentation, false, ConnectedUIRepresentation, false]) + ');');
  InitDefaults;
end;

function TPort.AttachMoveListener(Figure : TFigure) : TExtFunction; begin
  JSCode(JSName + '.attachMoveListener(' + VarToJSON([Figure, false]) + ');', 'TPort');
  Result := Self;
end;

function TPort.CreateCommand(Request : TEditPolicy) : TExtFunction; begin
  JSCode(JSName + '.createCommand(' + VarToJSON([Request, false]) + ');', 'TPort');
  Result := Self;
end;

function TPort.DetachMoveListener(Figure : TFigure) : TExtFunction; begin
  JSCode(JSName + '.detachMoveListener(' + VarToJSON([Figure, false]) + ');', 'TPort');
  Result := Self;
end;

function TPort.GetAbsoluteBounds : TExtFunction; begin
  JSCode(JSName + '.getAbsoluteBounds();', 'TPort');
  Result := Self;
end;

function TPort.GetAbsolutePosition : TExtFunction; begin
  JSCode(JSName + '.getAbsolutePosition();', 'TPort');
  Result := Self;
end;

function TPort.GetAbsoluteX : TExtFunction; begin
  JSCode(JSName + '.getAbsoluteX();', 'TPort');
  Result := Self;
end;

function TPort.GetAbsoluteY : TExtFunction; begin
  JSCode(JSName + '.getAbsoluteY();', 'TPort');
  Result := Self;
end;

function TPort.GetBackgroundColor : TExtFunction; begin
  JSCode(JSName + '.getBackgroundColor();', 'TPort');
  Result := Self;
end;

function TPort.GetColor : TExtFunction; begin
  JSCode(JSName + '.getColor();', 'TPort');
  Result := Self;
end;

function TPort.GetConnections : TExtFunction; begin
  JSCode(JSName + '.getConnections();', 'TPort');
  Result := Self;
end;

function TPort.GetCoronaWidth : TExtFunction; begin
  JSCode(JSName + '.getCoronaWidth();', 'TPort');
  Result := Self;
end;

function TPort.GetLineWidth : TExtFunction; begin
  JSCode(JSName + '.getLineWidth();', 'TPort');
  Result := Self;
end;

function TPort.GetName : TExtFunction; begin
  JSCode(JSName + '.getName();', 'TPort');
  Result := Self;
end;

function TPort.GetParent : TExtFunction; begin
  JSCode(JSName + '.getParent();', 'TPort');
  Result := Self;
end;

function TPort.IsOver(IX : Integer; IY : Integer) : TExtFunction; begin
  JSCode(JSName + '.isOver(' + VarToJSON([IX, IY]) + ');', 'TPort');
  Result := Self;
end;

function TPort.OnOtherFigureMoved(Figure : TFigure) : TExtFunction; begin
  JSCode(JSName + '.onOtherFigureMoved(' + VarToJSON([Figure, false]) + ');', 'TPort');
  Result := Self;
end;

function TPort.SetBackgroundColor(Color : TColor) : TExtFunction; begin
  JSCode(JSName + '.setBackgroundColor(' + VarToJSON([Color, false]) + ');', 'TPort');
  Result := Self;
end;

function TPort.SetColor(Color : TColor) : TExtFunction; begin
  JSCode(JSName + '.setColor(' + VarToJSON([Color, false]) + ');', 'TPort');
  Result := Self;
end;

function TPort.SetCoronaWidth(Width : Integer) : TExtFunction; begin
  JSCode(JSName + '.setCoronaWidth(' + VarToJSON([Width]) + ');', 'TPort');
  Result := Self;
end;

function TPort.SetDimension(Width : Integer; Height : Integer) : TExtFunction; begin
  JSCode(JSName + '.setDimension(' + VarToJSON([Width, Height]) + ');', 'TPort');
  Result := Self;
end;

function TPort.SetHideIfConnected(Flag : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setHideIfConnected(' + VarToJSON([Flag]) + ');', 'TPort');
  Result := Self;
end;

function TPort.SetLineWidth(Width : Integer) : TExtFunction; begin
  JSCode(JSName + '.setLineWidth(' + VarToJSON([Width]) + ');', 'TPort');
  Result := Self;
end;

function TPort.SetName(Name : string) : TExtFunction; begin
  JSCode(JSName + '.setName(' + VarToJSON([Name]) + ');', 'TPort');
  Result := Self;
end;

function TPort.SetPosition(XPos : Integer; YPos : Integer) : TExtFunction; begin
  JSCode(JSName + '.setPosition(' + VarToJSON([XPos, YPos]) + ');', 'TPort');
  Result := Self;
end;

function TPort.SetUiRepresentation(Figure : TFigure) : TExtFunction; begin
  JSCode(JSName + '.setUiRepresentation(' + VarToJSON([Figure, false]) + ');', 'TPort');
  Result := Self;
end;

function TPort.SetZOrderBaseIndex(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.setZOrderBaseIndex(' + VarToJSON([Index]) + ');', 'TPort');
  Result := Self;
end;

destructor TPort.Destroy; begin
  try
    FConnectedUIRepresentation.Free;
    FCurrentUIRepresentation.Free;
    FDisconnectedUIRepresentation.Free;
    FHideIfConnected.Free;
    FUiRepresentationAdded.Free;
  except end;
  inherited;
end;

function TInputPort.JSClassName : string; begin
  Result := 'InputPort';
end;

{$IFDEF FPC}constructor TInputPort.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TInputPort.Create(UiRepresentation : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([UiRepresentation, false]) + ');');
  InitDefaults;
end;

function TInputPort.CreateCommand(Request : TEditPolicy) : TExtFunction; begin
  JSCode(JSName + '.createCommand(' + VarToJSON([Request, false]) + ');', 'TInputPort');
  Result := Self;
end;

function TPropertyDialog.JSClassName : string; begin
  Result := 'PropertyDialog';
end;

{$IFDEF FPC}constructor TPropertyDialog.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TPropertyDialog.Create(Figure : TExtObject; PropertyName : string; LabelJS : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Figure, false, PropertyName, LabelJS, false]) + ');');
  InitDefaults;
end;

function TPropertyDialog.OnOk : TExtFunction; begin
  JSCode(JSName + '.onOk();', 'TPropertyDialog');
  Result := Self;
end;

function TColorDialog.JSClassName : string; begin
  Result := 'ColorDialog';
end;

{$IFDEF FPC}constructor TColorDialog.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TColorDialog.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TColorDialog.OnOk : TExtFunction; begin
  JSCode(JSName + '.onOk();', 'TColorDialog');
  Result := Self;
end;

function TOutputPort.JSClassName : string; begin
  Result := 'OutputPort';
end;

{$IFDEF FPC}constructor TOutputPort.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TOutputPort.Create(UiRepresentation : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([UiRepresentation, false]) + ');');
  InitDefaults;
end;

function TOutputPort.CreateCommand(Request : TEditPolicy) : TExtFunction; begin
  JSCode(JSName + '.createCommand(' + VarToJSON([Request, false]) + ');', 'TOutputPort');
  Result := Self;
end;

function TOutputPort.GetFanOut : TExtFunction; begin
  JSCode(JSName + '.getFanOut();', 'TOutputPort');
  Result := Self;
end;

function TOutputPort.GetMaxFanOut : TExtFunction; begin
  JSCode(JSName + '.getMaxFanOut();', 'TOutputPort');
  Result := Self;
end;

function TOutputPort.SetMaxFanOut(Count : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setMaxFanOut(' + VarToJSON([Count, false]) + ');', 'TOutputPort');
  Result := Self;
end;

function TAnnotationDialog.JSClassName : string; begin
  Result := 'AnnotationDialog';
end;

{$IFDEF FPC}constructor TAnnotationDialog.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TAnnotationDialog.Create(AnnotationFigure : TAnnotation); begin
  CreateVar(JSClassName + '(' + VarToJSON([AnnotationFigure, false]) + ');');
  InitDefaults;
end;

function TAnnotationDialog.OnOk : TExtFunction; begin
  JSCode(JSName + '.onOk();', 'TAnnotationDialog');
  Result := Self;
end;

function TOval.JSClassName : string; begin
  Result := 'Oval';
end;

{$IFDEF FPC}constructor TOval.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TOval.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TInputDialog.JSClassName : string; begin
  Result := 'InputDialog';
end;

{$IFDEF FPC}constructor TInputDialog.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TInputDialog.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TInputDialog.OnCancel : TExtFunction; begin
  JSCode(JSName + '.onCancel();', 'TInputDialog');
  Result := Self;
end;

function TInputDialog.OnOk : TExtFunction; begin
  JSCode(JSName + '.onOk();', 'TInputDialog');
  Result := Self;
end;

function TCircle.JSClassName : string; begin
  Result := 'Circle';
end;

{$IFDEF FPC}constructor TCircle.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TCircle.Create(Radius : Integer); begin
  CreateVar(JSClassName + '(' + VarToJSON([Radius]) + ');');
  InitDefaults;
end;

function TCircle.IsStrechable : TExtFunction; begin
  JSCode(JSName + '.isStrechable();', 'TCircle');
  Result := Self;
end;

function TCircle.SetDimension(W : Integer; H : Integer) : TExtFunction; begin
  JSCode(JSName + '.setDimension(' + VarToJSON([W, H]) + ');', 'TCircle');
  Result := Self;
end;

procedure TBackgroundColorDialog.SetFFigure(Value : TExtObject); begin
  FFigure := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.figure=' + VarToJSON([Value, false]) + ';');
end;

function TBackgroundColorDialog.JSClassName : string; begin
  Result := 'BackgroundColorDialog';
end;

procedure TBackgroundColorDialog.InitDefaults; begin
  inherited;
  FFigure := TExtObject.CreateInternal(Self, 'figure');
end;

{$IFDEF FPC}constructor TBackgroundColorDialog.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TBackgroundColorDialog.Create(Figure : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Figure, false]) + ');');
  InitDefaults;
end;

destructor TBackgroundColorDialog.Destroy; begin
  try
    FFigure.Free;
  except end;
  inherited;
end;

function TLineColorDialog.JSClassName : string; begin
  Result := 'LineColorDialog';
end;

{$IFDEF FPC}constructor TLineColorDialog.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TLineColorDialog.Create(Figure : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Figure, false]) + ');');
  InitDefaults;
end;

function TLineColorDialog.OnOk : TExtFunction; begin
  JSCode(JSName + '.onOk();', 'TLineColorDialog');
  Result := Self;
end;

end.