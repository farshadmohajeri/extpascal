unit ExtState;

// Generated by ExtToPascal v.0.9.8, at 3/5/2010 11:59:34
// from "C:\Trabalho\ext\docs\output" detected as ExtJS v.3

interface

uses
  StrUtils, ExtPascal, ExtPascalUtils, ExtDirect;

type
  TExtStateProvider = class;
  TExtStateManagerSingleton = class;
  TExtStateCookieProvider = class;

  // Procedural types for events TExtStateProvider
  TExtStateProviderOnStatechange = procedure(This : TExtStateProvider; Key : String; Value : String) of object;

  TExtStateProvider = class(TExtFunction)
  private
    FSlovak : TExtObject;
    FIndicatorText : TExtObject;
    FIndicatorText_ : TExtObject;
    FOnStatechange : TExtStateProviderOnStatechange;
    procedure SetFSlovak(Value : TExtObject);
    procedure SetFIndicatorText(Value : TExtObject);
    procedure SetFIndicatorText_(Value : TExtObject);
    procedure SetFOnStatechange(Value : TExtStateProviderOnStatechange);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function IndicatorText__ : TExtFunction;
    function IndicatorText___ : TExtFunction;
    function IndicatorText____ : TExtFunction;
    function IndicatorText_____ : TExtFunction;
    function IndicatorText______ : TExtFunction;
    function IndicatorText_______ : TExtFunction;
    function IndicatorText________ : TExtFunction;
    function IndicatorText_________ : TExtFunction;
    function Clear(Name : String) : TExtFunction;
    function DecodeValue(Value : String) : TExtFunction;
    function EncodeValue(Value : String) : TExtFunction;
    function Get(Name : String; DefaultValue : String) : TExtFunction;
    function SetJS(Name : String; Value : String) : TExtFunction;
    function On(EventName : String; Handler : TExtFunction) : TExtFunction;
    function Un(EventName : String; Handler : TExtFunction) : TExtFunction;
    property Slovak : TExtObject read FSlovak write SetFSlovak;
    property IndicatorText : TExtObject read FIndicatorText write SetFIndicatorText;
    property IndicatorText_ : TExtObject read FIndicatorText_ write SetFIndicatorText_;
    property OnStatechange : TExtStateProviderOnStatechange read FOnStatechange write SetFOnStatechange;
  end;

  TExtStateManagerSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Clear(Name : String) : TExtFunction;
    function Get(Name : String; DefaultValue : String) : TExtFunction;
    function GetProvider : TExtFunction;
    function SetJS(Name : String; Value : String) : TExtFunction;
    function SetProvider(StateProvider : TExtStateProvider) : TExtFunction;
  end;

  TExtStateCookieProvider = class(TExtStateProvider)
  private
    FDomain : String; // 'www'
    FExpires : TDateTime;
    FPath : String; // '/'
    FSecure : Boolean;
    procedure SetFDomain(Value : String);
    procedure SetFExpires(Value : TDateTime);
    procedure SetFPath(Value : String);
    procedure SetFSecure(Value : Boolean);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    property Domain : String read FDomain write SetFDomain;
    property Expires : TDateTime read FExpires write SetFExpires;
    property Path : String read FPath write SetFPath;
    property Secure : Boolean read FSecure write SetFSecure;
  end;

var
  ExtStateManager : TExtStateManagerSingleton;

implementation

procedure TExtStateProvider.SetFSlovak(Value : TExtObject); begin
  FSlovak := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.slovak=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtStateProvider.SetFIndicatorText(Value : TExtObject); begin
  FIndicatorText := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.indicatorText=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtStateProvider.SetFIndicatorText_(Value : TExtObject); begin
  FIndicatorText_ := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.indicatorText=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtStateProvider.SetFOnStatechange(Value : TExtStateProviderOnStatechange); begin
  if Assigned(FOnStatechange) then
    JSCode(JSName+'.events ["statechange"].listeners=[];');
  if Assigned(Value) then
    On('statechange', Ajax('statechange', ['This', '%0.nm','Key', '%1','Value', '%2'], true));
  FOnStatechange := Value;
end;

function TExtStateProvider.JSClassName : string; begin
  Result := 'Ext.state.Provider';
end;

{$IFDEF FPC}constructor TExtStateProvider.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtStateProvider.IndicatorText__ : TExtFunction; begin
  JSCode(JSName + '.indicatorText();', 'TExtStateProvider');
  Result := Self;
end;

function TExtStateProvider.IndicatorText___ : TExtFunction; begin
  JSCode(JSName + '.indicatorText();', 'TExtStateProvider');
  Result := Self;
end;

function TExtStateProvider.IndicatorText____ : TExtFunction; begin
  JSCode(JSName + '.indicatorText();', 'TExtStateProvider');
  Result := Self;
end;

function TExtStateProvider.IndicatorText_____ : TExtFunction; begin
  JSCode(JSName + '.indicatorText();', 'TExtStateProvider');
  Result := Self;
end;

function TExtStateProvider.IndicatorText______ : TExtFunction; begin
  JSCode(JSName + '.indicatorText();', 'TExtStateProvider');
  Result := Self;
end;

function TExtStateProvider.IndicatorText_______ : TExtFunction; begin
  JSCode(JSName + '.indicatorText();', 'TExtStateProvider');
  Result := Self;
end;

function TExtStateProvider.IndicatorText________ : TExtFunction; begin
  JSCode(JSName + '.indicatorText();', 'TExtStateProvider');
  Result := Self;
end;

function TExtStateProvider.IndicatorText_________ : TExtFunction; begin
  JSCode(JSName + '.indicatorText();', 'TExtStateProvider');
  Result := Self;
end;

function TExtStateProvider.Clear(Name : String) : TExtFunction; begin
  JSCode(JSName + '.clear(' + VarToJSON([Name]) + ');', 'TExtStateProvider');
  Result := Self;
end;

function TExtStateProvider.DecodeValue(Value : String) : TExtFunction; begin
  JSCode(JSName + '.decodeValue(' + VarToJSON([Value]) + ');', 'TExtStateProvider');
  Result := Self;
end;

function TExtStateProvider.EncodeValue(Value : String) : TExtFunction; begin
  JSCode(JSName + '.encodeValue(' + VarToJSON([Value]) + ');', 'TExtStateProvider');
  Result := Self;
end;

function TExtStateProvider.Get(Name : String; DefaultValue : String) : TExtFunction; begin
  JSCode(JSName + '.get(' + VarToJSON([Name, DefaultValue]) + ');', 'TExtStateProvider');
  Result := Self;
end;

function TExtStateProvider.SetJS(Name : String; Value : String) : TExtFunction; begin
  JSCode(JSName + '.set(' + VarToJSON([Name, Value]) + ');', 'TExtStateProvider');
  Result := Self;
end;

function TExtStateProvider.On(EventName : String; Handler : TExtFunction) : TExtFunction; begin
  JSCode(JSName + '.on(' + VarToJSON([EventName, Handler, true]) + ');', 'TExtStateProvider');
  Result := Self;
end;

function TExtStateProvider.Un(EventName : String; Handler : TExtFunction) : TExtFunction; begin
  JSCode(JSName + '.un(' + VarToJSON([EventName, Handler, true]) + ');', 'TExtStateProvider');
  Result := Self;
end;

procedure TExtStateProvider.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'statechange') and Assigned(FOnStatechange) then
    FOnStatechange(TExtStateProvider(ParamAsObject('This')), ParamAsString('Key'), ParamAsString('Value'));
end;

function TExtStateManagerSingleton.JSClassName : string; begin
  Result := 'Ext.state.Manager';
end;

{$IFDEF FPC}constructor TExtStateManagerSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtStateManagerSingleton.Clear(Name : String) : TExtFunction; begin
  JSCode(JSName + '.clear(' + VarToJSON([Name]) + ');', 'TExtStateManagerSingleton');
  Result := Self;
end;

function TExtStateManagerSingleton.Get(Name : String; DefaultValue : String) : TExtFunction; begin
  JSCode(JSName + '.get(' + VarToJSON([Name, DefaultValue]) + ');', 'TExtStateManagerSingleton');
  Result := Self;
end;

function TExtStateManagerSingleton.GetProvider : TExtFunction; begin
  JSCode(JSName + '.getProvider();', 'TExtStateManagerSingleton');
  Result := Self;
end;

function TExtStateManagerSingleton.SetJS(Name : String; Value : String) : TExtFunction; begin
  JSCode(JSName + '.set(' + VarToJSON([Name, Value]) + ');', 'TExtStateManagerSingleton');
  Result := Self;
end;

function TExtStateManagerSingleton.SetProvider(StateProvider : TExtStateProvider) : TExtFunction; begin
  JSCode(JSName + '.setProvider(' + VarToJSON([StateProvider, false]) + ');', 'TExtStateManagerSingleton');
  Result := Self;
end;

procedure TExtStateCookieProvider.SetFDomain(Value : String); begin
  FDomain := Value;
  JSCode('domain:' + VarToJSON([Value]));
end;

procedure TExtStateCookieProvider.SetFExpires(Value : TDateTime); begin
  FExpires := Value;
  JSCode('expires:' + VarToJSON([Value]));
end;

procedure TExtStateCookieProvider.SetFPath(Value : String); begin
  FPath := Value;
  JSCode('path:' + VarToJSON([Value]));
end;

procedure TExtStateCookieProvider.SetFSecure(Value : Boolean); begin
  FSecure := Value;
  JSCode('secure:' + VarToJSON([Value]));
end;

function TExtStateCookieProvider.JSClassName : string; begin
  Result := 'Ext.state.CookieProvider';
end;

procedure TExtStateCookieProvider.InitDefaults; begin
  inherited;
  FDomain := 'www';
  FPath := '/';
end;

{$IFDEF FPC}constructor TExtStateCookieProvider.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtStateCookieProvider.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

initialization
  ExtStateManager := TExtStateManagerSingleton.CreateSingleton;

finalization
  ExtStateManager.Destroy;
end.