unit Ext;

// Generated by ExtToPascal v.0.9.9, at 01/12/2011 00:40:22
// from "C:\Users\Wanderlan\Trabalho\ExtPascal\ext-4.0.7\docs\source

interface

uses
  StrUtils, ExtPascal, ExtPascalUtils;

const
  SourcePath = '/src';

type
  TExtImg = class;
  TExtSelectionCheckboxModel = class;
  TExtLayoutContainerContainer = class;
  TExtFormFieldVTypesSingleton = class;
  TExtLayoutContainerCard = class;
  TExtFormFieldDisplay = class;
  TExtAppApplication = class;
  TExtComponent = class;
  TExtShadow = class;
  TExtDateSingleton = class;
  TExtPickerTime = class;
  TExtSliderMulti = class;
  TExtDdDDTarget = class;
  TExtLoadMask = class;
  TExtFxTargetElement = class;
  TExtDataAssociation = class;
  TExtWindowWindow = class;
  TExtGridRowNumberer = class;
  TExtGridFeatureFeature = class;
  TExtDirectManagerSingleton = class;
  TExtChartNavigation = class;
  TExtFormFieldBase = class;
  TExtFormFieldSet = class;
  TExtDataWriterJson = class;
  TExtZIndexManager = class;
  TExtGridPluginRowEditing = class;
  TExtPanelPanel = class;
  TExtDataReaderXml = class;
  TExtDataProxyJsonP = class;
  TExtStringSingleton = class;
  TExtToolbarToolbar = class;
  TExtUtilHashMap = class;
  TExtPickerDate = class;
  TExtDataConnection = class;
  TExtFormFieldHidden = class;
  TExtUtilInflector = class;
  TExtResizerSplitter = class;
  TExtDdDD = class;
  TExtPickerColor = class;
  TExtChartSeriesLine = class;
  TExtFormFieldSpinner = class;
  TExtMenuSeparator = class;
  TExtDataSequentialIdGenerator = class;
  TExtDataProxyLocalStorage = class;
  TExtDirectProvider = class;
  TExtDirectRemotingEvent = class;
  TExtError = class;
  TExtFormActionLoad = class;
  TExtLayoutContainerHBox = class;
  TExtDdDragDrop = class;
  TExtDataResultSet = class;
  TExtDataWriterWriter = class;
  TExtClassManagerSingleton = class;
  TExtDataReaderJson = class;
  TExtDataBelongsToAssociation = class;
  TExtDrawColor = class;
  TExtChartSeriesArea = class;
  TExtUtilTextMetrics = class;
  TExtFormActionAction = class;
  TExtGridPagingScroller = class;
  TExtFormFieldTime = class;
  TExtFxTargetCompositeElementCSS = class;
  TExtDdDragDropManagerSingleton = class;
  TExtToolbarSeparator = class;
  TExtDdDropZone = class;
  TExtDirectExceptionEvent = class;
  TExtUtilTaskRunner = class;
  TExtFormFieldCheckbox = class;
  TExtFormFieldField = class;
  TExtDirectEvent = class;
  TExtMenuItem = class;
  TFunction = class;
  TExtChartMask = class;
  TExtDomHelperSingleton = class;
  TBoolean = class;
  TExtDataWriterXml = class;
  TExtGridView = class;
  TExtMenuManagerSingleton = class;
  TExtCompositeElementLite = class;
  TExtChartSeriesCartesian = class;
  TRegExp = class;
  TExtClass = class;
  TExtGridColumnColumn = class;
  TExtDdRegistrySingleton = class;
  TExtMenuColorPicker = class;
  TExtEventObjectSingleton = class;
  TExtFormLabel = class;
  TExtTipTip = class;
  TExtToolbarItem = class;
  TNumber = class;
  TExtPanelTool = class;
  TExtUtilRegion = class;
  TExtLayoutContainerBox = class;
  TExtDataNodeInterface = class;
  TExtFormFieldContainer = class;
  TExtLayoutContainerTable = class;
  TExtElement = class;
  TExtLayoutContainerAnchor = class;
  TExtDdDragTracker = class;
  TExtObjectSingleton = class;
  TExtGridFeatureGroupingSummary = class;
  TExtDomQuerySingleton = class;
  TExtChartSeriesGauge = class;
  TExtUtilMixedCollection = class;
  TExtFormActionDirectSubmit = class;
  TExtChartSeriesPie = class;
  TExtDirectRemotingProvider = class;
  TExtEnvOS = class;
  TExtChartSeriesColumn = class;
  TExtDataHasManyAssociation = class;
  TExtDrawComponent = class;
  TExtChartAxisCategory = class;
  TExtFlashComponent = class;
  TExtUtilObservable = class;
  TExtFormActionStandardSubmit = class;
  TExtDataRequest = class;
  TExtFxEasingSingleton = class;
  TExtLayoutContainerBorder = class;
  TDate = class;
  TExtFormFieldTrigger = class;
  TExtDdStatusProxy = class;
  TExtComponentLoader = class;
  TExtChartSeriesRadar = class;
  TExtPluginManagerSingleton = class;
  TExtLayoutContainerAbsolute = class;
  TExtChartChart = class;
  TExtDataProxyRest = class;
  TExtDirectJsonProvider = class;
  TExtDataProxyMemory = class;
  TExtDataProxyProxy = class;
  TExtViewView = class;
  TExtFormFieldPicker = class;
  TExtTabBar = class;
  TExtViewBoundListKeyNav = class;
  TExtSelectionModel = class;
  TExtEditor = class;
  TObject = class;
  TExtGridColumnDate = class;
  TExtChartThemeTheme = class;
  TExtDataSortTypesSingleton = class;
  TExtDdDDProxy = class;
  TExtAbstractManager = class;
  TExtSelectionCellModel = class;
  TExtFormRadioGroup = class;
  TExtViewTable = class;
  TExtFxAnim = class;
  TExtLoaderSingleton = class;
  TExtGridPanel = class;
  TExtUtilAnimate = class;
  TExtStateProvider = class;
  TExtLayoutLayout = class;
  TExtFxTargetCompositeSprite = class;
  TExtChartCallout = class;
  TExtFormFieldFile = class;
  TExtViewTableChunkerSingleton = class;
  TExtGridFeatureRowBody = class;
  TExtDdDragZone = class;
  TExtFormPanel = class;
  TExtDataProxyAjax = class;
  TExtUtilSortable = class;
  TExtFxTargetComponent = class;
  TExtChartAxisGauge = class;
  TExtMenuCheckItem = class;
  TExtGridPluginEditing = class;
  TExtArraySingleton = class;
  TExtGridHeaderContainer = class;
  TExtChartAxisNumeric = class;
  TExtLayoutContainerColumn = class;
  TExtDataTypesSingleton = class;
  TExtJSONSingleton = class;
  TExtFormFieldRadio = class;
  TExtDrawCompositeSprite = class;
  TExtAction = class;
  TExtDataAbstractStore = class;
  TExtTabTab = class;
  TExtContainerContainer = class;
  TExtToolbarTextItem = class;
  TExtAjaxSingleton = class;
  TExtFormLabelable = class;
  TExtLayoutContainerVBox = class;
  TExtUtilCSSSingleton = class;
  TExtTipToolTip = class;
  TExtDataModel = class;
  TExtChartLegendItem = class;
  TExtDataUuidGenerator = class;
  TExtDrawSprite = class;
  TExtToolbarSpacer = class;
  TExtChartTip = class;
  TExtDataReaderArray = class;
  TExtAbstractPlugin = class;
  TExtFxTargetTarget = class;
  TExtNumberSingleton = class;
  TExtComponentQuery = class;
  TExtStateLocalStorageProvider = class;
  TExtDataStoreManager = class;
  TExtPanelHeader = class;
  TExtBase = class;
  TExtFormFieldComboBox = class;
  TExtFormFieldAncestor = class;
  TExtUtilFilter = class;
  TExtTreePanel = class;
  TExtUtilComponentDragger = class;
  TExtFormFieldText = class;
  TExtTemplate = class;
  TExtLayoutContainerCheckboxGroup = class;
  TExtFormActionDirectLoad = class;
  TExtUtilPoint = class;
  TExtButtonCycle = class;
  TExtGridFeatureChunking = class;
  TExtEventManagerSingleton = class;
  TExtFocusManagerSingleton = class;
  TExtToolbarPaging = class;
  TExtSliderSingle = class;
  TExtVersion = class;
  TExtGridPluginCellEditing = class;
  TExtFunctionSingleton = class;
  TExtLayoutContainerAuto = class;
  TExtDataOperation = class;
  TExtFormFieldTextArea = class;
  TExtDrawEngineVml = class;
  TExtDataProxyDirect = class;
  TExtGridColumnAction = class;
  TExtEnvFeatureDetector = class;
  TExtCompositeElement = class;
  TExtAppController = class;
  TExtUtilFloating = class;
  TExtFxTargetCompositeElement = class;
  TExtUtilKeyNav = class;
  TExtDataBatch = class;
  TExtGridPropertyStore = class;
  TExtButtonSplit = class;
  TExtGridColumnTemplate = class;
  TExtChartSeriesSeries = class;
  TExtDdScrollManagerSingleton = class;
  TExtUtilHistorySingleton = class;
  TExtTipQuickTip = class;
  TExtFxAnimator = class;
  TExtChartAxisAxis = class;
  TExtDirectTransaction = class;
  TExtDrawSurface = class;
  TExtGridPluginDragDrop = class;
  TExtResizerHandle = class;
  TExtFormFieldDate = class;
  TExtFxTargetSprite = class;
  TExtDataJsonPSingleton = class;
  TExtDirectPollingProvider = class;
  TExtDataReaderReader = class;
  TExtUtilDelayedTask = class;
  TExtGridPropertyHeaderContainer = class;
  TExtUtilSorter = class;
  TExtGridPluginHeaderResizer = class;
  TExtEnvBrowser = class;
  TExtChartHighlight = class;
  TExtStateCookieProvider = class;
  TExtGridFeatureAbstractSummary = class;
  TExtViewBoundList = class;
  TExtGridFeatureGrouping = class;
  TExtUtilClickRepeater = class;
  TExtElementLoader = class;
  TExtXTemplate = class;
  TExtTreeView = class;
  TExtFormCheckboxGroup = class;
  TExtComponentManagerSingleton = class;
  TExtSingleton = class;
  TExtDdDropTarget = class;
  TExtFormBasic = class;
  TExtUtilFormatSingleton = class;
  TExtGridColumnNumber = class;
  TExtDataProxySessionStorage = class;
  TExtDrawEngineSvg = class;
  TExtButtonButton = class;
  TExtFormFieldHtmlEditor = class;
  TExtLayer = class;
  TExtPickerMonth = class;
  TExtGridColumnBoolean = class;
  TExtStateManagerSingleton = class;
  TExtTabPanel = class;
  TExtDataTreeStore = class;
  TExtDataField = class;
  TExtPanelTable = class;
  TExtGridPropertyProperty = class;
  TExtContainerViewport = class;
  TExtIsSingleton = class;
  TExtSliderTip = class;
  TExtGridScroller = class;
  TExtContainerButtonGroup = class;
  TExtProgressBar = class;
  TExtDataValidations = class;
  TExtDataTree = class;
  TExtDdDragSource = class;
  TExtLayoutContainerAccordion = class;
  TExtUtilMemento = class;
  TExtChartSeriesBar = class;
  TExtDataDirectStore = class;
  TExtDataArrayStore = class;
  TExtChartSeriesScatter = class;
  TExtFormActionSubmit = class;
  TExtTreePluginTreeViewDragDrop = class;
  TExtUtilKeyMap = class;
  TExtGridPropertyGrid = class;
  TExtDataIdGenerator = class;
  TExtSelectionRowModel = class;
  TExtResizerResizer = class;
  TExtUtilGrouper = class;
  TExtFxTargetElementCSS = class;
  TExtUtilCookiesSingleton = class;
  TExtChartAxisTime = class;
  TArray = class;
  TExtGridFeatureSummary = class;
  TExtMenuDatePicker = class;
  TExtLayoutContainerFit = class;
  TExtDataErrors = class;
  TExtFormFieldNumber = class;
  TExtModelManagerSingleton = class;
  TExtToolbarFill = class;
  TExtStateStateful = class;
  TExtChartLabel = class;
  TString = class;
  TExtWindowMessageBox = class;
  TExtDataStore = class;
  TExtTipQuickTipManagerSingleton = class;
  TExtMenuMenu = class;
  TExtChartLegend = class;
  TExtDataRecord = TExtDataModel;
TExtSliderThumb = class(TExtObject);
TExtUtilOffset = class(TExtObject);

  TExtImg = class(TExtFunction)
  private
    FSrc : String;
    procedure SetFSrc(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function SetSrc : TExtFunction;
    property Src : String read FSrc write SetFSrc;
  end;

  TExtSelectionCheckboxModel = class(TExtFunction)
  private
    FMode : String;
    FInjectCheckbox : Integer;
    FInjectCheckboxBoolean : Boolean;
    FInjectCheckboxString : String;
    FCheckOnly : Boolean;
    procedure SetFMode(Value : String);
    procedure SetFInjectCheckbox(Value : Integer);
    procedure SetFInjectCheckboxBoolean(Value : Boolean);
    procedure SetFInjectCheckboxString(Value : String);
    procedure SetFCheckOnly(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function OnHeaderClick : TExtFunction;
    function GetHeaderConfig : TExtFunction;
    function Renderer : TExtFunction;
    property Mode : String read FMode write SetFMode;
    property InjectCheckbox : Integer read FInjectCheckbox write SetFInjectCheckbox;
    property InjectCheckboxBoolean : Boolean read FInjectCheckboxBoolean write SetFInjectCheckboxBoolean;
    property InjectCheckboxString : String read FInjectCheckboxString write SetFInjectCheckboxString;
    property CheckOnly : Boolean read FCheckOnly write SetFCheckOnly;
  end;

  TExtLayoutContainerContainer = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtFormFieldVTypesSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Email(Value : String) : TExtFunction;
    function Url(Value : String) : TExtFunction;
    function Alpha(Value : String) : TExtFunction;
    function Alphanum(Value : String) : TExtFunction;
  end;

  TExtLayoutContainerCard = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function SetActiveItem(NewCard : TExtComponent) : TExtFunction; overload;
    function SetActiveItem(NewCard : Integer) : TExtFunction; overload;
    function SetActiveItem(NewCard : String) : TExtFunction; overload;
  end;

  TExtFormFieldDisplay = class(TExtFunction)
  private
    FFieldCls : String;
    FHtmlEncode : Boolean;
    FInputType : String;
    FDisabled : Boolean;
    FReadOnly : Boolean;
    FValidateOnChange : Boolean;
    FCheckChangeEvents : Integer;
    FCheckChangeBuffer : Integer;
    procedure SetFFieldCls(Value : String);
    procedure SetFHtmlEncode(Value : Boolean);
    procedure SetFInputType(Value : String);
    procedure SetFDisabled(Value : Boolean);
    procedure SetFReadOnly(Value : Boolean);
    procedure SetFValidateOnChange(Value : Boolean);
    procedure SetFCheckChangeEvents(Value : Integer);
    procedure SetFCheckChangeBuffer(Value : Integer);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property FieldCls : String read FFieldCls write SetFFieldCls;
    property HtmlEncode : Boolean read FHtmlEncode write SetFHtmlEncode;
    property InputType : String read FInputType write SetFInputType;
    property Disabled : Boolean read FDisabled write SetFDisabled;
    property ReadOnly : Boolean read FReadOnly write SetFReadOnly;
    property ValidateOnChange : Boolean read FValidateOnChange write SetFValidateOnChange;
    property CheckChangeEvents : Integer read FCheckChangeEvents write SetFCheckChangeEvents;
    property CheckChangeBuffer : Integer read FCheckChangeBuffer write SetFCheckChangeBuffer;
  end;

  TExtAppApplication = class(TExtFunction)
  private
    FName : String;
    FScope : TExtObject;
    FEnableQuickTips : Boolean;
    FDefaultUrl : String;
    FAppFolder : String;
    FAutoCreateViewport : Boolean;
    procedure SetFName(Value : String);
    procedure SetFScope(Value : TExtObject);
    procedure SetFEnableQuickTips(Value : Boolean);
    procedure SetFDefaultUrl(Value : String);
    procedure SetFAppFolder(Value : String);
    procedure SetFAutoCreateViewport(Value : Boolean);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    constructor Create(Config : TExtObject = nil);
    destructor Destroy; override;
    property Name : String read FName write SetFName;
    property Scope : TExtObject read FScope write SetFScope;
    property EnableQuickTips : Boolean read FEnableQuickTips write SetFEnableQuickTips;
    property DefaultUrl : String read FDefaultUrl write SetFDefaultUrl;
    property AppFolder : String read FAppFolder write SetFAppFolder;
    property AutoCreateViewport : Boolean read FAutoCreateViewport write SetFAutoCreateViewport;
  end;

  TExtComponent = class(TExtFunction)
  private
    FResizable : Boolean;
    FResizableTExtObject : TExtObject;
    FResizeHandles : String;
    FAutoScroll : Boolean;
    FFloating : Boolean;
    FToFrontOnShow : Boolean;
    FDraggable : Boolean;
    FDraggableTExtObject : TExtObject;
    FMaintainFlex : Boolean;
    procedure SetFResizable(Value : Boolean);
    procedure SetFResizableTExtObject(Value : TExtObject);
    procedure SetFResizeHandles(Value : String);
    procedure SetFAutoScroll(Value : Boolean);
    procedure SetFFloating(Value : Boolean);
    procedure SetFToFrontOnShow(Value : Boolean);
    procedure SetFDraggable(Value : Boolean);
    procedure SetFDraggableTExtObject(Value : TExtObject);
    procedure SetFMaintainFlex(Value : Boolean);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    constructor Create(Config : TExtElement);
    constructor Create(Config : String);
    constructor Create(Config : TExtObject);
    function InitComponent : TExtFunction;
    function SetAutoScroll(Scroll : Boolean) : TExtFunction;
    function SetPosition(Left : Integer; Top : Integer; Animate : Boolean = false) : TExtFunction; overload;
    function SetPosition(Left : Integer; Top : Integer; Animate : TExtObject) : TExtFunction; overload;
    function ShowAt(X : Integer; Y : Integer; Animate : Boolean = false) : TExtFunction; overload;
    function ShowAt(X : Integer; Y : Integer; Animate : TExtObject) : TExtFunction; overload;
    function SetPagePosition(X : Integer; Y : Integer; Animate : Boolean = false) : TExtFunction; overload;
    function SetPagePosition(X : Integer; Y : Integer; Animate : TExtObject) : TExtFunction; overload;
    function GetBox(Local : Boolean = false) : TExtFunction;
    function UpdateBox(Box : TExtObject) : TExtFunction;
    function GetPosition(Local : Boolean = false) : TExtFunction;
    function Show(AnimateTarget : String = ''; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; overload;
    function Show(AnimateTarget : TExtElement; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; overload;
    function Hide(AnimateTarget : String = ''; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; overload;
    function Hide(AnimateTarget : TExtElement; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; overload;
    function Hide(AnimateTarget : TExtComponent; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; overload;
    function Focus(SelectText : Boolean = false; Delay : Boolean = false) : TExtFunction; overload;
    function Focus(SelectText : Boolean; Delay : Integer) : TExtFunction; overload;
    function CloneConfig(Overrides : TExtObject) : TExtFunction;
    function GetXType : TExtFunction;
    function FindParentBy(Fn : TExtFunction) : TExtFunction;
    function FindParentByType(Xtype : String) : TExtFunction; overload;
    function FindParentByType(Xtype : TExtClass) : TExtFunction; overload;
    function Bubble(Fn : TExtFunction; Scope : TExtObject = nil; Args : TExtObjectList = nil) : TExtFunction;
    destructor Destroy; override;
    property Resizable : Boolean read FResizable write SetFResizable;
    property ResizableTExtObject : TExtObject read FResizableTExtObject write SetFResizableTExtObject;
    property ResizeHandles : String read FResizeHandles write SetFResizeHandles;
    property AutoScroll : Boolean read FAutoScroll write SetFAutoScroll;
    property Floating : Boolean read FFloating write SetFFloating;
    property ToFrontOnShow : Boolean read FToFrontOnShow write SetFToFrontOnShow;
    property Draggable : Boolean read FDraggable write SetFDraggable;
    property DraggableTExtObject : TExtObject read FDraggableTExtObject write SetFDraggableTExtObject;
    property MaintainFlex : Boolean read FMaintainFlex write SetFMaintainFlex;
  end;

  TExtShadow = class(TExtFunction)
  private
    FMode : String;
    FOffset : Integer;
    procedure SetFMode(Value : String);
    procedure SetFOffset(Value : Integer);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Show(TargetEl : String) : TExtFunction; overload;
    function Show(TargetEl : THTMLElement) : TExtFunction; overload;
    function Show(TargetEl : TExtElement) : TExtFunction; overload;
    function IsVisible : TExtFunction;
    function Realign(Left : Integer; Top : Integer; Width : Integer; Height : Integer) : TExtFunction;
    function Hide : TExtFunction;
    function SetZIndex(Zindex : Integer) : TExtFunction;
    function SetOpacity(Opacity : Integer) : TExtFunction;
    property Mode : String read FMode write SetFMode;
    property Offset : Integer read FOffset write SetFOffset;
  end;

  TExtDateSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Now : TExtFunction;
    function GetElapsed(DateA : TDateTime; DateB : TDateTime = 0) : TExtFunction;
    function GetShortMonthName(Month : Integer) : TExtFunction;
    function GetShortDayName(Day : Integer) : TExtFunction;
    function GetMonthNumber(Name : String) : TExtFunction;
    function FormatContainsHourInfo(Format : String) : TExtFunction;
    function FormatContainsDateInfo(Format : String) : TExtFunction;
    function IsValid(Year : Integer; Month : Integer; Day : Integer; Hour : Integer = 0; Minute : Integer = 0; Second : Integer = 0; Millisecond : Integer = 0) : TExtFunction;
    function Parse(Input : String; Format : String; Strict : Boolean = false) : TExtFunction;
    function Format(Date : TDateTime; Format : String) : TExtFunction;
    function GetTimezone(Date : TDateTime) : TExtFunction;
    function GetGMTOffset(Date : TDateTime; Colon : Boolean = false) : TExtFunction;
    function GetDayOfYear(Date : TDateTime) : TExtFunction;
    function GetWeekOfYear(Date : TDateTime) : TExtFunction;
    function IsLeapYear(Date : TDateTime) : TExtFunction;
    function GetFirstDayOfMonth(Date : TDateTime) : TExtFunction;
    function GetLastDayOfMonth(Date : TDateTime) : TExtFunction;
    function GetFirstDateOfMonth(Date : TDateTime) : TExtFunction;
    function GetLastDateOfMonth(Date : TDateTime) : TExtFunction;
    function GetDaysInMonth(Date : TDateTime) : TExtFunction;
    function GetSuffix(Date : TDateTime) : TExtFunction;
    function Clone(Date : TDateTime) : TExtFunction;
    function IsDST(Date : TDateTime) : TExtFunction;
    function ClearTime(Date : TDateTime; Clone : Boolean) : TExtFunction;
    function Add(Date : TDateTime; Interval : String; Value : Integer) : TExtFunction;
    function Between(Date : TDateTime; Start : TDateTime; EndJS : TDateTime) : TExtFunction;
  end;

  TExtPickerTime = class(TExtFunction)
  private
    FMinValue : TDateTime;
    FMaxValue : TDateTime;
    FIncrement : Integer;
    FFormat : String;
    procedure SetFMinValue(Value : TDateTime);
    procedure SetFMaxValue(Value : TDateTime);
    procedure SetFIncrement(Value : Integer);
    procedure SetFFormat(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function SetMinValue(Value : TDateTime; Value_ : TDateTime; Date : TDateTime) : TExtFunction;
    function UpdateList : TExtFunction;
    property MinValue : TDateTime read FMinValue write SetFMinValue;
    property MaxValue : TDateTime read FMaxValue write SetFMaxValue;
    property Increment : Integer read FIncrement write SetFIncrement;
    property Format : String read FFormat write SetFFormat;
  end;

  // Procedural types for events TExtSliderMulti
  TExtSliderMultiOnBeforechange = procedure(Slider : TExtSliderMulti; NewValue : Integer; OldValue : Integer) of object;
  TExtSliderMultiOnChange = procedure(Slider : TExtSliderMulti; NewValue : Integer; Thumb : TExtSliderThumb) of object;
  TExtSliderMultiOnChangecomplete = procedure(Slider : TExtSliderMulti; NewValue : Integer; Thumb : TExtSliderThumb) of object;
  TExtSliderMultiOnDragstart = procedure(Slider : TExtSliderMulti; E : TExtEventObjectSingleton) of object;
  TExtSliderMultiOnDrag = procedure(Slider : TExtSliderMulti; E : TExtEventObjectSingleton) of object;
  TExtSliderMultiOnDragend = procedure(Slider : TExtSliderMulti; E : TExtEventObjectSingleton) of object;

  TExtSliderMulti = class(TExtFunction)
  private
    FValue : Integer;
    FValues : TArrayOfInteger;
    FVertical : Boolean;
    FMinValue : Integer;
    FMaxValue : Integer;
    FDecimalPrecision : Integer;
    FDecimalPrecisionBoolean : Boolean;
    FKeyIncrement : Integer;
    FIncrement : Integer;
    FClickToChange : Boolean;
    FAnimate : Boolean;
    FConstrainThumbs : Boolean;
    FUseTips : Boolean;
    FTipText : TExtFunction;
    FOnBeforechange : TExtSliderMultiOnBeforechange;
    FOnChange : TExtSliderMultiOnChange;
    FOnChangecomplete : TExtSliderMultiOnChangecomplete;
    FOnDragstart : TExtSliderMultiOnDragstart;
    FOnDrag : TExtSliderMultiOnDrag;
    FOnDragend : TExtSliderMultiOnDragend;
    procedure SetFValue(Value : Integer);
    procedure SetFValues(Value : TArrayOfInteger);
    procedure SetFVertical(Value : Boolean);
    procedure SetFMinValue(Value : Integer);
    procedure SetFMaxValue(Value : Integer);
    procedure SetFDecimalPrecision(Value : Integer);
    procedure SetFDecimalPrecisionBoolean(Value : Boolean);
    procedure SetFKeyIncrement(Value : Integer);
    procedure SetFIncrement(Value : Integer);
    procedure SetFClickToChange(Value : Boolean);
    procedure SetFAnimate(Value : Boolean);
    procedure SetFConstrainThumbs(Value : Boolean);
    procedure SetFUseTips(Value : Boolean);
    procedure SetFTipText(Value : TExtFunction);
    procedure SetFOnBeforechange(Value : TExtSliderMultiOnBeforechange);
    procedure SetFOnChange(Value : TExtSliderMultiOnChange);
    procedure SetFOnChangecomplete(Value : TExtSliderMultiOnChangecomplete);
    procedure SetFOnDragstart(Value : TExtSliderMultiOnDragstart);
    procedure SetFOnDrag(Value : TExtSliderMultiOnDrag);
    procedure SetFOnDragend(Value : TExtSliderMultiOnDragend);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function AddThumb(Value : Integer) : TExtFunction;
    function SetMinValue(Val : Integer) : TExtFunction;
    function SetMaxValue(Val : Integer) : TExtFunction;
    function SetValue(Index : Integer; Value : Integer; Animate : Boolean = false) : TExtFunction;
    function SyncThumbs : TExtFunction;
    function GetValue(Index : Integer) : TExtFunction;
    function GetValues : TExtFunction;
    property Value : Integer read FValue write SetFValue;
    property Values : TArrayOfInteger read FValues write SetFValues;
    property Vertical : Boolean read FVertical write SetFVertical;
    property MinValue : Integer read FMinValue write SetFMinValue;
    property MaxValue : Integer read FMaxValue write SetFMaxValue;
    property DecimalPrecision : Integer read FDecimalPrecision write SetFDecimalPrecision;
    property DecimalPrecisionBoolean : Boolean read FDecimalPrecisionBoolean write SetFDecimalPrecisionBoolean;
    property KeyIncrement : Integer read FKeyIncrement write SetFKeyIncrement;
    property Increment : Integer read FIncrement write SetFIncrement;
    property ClickToChange : Boolean read FClickToChange write SetFClickToChange;
    property Animate : Boolean read FAnimate write SetFAnimate;
    property ConstrainThumbs : Boolean read FConstrainThumbs write SetFConstrainThumbs;
    property UseTips : Boolean read FUseTips write SetFUseTips;
    property TipText : TExtFunction read FTipText write SetFTipText;
    property OnBeforechange : TExtSliderMultiOnBeforechange read FOnBeforechange write SetFOnBeforechange;
    property OnChange : TExtSliderMultiOnChange read FOnChange write SetFOnChange;
    property OnChangecomplete : TExtSliderMultiOnChangecomplete read FOnChangecomplete write SetFOnChangecomplete;
    property OnDragstart : TExtSliderMultiOnDragstart read FOnDragstart write SetFOnDragstart;
    property OnDrag : TExtSliderMultiOnDrag read FOnDrag write SetFOnDrag;
    property OnDragend : TExtSliderMultiOnDragend read FOnDragend write SetFOnDragend;
  end;

  TExtDdDDTarget = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Id : String; SGroup : String; Config : TExtObject);
    function GetDragEl : TExtFunction;
    function IsValidHandleChild : TExtFunction;
    function StartDrag : TExtFunction;
    function EndDrag : TExtFunction;
    function OnDrag : TExtFunction;
    function OnDragDrop : TExtFunction;
    function OnDragEnter : TExtFunction;
    function OnDragOut : TExtFunction;
    function OnDragOver : TExtFunction;
    function OnInvalidDrop : TExtFunction;
    function OnMouseDown : TExtFunction;
    function OnMouseUp : TExtFunction;
    function SetXConstraint : TExtFunction;
    function SetYConstraint : TExtFunction;
    function ResetConstraints : TExtFunction;
    function ClearConstraints : TExtFunction;
    function ClearTicks : TExtFunction;
    function SetInitPosition : TExtFunction;
    function SetDragElId : TExtFunction;
    function SetHandleElId : TExtFunction;
    function SetOuterHandleElId : TExtFunction;
    function AddInvalidHandleClass : TExtFunction;
    function AddInvalidHandleId : TExtFunction;
    function AddInvalidHandleType : TExtFunction;
    function RemoveInvalidHandleClass : TExtFunction;
    function RemoveInvalidHandleId : TExtFunction;
    function RemoveInvalidHandleType : TExtFunction;
  end;

  TExtLoadMask = class(TExtFunction)
  private
    FStore : TExtDataStore;
    FMsg : String;
    FMsgCls : String;
    FUseMsg : Boolean;
    procedure SetFStore(Value : TExtDataStore);
    procedure SetFMsg(Value : String);
    procedure SetFMsgCls(Value : String);
    procedure SetFUseMsg(Value : Boolean);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    constructor Create(El : String; Config : TExtObject = nil);
    constructor Create(El : THTMLElement; Config : TExtObject = nil);
    constructor Create(El : TExtElement; Config : TExtObject = nil);
    function BindStore(Store : TExtDataStore) : TExtFunction;
    destructor Destroy; override;
    property Store : TExtDataStore read FStore write SetFStore;
    property Msg : String read FMsg write SetFMsg;
    property MsgCls : String read FMsgCls write SetFMsgCls;
    property UseMsg : Boolean read FUseMsg write SetFUseMsg;
  end;

  TExtFxTargetElement = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtDataAssociation = class(TExtFunction)
  private
    FOwnerModel : String;
    FAssociatedModel : String;
    FPrimaryKey : String;
    FReader : TExtDataReaderReader;
    FAssociationKey : String;
    procedure SetFOwnerModel(Value : String);
    procedure SetFAssociatedModel(Value : String);
    procedure SetFPrimaryKey(Value : String);
    procedure SetFReader(Value : TExtDataReaderReader);
    procedure SetFAssociationKey(Value : String);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    constructor Create(Config : TExtObject = nil);
    function GetReader : TExtFunction;
    destructor Destroy; override;
    property OwnerModel : String read FOwnerModel write SetFOwnerModel;
    property AssociatedModel : String read FAssociatedModel write SetFAssociatedModel;
    property PrimaryKey : String read FPrimaryKey write SetFPrimaryKey;
    property Reader : TExtDataReaderReader read FReader write SetFReader;
    property AssociationKey : String read FAssociationKey write SetFAssociationKey;
  end;

  TExtWindowWindow = class(TExtFunction)
  private
    FX : Integer;
    FY : Integer;
    FModal : Boolean;
    FAnimateTarget : String;
    FAnimateTargetTExtElement : TExtElement;
    FDefaultFocus : String;
    FDefaultFocusInteger : Integer;
    FDefaultFocusTExtComponent : TExtComponent;
    FOnEsc : TExtFunction;
    FCollapsed : Boolean;
    FMaximized : Boolean;
    FBaseCls : String;
    FResizable : Boolean;
    FResizableTExtObject : TExtObject;
    FDraggable : Boolean;
    FConstrain : Boolean;
    FConstrainHeader : Boolean;
    FPlain : Boolean;
    FMinimizable : Boolean;
    FMaximizable : Boolean;
    FExpandOnShow : Boolean;
    FClosable : Boolean;
    FHidden : Boolean;
    FFloating : Boolean;
    FAutoWidth : Boolean;
    procedure SetFX(Value : Integer);
    procedure SetFY(Value : Integer);
    procedure SetFModal(Value : Boolean);
    procedure SetFAnimateTarget(Value : String);
    procedure SetFAnimateTargetTExtElement(Value : TExtElement);
    procedure SetFDefaultFocus(Value : String);
    procedure SetFDefaultFocusInteger(Value : Integer);
    procedure SetFDefaultFocusTExtComponent(Value : TExtComponent);
    procedure SetFOnEsc(Value : TExtFunction);
    procedure SetFCollapsed(Value : Boolean);
    procedure SetFMaximized(Value : Boolean);
    procedure SetFBaseCls(Value : String);
    procedure SetFResizable(Value : Boolean);
    procedure SetFResizableTExtObject(Value : TExtObject);
    procedure SetFDraggable(Value : Boolean);
    procedure SetFConstrain(Value : Boolean);
    procedure SetFConstrainHeader(Value : Boolean);
    procedure SetFPlain(Value : Boolean);
    procedure SetFMinimizable(Value : Boolean);
    procedure SetFMaximizable(Value : Boolean);
    procedure SetFExpandOnShow(Value : Boolean);
    procedure SetFClosable(Value : Boolean);
    procedure SetFHidden(Value : Boolean);
    procedure SetFFloating(Value : Boolean);
    procedure SetFAutoWidth(Value : Boolean);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    destructor Destroy; override;
    property X : Integer read FX write SetFX;
    property Y : Integer read FY write SetFY;
    property Modal : Boolean read FModal write SetFModal;
    property AnimateTarget : String read FAnimateTarget write SetFAnimateTarget;
    property AnimateTargetTExtElement : TExtElement read FAnimateTargetTExtElement write SetFAnimateTargetTExtElement;
    property DefaultFocus : String read FDefaultFocus write SetFDefaultFocus;
    property DefaultFocusInteger : Integer read FDefaultFocusInteger write SetFDefaultFocusInteger;
    property DefaultFocusTExtComponent : TExtComponent read FDefaultFocusTExtComponent write SetFDefaultFocusTExtComponent;
    property OnEsc : TExtFunction read FOnEsc write SetFOnEsc;
    property Collapsed : Boolean read FCollapsed write SetFCollapsed;
    property Maximized : Boolean read FMaximized write SetFMaximized;
    property BaseCls : String read FBaseCls write SetFBaseCls;
    property Resizable : Boolean read FResizable write SetFResizable;
    property ResizableTExtObject : TExtObject read FResizableTExtObject write SetFResizableTExtObject;
    property Draggable : Boolean read FDraggable write SetFDraggable;
    property Constrain : Boolean read FConstrain write SetFConstrain;
    property ConstrainHeader : Boolean read FConstrainHeader write SetFConstrainHeader;
    property Plain : Boolean read FPlain write SetFPlain;
    property Minimizable : Boolean read FMinimizable write SetFMinimizable;
    property Maximizable : Boolean read FMaximizable write SetFMaximizable;
    property ExpandOnShow : Boolean read FExpandOnShow write SetFExpandOnShow;
    property Closable : Boolean read FClosable write SetFClosable;
    property Hidden : Boolean read FHidden write SetFHidden;
    property Floating : Boolean read FFloating write SetFFloating;
    property AutoWidth : Boolean read FAutoWidth write SetFAutoWidth;
  end;

  TExtGridRowNumberer = class(TExtFunction)
  private
    FText : String;
    FWidth : Integer;
    FSortable : Boolean;
    procedure SetFText(Value : String);
    procedure SetFWidth(Value : Integer);
    procedure SetFSortable(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property Text : String read FText write SetFText;
    property Width : Integer read FWidth write SetFWidth;
    property Sortable : Boolean read FSortable write SetFSortable;
  end;

  TExtGridFeatureFeature = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetFireEventArgs : TExtFunction;
    function AttachEvents : TExtFunction;
    function MutateMetaRowTpl : TExtFunction;
    function GetMetaRowTplFragments : TExtFunction;
    function GetAdditionalData(Data : TExtObject; Idx : Integer; RecordJS : TExtDataModel; Orig : TExtObject) : TExtFunction;
    function Enable : TExtFunction;
    function Disable : TExtFunction;
  end;

  // Procedural types for events TExtDirectManagerSingleton
  TExtDirectManagerSingletonOnEvent = procedure(E : TExtDirectEvent; Provider : TExtDirectProvider) of object;
  TExtDirectManagerSingletonOnException = procedure(E : TExtDirectEvent) of object;

  TExtDirectManagerSingleton = class(TExtFunction)
  private
    FOnEvent : TExtDirectManagerSingletonOnEvent;
    FOnException : TExtDirectManagerSingletonOnException;
    procedure SetFOnEvent(Value : TExtDirectManagerSingletonOnEvent);
    procedure SetFOnException(Value : TExtDirectManagerSingletonOnException);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function AddProvider(Provider : TExtDirectProvider) : TExtFunction; overload;
    function AddProvider(Provider : TExtObjectList) : TExtFunction; overload;
    function GetProvider(Id : String) : TExtFunction; overload;
    function GetProvider(Id : TExtDirectProvider) : TExtFunction; overload;
    function RemoveProvider(Provider : String) : TExtFunction; overload;
    function RemoveProvider(Provider : TExtDirectProvider) : TExtFunction; overload;
    property OnEvent : TExtDirectManagerSingletonOnEvent read FOnEvent write SetFOnEvent;
    property OnException : TExtDirectManagerSingletonOnException read FOnException write SetFOnException;
  end;

  TExtChartNavigation = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function SetZoom : TExtFunction;
    function RestoreZoom : TExtFunction;
  end;

  // Procedural types for events TExtFormFieldBase
  TExtFormFieldBaseOnFocus = procedure(This : TExtFormFieldBase; This_ : TExtFormFieldBase; This__ : TExtFormFieldBase; E : TExtEventObjectSingleton) of object;

  TExtFormFieldBase = class(TExtFunction)
  private
    FFieldSubTpl : TExtXTemplate;
    FName : String;
    FInputType : String;
    FTabIndex : Integer;
    FInvalidText : String;
    FFieldCls : String;
    FFieldStyle : String;
    FFocusCls : String;
    FDirtyCls : String;
    FCheckChangeEvents : TExtObjectList;
    FCheckChangeBuffer : Integer;
    FReadOnly : Boolean;
    FReadOnlyCls : String;
    FInputId : String;
    FValidateOnBlur : Boolean;
    FOnFocus : TExtFormFieldBaseOnFocus;
    procedure SetFFieldSubTpl(Value : TExtXTemplate);
    procedure SetFName(Value : String);
    procedure SetFInputType(Value : String);
    procedure SetFTabIndex(Value : Integer);
    procedure SetFInvalidText(Value : String);
    procedure SetFFieldCls(Value : String);
    procedure SetFFieldStyle(Value : String);
    procedure SetFFocusCls(Value : String);
    procedure SetFDirtyCls(Value : String);
    procedure SetFCheckChangeEvents(Value : TExtObjectList);
    procedure SetFCheckChangeBuffer(Value : Integer);
    procedure SetFReadOnly(Value : Boolean);
    procedure SetFReadOnlyCls(Value : String);
    procedure SetFInputId(Value : String);
    procedure SetFValidateOnBlur(Value : Boolean);
    procedure SetFOnFocus(Value : TExtFormFieldBaseOnFocus);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function GetInputId : TExtFunction;
    function GetSubTplData : TExtFunction;
    function GetSubTplMarkup : TExtFunction;
    function SetFieldStyle(Style : String) : TExtFunction; overload;
    function SetFieldStyle(Style : TExtObject) : TExtFunction; overload;
    function SetFieldStyle(Style : TExtFunction) : TExtFunction; overload;
    function GetSubmitValue : TExtFunction;
    function GetRawValue : TExtFunction;
    function SetRawValue(Value : TExtObject) : TExtFunction;
    function ValueToRaw(Value : TExtObject) : TExtFunction;
    function RawToValue(RawValue : TExtObject) : TExtFunction;
    function ProcessRawValue(Value : TExtObject) : TExtFunction;
    function GetValue : TExtFunction;
    function SetValue(Value : TExtObject) : TExtFunction;
    function SetReadOnly(ReadOnly : Boolean) : TExtFunction;
    function IsValid : TExtFunction;
    function ValidateValue(Value : TExtObject) : TExtFunction;
    function MarkInvalid(Errors : String) : TExtFunction; overload;
    function MarkInvalid(Errors : TExtObjectList) : TExtFunction; overload;
    function ClearInvalid : TExtFunction;
    destructor Destroy; override;
    property FieldSubTpl : TExtXTemplate read FFieldSubTpl write SetFFieldSubTpl;
    property Name : String read FName write SetFName;
    property InputType : String read FInputType write SetFInputType;
    property TabIndex : Integer read FTabIndex write SetFTabIndex;
    property InvalidText : String read FInvalidText write SetFInvalidText;
    property FieldCls : String read FFieldCls write SetFFieldCls;
    property FieldStyle : String read FFieldStyle write SetFFieldStyle;
    property FocusCls : String read FFocusCls write SetFFocusCls;
    property DirtyCls : String read FDirtyCls write SetFDirtyCls;
    property CheckChangeEvents : TExtObjectList read FCheckChangeEvents write SetFCheckChangeEvents;
    property CheckChangeBuffer : Integer read FCheckChangeBuffer write SetFCheckChangeBuffer;
    property ReadOnly : Boolean read FReadOnly write SetFReadOnly;
    property ReadOnlyCls : String read FReadOnlyCls write SetFReadOnlyCls;
    property InputId : String read FInputId write SetFInputId;
    property ValidateOnBlur : Boolean read FValidateOnBlur write SetFValidateOnBlur;
    property OnFocus : TExtFormFieldBaseOnFocus read FOnFocus write SetFOnFocus;
  end;

  TExtFormFieldSet = class(TExtFunction)
  private
    FTitle : String;
    FCheckboxToggle : Boolean;
    FCheckboxName : String;
    FCollapsible : Boolean;
    FCollapsed : Boolean;
    FBaseCls : String;
    FLayout : String;
    procedure SetFTitle(Value : String);
    procedure SetFCheckboxToggle(Value : Boolean);
    procedure SetFCheckboxName(Value : String);
    procedure SetFCollapsible(Value : Boolean);
    procedure SetFCollapsed(Value : Boolean);
    procedure SetFBaseCls(Value : String);
    procedure SetFLayout(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function SetTitle(Title : String) : TExtFunction;
    function Expand : TExtFunction;
    function Collapse : TExtFunction;
    function Toggle : TExtFunction;
    property Title : String read FTitle write SetFTitle;
    property CheckboxToggle : Boolean read FCheckboxToggle write SetFCheckboxToggle;
    property CheckboxName : String read FCheckboxName write SetFCheckboxName;
    property Collapsible : Boolean read FCollapsible write SetFCollapsible;
    property Collapsed : Boolean read FCollapsed write SetFCollapsed;
    property BaseCls : String read FBaseCls write SetFBaseCls;
    property Layout : String read FLayout write SetFLayout;
  end;

  TExtDataWriterJson = class(TExtFunction)
  private
    FRoot : String;
    FEncode : Boolean;
    FAllowSingle : Boolean;
    procedure SetFRoot(Value : String);
    procedure SetFEncode(Value : Boolean);
    procedure SetFAllowSingle(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property Root : String read FRoot write SetFRoot;
    property Encode : Boolean read FEncode write SetFEncode;
    property AllowSingle : Boolean read FAllowSingle write SetFAllowSingle;
  end;

  TExtZIndexManager = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Register(Comp : TExtComponent) : TExtFunction;
    function Unregister(Comp : TExtComponent) : TExtFunction;
    function Get(Id : String) : TExtFunction; overload;
    function Get(Id : TExtObject) : TExtFunction; overload;
    function BringToFront(Comp : String) : TExtFunction; overload;
    function BringToFront(Comp : TExtObject) : TExtFunction; overload;
    function SendToBack(Comp : String) : TExtFunction; overload;
    function SendToBack(Comp : TExtObject) : TExtFunction; overload;
    function HideAll : TExtFunction;
    function GetActive : TExtFunction;
    function GetBy(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction;
    function Each(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction;
    function EachBottomUp(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction;
    function EachTopDown(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction;
  end;

  // Procedural types for events TExtGridPluginRowEditing
  TExtGridPluginRowEditingOnBeforeedit = procedure(Editor : TExtGridPluginEditing; E : TExtObject) of object;
  TExtGridPluginRowEditingOnCanceledit = procedure(Grid : TExtObject) of object;
  TExtGridPluginRowEditingOnEdit = procedure(Editor : TExtGridPluginEditing; E : TExtObject) of object;
  TExtGridPluginRowEditingOnValidateedit = procedure(Editor : TExtGridPluginEditing; E : TExtObject) of object;

  TExtGridPluginRowEditing = class(TExtFunction)
  private
    FAutoCancel : Boolean;
    FClicksToMoveEditor : Integer;
    FErrorSummary : Boolean;
    FOnBeforeedit : TExtGridPluginRowEditingOnBeforeedit;
    FOnCanceledit : TExtGridPluginRowEditingOnCanceledit;
    FOnEdit : TExtGridPluginRowEditingOnEdit;
    FOnValidateedit : TExtGridPluginRowEditingOnValidateedit;
    procedure SetFAutoCancel(Value : Boolean);
    procedure SetFClicksToMoveEditor(Value : Integer);
    procedure SetFErrorSummary(Value : Boolean);
    procedure SetFOnBeforeedit(Value : TExtGridPluginRowEditingOnBeforeedit);
    procedure SetFOnCanceledit(Value : TExtGridPluginRowEditingOnCanceledit);
    procedure SetFOnEdit(Value : TExtGridPluginRowEditingOnEdit);
    procedure SetFOnValidateedit(Value : TExtGridPluginRowEditingOnValidateedit);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function StartEdit(RecordJS : TExtDataModel; ColumnHeader : TExtDataModel) : TExtFunction;
    property AutoCancel : Boolean read FAutoCancel write SetFAutoCancel;
    property ClicksToMoveEditor : Integer read FClicksToMoveEditor write SetFClicksToMoveEditor;
    property ErrorSummary : Boolean read FErrorSummary write SetFErrorSummary;
    property OnBeforeedit : TExtGridPluginRowEditingOnBeforeedit read FOnBeforeedit write SetFOnBeforeedit;
    property OnCanceledit : TExtGridPluginRowEditingOnCanceledit read FOnCanceledit write SetFOnCanceledit;
    property OnEdit : TExtGridPluginRowEditingOnEdit read FOnEdit write SetFOnEdit;
    property OnValidateedit : TExtGridPluginRowEditingOnValidateedit read FOnValidateedit write SetFOnValidateedit;
  end;

  TExtPanelPanel = class(TExtFunction)
  private
    FCollapsedCls : String;
    FAnimCollapse : Boolean;
    FMinButtonWidth : Integer;
    FCollapsed : Boolean;
    FCollapseFirst : Boolean;
    FHideCollapseTool : Boolean;
    FTitleCollapse : Boolean;
    FCollapseMode : String;
    FPlaceholder : TExtComponent;
    FPlaceholderTExtObject : TExtObject;
    FFloatable : Boolean;
    FOverlapHeader : Boolean;
    FCollapsible : Boolean;
    FCollapseDirection : Boolean;
    FClosable : Boolean;
    FCloseAction : String;
    FDockedItems : TExtObject;
    FDockedItemsTExtObjectList : TExtObjectList;
    FPreventHeader : Boolean;
    FHeaderPosition : String;
    FFrame : Boolean;
    FFrameHeader : Boolean;
    FTools : TExtObjectList;
    FToolsTExtObjectList : TExtObjectList;
    FTitle : String;
    FIconCls : String;
    FButtonAlign : String;
    FTbar : TExtObject;
    FTbarTExtObjectList : TExtObjectList;
    FBbar : TExtObject;
    FBbarTExtObjectList : TExtObjectList;
    FButtons : TExtObject;
    FButtonsTExtObjectList : TExtObjectList;
    FFbar : TExtObject;
    FFbarTExtObjectList : TExtObjectList;
    FLbar : TExtObject;
    FLbarTExtObjectList : TExtObjectList;
    FRbar : TExtObject;
    FRbarTExtObjectList : TExtObjectList;
    procedure SetFCollapsedCls(Value : String);
    procedure SetFAnimCollapse(Value : Boolean);
    procedure SetFMinButtonWidth(Value : Integer);
    procedure SetFCollapsed(Value : Boolean);
    procedure SetFCollapseFirst(Value : Boolean);
    procedure SetFHideCollapseTool(Value : Boolean);
    procedure SetFTitleCollapse(Value : Boolean);
    procedure SetFCollapseMode(Value : String);
    procedure SetFPlaceholder(Value : TExtComponent);
    procedure SetFPlaceholderTExtObject(Value : TExtObject);
    procedure SetFFloatable(Value : Boolean);
    procedure SetFOverlapHeader(Value : Boolean);
    procedure SetFCollapsible(Value : Boolean);
    procedure SetFCollapseDirection(Value : Boolean);
    procedure SetFClosable(Value : Boolean);
    procedure SetFCloseAction(Value : String);
    procedure SetFDockedItems(Value : TExtObject);
    procedure SetFDockedItemsTExtObjectList(Value : TExtObjectList);
    procedure SetFPreventHeader(Value : Boolean);
    procedure SetFHeaderPosition(Value : String);
    procedure SetFFrame(Value : Boolean);
    procedure SetFFrameHeader(Value : Boolean);
    procedure SetFTools(Value : TExtObjectList);
    procedure SetFToolsTExtObjectList(Value : TExtObjectList);
    procedure SetFTitle(Value : String);
    procedure SetFIconCls(Value : String);
    procedure SetFButtonAlign(Value : String);
    procedure SetFTbar(Value : TExtObject);
    procedure SetFTbarTExtObjectList(Value : TExtObjectList);
    procedure SetFBbar(Value : TExtObject);
    procedure SetFBbarTExtObjectList(Value : TExtObjectList);
    procedure SetFButtons(Value : TExtObject);
    procedure SetFButtonsTExtObjectList(Value : TExtObjectList);
    procedure SetFFbar(Value : TExtObject);
    procedure SetFFbarTExtObjectList(Value : TExtObjectList);
    procedure SetFLbar(Value : TExtObject);
    procedure SetFLbarTExtObjectList(Value : TExtObjectList);
    procedure SetFRbar(Value : TExtObject);
    procedure SetFRbarTExtObjectList(Value : TExtObjectList);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function Close : TExtFunction;
    function Collapse(Direction : String; Animate : Boolean = false) : TExtFunction;
    function Expand(Animate : Boolean = false) : TExtFunction;
    function ToggleCollapse : TExtFunction;
    destructor Destroy; override;
    property CollapsedCls : String read FCollapsedCls write SetFCollapsedCls;
    property AnimCollapse : Boolean read FAnimCollapse write SetFAnimCollapse;
    property MinButtonWidth : Integer read FMinButtonWidth write SetFMinButtonWidth;
    property Collapsed : Boolean read FCollapsed write SetFCollapsed;
    property CollapseFirst : Boolean read FCollapseFirst write SetFCollapseFirst;
    property HideCollapseTool : Boolean read FHideCollapseTool write SetFHideCollapseTool;
    property TitleCollapse : Boolean read FTitleCollapse write SetFTitleCollapse;
    property CollapseMode : String read FCollapseMode write SetFCollapseMode;
    property Placeholder : TExtComponent read FPlaceholder write SetFPlaceholder;
    property PlaceholderTExtObject : TExtObject read FPlaceholderTExtObject write SetFPlaceholderTExtObject;
    property Floatable : Boolean read FFloatable write SetFFloatable;
    property OverlapHeader : Boolean read FOverlapHeader write SetFOverlapHeader;
    property Collapsible : Boolean read FCollapsible write SetFCollapsible;
    property CollapseDirection : Boolean read FCollapseDirection write SetFCollapseDirection;
    property Closable : Boolean read FClosable write SetFClosable;
    property CloseAction : String read FCloseAction write SetFCloseAction;
    property DockedItems : TExtObject read FDockedItems write SetFDockedItems;
    property DockedItemsTExtObjectList : TExtObjectList read FDockedItemsTExtObjectList write SetFDockedItemsTExtObjectList;
    property PreventHeader : Boolean read FPreventHeader write SetFPreventHeader;
    property HeaderPosition : String read FHeaderPosition write SetFHeaderPosition;
    property Frame : Boolean read FFrame write SetFFrame;
    property FrameHeader : Boolean read FFrameHeader write SetFFrameHeader;
    property Tools : TExtObjectList read FTools write SetFTools;
    property ToolsTExtObjectList : TExtObjectList read FToolsTExtObjectList write SetFToolsTExtObjectList;
    property Title : String read FTitle write SetFTitle;
    property IconCls : String read FIconCls write SetFIconCls;
    property ButtonAlign : String read FButtonAlign write SetFButtonAlign;
    property Tbar : TExtObject read FTbar write SetFTbar;
    property TbarTExtObjectList : TExtObjectList read FTbarTExtObjectList write SetFTbarTExtObjectList;
    property Bbar : TExtObject read FBbar write SetFBbar;
    property BbarTExtObjectList : TExtObjectList read FBbarTExtObjectList write SetFBbarTExtObjectList;
    property Buttons : TExtObject read FButtons write SetFButtons;
    property ButtonsTExtObjectList : TExtObjectList read FButtonsTExtObjectList write SetFButtonsTExtObjectList;
    property Fbar : TExtObject read FFbar write SetFFbar;
    property FbarTExtObjectList : TExtObjectList read FFbarTExtObjectList write SetFFbarTExtObjectList;
    property Lbar : TExtObject read FLbar write SetFLbar;
    property LbarTExtObjectList : TExtObjectList read FLbarTExtObjectList write SetFLbarTExtObjectList;
    property Rbar : TExtObject read FRbar write SetFRbar;
    property RbarTExtObjectList : TExtObjectList read FRbarTExtObjectList write SetFRbarTExtObjectList;
  end;

  TExtDataReaderXml = class(TExtFunction)
  private
    FRecordJS : String;
    procedure SetFRecordJS(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetData(Data : TExtObject) : TExtFunction;
    function ReadRecords(Doc : TExtObject) : TExtFunction;
    property RecordJS : String read FRecordJS write SetFRecordJS;
  end;

  // Procedural types for events TExtDataProxyJsonP
  TExtDataProxyJsonPOnException = procedure(This : TExtDataProxyJsonP; Request : TExtDataRequest; Operation : TExtDataOperation) of object;

  TExtDataProxyJsonP = class(TExtFunction)
  private
    FCallbackKey : String;
    FRecordParam : String;
    FAutoAppendParams : Boolean;
    FOnException : TExtDataProxyJsonPOnException;
    procedure SetFCallbackKey(Value : String);
    procedure SetFRecordParam(Value : String);
    procedure SetFAutoAppendParams(Value : Boolean);
    procedure SetFOnException(Value : TExtDataProxyJsonPOnException);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function BuildUrl(Request : TExtDataRequest) : TExtFunction;
    function Abort : TExtFunction;
    function EncodeRecords(Records : TExtObjectList) : TExtFunction;
    property CallbackKey : String read FCallbackKey write SetFCallbackKey;
    property RecordParam : String read FRecordParam write SetFRecordParam;
    property AutoAppendParams : Boolean read FAutoAppendParams write SetFAutoAppendParams;
    property OnException : TExtDataProxyJsonPOnException read FOnException write SetFOnException;
  end;

  TExtStringSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function HtmlEncode(Value : String) : TExtFunction;
    function HtmlDecode(Value : String) : TExtFunction;
    function UrlAppend(Url : String; StringJS : String) : TExtFunction;
    function Trim(StringJS : String) : TExtFunction;
    function Capitalize(StringJS : String) : TExtFunction;
    function Ellipsis(Value : String; Length : Integer; Word : Boolean) : TExtFunction;
    function EscapeRegex(StringJS : String) : TExtFunction;
    function Escape(StringJS : String) : TExtFunction;
    function Toggle(StringJS : String; Value : String; Other : String) : TExtFunction;
    function LeftPad(StringJS : String; Size : Integer; Character : String = '') : TExtFunction;
    function Format(StringJS : String; Value1 : String; Value2 : String) : TExtFunction;
    function RepeatJS(Pattern : String; Count : Integer; Sep : String) : TExtFunction;
  end;

  // Procedural types for events TExtToolbarToolbar
  TExtToolbarToolbarOnOverflowchange = procedure(C : TExtObject; LastOverflow : Boolean) of object;

  TExtToolbarToolbar = class(TExtFunction)
  private
    FVertical : Boolean;
    FLayout : String;
    FLayoutTExtObject : TExtObject;
    FEnableOverflow : Boolean;
    FMenuTriggerCls : String;
    FOnOverflowchange : TExtToolbarToolbarOnOverflowchange;
    procedure SetFVertical(Value : Boolean);
    procedure SetFLayout(Value : String);
    procedure SetFLayoutTExtObject(Value : TExtObject);
    procedure SetFEnableOverflow(Value : Boolean);
    procedure SetFMenuTriggerCls(Value : String);
    procedure SetFOnOverflowchange(Value : TExtToolbarToolbarOnOverflowchange);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function Add(Args : TExtObjectList) : TExtFunction;
    destructor Destroy; override;
    property Vertical : Boolean read FVertical write SetFVertical;
    property Layout : String read FLayout write SetFLayout;
    property LayoutTExtObject : TExtObject read FLayoutTExtObject write SetFLayoutTExtObject;
    property EnableOverflow : Boolean read FEnableOverflow write SetFEnableOverflow;
    property MenuTriggerCls : String read FMenuTriggerCls write SetFMenuTriggerCls;
    property OnOverflowchange : TExtToolbarToolbarOnOverflowchange read FOnOverflowchange write SetFOnOverflowchange;
  end;

  // Procedural types for events TExtUtilHashMap
  TExtUtilHashMapOnAdd = procedure(This : TExtUtilHashMap; Key : String; Value : TExtObject) of object;
  TExtUtilHashMapOnClear = procedure(This : TExtUtilHashMap; This_ : TExtUtilHashMap; Key : String; Value : TExtObject) of object;
  TExtUtilHashMapOnReplace = procedure(This : TExtUtilHashMap; Key : String; Value : TExtObject; Old : TExtObject) of object;

  TExtUtilHashMap = class(TExtFunction)
  private
    FKeyFn : TExtFunction;
    FOnAdd : TExtUtilHashMapOnAdd;
    FOnClear : TExtUtilHashMapOnClear;
    FOnReplace : TExtUtilHashMapOnReplace;
    procedure SetFKeyFn(Value : TExtFunction);
    procedure SetFOnAdd(Value : TExtUtilHashMapOnAdd);
    procedure SetFOnClear(Value : TExtUtilHashMapOnClear);
    procedure SetFOnReplace(Value : TExtUtilHashMapOnReplace);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetCount : TExtFunction;
    function GetKey(O : TExtObject) : TExtFunction;
    function Add(Key : String; O : TExtObject) : TExtFunction;
    function Replace(Key : String; Value : TExtObject) : TExtFunction;
    function Remove(O : TExtObject) : TExtFunction;
    function RemoveAtKey(Key : String) : TExtFunction;
    function Get(Key : String) : TExtFunction;
    function Clear : TExtFunction;
    function ContainsKey(Key : String) : TExtFunction;
    function Contains(Value : TExtObject) : TExtFunction;
    function GetKeys : TExtFunction;
    function GetValues : TExtFunction;
    function Each(Fn : TExtFunction; Scope : TExtObject) : TExtFunction;
    function Clone : TExtFunction;
    property KeyFn : TExtFunction read FKeyFn write SetFKeyFn;
    property OnAdd : TExtUtilHashMapOnAdd read FOnAdd write SetFOnAdd;
    property OnClear : TExtUtilHashMapOnClear read FOnClear write SetFOnClear;
    property OnReplace : TExtUtilHashMapOnReplace read FOnReplace write SetFOnReplace;
  end;

  // Procedural types for events TExtPickerDate
  TExtPickerDateOnSelect = procedure(This : TExtPickerDate; Date : TDateTime) of object;

  TExtPickerDate = class(TExtFunction)
  private
    FTodayText : String;
    FHandler : TExtFunction;
    FScope : TExtObject;
    FTodayTip : String;
    FMinText : String;
    FMaxText : String;
    FFormat : String;
    FDisabledDaysText : String;
    FDisabledDatesText : String;
    FMonthNames : TExtObjectList;
    FDayNames : TExtObjectList;
    FNextText : String;
    FPrevText : String;
    FMonthYearText : String;
    FStartDay : Integer;
    FShowToday : Boolean;
    FMinDate : TDateTime;
    FMaxDate : TDateTime;
    FDisabledDays : TArrayOfInteger;
    FDisabledDatesRE : TRegExp;
    FDisabledDates : TExtObjectList;
    FDisableAnim : Boolean;
    FBaseCls : String;
    FSelectedCls : String;
    FDisabledCellCls : String;
    FLongDayFormat : String;
    FKeyNavConfig : TExtObject;
    FFocusOnShow : Boolean;
    FOnSelect : TExtPickerDateOnSelect;
    procedure SetFTodayText(Value : String);
    procedure SetFHandler(Value : TExtFunction);
    procedure SetFScope(Value : TExtObject);
    procedure SetFTodayTip(Value : String);
    procedure SetFMinText(Value : String);
    procedure SetFMaxText(Value : String);
    procedure SetFFormat(Value : String);
    procedure SetFDisabledDaysText(Value : String);
    procedure SetFDisabledDatesText(Value : String);
    procedure SetFMonthNames(Value : TExtObjectList);
    procedure SetFDayNames(Value : TExtObjectList);
    procedure SetFNextText(Value : String);
    procedure SetFPrevText(Value : String);
    procedure SetFMonthYearText(Value : String);
    procedure SetFStartDay(Value : Integer);
    procedure SetFShowToday(Value : Boolean);
    procedure SetFMinDate(Value : TDateTime);
    procedure SetFMaxDate(Value : TDateTime);
    procedure SetFDisabledDays(Value : TArrayOfInteger);
    procedure SetFDisabledDatesRE(Value : TRegExp);
    procedure SetFDisabledDates(Value : TExtObjectList);
    procedure SetFDisableAnim(Value : Boolean);
    procedure SetFBaseCls(Value : String);
    procedure SetFSelectedCls(Value : String);
    procedure SetFDisabledCellCls(Value : String);
    procedure SetFLongDayFormat(Value : String);
    procedure SetFKeyNavConfig(Value : TExtObject);
    procedure SetFFocusOnShow(Value : Boolean);
    procedure SetFOnSelect(Value : TExtPickerDateOnSelect);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function SetDisabledDates(DisabledDates : TExtObjectList) : TExtFunction; overload;
    function SetDisabledDates(DisabledDates : TRegExp) : TExtFunction; overload;
    function SetDisabledDays(DisabledDays : TArrayOfInteger) : TExtFunction;
    function SetMinDate(Value : TDateTime) : TExtFunction;
    function SetMaxDate(Value : TDateTime) : TExtFunction;
    function SetValue(Value : TDateTime) : TExtFunction;
    function GetValue : TExtFunction;
    function HideMonthPicker(Animate : Boolean = false) : TExtFunction;
    function ShowMonthPicker(Animate : Boolean = false) : TExtFunction;
    function ShowPrevMonth(E : TExtObject) : TExtFunction;
    function ShowNextMonth(E : TExtObject) : TExtFunction;
    function ShowPrevYear : TExtFunction;
    function ShowNextYear : TExtFunction;
    function SelectToday : TExtFunction;
    destructor Destroy; override;
    property TodayText : String read FTodayText write SetFTodayText;
    property Handler : TExtFunction read FHandler write SetFHandler;
    property Scope : TExtObject read FScope write SetFScope;
    property TodayTip : String read FTodayTip write SetFTodayTip;
    property MinText : String read FMinText write SetFMinText;
    property MaxText : String read FMaxText write SetFMaxText;
    property Format : String read FFormat write SetFFormat;
    property DisabledDaysText : String read FDisabledDaysText write SetFDisabledDaysText;
    property DisabledDatesText : String read FDisabledDatesText write SetFDisabledDatesText;
    property MonthNames : TExtObjectList read FMonthNames write SetFMonthNames;
    property DayNames : TExtObjectList read FDayNames write SetFDayNames;
    property NextText : String read FNextText write SetFNextText;
    property PrevText : String read FPrevText write SetFPrevText;
    property MonthYearText : String read FMonthYearText write SetFMonthYearText;
    property StartDay : Integer read FStartDay write SetFStartDay;
    property ShowToday : Boolean read FShowToday write SetFShowToday;
    property MinDate : TDateTime read FMinDate write SetFMinDate;
    property MaxDate : TDateTime read FMaxDate write SetFMaxDate;
    property DisabledDays : TArrayOfInteger read FDisabledDays write SetFDisabledDays;
    property DisabledDatesRE : TRegExp read FDisabledDatesRE write SetFDisabledDatesRE;
    property DisabledDates : TExtObjectList read FDisabledDates write SetFDisabledDates;
    property DisableAnim : Boolean read FDisableAnim write SetFDisableAnim;
    property BaseCls : String read FBaseCls write SetFBaseCls;
    property SelectedCls : String read FSelectedCls write SetFSelectedCls;
    property DisabledCellCls : String read FDisabledCellCls write SetFDisabledCellCls;
    property LongDayFormat : String read FLongDayFormat write SetFLongDayFormat;
    property KeyNavConfig : TExtObject read FKeyNavConfig write SetFKeyNavConfig;
    property FocusOnShow : Boolean read FFocusOnShow write SetFFocusOnShow;
    property OnSelect : TExtPickerDateOnSelect read FOnSelect write SetFOnSelect;
  end;

  // Procedural types for events TExtDataConnection
  TExtDataConnectionOnBeforerequest = procedure(Conn : TExtDataConnection; Options : TExtObject) of object;
  TExtDataConnectionOnRequestcomplete = procedure(Conn : TExtDataConnection; Response : TExtObject; Options : TExtObject) of object;
  TExtDataConnectionOnRequestexception = procedure(Conn : TExtDataConnection; Response : TExtObject; Options : TExtObject) of object;

  TExtDataConnection = class(TExtFunction)
  private
    FDisableCaching : Boolean;
    FWithCredentials : Boolean;
    FCors : Boolean;
    FDisableCachingParam : String;
    FTimeout : Integer;
    FExtraParams : TExtObject;
    FOnBeforerequest : TExtDataConnectionOnBeforerequest;
    FOnRequestcomplete : TExtDataConnectionOnRequestcomplete;
    FOnRequestexception : TExtDataConnectionOnRequestexception;
    procedure SetFDisableCaching(Value : Boolean);
    procedure SetFWithCredentials(Value : Boolean);
    procedure SetFCors(Value : Boolean);
    procedure SetFDisableCachingParam(Value : String);
    procedure SetFTimeout(Value : Integer);
    procedure SetFExtraParams(Value : TExtObject);
    procedure SetFOnBeforerequest(Value : TExtDataConnectionOnBeforerequest);
    procedure SetFOnRequestcomplete(Value : TExtDataConnectionOnRequestcomplete);
    procedure SetFOnRequestexception(Value : TExtDataConnectionOnRequestexception);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : String; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : String; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : String; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : String; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : String; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : String; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; overload;
    function Upload(Form : String; Url : String; Params : String; Options : TExtObject) : TExtFunction; overload;
    function Upload(Form : THTMLElement; Url : String; Params : String; Options : TExtObject) : TExtFunction; overload;
    function Upload(Form : TExtElement; Url : String; Params : String; Options : TExtObject) : TExtFunction; overload;
    function SetOptions(Options : TExtObject; Scope : TExtObject) : TExtFunction;
    function IsLoading(Request : TExtObject = nil) : TExtFunction;
    function Abort(Request : TExtObject = nil) : TExtFunction;
    function AbortAll : TExtFunction;
    function ParseStatus(Status : Integer) : TExtFunction;
    destructor Destroy; override;
    property DisableCaching : Boolean read FDisableCaching write SetFDisableCaching;
    property WithCredentials : Boolean read FWithCredentials write SetFWithCredentials;
    property Cors : Boolean read FCors write SetFCors;
    property DisableCachingParam : String read FDisableCachingParam write SetFDisableCachingParam;
    property Timeout : Integer read FTimeout write SetFTimeout;
    property ExtraParams : TExtObject read FExtraParams write SetFExtraParams;
    property OnBeforerequest : TExtDataConnectionOnBeforerequest read FOnBeforerequest write SetFOnBeforerequest;
    property OnRequestcomplete : TExtDataConnectionOnRequestcomplete read FOnRequestcomplete write SetFOnRequestcomplete;
    property OnRequestexception : TExtDataConnectionOnRequestexception read FOnRequestexception write SetFOnRequestexception;
  end;

  TExtFormFieldHidden = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtUtilInflector = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Singular(Matcher : TRegExp; Replacer : String) : TExtFunction;
    function Plural(Matcher : TRegExp; Replacer : String) : TExtFunction;
    function ClearSingulars : TExtFunction;
    function ClearPlurals : TExtFunction;
    function IsTransnumeral(Word : String) : TExtFunction;
    function Pluralize(Word : String) : TExtFunction;
    function Singularize(Word : String) : TExtFunction;
    function Classify(Word : String) : TExtFunction;
    function Ordinalize(Number : Integer) : TExtFunction;
  end;

  TExtResizerSplitter = class(TExtFunction)
  private
    FCollapsible : Boolean;
    FPerformCollapse : Boolean;
    FCollapseOnDblClick : Boolean;
    FDefaultSplitMin : Integer;
    FDefaultSplitMax : Integer;
    FCollapsedCls : String;
    FCollapseTarget : String;
    FCollapseTargetTExtPanelPanel : TExtPanelPanel;
    procedure SetFCollapsible(Value : Boolean);
    procedure SetFPerformCollapse(Value : Boolean);
    procedure SetFCollapseOnDblClick(Value : Boolean);
    procedure SetFDefaultSplitMin(Value : Integer);
    procedure SetFDefaultSplitMax(Value : Integer);
    procedure SetFCollapsedCls(Value : String);
    procedure SetFCollapseTarget(Value : String);
    procedure SetFCollapseTargetTExtPanelPanel(Value : TExtPanelPanel);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    destructor Destroy; override;
    property Collapsible : Boolean read FCollapsible write SetFCollapsible;
    property PerformCollapse : Boolean read FPerformCollapse write SetFPerformCollapse;
    property CollapseOnDblClick : Boolean read FCollapseOnDblClick write SetFCollapseOnDblClick;
    property DefaultSplitMin : Integer read FDefaultSplitMin write SetFDefaultSplitMin;
    property DefaultSplitMax : Integer read FDefaultSplitMax write SetFDefaultSplitMax;
    property CollapsedCls : String read FCollapsedCls write SetFCollapsedCls;
    property CollapseTarget : String read FCollapseTarget write SetFCollapseTarget;
    property CollapseTargetTExtPanelPanel : TExtPanelPanel read FCollapseTargetTExtPanelPanel write SetFCollapseTargetTExtPanelPanel;
  end;

  TExtDdDD = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Id : String; SGroup : String; Config : TExtObject);
    function AutoOffset(IPageX : Integer; IPageY : Integer) : TExtFunction;
    function SetDelta(IDeltaX : Integer; IDeltaY : Integer) : TExtFunction;
    function SetDragElPos(IPageX : Integer; IPageY : Integer) : TExtFunction;
    function AlignElWithMouse(El : THTMLElement; IPageX : Integer; IPageY : Integer) : TExtFunction;
    function CachePosition(IPageX : Integer = 0; IPageY : Integer = 0) : TExtFunction;
    function ApplyConfig : TExtFunction;
    function B4MouseDown : TExtFunction;
    function B4Drag : TExtFunction;
  end;

  // Procedural types for events TExtPickerColor
  TExtPickerColorOnSelect = procedure(This : TExtPickerColor; Color : String) of object;

  TExtPickerColor = class(TExtFunction)
  private
    FComponentCls : String;
    FSelectedCls : String;
    FValue : String;
    FClickEvent : String;
    FAllowReselect : Boolean;
    FHandler : TExtFunction;
    FScope : TExtObject;
    FOnSelect : TExtPickerColorOnSelect;
    procedure SetFComponentCls(Value : String);
    procedure SetFSelectedCls(Value : String);
    procedure SetFValue(Value : String);
    procedure SetFClickEvent(Value : String);
    procedure SetFAllowReselect(Value : Boolean);
    procedure SetFHandler(Value : TExtFunction);
    procedure SetFScope(Value : TExtObject);
    procedure SetFOnSelect(Value : TExtPickerColorOnSelect);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function Select(Color : String; SuppressEvent : Boolean = false) : TExtFunction;
    function GetValue : TExtFunction;
    destructor Destroy; override;
    property ComponentCls : String read FComponentCls write SetFComponentCls;
    property SelectedCls : String read FSelectedCls write SetFSelectedCls;
    property Value : String read FValue write SetFValue;
    property ClickEvent : String read FClickEvent write SetFClickEvent;
    property AllowReselect : Boolean read FAllowReselect write SetFAllowReselect;
    property Handler : TExtFunction read FHandler write SetFHandler;
    property Scope : TExtObject read FScope write SetFScope;
    property OnSelect : TExtPickerColorOnSelect read FOnSelect write SetFOnSelect;
  end;

  TExtChartSeriesLine = class(TExtFunction)
  private
    FAxis : String;
    FSelectionTolerance : Integer;
    FShowMarkers : Boolean;
    FMarkerConfig : TExtObject;
    FStyle : TExtObject;
    FSmooth : Boolean;
    FSmoothInteger : Integer;
    FFill : Boolean;
    procedure SetFAxis(Value : String);
    procedure SetFSelectionTolerance(Value : Integer);
    procedure SetFShowMarkers(Value : Boolean);
    procedure SetFMarkerConfig(Value : TExtObject);
    procedure SetFStyle(Value : TExtObject);
    procedure SetFSmooth(Value : Boolean);
    procedure SetFSmoothInteger(Value : Integer);
    procedure SetFFill(Value : Boolean);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function DrawSeries : TExtFunction;
    destructor Destroy; override;
    property Axis : String read FAxis write SetFAxis;
    property SelectionTolerance : Integer read FSelectionTolerance write SetFSelectionTolerance;
    property ShowMarkers : Boolean read FShowMarkers write SetFShowMarkers;
    property MarkerConfig : TExtObject read FMarkerConfig write SetFMarkerConfig;
    property Style : TExtObject read FStyle write SetFStyle;
    property Smooth : Boolean read FSmooth write SetFSmooth;
    property SmoothInteger : Integer read FSmoothInteger write SetFSmoothInteger;
    property Fill : Boolean read FFill write SetFFill;
  end;

  // Procedural types for events TExtFormFieldSpinner
  TExtFormFieldSpinnerOnSpin = procedure(This : TExtFormFieldSpinner; Direction : String) of object;
  TExtFormFieldSpinnerOnSpinup = procedure(This : TExtFormFieldSpinner; This_ : TExtFormFieldSpinner) of object;

  TExtFormFieldSpinner = class(TExtFunction)
  private
    FSpinUpEnabled : Boolean;
    FSpinDownEnabled : Boolean;
    FKeyNavEnabled : Boolean;
    FMouseWheelEnabled : Boolean;
    FRepeatTriggerClick : Boolean;
    FOnSpin : TExtFormFieldSpinnerOnSpin;
    FOnSpinup : TExtFormFieldSpinnerOnSpinup;
    procedure SetFSpinUpEnabled(Value : Boolean);
    procedure SetFSpinDownEnabled(Value : Boolean);
    procedure SetFKeyNavEnabled(Value : Boolean);
    procedure SetFMouseWheelEnabled(Value : Boolean);
    procedure SetFRepeatTriggerClick(Value : Boolean);
    procedure SetFOnSpin(Value : TExtFormFieldSpinnerOnSpin);
    procedure SetFOnSpinup(Value : TExtFormFieldSpinnerOnSpinup);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function SpinUp : TExtFunction;
    function SpinDown : TExtFunction;
    function SetSpinUpEnabled(Enabled : Boolean) : TExtFunction;
    function SetSpinDownEnabled(Enabled : Boolean) : TExtFunction;
    property SpinUpEnabled : Boolean read FSpinUpEnabled write SetFSpinUpEnabled;
    property SpinDownEnabled : Boolean read FSpinDownEnabled write SetFSpinDownEnabled;
    property KeyNavEnabled : Boolean read FKeyNavEnabled write SetFKeyNavEnabled;
    property MouseWheelEnabled : Boolean read FMouseWheelEnabled write SetFMouseWheelEnabled;
    property RepeatTriggerClick : Boolean read FRepeatTriggerClick write SetFRepeatTriggerClick;
    property OnSpin : TExtFormFieldSpinnerOnSpin read FOnSpin write SetFOnSpin;
    property OnSpinup : TExtFormFieldSpinnerOnSpinup read FOnSpinup write SetFOnSpinup;
  end;

  TExtMenuSeparator = class(TExtFunction)
  private
    FActiveCls : String;
    FCanActivate : Boolean;
    FClickHideDelay : Boolean;
    FDestroyMenu : Boolean;
    FDisabledCls : Boolean;
    FHref : String;
    FHrefTarget : String;
    FHideOnClick : Boolean;
    FIcon : String;
    FIconCls : String;
    FMenu : TExtObject;
    FMenuAlign : String;
    FMenuExpandDelay : Integer;
    FMenuHideDelay : Integer;
    FPlain : Boolean;
    FSeparatorCls : String;
    FText : String;
    procedure SetFActiveCls(Value : String);
    procedure SetFCanActivate(Value : Boolean);
    procedure SetFClickHideDelay(Value : Boolean);
    procedure SetFDestroyMenu(Value : Boolean);
    procedure SetFDisabledCls(Value : Boolean);
    procedure SetFHref(Value : String);
    procedure SetFHrefTarget(Value : String);
    procedure SetFHideOnClick(Value : Boolean);
    procedure SetFIcon(Value : String);
    procedure SetFIconCls(Value : String);
    procedure SetFMenu(Value : TExtObject);
    procedure SetFMenuAlign(Value : String);
    procedure SetFMenuExpandDelay(Value : Integer);
    procedure SetFMenuHideDelay(Value : Integer);
    procedure SetFPlain(Value : Boolean);
    procedure SetFSeparatorCls(Value : String);
    procedure SetFText(Value : String);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    destructor Destroy; override;
    property ActiveCls : String read FActiveCls write SetFActiveCls;
    property CanActivate : Boolean read FCanActivate write SetFCanActivate;
    property ClickHideDelay : Boolean read FClickHideDelay write SetFClickHideDelay;
    property DestroyMenu : Boolean read FDestroyMenu write SetFDestroyMenu;
    property DisabledCls : Boolean read FDisabledCls write SetFDisabledCls;
    property Href : String read FHref write SetFHref;
    property HrefTarget : String read FHrefTarget write SetFHrefTarget;
    property HideOnClick : Boolean read FHideOnClick write SetFHideOnClick;
    property Icon : String read FIcon write SetFIcon;
    property IconCls : String read FIconCls write SetFIconCls;
    property Menu : TExtObject read FMenu write SetFMenu;
    property MenuAlign : String read FMenuAlign write SetFMenuAlign;
    property MenuExpandDelay : Integer read FMenuExpandDelay write SetFMenuExpandDelay;
    property MenuHideDelay : Integer read FMenuHideDelay write SetFMenuHideDelay;
    property Plain : Boolean read FPlain write SetFPlain;
    property SeparatorCls : String read FSeparatorCls write SetFSeparatorCls;
    property Text : String read FText write SetFText;
  end;

  TExtDataSequentialIdGenerator = class(TExtFunction)
  private
    FPrefix : String;
    FSeed : Integer;
    procedure SetFPrefix(Value : String);
    procedure SetFSeed(Value : Integer);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Generate : TExtFunction;
    property Prefix : String read FPrefix write SetFPrefix;
    property Seed : Integer read FSeed write SetFSeed;
  end;

  TExtDataProxyLocalStorage = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  // Procedural types for events TExtDirectProvider
  TExtDirectProviderOnConnect = procedure(Provider : TExtDirectProvider) of object;
  TExtDirectProviderOnDisconnect = procedure(Provider : TExtDirectProvider) of object;
  TExtDirectProviderOnData = procedure(Provider : TExtDirectProvider; E : TExtDirectEvent) of object;
  TExtDirectProviderOnException = procedure of object;

  TExtDirectProvider = class(TExtFunction)
  private
    FId : String;
    FOnConnect : TExtDirectProviderOnConnect;
    FOnDisconnect : TExtDirectProviderOnDisconnect;
    FOnData : TExtDirectProviderOnData;
    FOnException : TExtDirectProviderOnException;
    procedure SetFId(Value : String);
    procedure SetFOnConnect(Value : TExtDirectProviderOnConnect);
    procedure SetFOnDisconnect(Value : TExtDirectProviderOnDisconnect);
    procedure SetFOnData(Value : TExtDirectProviderOnData);
    procedure SetFOnException(Value : TExtDirectProviderOnException);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function IsConnected : TExtFunction;
    function Connect : TExtFunction;
    function Disconnect : TExtFunction;
    property Id : String read FId write SetFId;
    property OnConnect : TExtDirectProviderOnConnect read FOnConnect write SetFOnConnect;
    property OnDisconnect : TExtDirectProviderOnDisconnect read FOnDisconnect write SetFOnDisconnect;
    property OnData : TExtDirectProviderOnData read FOnData write SetFOnData;
    property OnException : TExtDirectProviderOnException read FOnException write SetFOnException;
  end;

  TExtDirectRemotingEvent = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetTransaction : TExtFunction;
  end;

  TExtError = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    class function RaiseJS(Err : String) : TExtFunction; overload;
    function RaiseJS(Err : TExtObject) : TExtFunction; overload;
    class function Handle(Err : TExtError) : TExtFunction;
    constructor Create(Config : String);
    constructor Create(Config : TExtObject);
    function ToString : TExtFunction;
  end;

  TExtFormActionLoad = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtLayoutContainerHBox = class(TExtFunction)
  private
    FAlign : String;
    procedure SetFAlign(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property Align : String read FAlign write SetFAlign;
  end;

  TExtDdDragDrop = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Id : String; SGroup : String; Config : TExtObject);
    function Lock : TExtFunction;
    function Unlock : TExtFunction;
    function StartDrag(X : Integer; Y : Integer) : TExtFunction;
    function OnDrag(E : TEvent) : TExtFunction;
    function OnDragEnter(E : TEvent; Id : String) : TExtFunction; overload;
    function OnDragEnter(E : TEvent; Id : TExtObjectList) : TExtFunction; overload;
    function OnDragOver(E : TEvent; Id : String) : TExtFunction; overload;
    function OnDragOver(E : TEvent; Id : TExtObjectList) : TExtFunction; overload;
    function OnDragOut(E : TEvent; Id : String) : TExtFunction; overload;
    function OnDragOut(E : TEvent; Id : TExtObjectList) : TExtFunction; overload;
    function OnDragDrop(E : TEvent; Id : String) : TExtFunction; overload;
    function OnDragDrop(E : TEvent; Id : TExtObjectList) : TExtFunction; overload;
    function OnInvalidDrop(E : TEvent) : TExtFunction;
    function EndDrag(E : TEvent) : TExtFunction;
    function OnMouseDown(E : TEvent) : TExtFunction;
    function OnMouseUp(E : TEvent) : TExtFunction;
    function OnAvailable : TExtFunction;
    function ConstrainTo(ConstrainTo : String; Pad : TExtObject = nil; InContent : Boolean = false) : TExtFunction; overload;
    function ConstrainTo(ConstrainTo : THTMLElement; Pad : TExtObject = nil; InContent : Boolean = false) : TExtFunction; overload;
    function ConstrainTo(ConstrainTo : THTMLElement; Pad : Integer; InContent : Boolean = false) : TExtFunction; overload;
    function ConstrainTo(ConstrainTo : TExtElement; Pad : TExtObject = nil; InContent : Boolean = false) : TExtFunction; overload;
    function ConstrainTo(ConstrainTo : TExtElement; Pad : Integer; InContent : Boolean = false) : TExtFunction; overload;
    function ConstrainTo(ConstrainTo : String; Pad : Integer; InContent : Boolean = false) : TExtFunction; overload;
    function GetEl : TExtFunction;
    function GetDragEl : TExtFunction;
    function Init(Id : String; SGroup : String; Config : TExtObject) : TExtFunction;
    function InitTarget(Id : String; SGroup : String; Config : TExtObject) : TExtFunction;
    function ApplyConfig : TExtFunction;
    function SetPadding(ITop : Integer; IRight : Integer; IBot : Integer; ILeft : Integer) : TExtFunction;
    function SetInitPosition(DiffX : Integer; DiffY : Integer) : TExtFunction;
    function AddToGroup(SGroup : String) : TExtFunction;
    function RemoveFromGroup(SGroup : String) : TExtFunction;
    function SetDragElId(Id : String) : TExtFunction;
    function SetHandleElId(Id : String) : TExtFunction;
    function SetOuterHandleElId(Id : String) : TExtFunction;
    function Unreg : TExtFunction;
    function IsLocked : TExtFunction;
    function AddInvalidHandleType(TagName : String) : TExtFunction;
    function AddInvalidHandleId(Id : String) : TExtFunction;
    function AddInvalidHandleClass(CssClass : String) : TExtFunction;
    function RemoveInvalidHandleType(TagName : String) : TExtFunction;
    function RemoveInvalidHandleId(Id : String) : TExtFunction;
    function RemoveInvalidHandleClass(CssClass : String) : TExtFunction;
    function IsValidHandleChild(Node : THTMLElement) : TExtFunction;
    function SetXConstraint(ILeft : Integer; IRight : Integer; ITickSize : Integer = 0) : TExtFunction;
    function ClearConstraints : TExtFunction;
    function ClearTicks : TExtFunction;
    function SetYConstraint(IUp : Integer; IDown : Integer; ITickSize : Integer = 0) : TExtFunction;
    function ResetConstraints(MaintainOffset : Boolean; Val : Integer; TickArray : TArrayOfInteger) : TExtFunction;
    function ToString : TExtFunction;
  end;

  TExtDataResultSet = class(TExtFunction)
  private
    FLoaded : Boolean;
    FCount : Integer;
    FTotal : Integer;
    FSuccess : Boolean;
    FRecords : TExtObjectList;
    procedure SetFLoaded(Value : Boolean);
    procedure SetFCount(Value : Integer);
    procedure SetFTotal(Value : Integer);
    procedure SetFSuccess(Value : Boolean);
    procedure SetFRecords(Value : TExtObjectList);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    constructor Create(Config : TExtObject = nil);
    destructor Destroy; override;
    property Loaded : Boolean read FLoaded write SetFLoaded;
    property Count : Integer read FCount write SetFCount;
    property Total : Integer read FTotal write SetFTotal;
    property Success : Boolean read FSuccess write SetFSuccess;
    property Records : TExtObjectList read FRecords write SetFRecords;
  end;

  TExtDataWriterWriter = class(TExtFunction)
  private
    FWriteAllFields : Boolean;
    FNameProperty : String;
    procedure SetFWriteAllFields(Value : Boolean);
    procedure SetFNameProperty(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Config : TExtObject = nil);
    function Write(Request : TExtDataRequest) : TExtFunction;
    function GetRecordData(RecordJS : TExtObject) : TExtFunction;
    property WriteAllFields : Boolean read FWriteAllFields write SetFWriteAllFields;
    property NameProperty : String read FNameProperty write SetFNameProperty;
  end;

  TExtClassManagerSingleton = class(TExtFunction)
  private
    FAlias : TExtObjectList;
    FSingleton : Boolean;
    FAlternateClassName : String;
    FAlternateClassNameTExtObjectList : TExtObjectList;
    FOverride : String;
    procedure SetFAlias(Value : TExtObjectList);
    procedure SetFSingleton(Value : Boolean);
    procedure SetFAlternateClassName(Value : String);
    procedure SetFAlternateClassNameTExtObjectList(Value : TExtObjectList);
    procedure SetFOverride(Value : String);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Define : TExtFunction;
    function GetClassName : TExtFunction;
    function GetDisplayName(ObjectJS : TExtObject) : TExtFunction;
    function GetClass : TExtFunction;
    function Namespace(Namespace1 : String; Namespace2 : String; Etc : String) : TExtFunction;
    function CreateWidget : TExtFunction;
    function Ns : TExtFunction;
    destructor Destroy; override;
    property Alias : TExtObjectList read FAlias write SetFAlias;
    property Singleton : Boolean read FSingleton write SetFSingleton;
    property AlternateClassName : String read FAlternateClassName write SetFAlternateClassName;
    property AlternateClassNameTExtObjectList : TExtObjectList read FAlternateClassNameTExtObjectList write SetFAlternateClassNameTExtObjectList;
    property Override : String read FOverride write SetFOverride;
  end;

  TExtDataReaderJson = class(TExtFunction)
  private
    FRecordJS : String;
    FUseSimpleAccessors : Boolean;
    procedure SetFRecordJS(Value : String);
    procedure SetFUseSimpleAccessors(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function ReadRecords(Data : TExtObject) : TExtFunction;
    property RecordJS : String read FRecordJS write SetFRecordJS;
    property UseSimpleAccessors : Boolean read FUseSimpleAccessors write SetFUseSimpleAccessors;
  end;

  TExtDataBelongsToAssociation = class(TExtFunction)
  private
    FForeignKey : String;
    FGetterName : String;
    FSetterName : String;
    FTypeJS : String;
    procedure SetFForeignKey(Value : String);
    procedure SetFGetterName(Value : String);
    procedure SetFSetterName(Value : String);
    procedure SetFTypeJS(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property ForeignKey : String read FForeignKey write SetFForeignKey;
    property GetterName : String read FGetterName write SetFGetterName;
    property SetterName : String read FSetterName write SetFSetterName;
    property TypeJS : String read FTypeJS write SetFTypeJS;
  end;

  TExtDrawColor = class(TExtFunction)
  private
    FLightnessFactor : Integer;
    procedure SetFLightnessFactor(Value : Integer);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Red : Integer; Green : Integer; Blue : Integer);
    function GetRed : TExtFunction;
    function GetGreen : TExtFunction;
    function GetBlue : TExtFunction;
    function GetRGB : TExtFunction;
    function GetHSL : TExtFunction;
    function GetLighter(Factor : Integer) : TExtFunction;
    function GetDarker(Factor : Integer) : TExtFunction;
    function ToString : TExtFunction;
    class function ToHex(Color : String) : TExtFunction; overload;
    function ToHex(Color : TExtObjectList) : TExtFunction; overload;
    class function FromString(Str : String) : TExtFunction;
    function GetGrayscale : TExtFunction;
    class function FromHSL(H : Integer; S : Integer; L : Integer) : TExtFunction;
    property LightnessFactor : Integer read FLightnessFactor write SetFLightnessFactor;
  end;

  TExtChartSeriesArea = class(TExtFunction)
  private
    FStyle : TExtObject;
    FStyle_ : TExtObject;
    procedure SetFStyle(Value : TExtObject);
    procedure SetFStyle_(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function DrawSeries : TExtFunction;
    function HighlightSeries(Item : TExtObject) : TExtFunction;
    function UnHighlightSeries(Item : TExtObject) : TExtFunction;
    function HighlightItem(Info : TExtObject) : TExtFunction;
    function UnHighlightItem(Info : TExtObject) : TExtFunction;
    function GetLegendColor(Info : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property Style : TExtObject read FStyle write SetFStyle;
    property Style_ : TExtObject read FStyle_ write SetFStyle_;
  end;

  TExtUtilTextMetrics = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Measure(El : String; Text : String; FixedWidth : Integer = 0) : TExtFunction; overload;
    function Measure(El : THTMLElement; Text : String; FixedWidth : Integer = 0) : TExtFunction; overload;
    function DestroyJS : TExtFunction; override;
    constructor Create(BindTo : String; FixedWidth : Integer = 0);
    constructor Create(BindTo : THTMLElement; FixedWidth : Integer = 0);
    constructor Create(BindTo : TExtElement; FixedWidth : Integer = 0);
    function GetSize(Text : String) : TExtFunction;
    function Bind(El : String) : TExtFunction; overload;
    function Bind(El : THTMLElement) : TExtFunction; overload;
    function Bind(El : TExtElement) : TExtFunction; overload;
    function SetFixedWidth(Width : Integer) : TExtFunction;
    function GetWidth(Text : String) : TExtFunction;
    function GetHeight(Text : String) : TExtFunction;
    function DestroyJS_ : TExtFunction;
    function GetTextWidth(Text : String; Min : Integer = 0; Max : Integer = 0) : TExtFunction;
  end;

  TExtFormActionAction = class(TExtFunction)
  private
    FForm : TExtFormBasic;
    FUrl : String;
    FReset : Boolean;
    FMethod : String;
    FParams : TExtObject;
    FParamsString : String;
    FHeaders : TExtObject;
    FTimeout : Integer;
    FSuccess : TExtFunction;
    FFailure : TExtFunction;
    FScope : TExtObject;
    FWaitMsg : String;
    FWaitTitle : String;
    FSubmitEmptyText : Boolean;
    FTypeJS : String;
    FFailureType : String;
    FResponse : TExtObject;
    FResultJS : TExtObject;
    procedure SetFForm(Value : TExtFormBasic);
    procedure SetFUrl(Value : String);
    procedure SetFReset(Value : Boolean);
    procedure SetFMethod(Value : String);
    procedure SetFParams(Value : TExtObject);
    procedure SetFParamsString(Value : String);
    procedure SetFHeaders(Value : TExtObject);
    procedure SetFTimeout(Value : Integer);
    procedure SetFSuccess(Value : TExtFunction);
    procedure SetFFailure(Value : TExtFunction);
    procedure SetFScope(Value : TExtObject);
    procedure SetFWaitMsg(Value : String);
    procedure SetFWaitTitle(Value : String);
    procedure SetFSubmitEmptyText(Value : Boolean);
    procedure SetFTypeJS(Value : String);
    procedure SetFFailureType(Value : String);
    procedure SetFResponse(Value : TExtObject);
    procedure SetFResultJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    class function CLIENT_INVALID : String;
    class function SERVER_INVALID : String;
    class function CONNECT_FAILURE : String;
    class function LOAD_FAILURE : String;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    destructor Destroy; override;
    property Form : TExtFormBasic read FForm write SetFForm;
    property Url : String read FUrl write SetFUrl;
    property Reset : Boolean read FReset write SetFReset;
    property Method : String read FMethod write SetFMethod;
    property Params : TExtObject read FParams write SetFParams;
    property ParamsString : String read FParamsString write SetFParamsString;
    property Headers : TExtObject read FHeaders write SetFHeaders;
    property Timeout : Integer read FTimeout write SetFTimeout;
    property Success : TExtFunction read FSuccess write SetFSuccess;
    property Failure : TExtFunction read FFailure write SetFFailure;
    property Scope : TExtObject read FScope write SetFScope;
    property WaitMsg : String read FWaitMsg write SetFWaitMsg;
    property WaitTitle : String read FWaitTitle write SetFWaitTitle;
    property SubmitEmptyText : Boolean read FSubmitEmptyText write SetFSubmitEmptyText;
    property TypeJS : String read FTypeJS write SetFTypeJS;
    property FailureType : String read FFailureType write SetFFailureType;
    property Response : TExtObject read FResponse write SetFResponse;
    property ResultJS : TExtObject read FResultJS write SetFResultJS;
  end;

  TExtGridPagingScroller = class(TExtFunction)
  private
    FPercentageFromEdge : Integer;
    FScrollToLoadBuffer : Integer;
    procedure SetFPercentageFromEdge(Value : Integer);
    procedure SetFScrollToLoadBuffer(Value : Integer);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property PercentageFromEdge : Integer read FPercentageFromEdge write SetFPercentageFromEdge;
    property ScrollToLoadBuffer : Integer read FScrollToLoadBuffer write SetFScrollToLoadBuffer;
  end;

  TExtFormFieldTime = class(TExtFunction)
  private
    FTriggerCls : String;
    FMinValue : TDateTime;
    FMinValueString : String;
    FMaxValue : TDateTime;
    FMaxValueString : String;
    FMinText : String;
    FMaxText : String;
    FInvalidText : String;
    FFormat : String;
    FSubmitFormat : String;
    FAltFormats : String;
    FIncrement : Integer;
    FPickerMaxHeight : Integer;
    FSelectOnTab : Boolean;
    procedure SetFTriggerCls(Value : String);
    procedure SetFMinValue(Value : TDateTime);
    procedure SetFMinValueString(Value : String);
    procedure SetFMaxValue(Value : TDateTime);
    procedure SetFMaxValueString(Value : String);
    procedure SetFMinText(Value : String);
    procedure SetFMaxText(Value : String);
    procedure SetFInvalidText(Value : String);
    procedure SetFFormat(Value : String);
    procedure SetFSubmitFormat(Value : String);
    procedure SetFAltFormats(Value : String);
    procedure SetFIncrement(Value : Integer);
    procedure SetFPickerMaxHeight(Value : Integer);
    procedure SetFSelectOnTab(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function SetMinValue(Value : TDateTime) : TExtFunction; overload;
    function SetMinValue(Value : String) : TExtFunction; overload;
    function SetMaxValue(Value : TDateTime) : TExtFunction; overload;
    function SetMaxValue(Value : String) : TExtFunction; overload;
    function GetErrors(Value : TExtObject = nil) : TExtFunction;
    property TriggerCls : String read FTriggerCls write SetFTriggerCls;
    property MinValue : TDateTime read FMinValue write SetFMinValue;
    property MinValueString : String read FMinValueString write SetFMinValueString;
    property MaxValue : TDateTime read FMaxValue write SetFMaxValue;
    property MaxValueString : String read FMaxValueString write SetFMaxValueString;
    property MinText : String read FMinText write SetFMinText;
    property MaxText : String read FMaxText write SetFMaxText;
    property InvalidText : String read FInvalidText write SetFInvalidText;
    property Format : String read FFormat write SetFFormat;
    property SubmitFormat : String read FSubmitFormat write SetFSubmitFormat;
    property AltFormats : String read FAltFormats write SetFAltFormats;
    property Increment : Integer read FIncrement write SetFIncrement;
    property PickerMaxHeight : Integer read FPickerMaxHeight write SetFPickerMaxHeight;
    property SelectOnTab : Boolean read FSelectOnTab write SetFSelectOnTab;
  end;

  TExtFxTargetCompositeElementCSS = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtDdDragDropManagerSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Lock : TExtFunction;
    function Unlock : TExtFunction;
    function IsLocked : TExtFunction;
    function RegDragDrop(ODD : TExtDdDragDrop; SGroup : String) : TExtFunction;
    function RegHandle(SDDId : String; SHandleId : String) : TExtFunction;
    function IsDragDrop(Id : String) : TExtFunction;
    function GetRelated(P_oDD : TExtDdDragDrop; BTargetsOnly : Boolean) : TExtFunction;
    function IsLegalTarget(ODD : TExtDdDragDrop; OTargetDD : TExtDdDragDrop) : TExtFunction;
    function IsTypeOfDD(The : TExtObject) : TExtFunction;
    function IsHandle(Id : String) : TExtFunction;
    function GetDDById(Id : String) : TExtFunction;
    function StartDrag(X : Integer; Y : Integer) : TExtFunction;
    function StopEvent(E : TEvent) : TExtFunction;
    function GetBestMatch(Dds : TExtObjectList) : TExtFunction;
    function RefreshCache(Groups : TExtObject) : TExtFunction;
    function VerifyEl(El : THTMLElement) : TExtFunction;
    function GetLocation(ODD : TExtDdDragDrop) : TExtFunction;
    function GetElement(Id : String) : TExtFunction;
    function GetCss(Id : String) : TExtFunction;
    function GetPosX(El : THTMLElement) : TExtFunction;
    function GetPosY(El : THTMLElement) : TExtFunction;
    function SwapNode(N1 : THTMLElement; N2 : THTMLElement) : TExtFunction;
    function GetStyle(El : THTMLElement; Param : String) : TExtFunction;
    function GetScrollTop : TExtFunction;
    function GetScrollLeft : TExtFunction;
    function MoveToEl(MoveEl : THTMLElement; TargetEl : THTMLElement) : TExtFunction;
    function NumericSort(A : Integer; B : Integer) : TExtFunction;
    function HandleWasClicked(Node : THTMLElement) : TExtFunction;
  end;

  TExtToolbarSeparator = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtDdDropZone = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetTargetFromEvent(E : TEvent) : TExtFunction;
    function OnNodeEnter(NodeData : TExtObject; Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function OnNodeOver(NodeData : TExtObject; Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function OnNodeOut(NodeData : TExtObject; Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function OnNodeDrop(NodeData : TExtObject; Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function OnContainerOver(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function OnContainerDrop(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function NotifyEnter(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function NotifyOver(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function NotifyOut(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function NotifyDrop(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
  end;

  TExtDirectExceptionEvent = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtUtilTaskRunner = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Start(Task : TExtObject) : TExtFunction;
    function Stop(Task : TExtObject) : TExtFunction;
    function StopAll : TExtFunction;
  end;

  TExtFormFieldCheckbox = class(TExtFunction)
  private
    FFocusCls : String;
    FFieldCls : String;
    FFieldBodyCls : String;
    FChecked : Boolean;
    FCheckedCls : String;
    FBoxLabel : String;
    FBoxLabelCls : String;
    FBoxLabelAlign : String;
    FInputValue : String;
    FUncheckedValue : String;
    FHandler : TExtFunction;
    FScope : TExtObject;
    procedure SetFFocusCls(Value : String);
    procedure SetFFieldCls(Value : String);
    procedure SetFFieldBodyCls(Value : String);
    procedure SetFChecked(Value : Boolean);
    procedure SetFCheckedCls(Value : String);
    procedure SetFBoxLabel(Value : String);
    procedure SetFBoxLabelCls(Value : String);
    procedure SetFBoxLabelAlign(Value : String);
    procedure SetFInputValue(Value : String);
    procedure SetFUncheckedValue(Value : String);
    procedure SetFHandler(Value : TExtFunction);
    procedure SetFScope(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    class function Checkbox : TExtFormFieldCheckbox;
    class function Checked_ : Boolean;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function GetRawValue : TExtFunction;
    function GetValue : TExtFunction;
    function GetSubmitValue : TExtFunction;
    function SetRawValue(Value : Boolean) : TExtFunction; overload;
    function SetRawValue(Value : String) : TExtFunction; overload;
    function SetRawValue(Value : Integer) : TExtFunction; overload;
    function SetValue(Checked : Boolean) : TExtFunction; overload;
    function SetValue(Checked : String) : TExtFunction; overload;
    destructor Destroy; override;
    property FocusCls : String read FFocusCls write SetFFocusCls;
    property FieldCls : String read FFieldCls write SetFFieldCls;
    property FieldBodyCls : String read FFieldBodyCls write SetFFieldBodyCls;
    property Checked : Boolean read FChecked write SetFChecked;
    property CheckedCls : String read FCheckedCls write SetFCheckedCls;
    property BoxLabel : String read FBoxLabel write SetFBoxLabel;
    property BoxLabelCls : String read FBoxLabelCls write SetFBoxLabelCls;
    property BoxLabelAlign : String read FBoxLabelAlign write SetFBoxLabelAlign;
    property InputValue : String read FInputValue write SetFInputValue;
    property UncheckedValue : String read FUncheckedValue write SetFUncheckedValue;
    property Handler : TExtFunction read FHandler write SetFHandler;
    property Scope : TExtObject read FScope write SetFScope;
  end;

  // Procedural types for events TExtFormFieldField
  TExtFormFieldFieldOnChange = procedure(This : TExtFormFieldField; NewValue : TExtObject; OldValue : TExtObject) of object;
  TExtFormFieldFieldOnValiditychange = procedure(This : TExtFormFieldField; IsValid : Boolean) of object;
  TExtFormFieldFieldOnDirtychange = procedure(This : TExtFormFieldField; IsDirty : Boolean) of object;

  TExtFormFieldField = class(TExtFunction)
  private
    FValue : TExtObject;
    FName : String;
    FDisabled : Boolean;
    FSubmitValue : Boolean;
    FValidateOnChange : Boolean;
    FOnChange : TExtFormFieldFieldOnChange;
    FOnValiditychange : TExtFormFieldFieldOnValiditychange;
    FOnDirtychange : TExtFormFieldFieldOnDirtychange;
    procedure SetFValue(Value : TExtObject);
    procedure SetFName(Value : String);
    procedure SetFDisabled(Value : Boolean);
    procedure SetFSubmitValue(Value : Boolean);
    procedure SetFValidateOnChange(Value : Boolean);
    procedure SetFOnChange(Value : TExtFormFieldFieldOnChange);
    procedure SetFOnValiditychange(Value : TExtFormFieldFieldOnValiditychange);
    procedure SetFOnDirtychange(Value : TExtFormFieldFieldOnDirtychange);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function InitValue : TExtFunction;
    function GetName : TExtFunction;
    function GetValue : TExtFunction;
    function SetValue(Value : TExtObject) : TExtFunction;
    function IsEqual(Value1 : TExtObject; Value2 : TExtObject) : TExtFunction;
    function GetSubmitData : TExtFunction;
    function GetModelData : TExtFunction;
    function Reset : TExtFunction;
    function ResetOriginalValue : TExtFunction;
    function CheckChange : TExtFunction;
    function IsDirty : TExtFunction;
    function CheckDirty : TExtFunction;
    function GetErrors(Value : TExtObject) : TExtFunction;
    function IsValid : TExtFunction;
    function Validate : TExtFunction;
    function BatchChanges(Fn : TExtObject) : TExtFunction;
    function IsFileUpload : TExtFunction;
    function ExtractFileInput : TExtFunction;
    function MarkInvalid(Errors : String) : TExtFunction; overload;
    function MarkInvalid(Errors : TExtObjectList) : TExtFunction; overload;
    function ClearInvalid : TExtFunction;
    destructor Destroy; override;
    property Value : TExtObject read FValue write SetFValue;
    property Name : String read FName write SetFName;
    property Disabled : Boolean read FDisabled write SetFDisabled;
    property SubmitValue : Boolean read FSubmitValue write SetFSubmitValue;
    property ValidateOnChange : Boolean read FValidateOnChange write SetFValidateOnChange;
    property OnChange : TExtFormFieldFieldOnChange read FOnChange write SetFOnChange;
    property OnValiditychange : TExtFormFieldFieldOnValiditychange read FOnValiditychange write SetFOnValiditychange;
    property OnDirtychange : TExtFormFieldFieldOnDirtychange read FOnDirtychange write SetFOnDirtychange;
  end;

  TExtDirectEvent = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Config : TExtObject = nil);
    function GetData : TExtFunction;
  end;

  // Procedural types for events TExtMenuItem
  TExtMenuItemOnActivate = procedure(Item : TExtMenuItem) of object;
  TExtMenuItemOnClick = procedure(Item : TExtMenuItem; E : TExtEventObjectSingleton) of object;
  TExtMenuItemOnDeactivate = procedure(Item : TExtMenuItem) of object;

  TExtMenuItem = class(TExtFunction)
  private
    FActiveCls : String;
    FAriaRole : String;
    FCanActivate : Boolean;
    FClickHideDelay : Integer;
    FDestroyMenu : Boolean;
    FDisabledCls : String;
    FHref : String;
    FHrefTarget : String;
    FHideOnClick : Boolean;
    FIcon : String;
    FIconCls : String;
    FMenu : String;
    FMenuAlign : String;
    FMenuExpandDelay : Integer;
    FMenuHideDelay : Integer;
    FPlain : Boolean;
    FText : String;
    FOnActivate : TExtMenuItemOnActivate;
    FOnClick : TExtMenuItemOnClick;
    FOnDeactivate : TExtMenuItemOnDeactivate;
    procedure SetFActiveCls(Value : String);
    procedure SetFAriaRole(Value : String);
    procedure SetFCanActivate(Value : Boolean);
    procedure SetFClickHideDelay(Value : Integer);
    procedure SetFDestroyMenu(Value : Boolean);
    procedure SetFDisabledCls(Value : String);
    procedure SetFHref(Value : String);
    procedure SetFHrefTarget(Value : String);
    procedure SetFHideOnClick(Value : Boolean);
    procedure SetFIcon(Value : String);
    procedure SetFIconCls(Value : String);
    procedure SetFMenu(Value : String);
    procedure SetFMenuAlign(Value : String);
    procedure SetFMenuExpandDelay(Value : Integer);
    procedure SetFMenuHideDelay(Value : Integer);
    procedure SetFPlain(Value : Boolean);
    procedure SetFText(Value : String);
    procedure SetFOnActivate(Value : TExtMenuItemOnActivate);
    procedure SetFOnClick(Value : TExtMenuItemOnClick);
    procedure SetFOnDeactivate(Value : TExtMenuItemOnDeactivate);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function SetHandler(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction;
    function SetIconCls(IconCls : String) : TExtFunction;
    function SetText(Text : String) : TExtFunction;
    property ActiveCls : String read FActiveCls write SetFActiveCls;
    property AriaRole : String read FAriaRole write SetFAriaRole;
    property CanActivate : Boolean read FCanActivate write SetFCanActivate;
    property ClickHideDelay : Integer read FClickHideDelay write SetFClickHideDelay;
    property DestroyMenu : Boolean read FDestroyMenu write SetFDestroyMenu;
    property DisabledCls : String read FDisabledCls write SetFDisabledCls;
    property Href : String read FHref write SetFHref;
    property HrefTarget : String read FHrefTarget write SetFHrefTarget;
    property HideOnClick : Boolean read FHideOnClick write SetFHideOnClick;
    property Icon : String read FIcon write SetFIcon;
    property IconCls : String read FIconCls write SetFIconCls;
    property Menu : String read FMenu write SetFMenu;
    property MenuAlign : String read FMenuAlign write SetFMenuAlign;
    property MenuExpandDelay : Integer read FMenuExpandDelay write SetFMenuExpandDelay;
    property MenuHideDelay : Integer read FMenuHideDelay write SetFMenuHideDelay;
    property Plain : Boolean read FPlain write SetFPlain;
    property Text : String read FText write SetFText;
    property OnActivate : TExtMenuItemOnActivate read FOnActivate write SetFOnActivate;
    property OnClick : TExtMenuItemOnClick read FOnClick write SetFOnClick;
    property OnDeactivate : TExtMenuItemOnDeactivate read FOnDeactivate write SetFOnDeactivate;
  end;

  TFunction = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Args : TString; FunctionBody : String);
    function Apply(ThisArg : TExtObject; ArgsArray : TExtObjectList) : TExtFunction;
    function Call(ThisArg : TExtObject; Args : TExtObjectList) : TExtFunction;
    function ToString : TExtFunction;
  end;

  TExtChartMask = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Config : TExtObject = nil);
  end;

  TExtDomHelperSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function InsertIntoTable : TExtFunction;
    function CreateContextualFragment : TExtFunction;
    function Markup(O : TExtObject) : TExtFunction;
    function ApplyStyles(El : String; Styles : String) : TExtFunction; overload;
    function ApplyStyles(El : THTMLElement; Styles : String) : TExtFunction; overload;
    function ApplyStyles(El : THTMLElement; Styles : TExtObject) : TExtFunction; overload;
    function ApplyStyles(El : THTMLElement; Styles : TExtFunction) : TExtFunction; overload;
    function ApplyStyles(El : String; Styles : TExtObject) : TExtFunction; overload;
    function ApplyStyles(El : String; Styles : TExtFunction) : TExtFunction; overload;
    function InsertHtml(Where : String; El : THTMLElement; Html : String) : TExtFunction; overload;
    function InsertHtml(Where : String; El : TTextNode; Html : String) : TExtFunction; overload;
    function InsertBefore(El : String; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertBefore(El : THTMLElement; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertBefore(El : THTMLElement; O : String; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertBefore(El : TExtElement; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertBefore(El : TExtElement; O : String; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertBefore(El : String; O : String; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertAfter(El : String; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertAfter(El : THTMLElement; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertAfter(El : TExtElement; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertFirst(El : String; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertFirst(El : THTMLElement; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertFirst(El : THTMLElement; O : String; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertFirst(El : TExtElement; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertFirst(El : TExtElement; O : String; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertFirst(El : String; O : String; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Append(El : String; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Append(El : THTMLElement; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Append(El : THTMLElement; O : String; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Append(El : TExtElement; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Append(El : TExtElement; O : String; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Append(El : String; O : String; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Overwrite(El : String; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Overwrite(El : THTMLElement; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Overwrite(El : THTMLElement; O : String; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Overwrite(El : TExtElement; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Overwrite(El : TExtElement; O : String; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Overwrite(El : String; O : String; ReturnElement : Boolean = false) : TExtFunction; overload;
    function CreateDom(O : TExtObject) : TExtFunction; overload;
    function CreateDom(O : String) : TExtFunction; overload;
    function CreateTemplate(O : TExtObject) : TExtFunction;
  end;

  TBoolean = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Value : TExtObject);
    function ToString : TExtFunction;
    function ValueOf : TExtFunction;
  end;

  TExtDataWriterXml = class(TExtFunction)
  private
    FDocumentRoot : String;
    FDefaultDocumentRoot : String;
    FHeader : String;
    FRecordJS : String;
    procedure SetFDocumentRoot(Value : String);
    procedure SetFDefaultDocumentRoot(Value : String);
    procedure SetFHeader(Value : String);
    procedure SetFRecordJS(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property DocumentRoot : String read FDocumentRoot write SetFDocumentRoot;
    property DefaultDocumentRoot : String read FDefaultDocumentRoot write SetFDefaultDocumentRoot;
    property Header : String read FHeader write SetFHeader;
    property RecordJS : String read FRecordJS write SetFRecordJS;
  end;

  TExtGridView = class(TExtFunction)
  private
    FStripeRows : Boolean;
    procedure SetFStripeRows(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property StripeRows : Boolean read FStripeRows write SetFStripeRows;
  end;

  TExtMenuManagerSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function HideAll : TExtFunction;
    function Get(Menu : String) : TExtFunction; overload;
    function Get(Menu : TExtObject) : TExtFunction; overload;
  end;

  TExtCompositeElementLite = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function First : TExtFunction;
    function Last : TExtFunction;
    function Contains(The : String) : TExtFunction; overload;
    function Contains(The : THTMLElement) : TExtFunction; overload;
    function Contains(The : TExtElement) : TExtFunction; overload;
    function Contains(The : Integer) : TExtFunction; overload;
    function RemoveElement(El : String; RemoveDom : Boolean = false) : TExtFunction; overload;
    function RemoveElement(El : THTMLElement; RemoveDom : Boolean = false) : TExtFunction; overload;
    function RemoveElement(El : TExtElement; RemoveDom : Boolean = false) : TExtFunction; overload;
    function RemoveElement(El : Integer; RemoveDom : Boolean = false) : TExtFunction; overload;
    function GetCount : TExtFunction;
    function Add(Els : TExtObjectList) : TExtFunction; overload;
    function Add(Els : TExtCompositeElement) : TExtFunction; overload;
    function Item(Index : Integer) : TExtFunction;
    function Each(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction;
    function Fill(Els : TExtObjectList) : TExtFunction; overload;
    function Fill(Els : TExtCompositeElement) : TExtFunction; overload;
    function Filter(Selector : String) : TExtFunction; overload;
    function Filter(Selector : TExtFunction) : TExtFunction; overload;
    function IndexOf(The : String) : TExtFunction;
    function ReplaceElement(El : String; Replacement : String; DomReplace : Boolean = false) : TExtFunction; overload;
    function ReplaceElement(El : THTMLElement; Replacement : String; DomReplace : Boolean = false) : TExtFunction; overload;
    function ReplaceElement(El : THTMLElement; Replacement : TExtElement; DomReplace : Boolean = false) : TExtFunction; overload;
    function ReplaceElement(El : TExtElement; Replacement : String; DomReplace : Boolean = false) : TExtFunction; overload;
    function ReplaceElement(El : TExtElement; Replacement : TExtElement; DomReplace : Boolean = false) : TExtFunction; overload;
    function ReplaceElement(El : Integer; Replacement : String; DomReplace : Boolean = false) : TExtFunction; overload;
    function ReplaceElement(El : Integer; Replacement : TExtElement; DomReplace : Boolean = false) : TExtFunction; overload;
    function ReplaceElement(El : String; Replacement : TExtElement; DomReplace : Boolean = false) : TExtFunction; overload;
    function Clear : TExtFunction;
    function Select(Selector : String; Root : THTMLElement = nil) : TExtFunction; overload;
    function Select(Selector : TExtObjectList; Root : THTMLElement = nil) : TExtFunction; overload;
    function Select(Selector : TExtObjectList; Root : String) : TExtFunction; overload;
    function Select(Selector : String; Root : String) : TExtFunction; overload;
    function Select_(Selector : String; Root : THTMLElement = nil) : TExtFunction; overload;
    function Select_(Selector : TExtObjectList; Root : THTMLElement = nil) : TExtFunction; overload;
    function Select_(Selector : TExtObjectList; Root : String) : TExtFunction; overload;
    function Select_(Selector : String; Root : String) : TExtFunction; overload;
  end;

  TExtChartSeriesCartesian = class(TExtFunction)
  private
    FAxis : String;
    procedure SetFAxis(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetMinMaxXValues : TExtFunction;
    function GetMinMaxYValues : TExtFunction;
    property Axis : String read FAxis write SetFAxis;
  end;

  TRegExp = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Pattern : String; Flags : String);
    function Exec(Str : String) : TExtFunction;
    function Test(Str : String) : TExtFunction;
    function ToString : TExtFunction;
  end;

  TExtClass = class(TExtFunction)
  private
    FExtend : String;
    FStatics : TExtObject;
    FInheritableStatics : TExtObject;
    FConfig : TExtObject;
    FMixins : TExtObject;
    procedure SetFExtend(Value : String);
    procedure SetFStatics(Value : TExtObject);
    procedure SetFInheritableStatics(Value : TExtObject);
    procedure SetFConfig(Value : TExtObject);
    procedure SetFMixins(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    destructor Destroy; override;
    property Extend : String read FExtend write SetFExtend;
    property Statics : TExtObject read FStatics write SetFStatics;
    property InheritableStatics : TExtObject read FInheritableStatics write SetFInheritableStatics;
    property Config : TExtObject read FConfig write SetFConfig;
    property Mixins : TExtObject read FMixins write SetFMixins;
  end;

  TExtGridColumnColumn = class(TExtFunction)
  private
    FColumns : TExtObjectList;
    FDataIndex : String;
    FText : String;
    FSortable : Boolean;
    FGroupable : Boolean;
    FFixed : Boolean;
    FResizable : Boolean;
    FHideable : Boolean;
    FMenuDisabled : Boolean;
    FRenderer : TExtFunction;
    FAlign : String;
    FDraggable : Boolean;
    FTdCls : String;
    FEditor : TExtObject;
    FEditorString : String;
    FField : TExtObject;
    FFieldString : String;
    procedure SetFColumns(Value : TExtObjectList);
    procedure SetFDataIndex(Value : String);
    procedure SetFText(Value : String);
    procedure SetFSortable(Value : Boolean);
    procedure SetFGroupable(Value : Boolean);
    procedure SetFFixed(Value : Boolean);
    procedure SetFResizable(Value : Boolean);
    procedure SetFHideable(Value : Boolean);
    procedure SetFMenuDisabled(Value : Boolean);
    procedure SetFRenderer(Value : TExtFunction);
    procedure SetFAlign(Value : String);
    procedure SetFDraggable(Value : Boolean);
    procedure SetFTdCls(Value : String);
    procedure SetFEditor(Value : TExtObject);
    procedure SetFEditorString(Value : String);
    procedure SetFField(Value : TExtObject);
    procedure SetFFieldString(Value : String);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    class function Value : TExtObject;
    class function MetaData : TExtObject;
    class function RecordJS : TExtDataModel;
    class function RowIndex : Integer;
    class function ColIndex : Integer;
    class function Store : TExtDataStore;
    class function View : TExtViewView;
    class function Return : String;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function SetText(Text : String) : TExtFunction;
    function GetIndex : TExtFunction;
    function SetWidth(Width : Integer) : TExtFunction;
    function GetSortParam : TExtFunction;
    function GetEditor(RecordJS : TExtObject; DefaultField : TExtObject) : TExtFunction;
    function SetEditor(Field : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property Columns : TExtObjectList read FColumns write SetFColumns;
    property DataIndex : String read FDataIndex write SetFDataIndex;
    property Text : String read FText write SetFText;
    property Sortable : Boolean read FSortable write SetFSortable;
    property Groupable : Boolean read FGroupable write SetFGroupable;
    property Fixed : Boolean read FFixed write SetFFixed;
    property Resizable : Boolean read FResizable write SetFResizable;
    property Hideable : Boolean read FHideable write SetFHideable;
    property MenuDisabled : Boolean read FMenuDisabled write SetFMenuDisabled;
    property Renderer : TExtFunction read FRenderer write SetFRenderer;
    property Align : String read FAlign write SetFAlign;
    property Draggable : Boolean read FDraggable write SetFDraggable;
    property TdCls : String read FTdCls write SetFTdCls;
    property Editor : TExtObject read FEditor write SetFEditor;
    property EditorString : String read FEditorString write SetFEditorString;
    property Field : TExtObject read FField write SetFField;
    property FieldString : String read FFieldString write SetFFieldString;
  end;

  TExtDdRegistrySingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Register(Element : String; Data : TExtObject = nil) : TExtFunction; overload;
    function Register(Element : THTMLElement; Data : TExtObject = nil) : TExtFunction; overload;
    function Unregister(Element : String) : TExtFunction; overload;
    function Unregister(Element : THTMLElement) : TExtFunction; overload;
    function GetHandle(Id : String) : TExtFunction; overload;
    function GetHandle(Id : THTMLElement) : TExtFunction; overload;
    function GetHandleFromEvent(E : TEvent) : TExtFunction;
    function GetTarget(Id : String) : TExtFunction; overload;
    function GetTarget(Id : THTMLElement) : TExtFunction; overload;
    function GetTargetFromEvent(E : TEvent) : TExtFunction;
  end;

  // Procedural types for events TExtMenuColorPicker
  TExtMenuColorPickerOnClick = procedure of object;
  TExtMenuColorPickerOnItemclick = procedure of object;
  TExtMenuColorPickerOnSelect = procedure of object;

  TExtMenuColorPicker = class(TExtFunction)
  private
    FHideOnClick : Boolean;
    FPickerId : String;
    FMaxHeight : Integer;
    FOnClick : TExtMenuColorPickerOnClick;
    FOnItemclick : TExtMenuColorPickerOnItemclick;
    FOnSelect : TExtMenuColorPickerOnSelect;
    procedure SetFHideOnClick(Value : Boolean);
    procedure SetFPickerId(Value : String);
    procedure SetFMaxHeight(Value : Integer);
    procedure SetFOnClick(Value : TExtMenuColorPickerOnClick);
    procedure SetFOnItemclick(Value : TExtMenuColorPickerOnItemclick);
    procedure SetFOnSelect(Value : TExtMenuColorPickerOnSelect);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property HideOnClick : Boolean read FHideOnClick write SetFHideOnClick;
    property PickerId : String read FPickerId write SetFPickerId;
    property MaxHeight : Integer read FMaxHeight write SetFMaxHeight;
    property OnClick : TExtMenuColorPickerOnClick read FOnClick write SetFOnClick;
    property OnItemclick : TExtMenuColorPickerOnItemclick read FOnItemclick write SetFOnItemclick;
    property OnSelect : TExtMenuColorPickerOnSelect read FOnSelect write SetFOnSelect;
  end;

  TExtEventObjectSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function StopEvent : TExtFunction;
    function PreventDefault : TExtFunction;
    function StopPropagation : TExtFunction;
    function GetCharCode : TExtFunction;
    function GetKey : TExtFunction;
    function GetPageX : TExtFunction;
    function GetPageY : TExtFunction;
    function GetX : TExtFunction;
    function GetY : TExtFunction;
    function GetXY : TExtFunction;
    function GetTarget(Selector : String = ''; MaxDepth : Integer = 0; ReturnEl : Boolean = false) : TExtFunction; overload;
    function GetTarget(Selector : String; MaxDepth : THTMLElement; ReturnEl : Boolean = false) : TExtFunction; overload;
    function GetRelatedTarget(Selector : String = ''; MaxDepth : Integer = 0; ReturnEl : Boolean = false) : TExtFunction; overload;
    function GetRelatedTarget(Selector : String; MaxDepth : THTMLElement; ReturnEl : Boolean = false) : TExtFunction; overload;
    function CorrectWheelDelta(Delta : Integer) : TExtFunction;
    function GetWheelDeltas : TExtFunction;
    function GetWheelDelta : TExtFunction;
    function Within(El : String; Related : Boolean = false; AllowEl : Boolean = false) : TExtFunction; overload;
    function Within(El : THTMLElement; Related : Boolean = false; AllowEl : Boolean = false) : TExtFunction; overload;
    function Within(El : TExtElement; Related : Boolean = false; AllowEl : Boolean = false) : TExtFunction; overload;
    function IsNavKeyPress : TExtFunction;
    function IsSpecialKey : TExtFunction;
    function GetPoint : TExtFunction;
    function HasModifier : TExtFunction;
    function InjectEvent(Target : TExtElement = nil) : TExtFunction; overload;
    function InjectEvent(Target : THTMLElement) : TExtFunction; overload;
  end;

  TExtFormLabel = class(TExtFunction)
  private
    FText : String;
    FForId : String;
    FHtml : String;
    procedure SetFText(Value : String);
    procedure SetFForId(Value : String);
    procedure SetFHtml(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function SetText(Text : String; Encode : Boolean = false) : TExtFunction;
    property Text : String read FText write SetFText;
    property ForId : String read FForId write SetFForId;
    property Html : String read FHtml write SetFHtml;
  end;

  TExtTipTip = class(TExtFunction)
  private
    FClosable : Boolean;
    FWidth : Integer;
    FMinWidth : Integer;
    FMaxWidth : Integer;
    FShadow : Boolean;
    FShadowString : String;
    FDefaultAlign : String;
    FConstrainPosition : Boolean;
    FCloseAction : String;
    procedure SetFClosable(Value : Boolean);
    procedure SetFWidth(Value : Integer);
    procedure SetFMinWidth(Value : Integer);
    procedure SetFMaxWidth(Value : Integer);
    procedure SetFShadow(Value : Boolean);
    procedure SetFShadowString(Value : String);
    procedure SetFDefaultAlign(Value : String);
    procedure SetFConstrainPosition(Value : Boolean);
    procedure SetFCloseAction(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function ShowAt(Xy : TArrayOfInteger) : TExtFunction;
    function ShowBy(El : String; Position : String = '') : TExtFunction; overload;
    function ShowBy(El : THTMLElement; Position : String = '') : TExtFunction; overload;
    function ShowBy(El : TExtElement; Position : String = '') : TExtFunction; overload;
    property Closable : Boolean read FClosable write SetFClosable;
    property Width : Integer read FWidth write SetFWidth;
    property MinWidth : Integer read FMinWidth write SetFMinWidth;
    property MaxWidth : Integer read FMaxWidth write SetFMaxWidth;
    property Shadow : Boolean read FShadow write SetFShadow;
    property ShadowString : String read FShadowString write SetFShadowString;
    property DefaultAlign : String read FDefaultAlign write SetFDefaultAlign;
    property ConstrainPosition : Boolean read FConstrainPosition write SetFConstrainPosition;
    property CloseAction : String read FCloseAction write SetFCloseAction;
  end;

  TExtToolbarItem = class(TExtFunction)
  private
    FOverflowText : String;
    procedure SetFOverflowText(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property OverflowText : String read FOverflowText write SetFOverflowText;
  end;

  TNumber = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(MAX_VALUE : Integer);
    function ToExponential(FractionDigits : Integer) : TExtFunction;
    function ToFixed(Digits : Integer) : TExtFunction;
    function ToLocaleString : TExtFunction;
    function ToPrecision(Precision : Integer) : TExtFunction;
    function ToString(Radix : Integer) : TExtFunction;
    function ValueOf : TExtFunction;
  end;

  // Procedural types for events TExtPanelTool
  TExtPanelToolOnClick = procedure(This : TExtPanelTool; E : TExtEventObjectSingleton) of object;

  TExtPanelTool = class(TExtFunction)
  private
    FHandler : TExtFunction;
    FScope : TExtObject;
    FTypeJS : String;
    FTooltip : String;
    FTooltipTExtObject : TExtObject;
    FTooltipType : String;
    FStopEvent : Boolean;
    FOnClick : TExtPanelToolOnClick;
    procedure SetFHandler(Value : TExtFunction);
    procedure SetFScope(Value : TExtObject);
    procedure SetFTypeJS(Value : String);
    procedure SetFTooltip(Value : String);
    procedure SetFTooltipTExtObject(Value : TExtObject);
    procedure SetFTooltipType(Value : String);
    procedure SetFStopEvent(Value : Boolean);
    procedure SetFOnClick(Value : TExtPanelToolOnClick);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function SetType(TypeJS : String) : TExtFunction;
    destructor Destroy; override;
    property Handler : TExtFunction read FHandler write SetFHandler;
    property Scope : TExtObject read FScope write SetFScope;
    property TypeJS : String read FTypeJS write SetFTypeJS;
    property Tooltip : String read FTooltip write SetFTooltip;
    property TooltipTExtObject : TExtObject read FTooltipTExtObject write SetFTooltipTExtObject;
    property TooltipType : String read FTooltipType write SetFTooltipType;
    property StopEvent : Boolean read FStopEvent write SetFStopEvent;
    property OnClick : TExtPanelToolOnClick read FOnClick write SetFOnClick;
  end;

  TExtUtilRegion = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    class function GetRegion(El : String) : TExtFunction; overload;
    function GetRegion(El : THTMLElement) : TExtFunction; overload;
    function GetRegion(El : TExtElement) : TExtFunction; overload;
    class function From(O : TExtObject) : TExtFunction;
    constructor Create(Top : Integer; Right : Integer; Bottom : Integer; Left : Integer);
    function Contains(Region : TExtUtilRegion) : TExtFunction;
    function Intersect(Region : TExtUtilRegion) : TExtFunction;
    function Union(Region : TExtUtilRegion) : TExtFunction;
    function ConstrainTo(TargetRegion : TExtUtilRegion) : TExtFunction;
    function Adjust(Top : Integer; Right : Integer; Bottom : Integer; Left : Integer) : TExtFunction;
    function GetOutOfBoundOffset(Axis : String = ''; P : TExtUtilPoint = nil) : TExtFunction;
    function GetOutOfBoundOffsetX(P : Integer) : TExtFunction;
    function GetOutOfBoundOffsetY(P : Integer) : TExtFunction;
    function IsOutOfBound(Axis : String = ''; P : TExtUtilPoint = nil) : TExtFunction; overload;
    function IsOutOfBound(Axis : String; P : Integer) : TExtFunction; overload;
    function IsOutOfBoundX(P : Integer) : TExtFunction;
    function IsOutOfBoundY(P : Integer) : TExtFunction;
    function Copy : TExtFunction;
    function CopyFrom(P : TExtUtilRegion) : TExtFunction;
    function TranslateBy(X : TExtUtilOffset; Y : Integer) : TExtFunction; overload;
    function TranslateBy(X : TExtObject; Y : Integer) : TExtFunction; overload;
    function Round : TExtFunction;
    function Equals(Region : TExtUtilRegion) : TExtFunction;
  end;

  TExtLayoutContainerBox = class(TExtFunction)
  private
    FAnimate : Boolean;
    FAnimateInteger : Integer;
    FAnimateTExtObject : TExtObject;
    FDefaultMargins : TExtObject;
    FPadding : String;
    FPack : String;
    FFlex : Integer;
    FShrinkToFit : Boolean;
    FClearInnerCtOnLayout : Boolean;
    procedure SetFAnimate(Value : Boolean);
    procedure SetFAnimateInteger(Value : Integer);
    procedure SetFAnimateTExtObject(Value : TExtObject);
    procedure SetFDefaultMargins(Value : TExtObject);
    procedure SetFPadding(Value : String);
    procedure SetFPack(Value : String);
    procedure SetFFlex(Value : Integer);
    procedure SetFShrinkToFit(Value : Boolean);
    procedure SetFClearInnerCtOnLayout(Value : Boolean);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function UpdateChildBoxes(Boxes : TExtObjectList) : TExtFunction;
    destructor Destroy; override;
    property Animate : Boolean read FAnimate write SetFAnimate;
    property AnimateInteger : Integer read FAnimateInteger write SetFAnimateInteger;
    property AnimateTExtObject : TExtObject read FAnimateTExtObject write SetFAnimateTExtObject;
    property DefaultMargins : TExtObject read FDefaultMargins write SetFDefaultMargins;
    property Padding : String read FPadding write SetFPadding;
    property Pack : String read FPack write SetFPack;
    property Flex : Integer read FFlex write SetFFlex;
    property ShrinkToFit : Boolean read FShrinkToFit write SetFShrinkToFit;
    property ClearInnerCtOnLayout : Boolean read FClearInnerCtOnLayout write SetFClearInnerCtOnLayout;
  end;

  // Procedural types for events TExtDataNodeInterface
  TExtDataNodeInterfaceOnAppend = procedure(This : TExtDataNodeInterface; Node : TExtDataNodeInterface; Index : Integer) of object;
  TExtDataNodeInterfaceOnRemove = procedure(This : TExtDataNodeInterface; Node : TExtDataNodeInterface) of object;
  TExtDataNodeInterfaceOnMove = procedure(This : TExtDataNodeInterface; OldParent : TExtDataNodeInterface; NewParent : TExtDataNodeInterface; Index : Integer) of object;
  TExtDataNodeInterfaceOnInsert = procedure(This : TExtDataNodeInterface; Node : TExtDataNodeInterface; RefNode : TExtDataNodeInterface) of object;
  TExtDataNodeInterfaceOnBeforeappend = procedure(This : TExtDataNodeInterface; Node : TExtDataNodeInterface) of object;
  TExtDataNodeInterfaceOnBeforeremove = procedure(This : TExtDataNodeInterface; Node : TExtDataNodeInterface) of object;
  TExtDataNodeInterfaceOnBeforemove = procedure(This : TExtDataNodeInterface; OldParent : TExtDataNodeInterface; NewParent : TExtDataNodeInterface; Index : Integer) of object;
  TExtDataNodeInterfaceOnBeforeinsert = procedure(This : TExtDataNodeInterface; Node : TExtDataNodeInterface; RefNode : TExtDataNodeInterface) of object;
  TExtDataNodeInterfaceOnExpand = procedure(This : TExtDataNodeInterface) of object;
  TExtDataNodeInterfaceOnCollapse = procedure(This : TExtDataNodeInterface) of object;
  TExtDataNodeInterfaceOnBeforeexpand = procedure(This : TExtDataNodeInterface) of object;
  TExtDataNodeInterfaceOnBeforecollapse = procedure(This : TExtDataNodeInterface) of object;
  TExtDataNodeInterfaceOnSort = procedure(This : TExtDataNodeInterface; ChildNodes : TExtObjectList) of object;

  TExtDataNodeInterface = class(TExtFunction)
  private
    FParentId : String;
    FIndex : Integer;
    FDepth : Integer;
    FExpanded : Boolean;
    FExpandable : Boolean;
    FChecked : Boolean;
    FLeaf : Boolean;
    FCls : String;
    FIconCls : String;
    FIcon : String;
    FRoot : Boolean;
    FIsLast : Boolean;
    FIsFirst : Boolean;
    FAllowDrop : Boolean;
    FAllowDrag : Boolean;
    FLoaded : Boolean;
    FLoading : Boolean;
    FHref : String;
    FHrefTarget : String;
    FQtip : String;
    FQtitle : String;
    FText : String;
    FChildren : TExtObjectList;
    FOnAppend : TExtDataNodeInterfaceOnAppend;
    FOnRemove : TExtDataNodeInterfaceOnRemove;
    FOnMove : TExtDataNodeInterfaceOnMove;
    FOnInsert : TExtDataNodeInterfaceOnInsert;
    FOnBeforeappend : TExtDataNodeInterfaceOnBeforeappend;
    FOnBeforeremove : TExtDataNodeInterfaceOnBeforeremove;
    FOnBeforemove : TExtDataNodeInterfaceOnBeforemove;
    FOnBeforeinsert : TExtDataNodeInterfaceOnBeforeinsert;
    FOnExpand : TExtDataNodeInterfaceOnExpand;
    FOnCollapse : TExtDataNodeInterfaceOnCollapse;
    FOnBeforeexpand : TExtDataNodeInterfaceOnBeforeexpand;
    FOnBeforecollapse : TExtDataNodeInterfaceOnBeforecollapse;
    FOnSort : TExtDataNodeInterfaceOnSort;
    procedure SetFParentId(Value : String);
    procedure SetFIndex(Value : Integer);
    procedure SetFDepth(Value : Integer);
    procedure SetFExpanded(Value : Boolean);
    procedure SetFExpandable(Value : Boolean);
    procedure SetFChecked(Value : Boolean);
    procedure SetFLeaf(Value : Boolean);
    procedure SetFCls(Value : String);
    procedure SetFIconCls(Value : String);
    procedure SetFIcon(Value : String);
    procedure SetFRoot(Value : Boolean);
    procedure SetFIsLast(Value : Boolean);
    procedure SetFIsFirst(Value : Boolean);
    procedure SetFAllowDrop(Value : Boolean);
    procedure SetFAllowDrag(Value : Boolean);
    procedure SetFLoaded(Value : Boolean);
    procedure SetFLoading(Value : Boolean);
    procedure SetFHref(Value : String);
    procedure SetFHrefTarget(Value : String);
    procedure SetFQtip(Value : String);
    procedure SetFQtitle(Value : String);
    procedure SetFText(Value : String);
    procedure SetFChildren(Value : TExtObjectList);
    procedure SetFOnAppend(Value : TExtDataNodeInterfaceOnAppend);
    procedure SetFOnRemove(Value : TExtDataNodeInterfaceOnRemove);
    procedure SetFOnMove(Value : TExtDataNodeInterfaceOnMove);
    procedure SetFOnInsert(Value : TExtDataNodeInterfaceOnInsert);
    procedure SetFOnBeforeappend(Value : TExtDataNodeInterfaceOnBeforeappend);
    procedure SetFOnBeforeremove(Value : TExtDataNodeInterfaceOnBeforeremove);
    procedure SetFOnBeforemove(Value : TExtDataNodeInterfaceOnBeforemove);
    procedure SetFOnBeforeinsert(Value : TExtDataNodeInterfaceOnBeforeinsert);
    procedure SetFOnExpand(Value : TExtDataNodeInterfaceOnExpand);
    procedure SetFOnCollapse(Value : TExtDataNodeInterfaceOnCollapse);
    procedure SetFOnBeforeexpand(Value : TExtDataNodeInterfaceOnBeforeexpand);
    procedure SetFOnBeforecollapse(Value : TExtDataNodeInterfaceOnBeforecollapse);
    procedure SetFOnSort(Value : TExtDataNodeInterfaceOnSort);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function CreateNode : TExtFunction;
    function IsLeaf : TExtFunction;
    function UpdateInfo : TExtFunction;
    function IsLast_ : TExtFunction;
    function IsFirst_ : TExtFunction;
    function HasChildNodes : TExtFunction;
    function IsExpandable : TExtFunction;
    function AppendChild(Node : TExtDataNodeInterface) : TExtFunction; overload;
    function AppendChild(Node : TExtObjectList) : TExtFunction; overload;
    function RemoveChild(Node : TExtDataNodeInterface; DestroyJS : Boolean = false) : TExtFunction;
    function Copy(Id : String = ''; Deep : Boolean = false) : TExtFunction;
    function DestroyJS : TExtFunction; override;
    function InsertBefore(Node : TExtDataNodeInterface; RefNode : TExtDataNodeInterface) : TExtFunction;
    function InsertChild(Index : Integer; Node : TExtDataModel) : TExtFunction;
    function Remove(DestroyJS : Boolean = false) : TExtFunction;
    function RemoveAll(DestroyJS : Boolean = false) : TExtFunction;
    function GetChildAt(Index : Integer) : TExtFunction;
    function ReplaceChild(NewChild : TExtDataNodeInterface; OldChild : TExtDataNodeInterface) : TExtFunction;
    function IndexOf(Node : TExtDataNodeInterface) : TExtFunction;
    function GetPath(Field : String = ''; Separator : String = '') : TExtFunction;
    function GetDepth : TExtFunction;
    function Bubble(Fn : TExtFunction; Scope : TExtObject = nil; Args : TExtObjectList = nil) : TExtFunction;
    function CascadeBy(Fn : TExtFunction; Scope : TExtObject = nil; Args : TExtObjectList = nil) : TExtFunction;
    function EachChild(Fn : TExtFunction; Scope : TExtObject = nil; Args : TExtObjectList = nil) : TExtFunction;
    function FindChild(Attribute : String; Value : TExtObject; Deep : Boolean = false) : TExtFunction;
    function FindChildBy(Fn : TExtFunction; Scope : TExtObject = nil; Deep : Boolean = false) : TExtFunction;
    function Contains(Node : TExtDataNodeInterface) : TExtFunction;
    function IsAncestor(Node : TExtDataNodeInterface) : TExtFunction;
    function Sort(Fn : TExtFunction; Recursive : Boolean = false; SuppressEvent : Boolean = false) : TExtFunction;
    function IsExpanded : TExtFunction;
    function IsLoaded : TExtFunction;
    function IsLoading : TExtFunction;
    function IsRoot : TExtFunction;
    function IsVisible : TExtFunction;
    function Expand(Recursive : Boolean = false; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction;
    function ExpandChildren(Recursive : Boolean = false; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction;
    function Collapse(Recursive : Boolean = false; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction;
    function CollapseChildren(Recursive : TExtFunction = nil; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction;
    destructor Destroy; override;
    property ParentId : String read FParentId write SetFParentId;
    property Index : Integer read FIndex write SetFIndex;
    property Depth : Integer read FDepth write SetFDepth;
    property Expanded : Boolean read FExpanded write SetFExpanded;
    property Expandable : Boolean read FExpandable write SetFExpandable;
    property Checked : Boolean read FChecked write SetFChecked;
    property Leaf : Boolean read FLeaf write SetFLeaf;
    property Cls : String read FCls write SetFCls;
    property IconCls : String read FIconCls write SetFIconCls;
    property Icon : String read FIcon write SetFIcon;
    property Root : Boolean read FRoot write SetFRoot;
    property IsLast : Boolean read FIsLast write SetFIsLast;
    property IsFirst : Boolean read FIsFirst write SetFIsFirst;
    property AllowDrop : Boolean read FAllowDrop write SetFAllowDrop;
    property AllowDrag : Boolean read FAllowDrag write SetFAllowDrag;
    property Loaded : Boolean read FLoaded write SetFLoaded;
    property Loading : Boolean read FLoading write SetFLoading;
    property Href : String read FHref write SetFHref;
    property HrefTarget : String read FHrefTarget write SetFHrefTarget;
    property Qtip : String read FQtip write SetFQtip;
    property Qtitle : String read FQtitle write SetFQtitle;
    property Text : String read FText write SetFText;
    property Children : TExtObjectList read FChildren write SetFChildren;
    property OnAppend : TExtDataNodeInterfaceOnAppend read FOnAppend write SetFOnAppend;
    property OnRemove : TExtDataNodeInterfaceOnRemove read FOnRemove write SetFOnRemove;
    property OnMove : TExtDataNodeInterfaceOnMove read FOnMove write SetFOnMove;
    property OnInsert : TExtDataNodeInterfaceOnInsert read FOnInsert write SetFOnInsert;
    property OnBeforeappend : TExtDataNodeInterfaceOnBeforeappend read FOnBeforeappend write SetFOnBeforeappend;
    property OnBeforeremove : TExtDataNodeInterfaceOnBeforeremove read FOnBeforeremove write SetFOnBeforeremove;
    property OnBeforemove : TExtDataNodeInterfaceOnBeforemove read FOnBeforemove write SetFOnBeforemove;
    property OnBeforeinsert : TExtDataNodeInterfaceOnBeforeinsert read FOnBeforeinsert write SetFOnBeforeinsert;
    property OnExpand : TExtDataNodeInterfaceOnExpand read FOnExpand write SetFOnExpand;
    property OnCollapse : TExtDataNodeInterfaceOnCollapse read FOnCollapse write SetFOnCollapse;
    property OnBeforeexpand : TExtDataNodeInterfaceOnBeforeexpand read FOnBeforeexpand write SetFOnBeforeexpand;
    property OnBeforecollapse : TExtDataNodeInterfaceOnBeforecollapse read FOnBeforecollapse write SetFOnBeforecollapse;
    property OnSort : TExtDataNodeInterfaceOnSort read FOnSort write SetFOnSort;
  end;

  TExtFormFieldContainer = class(TExtFunction)
  private
    FCombineLabels : Boolean;
    FLabelConnector : String;
    FCombineErrors : Boolean;
    procedure SetFCombineLabels(Value : Boolean);
    procedure SetFLabelConnector(Value : String);
    procedure SetFCombineErrors(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetFieldLabel : TExtFunction;
    function GetCombinedErrors(InvalidFields : TExtObjectList) : TExtFunction;
    property CombineLabels : Boolean read FCombineLabels write SetFCombineLabels;
    property LabelConnector : String read FLabelConnector write SetFLabelConnector;
    property CombineErrors : Boolean read FCombineErrors write SetFCombineErrors;
  end;

  TExtLayoutContainerTable = class(TExtFunction)
  private
    FColumns : Integer;
    FTableAttrs : TExtObject;
    FTrAttrs : TExtObject;
    FTdAttrs : TExtObject;
    procedure SetFColumns(Value : Integer);
    procedure SetFTableAttrs(Value : TExtObject);
    procedure SetFTrAttrs(Value : TExtObject);
    procedure SetFTdAttrs(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    destructor Destroy; override;
    property Columns : Integer read FColumns write SetFColumns;
    property TableAttrs : TExtObject read FTableAttrs write SetFTableAttrs;
    property TrAttrs : TExtObject read FTrAttrs write SetFTrAttrs;
    property TdAttrs : TExtObject read FTdAttrs write SetFTdAttrs;
  end;

  // Procedural types for events TExtElement
  TExtElementOnClick = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnContextmenu = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnDblclick = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnMousedown = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnMouseup = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnMouseover = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnMousemove = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnMouseout = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnMouseenter = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnMouseleave = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnKeypress = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnKeydown = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnKeyup = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnLoad = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnUnload = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnAbort = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnError = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnResize = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnScroll = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnSelect = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnChange = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnSubmit = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnReset = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnFocus = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnBlur = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnDOMFocusIn = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnDOMFocusOut = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnDOMActivate = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnDOMSubtreeModified = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnDOMNodeInserted = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnDOMNodeRemoved = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnDOMNodeRemovedFromDocument = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnDOMNodeInsertedIntoDocument = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnDOMAttrModified = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;
  TExtElementOnDOMCharacterDataModified = procedure(E : TExtEventObjectSingleton; T : THTMLElement) of object;

  TExtElement = class(TExtFunction)
  private
    FOnClick : TExtElementOnClick;
    FOnContextmenu : TExtElementOnContextmenu;
    FOnDblclick : TExtElementOnDblclick;
    FOnMousedown : TExtElementOnMousedown;
    FOnMouseup : TExtElementOnMouseup;
    FOnMouseover : TExtElementOnMouseover;
    FOnMousemove : TExtElementOnMousemove;
    FOnMouseout : TExtElementOnMouseout;
    FOnMouseenter : TExtElementOnMouseenter;
    FOnMouseleave : TExtElementOnMouseleave;
    FOnKeypress : TExtElementOnKeypress;
    FOnKeydown : TExtElementOnKeydown;
    FOnKeyup : TExtElementOnKeyup;
    FOnLoad : TExtElementOnLoad;
    FOnUnload : TExtElementOnUnload;
    FOnAbort : TExtElementOnAbort;
    FOnError : TExtElementOnError;
    FOnResize : TExtElementOnResize;
    FOnScroll : TExtElementOnScroll;
    FOnSelect : TExtElementOnSelect;
    FOnChange : TExtElementOnChange;
    FOnSubmit : TExtElementOnSubmit;
    FOnReset : TExtElementOnReset;
    FOnFocus : TExtElementOnFocus;
    FOnBlur : TExtElementOnBlur;
    FOnDOMFocusIn : TExtElementOnDOMFocusIn;
    FOnDOMFocusOut : TExtElementOnDOMFocusOut;
    FOnDOMActivate : TExtElementOnDOMActivate;
    FOnDOMSubtreeModified : TExtElementOnDOMSubtreeModified;
    FOnDOMNodeInserted : TExtElementOnDOMNodeInserted;
    FOnDOMNodeRemoved : TExtElementOnDOMNodeRemoved;
    FOnDOMNodeRemovedFromDocument : TExtElementOnDOMNodeRemovedFromDocument;
    FOnDOMNodeInsertedIntoDocument : TExtElementOnDOMNodeInsertedIntoDocument;
    FOnDOMAttrModified : TExtElementOnDOMAttrModified;
    FOnDOMCharacterDataModified : TExtElementOnDOMCharacterDataModified;
    procedure SetFOnClick(Value : TExtElementOnClick);
    procedure SetFOnContextmenu(Value : TExtElementOnContextmenu);
    procedure SetFOnDblclick(Value : TExtElementOnDblclick);
    procedure SetFOnMousedown(Value : TExtElementOnMousedown);
    procedure SetFOnMouseup(Value : TExtElementOnMouseup);
    procedure SetFOnMouseover(Value : TExtElementOnMouseover);
    procedure SetFOnMousemove(Value : TExtElementOnMousemove);
    procedure SetFOnMouseout(Value : TExtElementOnMouseout);
    procedure SetFOnMouseenter(Value : TExtElementOnMouseenter);
    procedure SetFOnMouseleave(Value : TExtElementOnMouseleave);
    procedure SetFOnKeypress(Value : TExtElementOnKeypress);
    procedure SetFOnKeydown(Value : TExtElementOnKeydown);
    procedure SetFOnKeyup(Value : TExtElementOnKeyup);
    procedure SetFOnLoad(Value : TExtElementOnLoad);
    procedure SetFOnUnload(Value : TExtElementOnUnload);
    procedure SetFOnAbort(Value : TExtElementOnAbort);
    procedure SetFOnError(Value : TExtElementOnError);
    procedure SetFOnResize(Value : TExtElementOnResize);
    procedure SetFOnScroll(Value : TExtElementOnScroll);
    procedure SetFOnSelect(Value : TExtElementOnSelect);
    procedure SetFOnChange(Value : TExtElementOnChange);
    procedure SetFOnSubmit(Value : TExtElementOnSubmit);
    procedure SetFOnReset(Value : TExtElementOnReset);
    procedure SetFOnFocus(Value : TExtElementOnFocus);
    procedure SetFOnBlur(Value : TExtElementOnBlur);
    procedure SetFOnDOMFocusIn(Value : TExtElementOnDOMFocusIn);
    procedure SetFOnDOMFocusOut(Value : TExtElementOnDOMFocusOut);
    procedure SetFOnDOMActivate(Value : TExtElementOnDOMActivate);
    procedure SetFOnDOMSubtreeModified(Value : TExtElementOnDOMSubtreeModified);
    procedure SetFOnDOMNodeInserted(Value : TExtElementOnDOMNodeInserted);
    procedure SetFOnDOMNodeRemoved(Value : TExtElementOnDOMNodeRemoved);
    procedure SetFOnDOMNodeRemovedFromDocument(Value : TExtElementOnDOMNodeRemovedFromDocument);
    procedure SetFOnDOMNodeInsertedIntoDocument(Value : TExtElementOnDOMNodeInsertedIntoDocument);
    procedure SetFOnDOMAttrModified(Value : TExtElementOnDOMAttrModified);
    procedure SetFOnDOMCharacterDataModified(Value : TExtElementOnDOMCharacterDataModified);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function MonitorMouseLeave(Delay : Integer; Handler : TExtFunction; Scope : TExtObject) : TExtFunction;
    function SwallowEvent(EventName : String; PreventDefault : Boolean = false) : TExtFunction; overload;
    function SwallowEvent(EventName : TExtObjectList; PreventDefault : Boolean = false) : TExtFunction; overload;
    function RelayEvent(EventName : String; ObjectJS : TExtObject) : TExtFunction;
    function Clean(ForceReclean : Boolean = false) : TExtFunction;
    function Load : TExtFunction;
    function GetLoader : TExtFunction;
    function Update(Html : String; LoadScripts : Boolean = false; Callback : TExtFunction = nil) : TExtFunction;
    function CreateProxy(Config : String; RenderTo : String = ''; MatchBox : Boolean = false) : TExtFunction; overload;
    function CreateProxy(Config : TExtObject; RenderTo : String = ''; MatchBox : Boolean = false) : TExtFunction; overload;
    function CreateProxy(Config : TExtObject; RenderTo : THTMLElement; MatchBox : Boolean = false) : TExtFunction; overload;
    function CreateProxy(Config : String; RenderTo : THTMLElement; MatchBox : Boolean = false) : TExtFunction; overload;
    function Focusable : TExtFunction;
    function GetAnchorXY(Anchor : String = ''; Local : Boolean = false; Size : TExtObject = nil) : TExtFunction;
    function AnchorTo(Element : String; Position : String; Offsets : TArrayOfInteger = nil; Animate : Boolean = false; MonitorScroll : Boolean = false; Callback : TExtFunction = nil) : TExtFunction; overload;
    function AnchorTo(Element : THTMLElement; Position : String; Offsets : TArrayOfInteger = nil; Animate : Boolean = false; MonitorScroll : Boolean = false; Callback : TExtFunction = nil) : TExtFunction; overload;
    function AnchorTo(Element : THTMLElement; Position : String; Offsets : TArrayOfInteger; Animate : TExtObject; MonitorScroll : Boolean = false; Callback : TExtFunction = nil) : TExtFunction; overload;
    function AnchorTo(Element : THTMLElement; Position : String; Offsets : TArrayOfInteger; Animate : TExtObject; MonitorScroll : Integer; Callback : TExtFunction = nil) : TExtFunction; overload;
    function AnchorTo(Element : THTMLElement; Position : String; Offsets : TArrayOfInteger; Animate : Boolean; MonitorScroll : Integer; Callback : TExtFunction = nil) : TExtFunction; overload;
    function AnchorTo(Element : TExtElement; Position : String; Offsets : TArrayOfInteger = nil; Animate : Boolean = false; MonitorScroll : Boolean = false; Callback : TExtFunction = nil) : TExtFunction; overload;
    function AnchorTo(Element : TExtElement; Position : String; Offsets : TArrayOfInteger; Animate : TExtObject; MonitorScroll : Boolean = false; Callback : TExtFunction = nil) : TExtFunction; overload;
    function AnchorTo(Element : TExtElement; Position : String; Offsets : TArrayOfInteger; Animate : TExtObject; MonitorScroll : Integer; Callback : TExtFunction = nil) : TExtFunction; overload;
    function AnchorTo(Element : TExtElement; Position : String; Offsets : TArrayOfInteger; Animate : Boolean; MonitorScroll : Integer; Callback : TExtFunction = nil) : TExtFunction; overload;
    function AnchorTo(Element : String; Position : String; Offsets : TArrayOfInteger; Animate : TExtObject; MonitorScroll : Boolean = false; Callback : TExtFunction = nil) : TExtFunction; overload;
    function AnchorTo(Element : String; Position : String; Offsets : TArrayOfInteger; Animate : TExtObject; MonitorScroll : Integer; Callback : TExtFunction = nil) : TExtFunction; overload;
    function AnchorTo(Element : String; Position : String; Offsets : TArrayOfInteger; Animate : Boolean; MonitorScroll : Integer; Callback : TExtFunction = nil) : TExtFunction; overload;
    function RemoveAnchor : TExtFunction;
    function GetAlignToXY(Element : String; Position : String = ''; Offsets : TArrayOfInteger = nil) : TExtFunction; overload;
    function GetAlignToXY(Element : THTMLElement; Position : String = ''; Offsets : TArrayOfInteger = nil) : TExtFunction; overload;
    function GetAlignToXY(Element : TExtElement; Position : String = ''; Offsets : TArrayOfInteger = nil) : TExtFunction; overload;
    function AlignTo(Element : String; Position : String = ''; Offsets : TArrayOfInteger = nil; Animate : Boolean = false) : TExtFunction; overload;
    function AlignTo(Element : THTMLElement; Position : String = ''; Offsets : TArrayOfInteger = nil; Animate : Boolean = false) : TExtFunction; overload;
    function AlignTo(Element : THTMLElement; Position : String; Offsets : TArrayOfInteger; Animate : TExtObject) : TExtFunction; overload;
    function AlignTo(Element : TExtElement; Position : String = ''; Offsets : TArrayOfInteger = nil; Animate : Boolean = false) : TExtFunction; overload;
    function AlignTo(Element : TExtElement; Position : String; Offsets : TArrayOfInteger; Animate : TExtObject) : TExtFunction; overload;
    function AlignTo(Element : String; Position : String; Offsets : TArrayOfInteger; Animate : TExtObject) : TExtFunction; overload;
    function GetConstrainVector(The : String; A : TExtObjectList) : TExtFunction;
    function GetCenterXY : TExtFunction;
    function Center(CenterIn : String = '') : TExtFunction; overload;
    function Center(CenterIn : THTMLElement) : TExtFunction; overload;
    function Center(CenterIn : TExtElement) : TExtFunction; overload;
    function SlideIn(Anchor : String = ''; Options : TExtObject = nil) : TExtFunction;
    function SlideOut(Anchor : String = ''; Options : TExtObject = nil) : TExtFunction;
    function Puff(Options : TExtObject = nil) : TExtFunction;
    function SwitchOff(Options : TExtObject = nil) : TExtFunction;
    function Frame(Color : String = ''; Count : Integer = 0; Options : TExtObject = nil) : TExtFunction;
    function Ghost(Anchor : String = ''; Options : TExtObject = nil) : TExtFunction;
    function Highlight(Color : String = ''; Options : TExtObject = nil) : TExtFunction;
    function Pause(Seconds : Integer) : TExtFunction;
    function FadeIn(Options : TExtObject = nil) : TExtFunction;
    function FadeOut(Options : TExtObject = nil) : TExtFunction;
    function Scale(Width : Integer; Height : Integer; Options : TExtObject = nil) : TExtFunction;
    function Shift(Options : TExtObject) : TExtFunction;
    function InitDD(Group : String; Config : TExtObject; Overrides : TExtObject) : TExtFunction;
    function InitDDProxy(Group : String; Config : TExtObject; Overrides : TExtObject) : TExtFunction;
    function InitDDTarget(Group : String; Config : TExtObject; Overrides : TExtObject) : TExtFunction;
    function IsVisible(Deep : Boolean = false) : TExtFunction;
    function IsDisplayed : TExtFunction;
    function EnableDisplayMode(Display : String = '') : TExtFunction;
    function Mask(Msg : String = ''; MsgCls : String = '') : TExtFunction;
    function Unmask : TExtFunction;
    function IsMasked : TExtFunction;
    function CreateShim : TExtFunction;
    function SetVisibilityMode(VisMode : Integer) : TExtFunction;
    function IsVisible_ : TExtFunction;
    function SetVisible(Visible : Boolean; Animate : Boolean = false) : TExtFunction; overload;
    function SetVisible(Visible : Boolean; Animate : TExtObject) : TExtFunction; overload;
    function Toggle(Animate : Boolean = false) : TExtFunction; overload;
    function Toggle(Animate : TExtObject) : TExtFunction; overload;
    function SetDisplayed(Value : Boolean) : TExtFunction; overload;
    function SetDisplayed(Value : String) : TExtFunction; overload;
    function Hide(Animate : Boolean = false) : TExtFunction; overload;
    function Hide(Animate : TExtObject) : TExtFunction; overload;
    function Show(Animate : Boolean = false) : TExtFunction; overload;
    function Show(Animate : TExtObject) : TExtFunction; overload;
    function AppendChild(El : String) : TExtFunction; overload;
    function AppendChild(El : THTMLElement) : TExtFunction; overload;
    function AppendChild(El : TExtElement) : TExtFunction; overload;
    function AppendTo(El : String) : TExtFunction; overload;
    function AppendTo(El : THTMLElement) : TExtFunction; overload;
    function AppendTo(El : TExtElement) : TExtFunction; overload;
    function InsertBefore(El : String) : TExtFunction; overload;
    function InsertBefore(El : THTMLElement) : TExtFunction; overload;
    function InsertBefore(El : TExtElement) : TExtFunction; overload;
    function InsertAfter(El : String) : TExtFunction; overload;
    function InsertAfter(El : THTMLElement) : TExtFunction; overload;
    function InsertAfter(El : TExtElement) : TExtFunction; overload;
    function InsertFirst(El : String) : TExtFunction; overload;
    function InsertFirst(El : THTMLElement) : TExtFunction; overload;
    function InsertFirst(El : TExtElement) : TExtFunction; overload;
    function InsertFirst(El : TExtObject) : TExtFunction; overload;
    function InsertSibling(El : String; Where : String = ''; ReturnDom : Boolean = false) : TExtFunction; overload;
    function InsertSibling(El : THTMLElement; Where : String = ''; ReturnDom : Boolean = false) : TExtFunction; overload;
    function InsertSibling(El : TExtElement; Where : String = ''; ReturnDom : Boolean = false) : TExtFunction; overload;
    function InsertSibling(El : TExtObject; Where : String = ''; ReturnDom : Boolean = false) : TExtFunction; overload;
    function InsertSibling(El : TExtObjectList; Where : String = ''; ReturnDom : Boolean = false) : TExtFunction; overload;
    function Replace(El : String) : TExtFunction; overload;
    function Replace(El : THTMLElement) : TExtFunction; overload;
    function Replace(El : TExtElement) : TExtFunction; overload;
    function ReplaceWith(El : String) : TExtFunction; overload;
    function ReplaceWith(El : THTMLElement) : TExtFunction; overload;
    function ReplaceWith(El : TExtElement) : TExtFunction; overload;
    function ReplaceWith(El : TExtObject) : TExtFunction; overload;
    function CreateChild(Config : TExtObject; InsertBefore : THTMLElement = nil; ReturnDom : Boolean = false) : TExtFunction;
    function Wrap(Config : TExtObject = nil; ReturnDom : Boolean = false) : TExtFunction;
    function InsertHtml(Where : String; Html : String; ReturnEl : Boolean = false) : TExtFunction;
    function AddKeyListener(Key : String; Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; overload;
    function AddKeyListener(Key : Integer; Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; overload;
    function AddKeyListener(Key : TArrayOfInteger; Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; overload;
    function AddKeyListener(Key : TExtObject; Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; overload;
    function AddKeyMap(Config : TExtObject) : TExtFunction;
    function GetX : TExtFunction;
    function GetY : TExtFunction;
    function GetXY : TExtFunction;
    function GetOffsetsTo(Element : String) : TExtFunction; overload;
    function GetOffsetsTo(Element : THTMLElement) : TExtFunction; overload;
    function GetOffsetsTo(Element : TExtElement) : TExtFunction; overload;
    function SetX(The : Integer; Animate : Boolean = false) : TExtFunction; overload;
    function SetX(The : Integer; Animate : TExtObject) : TExtFunction; overload;
    function SetY(The : Integer; Animate : Boolean = false) : TExtFunction; overload;
    function SetY(The : Integer; Animate : TExtObject) : TExtFunction; overload;
    function SetLeft(Left : String) : TExtFunction;
    function SetTop(Top : String) : TExtFunction;
    function SetRight(Right : String) : TExtFunction;
    function SetBottom(Bottom : String) : TExtFunction;
    function SetXY(Pos : TArrayOfInteger; Animate : Boolean = false) : TExtFunction; overload;
    function SetXY(Pos : TArrayOfInteger; Animate : TExtObject) : TExtFunction; overload;
    function SetLocation(X : Integer; Y : Integer; Animate : Boolean = false) : TExtFunction; overload;
    function SetLocation(X : Integer; Y : Integer; Animate : TExtObject) : TExtFunction; overload;
    function MoveTo(X : Integer; Y : Integer; Animate : Boolean = false) : TExtFunction; overload;
    function MoveTo(X : Integer; Y : Integer; Animate : TExtObject) : TExtFunction; overload;
    function GetLeft(Local : Boolean) : TExtFunction;
    function GetRight(Local : Boolean) : TExtFunction;
    function GetTop(Local : Boolean) : TExtFunction;
    function GetBottom(Local : Boolean) : TExtFunction;
    function Position(Pos : String = ''; ZIndex : Integer = 0; X : Integer = 0; Y : Integer = 0) : TExtFunction;
    function ClearPositioning(Value : String = '') : TExtFunction;
    function GetPositioning : TExtFunction;
    function SetPositioning(PosCfg : TExtObject) : TExtFunction;
    function TranslatePoints(X : Integer; Y : Integer = 0) : TExtFunction; overload;
    function TranslatePoints(X : TArrayOfInteger; Y : Integer = 0) : TExtFunction; overload;
    function SetBox(Box : TExtObject; Adjust : Boolean = false; Animate : Boolean = false) : TExtFunction; overload;
    function SetBox(Box : TExtObject; Adjust : Boolean; Animate : TExtObject) : TExtFunction; overload;
    function GetBox(ContentBox : Boolean = false; Local : Boolean = false) : TExtFunction;
    function Move(Direction : String; Distance : Integer; Animate : Boolean = false) : TExtFunction; overload;
    function Move(Direction : String; Distance : Integer; Animate : TExtObject) : TExtFunction; overload;
    function SetLeftTop(Left : String; Top : String) : TExtFunction;
    function GetRegion : TExtFunction;
    function GetViewRegion : TExtFunction;
    function GetPageBox(AsRegion : Boolean) : TExtFunction;
    function SetBounds(X : Integer; Y : Integer; Width : Integer; Height : Integer; Animate : Boolean = false) : TExtFunction; overload;
    function SetBounds(X : Integer; Y : Integer; Width : String; Height : Integer; Animate : Boolean = false) : TExtFunction; overload;
    function SetBounds(X : Integer; Y : Integer; Width : String; Height : String; Animate : Boolean = false) : TExtFunction; overload;
    function SetBounds(X : Integer; Y : Integer; Width : String; Height : String; Animate : TExtObject) : TExtFunction; overload;
    function SetBounds(X : Integer; Y : Integer; Width : String; Height : Integer; Animate : TExtObject) : TExtFunction; overload;
    function SetBounds(X : Integer; Y : Integer; Width : Integer; Height : String; Animate : Boolean = false) : TExtFunction; overload;
    function SetBounds(X : Integer; Y : Integer; Width : Integer; Height : String; Animate : TExtObject) : TExtFunction; overload;
    function SetBounds(X : Integer; Y : Integer; Width : Integer; Height : Integer; Animate : TExtObject) : TExtFunction; overload;
    function SetRegion(Region : TExtUtilRegion; Animate : Boolean = false) : TExtFunction; overload;
    function SetRegion(Region : TExtUtilRegion; Animate : TExtObject) : TExtFunction; overload;
    function IsScrollable : TExtFunction;
    function GetScroll : TExtFunction;
    function ScrollTo(Side : String; Value : Integer; Animate : Boolean = false) : TExtFunction; overload;
    function ScrollTo(Side : String; Value : Integer; Animate : TExtObject) : TExtFunction; overload;
    function ScrollIntoView(Container : String = ''; Hscroll : Boolean = false) : TExtFunction; overload;
    function ScrollIntoView(Container : THTMLElement; Hscroll : Boolean = false) : TExtFunction; overload;
    function ScrollIntoView(Container : TExtElement; Hscroll : Boolean = false) : TExtFunction; overload;
    function Scroll(Direction : String; Distance : Integer; Animate : Boolean = false) : TExtFunction; overload;
    function Scroll(Direction : String; Distance : Integer; Animate : TExtObject) : TExtFunction; overload;
    function GetActiveElement : TExtFunction;
    function SerializeForm(Form : TExtObject) : TExtFunction;
    class function ParseBox(Box : Integer) : TExtFunction; overload;
    function ParseBox(Box : String) : TExtFunction; overload;
    class function UnitizeBox(Box : Integer; Units : String) : TExtFunction; overload;
    function UnitizeBox(Box : String; Units : String) : TExtFunction; overload;
    class function Normalize(Prop : String) : TExtFunction;
    class function GetDocumentHeight : TExtFunction;
    class function GetDocumentWidth : TExtFunction;
    class function GetViewportHeight : TExtFunction;
    class function GetViewportWidth : TExtFunction;
    class function GetViewSize : TExtFunction;
    class function GetOrientation : TExtFunction;
    class function FromPoint(X : Integer; Y : Integer) : TExtFunction;
    class function ParseStyles(Styles : String) : TExtFunction;
    function AdjustWidth : TExtFunction;
    function AddCls(ClassName : String) : TExtFunction; overload;
    function AddCls(ClassName : TExtObjectList) : TExtFunction; overload;
    function RemoveCls(ClassName : String) : TExtFunction; overload;
    function RemoveCls(ClassName : TExtObjectList) : TExtFunction; overload;
    function RadioCls(ClassName : String) : TExtFunction; overload;
    function RadioCls(ClassName : TExtObjectList) : TExtFunction; overload;
    function ToggleCls(ClassName : String) : TExtFunction;
    function HasCls(ClassName : String) : TExtFunction;
    function ReplaceCls(OldClassName : String; NewClassName : String) : TExtFunction;
    function GetStyle(PropertyJS : String) : TExtFunction;
    function GetColor(Attr : String; DefaultValue : String; Prefix : String = '') : TExtFunction;
    function SetStyle(PropertyJS : String; Value : String = '') : TExtFunction; overload;
    function SetStyle(PropertyJS : TExtObject; Value : String = '') : TExtFunction; overload;
    function SetOpacity(Opacity : Integer; Animate : Boolean = false) : TExtFunction; overload;
    function SetOpacity(Opacity : Integer; Animate : TExtObject) : TExtFunction; overload;
    function ClearOpacity : TExtFunction;
    function GetHeight(ContentHeight : Boolean = false) : TExtFunction;
    function GetWidth(ContentWidth : Boolean = false) : TExtFunction;
    function SetWidth(Width : Integer; Animate : Boolean = false) : TExtFunction; overload;
    function SetWidth(Width : String; Animate : Boolean = false) : TExtFunction; overload;
    function SetWidth(Width : String; Animate : TExtObject) : TExtFunction; overload;
    function SetWidth(Width : Integer; Animate : TExtObject) : TExtFunction; overload;
    function SetHeight(Height : Integer; Animate : Boolean = false) : TExtFunction; overload;
    function SetHeight(Height : String; Animate : Boolean = false) : TExtFunction; overload;
    function SetHeight(Height : String; Animate : TExtObject) : TExtFunction; overload;
    function SetHeight(Height : Integer; Animate : TExtObject) : TExtFunction; overload;
    function GetBorderWidth(Side : String) : TExtFunction;
    function GetPadding(Side : String) : TExtFunction;
    function Clip : TExtFunction;
    function Unclip : TExtFunction;
    function ApplyStyles(Styles : String) : TExtFunction; overload;
    function ApplyStyles(Styles : TExtObject) : TExtFunction; overload;
    function ApplyStyles(Styles : TExtFunction) : TExtFunction; overload;
    function GetStyles(Style1 : String; Style2 : String; Etc : String) : TExtFunction;
    function BoxWrap(ClassJS : String = '') : TExtFunction;
    function SetSize(Width : Integer; Height : Integer; Animate : Boolean = false) : TExtFunction; overload;
    function SetSize(Width : String; Height : Integer; Animate : Boolean = false) : TExtFunction; overload;
    function SetSize(Width : String; Height : String; Animate : Boolean = false) : TExtFunction; overload;
    function SetSize(Width : String; Height : String; Animate : TExtObject) : TExtFunction; overload;
    function SetSize(Width : String; Height : Integer; Animate : TExtObject) : TExtFunction; overload;
    function SetSize(Width : Integer; Height : String; Animate : Boolean = false) : TExtFunction; overload;
    function SetSize(Width : Integer; Height : String; Animate : TExtObject) : TExtFunction; overload;
    function SetSize(Width : Integer; Height : Integer; Animate : TExtObject) : TExtFunction; overload;
    function GetComputedHeight : TExtFunction;
    function GetComputedWidth : TExtFunction;
    function GetFrameWidth(Sides : String) : TExtFunction;
    function AddClsOnOver(ClassName : String) : TExtFunction;
    function AddClsOnFocus(ClassName : String) : TExtFunction;
    function AddClsOnClick(ClassName : String) : TExtFunction;
    function GetViewSize_ : TExtFunction;
    function GetStyleSize : TExtFunction;
    function GetSize(ContentSize : Boolean = false) : TExtFunction;
    function Repaint : TExtFunction;
    function Selectable : TExtFunction;
    function Unselectable : TExtFunction;
    function GetMargin(Sides : String = '') : TExtFunction;
    function FindParent(Selector : String; MaxDepth : Integer = 0; ReturnEl : Boolean = false) : TExtFunction; overload;
    function FindParent(Selector : String; MaxDepth : String; ReturnEl : Boolean = false) : TExtFunction; overload;
    function FindParent(Selector : String; MaxDepth : THTMLElement; ReturnEl : Boolean = false) : TExtFunction; overload;
    function FindParent(Selector : String; MaxDepth : TExtElement; ReturnEl : Boolean = false) : TExtFunction; overload;
    function FindParentNode(Selector : String; MaxDepth : Integer = 0; ReturnEl : Boolean = false) : TExtFunction; overload;
    function FindParentNode(Selector : String; MaxDepth : String; ReturnEl : Boolean = false) : TExtFunction; overload;
    function FindParentNode(Selector : String; MaxDepth : THTMLElement; ReturnEl : Boolean = false) : TExtFunction; overload;
    function FindParentNode(Selector : String; MaxDepth : TExtElement; ReturnEl : Boolean = false) : TExtFunction; overload;
    function Up(Selector : String; MaxDepth : Integer = 0) : TExtFunction; overload;
    function Up(Selector : String; MaxDepth : String) : TExtFunction; overload;
    function Up(Selector : String; MaxDepth : THTMLElement) : TExtFunction; overload;
    function Up(Selector : String; MaxDepth : TExtElement) : TExtFunction; overload;
    function Select(Selector : String) : TExtFunction;
    function Query(Selector : String) : TExtFunction;
    function Down(Selector : String; ReturnDom : Boolean = false) : TExtFunction;
    function Child(Selector : String; ReturnDom : Boolean = false) : TExtFunction;
    function Parent(Selector : String = ''; ReturnDom : Boolean = false) : TExtFunction;
    function Next(Selector : String = ''; ReturnDom : Boolean = false) : TExtFunction;
    function Prev(Selector : String = ''; ReturnDom : Boolean = false) : TExtFunction;
    function First(Selector : String = ''; ReturnDom : Boolean = false) : TExtFunction;
    function Last(Selector : String = ''; ReturnDom : Boolean = false) : TExtFunction;
    function IsJS(Selector : String) : TExtFunction;
    function Focus(Defer : Integer = 0) : TExtFunction;
    function Blur : TExtFunction;
    function GetValue(AsNumber : Boolean) : TExtFunction;
    function AddListener(EventName : String; Fn : TExtFunction; Scope : TExtObject = nil; Options : TExtObject = nil) : TExtFunction;
    function RemoveListener(EventName : String; Fn : TExtFunction; Scope : TExtObject) : TExtFunction;
    function RemoveAllListeners : TExtFunction;
    function PurgeAllListeners : TExtFunction;
    function IsBorderBox : TExtFunction;
    function Remove : TExtFunction;
    function Hover(OverFn : TExtFunction; OutFn : TExtFunction; Scope : TExtObject = nil; Options : TExtObject = nil) : TExtFunction;
    function Contains(El : THTMLElement) : TExtFunction; overload;
    function Contains(El : String) : TExtFunction; overload;
    function GetAttributeNS(Namespace : String; Name : String) : TExtFunction;
    function GetAttribute(Name : String; Namespace : String = '') : TExtFunction;
    function Update_(Html : String) : TExtFunction;
    function On : TExtFunction;
    function Un : TExtFunction;
    function ClearListeners : TExtFunction;
    function DestroyJS : TExtFunction; override;
    class function Get(El : String) : TExtFunction; overload;
    function Get(El : THTMLElement) : TExtFunction; overload;
    function Get(El : TExtElement) : TExtFunction; overload;
    function GetById(Id : String) : TExtFunction;
    class function Fly(El : String; Named : String = '') : TExtFunction; overload;
    function Fly(El : THTMLElement; Named : String = '') : TExtFunction; overload;
    function Get_ : TExtFunction;
    function Fly_ : TExtFunction;
    property OnClick : TExtElementOnClick read FOnClick write SetFOnClick;
    property OnContextmenu : TExtElementOnContextmenu read FOnContextmenu write SetFOnContextmenu;
    property OnDblclick : TExtElementOnDblclick read FOnDblclick write SetFOnDblclick;
    property OnMousedown : TExtElementOnMousedown read FOnMousedown write SetFOnMousedown;
    property OnMouseup : TExtElementOnMouseup read FOnMouseup write SetFOnMouseup;
    property OnMouseover : TExtElementOnMouseover read FOnMouseover write SetFOnMouseover;
    property OnMousemove : TExtElementOnMousemove read FOnMousemove write SetFOnMousemove;
    property OnMouseout : TExtElementOnMouseout read FOnMouseout write SetFOnMouseout;
    property OnMouseenter : TExtElementOnMouseenter read FOnMouseenter write SetFOnMouseenter;
    property OnMouseleave : TExtElementOnMouseleave read FOnMouseleave write SetFOnMouseleave;
    property OnKeypress : TExtElementOnKeypress read FOnKeypress write SetFOnKeypress;
    property OnKeydown : TExtElementOnKeydown read FOnKeydown write SetFOnKeydown;
    property OnKeyup : TExtElementOnKeyup read FOnKeyup write SetFOnKeyup;
    property OnLoad : TExtElementOnLoad read FOnLoad write SetFOnLoad;
    property OnUnload : TExtElementOnUnload read FOnUnload write SetFOnUnload;
    property OnAbort : TExtElementOnAbort read FOnAbort write SetFOnAbort;
    property OnError : TExtElementOnError read FOnError write SetFOnError;
    property OnResize : TExtElementOnResize read FOnResize write SetFOnResize;
    property OnScroll : TExtElementOnScroll read FOnScroll write SetFOnScroll;
    property OnSelect : TExtElementOnSelect read FOnSelect write SetFOnSelect;
    property OnChange : TExtElementOnChange read FOnChange write SetFOnChange;
    property OnSubmit : TExtElementOnSubmit read FOnSubmit write SetFOnSubmit;
    property OnReset : TExtElementOnReset read FOnReset write SetFOnReset;
    property OnFocus : TExtElementOnFocus read FOnFocus write SetFOnFocus;
    property OnBlur : TExtElementOnBlur read FOnBlur write SetFOnBlur;
    property OnDOMFocusIn : TExtElementOnDOMFocusIn read FOnDOMFocusIn write SetFOnDOMFocusIn;
    property OnDOMFocusOut : TExtElementOnDOMFocusOut read FOnDOMFocusOut write SetFOnDOMFocusOut;
    property OnDOMActivate : TExtElementOnDOMActivate read FOnDOMActivate write SetFOnDOMActivate;
    property OnDOMSubtreeModified : TExtElementOnDOMSubtreeModified read FOnDOMSubtreeModified write SetFOnDOMSubtreeModified;
    property OnDOMNodeInserted : TExtElementOnDOMNodeInserted read FOnDOMNodeInserted write SetFOnDOMNodeInserted;
    property OnDOMNodeRemoved : TExtElementOnDOMNodeRemoved read FOnDOMNodeRemoved write SetFOnDOMNodeRemoved;
    property OnDOMNodeRemovedFromDocument : TExtElementOnDOMNodeRemovedFromDocument read FOnDOMNodeRemovedFromDocument write SetFOnDOMNodeRemovedFromDocument;
    property OnDOMNodeInsertedIntoDocument : TExtElementOnDOMNodeInsertedIntoDocument read FOnDOMNodeInsertedIntoDocument write SetFOnDOMNodeInsertedIntoDocument;
    property OnDOMAttrModified : TExtElementOnDOMAttrModified read FOnDOMAttrModified write SetFOnDOMAttrModified;
    property OnDOMCharacterDataModified : TExtElementOnDOMCharacterDataModified read FOnDOMCharacterDataModified write SetFOnDOMCharacterDataModified;
  end;

  TExtLayoutContainerAnchor = class(TExtFunction)
  private
    FAnchor : String;
    FDefaultAnchor : String;
    procedure SetFAnchor(Value : String);
    procedure SetFDefaultAnchor(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property Anchor : String read FAnchor write SetFAnchor;
    property DefaultAnchor : String read FDefaultAnchor write SetFDefaultAnchor;
  end;

  // Procedural types for events TExtDdDragTracker
  TExtDdDragTrackerOnMouseover = procedure(This : TExtDdDragTracker; E : TExtObject; Target : THTMLElement) of object;
  TExtDdDragTrackerOnMouseout = procedure(This : TExtDdDragTracker; E : TExtObject) of object;
  TExtDdDragTrackerOnMousedown = procedure(This : TExtDdDragTracker; E : TExtObject) of object;
  TExtDdDragTrackerOnMouseup = procedure(This : TExtDdDragTracker; E : TExtObject) of object;
  TExtDdDragTrackerOnMousemove = procedure(This : TExtDdDragTracker; E : TExtObject) of object;
  TExtDdDragTrackerOnBeforestart = procedure(This : TExtDdDragTracker; E : TExtObject) of object;
  TExtDdDragTrackerOnDragstart = procedure(This : TExtDdDragTracker; E : TExtObject) of object;
  TExtDdDragTrackerOnDragend = procedure(This : TExtDdDragTracker; E : TExtObject) of object;
  TExtDdDragTrackerOnDrag = procedure(This : TExtDdDragTracker; E : TExtObject) of object;

  TExtDdDragTracker = class(TExtFunction)
  private
    FTrackOver : Boolean;
    FOverCls : String;
    FConstrainTo : TExtUtilRegion;
    FConstrainToTExtElement : TExtElement;
    FTolerance : Integer;
    FAutoStart : Boolean;
    FAutoStartInteger : Integer;
    FDelegate : String;
    FPreventDefault : Boolean;
    FStopEvent : Boolean;
    FOnMouseover : TExtDdDragTrackerOnMouseover;
    FOnMouseout : TExtDdDragTrackerOnMouseout;
    FOnMousedown : TExtDdDragTrackerOnMousedown;
    FOnMouseup : TExtDdDragTrackerOnMouseup;
    FOnMousemove : TExtDdDragTrackerOnMousemove;
    FOnBeforestart : TExtDdDragTrackerOnBeforestart;
    FOnDragstart : TExtDdDragTrackerOnDragstart;
    FOnDragend : TExtDdDragTrackerOnDragend;
    FOnDrag : TExtDdDragTrackerOnDrag;
    procedure SetFTrackOver(Value : Boolean);
    procedure SetFOverCls(Value : String);
    procedure SetFConstrainTo(Value : TExtUtilRegion);
    procedure SetFConstrainToTExtElement(Value : TExtElement);
    procedure SetFTolerance(Value : Integer);
    procedure SetFAutoStart(Value : Boolean);
    procedure SetFAutoStartInteger(Value : Integer);
    procedure SetFDelegate(Value : String);
    procedure SetFPreventDefault(Value : Boolean);
    procedure SetFStopEvent(Value : Boolean);
    procedure SetFOnMouseover(Value : TExtDdDragTrackerOnMouseover);
    procedure SetFOnMouseout(Value : TExtDdDragTrackerOnMouseout);
    procedure SetFOnMousedown(Value : TExtDdDragTrackerOnMousedown);
    procedure SetFOnMouseup(Value : TExtDdDragTrackerOnMouseup);
    procedure SetFOnMousemove(Value : TExtDdDragTrackerOnMousemove);
    procedure SetFOnBeforestart(Value : TExtDdDragTrackerOnBeforestart);
    procedure SetFOnDragstart(Value : TExtDdDragTrackerOnDragstart);
    procedure SetFOnDragend(Value : TExtDdDragTrackerOnDragend);
    procedure SetFOnDrag(Value : TExtDdDragTrackerOnDrag);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function InitEl(El : TExtElement) : TExtFunction; overload;
    function InitEl(El : THTMLElement) : TExtFunction; overload;
    function OnBeforeStart(E : TExtEventObjectSingleton) : TExtFunction;
    function OnStart(E : TExtEventObjectSingleton) : TExtFunction;
    function OnDrag(E : TExtEventObjectSingleton) : TExtFunction;
    function OnEnd(E : TExtEventObjectSingleton) : TExtFunction;
    function GetDragTarget : TExtFunction;
    function GetOffset(Optional : String) : TExtFunction;
    destructor Destroy; override;
    property TrackOver : Boolean read FTrackOver write SetFTrackOver;
    property OverCls : String read FOverCls write SetFOverCls;
    property ConstrainTo : TExtUtilRegion read FConstrainTo write SetFConstrainTo;
    property ConstrainToTExtElement : TExtElement read FConstrainToTExtElement write SetFConstrainToTExtElement;
    property Tolerance : Integer read FTolerance write SetFTolerance;
    property AutoStart : Boolean read FAutoStart write SetFAutoStart;
    property AutoStartInteger : Integer read FAutoStartInteger write SetFAutoStartInteger;
    property Delegate : String read FDelegate write SetFDelegate;
    property PreventDefault : Boolean read FPreventDefault write SetFPreventDefault;
    property StopEvent : Boolean read FStopEvent write SetFStopEvent;
    property OnMouseover : TExtDdDragTrackerOnMouseover read FOnMouseover write SetFOnMouseover;
    property OnMouseout : TExtDdDragTrackerOnMouseout read FOnMouseout write SetFOnMouseout;
    property OnMousedown : TExtDdDragTrackerOnMousedown read FOnMousedown write SetFOnMousedown;
    property OnMouseup : TExtDdDragTrackerOnMouseup read FOnMouseup write SetFOnMouseup;
    property OnMousemove : TExtDdDragTrackerOnMousemove read FOnMousemove write SetFOnMousemove;
    property OnBeforestart : TExtDdDragTrackerOnBeforestart read FOnBeforestart write SetFOnBeforestart;
    property OnDragstart : TExtDdDragTrackerOnDragstart read FOnDragstart write SetFOnDragstart;
    property OnDragend : TExtDdDragTrackerOnDragend read FOnDragend write SetFOnDragend;
    property OnDrag : TExtDdDragTrackerOnDrag read FOnDrag write SetFOnDrag;
  end;

  TExtObjectSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function ToQueryObjects(Name : String; Value : TExtObject; Recursive : Boolean = false) : TExtFunction; overload;
    function ToQueryObjects(Name : String; Value : TExtObjectList; Recursive : Boolean = false) : TExtFunction; overload;
    function ToQueryString(ObjectJS : TExtObject; Recursive : Boolean = false) : TExtFunction;
    function FromQueryString(QueryString : String; Recursive : Boolean = false) : TExtFunction;
    function Each(ObjectJS : TExtObject; Fn : TExtFunction; FnKey : String; FnValue : TExtObject; FnObject : TExtObject; Scope : TExtObject = nil) : TExtFunction;
    function Merge(ObjectJS : TExtObjectList) : TExtFunction;
    function GetKey(ObjectJS : TExtObject; Value : TExtObject) : TExtFunction;
    function GetValues(ObjectJS : TExtObject) : TExtFunction;
    function GetKeys(ObjectJS : TExtObject) : TExtFunction;
    function GetSize(ObjectJS : TExtObject) : TExtFunction;
    function Merge_ : TExtFunction;
    function UrlEncode : TExtFunction;
    function UrlDecode : TExtFunction;
  end;

  TExtGridFeatureGroupingSummary = class(TExtFunction)
  private
    FRemoteRoot : String;
    procedure SetFRemoteRoot(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property RemoteRoot : String read FRemoteRoot write SetFRemoteRoot;
  end;

  TExtDomQuerySingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Compile(Selector : String; TypeJS : String = '') : TExtFunction;
    function JsSelect(Selector : String; Root : THTMLElement = nil) : TExtFunction; overload;
    function JsSelect(Selector : String; Root : String) : TExtFunction; overload;
    function Select(Path : String; Root : THTMLElement = nil) : TExtFunction;
    function SelectNode(Selector : String; Root : THTMLElement = nil) : TExtFunction;
    function SelectValue(Selector : String; Root : THTMLElement = nil; DefaultValue : String = '') : TExtFunction;
    function SelectNumber(Selector : String; Root : THTMLElement = nil; DefaultValue : Integer = 0) : TExtFunction;
    function IsJS(El : String; Selector : String) : TExtFunction; overload;
    function IsJS(El : THTMLElement; Selector : String) : TExtFunction; overload;
    function IsJS(El : TExtObjectList; Selector : String) : TExtFunction; overload;
    function Filter(El : TExtObjectList; Selector : String; NonMatches : Boolean) : TExtFunction;
    function Query : TExtFunction;
  end;

  TExtChartSeriesGauge = class(TExtFunction)
  private
    FHighlightDuration : Integer;
    FAngleField : String;
    FNeedle : Boolean;
    FDonut : Boolean;
    FDonutInteger : Integer;
    FShowInLegend : Boolean;
    FStyle : TExtObject;
    procedure SetFHighlightDuration(Value : Integer);
    procedure SetFAngleField(Value : String);
    procedure SetFNeedle(Value : Boolean);
    procedure SetFDonut(Value : Boolean);
    procedure SetFDonutInteger(Value : Integer);
    procedure SetFShowInLegend(Value : Boolean);
    procedure SetFStyle(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function DrawSeries : TExtFunction;
    function SetValue : TExtFunction;
    function GetLegendColor(Info : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property HighlightDuration : Integer read FHighlightDuration write SetFHighlightDuration;
    property AngleField : String read FAngleField write SetFAngleField;
    property Needle : Boolean read FNeedle write SetFNeedle;
    property Donut : Boolean read FDonut write SetFDonut;
    property DonutInteger : Integer read FDonutInteger write SetFDonutInteger;
    property ShowInLegend : Boolean read FShowInLegend write SetFShowInLegend;
    property Style : TExtObject read FStyle write SetFStyle;
  end;

  TExtUtilMixedCollection = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(AllowFunctions : Boolean; KeyFn : TExtFunction);
    function SortBy(SorterFn : TExtFunction) : TExtFunction;
    function Reorder(Mapping : TExtObject) : TExtFunction;
    function SortByKey(Direction : String = ''; Fn : TExtFunction = nil) : TExtFunction;
  end;

  TExtFormActionDirectSubmit = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtChartSeriesPie = class(TExtFunction)
  private
    FHighlightDuration : Integer;
    FAngleField : String;
    FLengthField : String;
    FDonut : Boolean;
    FDonutInteger : Integer;
    FShowInLegend : Boolean;
    FColorSet : TExtObjectList;
    FStyle : TExtObject;
    procedure SetFHighlightDuration(Value : Integer);
    procedure SetFAngleField(Value : String);
    procedure SetFLengthField(Value : String);
    procedure SetFDonut(Value : Boolean);
    procedure SetFDonutInteger(Value : Integer);
    procedure SetFShowInLegend(Value : Boolean);
    procedure SetFColorSet(Value : TExtObjectList);
    procedure SetFStyle(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function DrawSeries : TExtFunction;
    function HighlightItem(Info : TExtObject) : TExtFunction;
    function UnHighlightItem(Info : TExtObject) : TExtFunction;
    function GetLegendColor(Info : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property HighlightDuration : Integer read FHighlightDuration write SetFHighlightDuration;
    property AngleField : String read FAngleField write SetFAngleField;
    property LengthField : String read FLengthField write SetFLengthField;
    property Donut : Boolean read FDonut write SetFDonut;
    property DonutInteger : Integer read FDonutInteger write SetFDonutInteger;
    property ShowInLegend : Boolean read FShowInLegend write SetFShowInLegend;
    property ColorSet : TExtObjectList read FColorSet write SetFColorSet;
    property Style : TExtObject read FStyle write SetFStyle;
  end;

  // Procedural types for events TExtDirectRemotingProvider
  TExtDirectRemotingProviderOnBeforecall = procedure(Provider : TExtDirectRemotingProvider; Transaction : TExtDirectTransaction; Meta : TExtObject) of object;
  TExtDirectRemotingProviderOnCall = procedure(Provider : TExtDirectRemotingProvider; Transaction : TExtDirectTransaction; Meta : TExtObject) of object;

  TExtDirectRemotingProvider = class(TExtFunction)
  private
    FActions : TExtObject;
    FNamespace : String;
    FNamespaceTExtObject : TExtObject;
    FUrl : String;
    FEnableUrlEncode : String;
    FEnableBuffer : Integer;
    FEnableBufferBoolean : Boolean;
    FMaxRetries : Integer;
    FTimeout : Integer;
    FOnBeforecall : TExtDirectRemotingProviderOnBeforecall;
    FOnCall : TExtDirectRemotingProviderOnCall;
    procedure SetFActions(Value : TExtObject);
    procedure SetFNamespace(Value : String);
    procedure SetFNamespaceTExtObject(Value : TExtObject);
    procedure SetFUrl(Value : String);
    procedure SetFEnableUrlEncode(Value : String);
    procedure SetFEnableBuffer(Value : Integer);
    procedure SetFEnableBufferBoolean(Value : Boolean);
    procedure SetFMaxRetries(Value : Integer);
    procedure SetFTimeout(Value : Integer);
    procedure SetFOnBeforecall(Value : TExtDirectRemotingProviderOnBeforecall);
    procedure SetFOnCall(Value : TExtDirectRemotingProviderOnCall);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    destructor Destroy; override;
    property Actions : TExtObject read FActions write SetFActions;
    property Namespace : String read FNamespace write SetFNamespace;
    property NamespaceTExtObject : TExtObject read FNamespaceTExtObject write SetFNamespaceTExtObject;
    property Url : String read FUrl write SetFUrl;
    property EnableUrlEncode : String read FEnableUrlEncode write SetFEnableUrlEncode;
    property EnableBuffer : Integer read FEnableBuffer write SetFEnableBuffer;
    property EnableBufferBoolean : Boolean read FEnableBufferBoolean write SetFEnableBufferBoolean;
    property MaxRetries : Integer read FMaxRetries write SetFMaxRetries;
    property Timeout : Integer read FTimeout write SetFTimeout;
    property OnBeforecall : TExtDirectRemotingProviderOnBeforecall read FOnBeforecall write SetFOnBeforecall;
    property OnCall : TExtDirectRemotingProviderOnCall read FOnCall write SetFOnCall;
  end;

  TExtEnvOS = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function IsJS(Value : String) : TExtFunction;
  end;

  TExtChartSeriesColumn = class(TExtFunction)
  private
    FXPadding : Integer;
    FYPadding : Integer;
    procedure SetFXPadding(Value : Integer);
    procedure SetFYPadding(Value : Integer);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property XPadding : Integer read FXPadding write SetFXPadding;
    property YPadding : Integer read FYPadding write SetFYPadding;
  end;

  TExtDataHasManyAssociation = class(TExtFunction)
  private
    FForeignKey : String;
    FName : String;
    FStoreConfig : TExtObject;
    FFilterProperty : String;
    FAutoLoad : Boolean;
    FTypeJS : String;
    procedure SetFForeignKey(Value : String);
    procedure SetFName(Value : String);
    procedure SetFStoreConfig(Value : TExtObject);
    procedure SetFFilterProperty(Value : String);
    procedure SetFAutoLoad(Value : Boolean);
    procedure SetFTypeJS(Value : String);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    destructor Destroy; override;
    property ForeignKey : String read FForeignKey write SetFForeignKey;
    property Name : String read FName write SetFName;
    property StoreConfig : TExtObject read FStoreConfig write SetFStoreConfig;
    property FilterProperty : String read FFilterProperty write SetFFilterProperty;
    property AutoLoad : Boolean read FAutoLoad write SetFAutoLoad;
    property TypeJS : String read FTypeJS write SetFTypeJS;
  end;

  TExtDrawComponent = class(TExtFunction)
  private
    FEnginePriority : TExtObjectList;
    FViewBox : Boolean;
    FAutoSize : Boolean;
    FGradients : TExtObjectList;
    procedure SetFEnginePriority(Value : TExtObjectList);
    procedure SetFViewBox(Value : Boolean);
    procedure SetFAutoSize(Value : Boolean);
    procedure SetFGradients(Value : TExtObjectList);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function CreateSurface : TExtFunction;
    destructor Destroy; override;
    property EnginePriority : TExtObjectList read FEnginePriority write SetFEnginePriority;
    property ViewBox : Boolean read FViewBox write SetFViewBox;
    property AutoSize : Boolean read FAutoSize write SetFAutoSize;
    property Gradients : TExtObjectList read FGradients write SetFGradients;
  end;

  TExtChartAxisCategory = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  // Procedural types for events TExtFlashComponent
  TExtFlashComponentOnSuccess = procedure(This : TExtFlashComponent; This_ : TExtFlashComponent; E : TExtObject) of object;

  TExtFlashComponent = class(TExtFunction)
  private
    FFlashVersion : String;
    FBackgroundColor : String;
    FWmode : String;
    FFlashVars : TExtObject;
    FFlashParams : TExtObject;
    FFlashAttributes : TExtObject;
    FUrl : String;
    FSwfWidth : String;
    FSwfWidthInteger : Integer;
    FSwfHeight : String;
    FSwfHeightInteger : Integer;
    FExpressInstall : Boolean;
    FSwf : TExtElement;
    FOnSuccess : TExtFlashComponentOnSuccess;
    procedure SetFFlashVersion(Value : String);
    procedure SetFBackgroundColor(Value : String);
    procedure SetFWmode(Value : String);
    procedure SetFFlashVars(Value : TExtObject);
    procedure SetFFlashParams(Value : TExtObject);
    procedure SetFFlashAttributes(Value : TExtObject);
    procedure SetFUrl(Value : String);
    procedure SetFSwfWidth(Value : String);
    procedure SetFSwfWidthInteger(Value : Integer);
    procedure SetFSwfHeight(Value : String);
    procedure SetFSwfHeightInteger(Value : Integer);
    procedure SetFExpressInstall(Value : Boolean);
    procedure SetFSwf(Value : TExtElement);
    procedure SetFOnSuccess(Value : TExtFlashComponentOnSuccess);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function GetSwfId : TExtFunction;
    destructor Destroy; override;
    property FlashVersion : String read FFlashVersion write SetFFlashVersion;
    property BackgroundColor : String read FBackgroundColor write SetFBackgroundColor;
    property Wmode : String read FWmode write SetFWmode;
    property FlashVars : TExtObject read FFlashVars write SetFFlashVars;
    property FlashParams : TExtObject read FFlashParams write SetFFlashParams;
    property FlashAttributes : TExtObject read FFlashAttributes write SetFFlashAttributes;
    property Url : String read FUrl write SetFUrl;
    property SwfWidth : String read FSwfWidth write SetFSwfWidth;
    property SwfWidthInteger : Integer read FSwfWidthInteger write SetFSwfWidthInteger;
    property SwfHeight : String read FSwfHeight write SetFSwfHeight;
    property SwfHeightInteger : Integer read FSwfHeightInteger write SetFSwfHeightInteger;
    property ExpressInstall : Boolean read FExpressInstall write SetFExpressInstall;
    property Swf : TExtElement read FSwf write SetFSwf;
    property OnSuccess : TExtFlashComponentOnSuccess read FOnSuccess write SetFOnSuccess;
  end;

  TExtUtilObservable = class(TExtFunction)
  private
    FListeners : TExtObject;
    procedure SetFListeners(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function AddManagedListener(Item : TExtUtilObservable; Ename : TExtObject; Fn : TExtFunction = nil; Scope : TExtObject = nil; Opt : TExtObject = nil) : TExtFunction; overload;
    function AddManagedListener(Item : TExtElement; Ename : TExtObject; Fn : TExtFunction = nil; Scope : TExtObject = nil; Opt : TExtObject = nil) : TExtFunction; overload;
    function AddManagedListener(Item : TExtElement; Ename : String; Fn : TExtFunction = nil; Scope : TExtObject = nil; Opt : TExtObject = nil) : TExtFunction; overload;
    function AddManagedListener(Item : TExtUtilObservable; Ename : String; Fn : TExtFunction = nil; Scope : TExtObject = nil; Opt : TExtObject = nil) : TExtFunction; overload;
    function RemoveManagedListener(Item : TExtUtilObservable; Ename : TExtObject; Fn : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; overload;
    function RemoveManagedListener(Item : TExtElement; Ename : TExtObject; Fn : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; overload;
    function RemoveManagedListener(Item : TExtElement; Ename : String; Fn : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; overload;
    function RemoveManagedListener(Item : TExtUtilObservable; Ename : String; Fn : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; overload;
    function FireEvent(EventName : String; Args : TExtObjectList) : TExtFunction;
    function AddListener(EventName : String; Fn : TExtFunction; Scope : TExtObject = nil; Options : TExtObject = nil) : TExtFunction;
    function RemoveListener(EventName : String; Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction;
    function ClearListeners : TExtFunction;
    function ClearManagedListeners : TExtFunction;
    function AddEvents(O : TExtObject; More : TString = nil) : TExtFunction; overload;
    function AddEvents(O : String; More : TString = nil) : TExtFunction; overload;
    function HasListener(EventName : String) : TExtFunction;
    function SuspendEvents(QueueSuspended : Boolean) : TExtFunction;
    function ResumeEvents : TExtFunction;
    function RelayEvents(Origin : TExtObject; Events : TExtObjectList; Prefix : String; Param : TExtFunction; Events_ : String) : TExtFunction; overload;
    function RelayEvents(Origin : TExtObject; Events : TExtObjectList; Prefix : String; Param : TExtFunction; Events_ : TExtObjectList) : TExtFunction; overload;
    function On : TExtFunction;
    function Un : TExtFunction;
    function Mon : TExtFunction;
    function Mun : TExtFunction;
    destructor Destroy; override;
    property Listeners : TExtObject read FListeners write SetFListeners;
  end;

  TExtFormActionStandardSubmit = class(TExtFunction)
  private
    FTarget : String;
    procedure SetFTarget(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property Target : String read FTarget write SetFTarget;
  end;

  TExtDataRequest = class(TExtFunction)
  private
    FAction : String;
    FParams : TExtObject;
    FMethod : String;
    FUrl : String;
    procedure SetFAction(Value : String);
    procedure SetFParams(Value : TExtObject);
    procedure SetFMethod(Value : String);
    procedure SetFUrl(Value : String);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    constructor Create(Config : TExtObject = nil);
    destructor Destroy; override;
    property Action : String read FAction write SetFAction;
    property Params : TExtObject read FParams write SetFParams;
    property Method : String read FMethod write SetFMethod;
    property Url : String read FUrl write SetFUrl;
  end;

  TExtFxEasingSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtLayoutContainerBorder = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetPlaceholder(Panel : TExtPanelPanel) : TExtFunction;
  end;

  TDate = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Year : Integer = 0; Month : Integer = 0; Day : Integer = 0; Hour : Integer = 0; Minute : Integer = 0; Second : Integer = 0; Millisecond : Integer = 0);
    constructor Create(Year : String; Month : Integer = 0; Day : Integer = 0; Hour : Integer = 0; Minute : Integer = 0; Second : Integer = 0; Millisecond : Integer = 0);
    class function Now : TExtFunction;
    class function Parse(DateString : String) : TExtFunction;
    class function UTC(Year : Integer; Month : Integer; Date : Integer; Hrs : Integer; Min : Integer; Sec : Integer; Ms : Integer) : TExtFunction;
    function GetDate : TExtFunction;
    function GetDay : TExtFunction;
    function GetFullYear : TExtFunction;
    function GetHours : TExtFunction;
    function GetMilliseconds : TExtFunction;
    function GetMinutes : TExtFunction;
    function GetMonth : TExtFunction;
    function GetSeconds : TExtFunction;
    function GetTime : TExtFunction;
    function GetTimezoneOffset : TExtFunction;
    function GetUTCDate : TExtFunction;
    function GetUTCDay : TExtFunction;
    function GetUTCFullYear : TExtFunction;
    function GetUTCHours : TExtFunction;
    function GetUTCMilliseconds : TExtFunction;
    function GetUTCMinutes : TExtFunction;
    function GetUTCMonth : TExtFunction;
    function GetUTCSeconds : TExtFunction;
    function SetDate(DayValue : Integer) : TExtFunction;
    function SetFullYear(YearValue : Integer; MonthValue : Integer; DayValue : Integer) : TExtFunction;
    function SetHours(HoursValue : Integer; MinutesValue : Integer; SecondsValue : Integer; MsValue : Integer) : TExtFunction;
    function SetMilliseconds(MillisecondsValue : Integer) : TExtFunction;
    function SetMinutes(MinutesValue : Integer; SecondsValue : Integer; MsValue : Integer) : TExtFunction;
    function SetMonth(MonthValue : Integer; DayValue : Integer) : TExtFunction;
    function SetSeconds(SecondsValue : Integer; MsValue : Integer) : TExtFunction;
    function SetTime(TimeValue : Integer) : TExtFunction;
    function SetUTCDate(DayValue : Integer) : TExtFunction;
    function SetUTCFullYear(YearValue : Integer; MonthValue : Integer; DayValue : Integer) : TExtFunction;
    function SetUTCHours(HoursValue : Integer; MinutesValue : Integer; SecondsValue : Integer; MsValue : Integer) : TExtFunction;
    function SetUTCMilliseconds(MillisecondsValue : Integer) : TExtFunction;
    function SetUTCMinutes(MinutesValue : Integer; SecondsValue : Integer; MsValue : Integer) : TExtFunction;
    function SetUTCMonth(MonthValue : Integer; DayValue : Integer) : TExtFunction;
    function SetUTCSeconds(SecondsValue : Integer; MsValue : Integer) : TExtFunction;
    function ToDateString : TExtFunction;
    function ToLocaleDateString : TExtFunction;
    function ToLocaleString : TExtFunction;
    function ToLocaleTimeString : TExtFunction;
    function ToString : TExtFunction;
    function ToTimeString : TExtFunction;
    function ToUTCString : TExtFunction;
    function ValueOf : TExtFunction;
  end;

  TExtFormFieldTrigger = class(TExtFunction)
  private
    FTriggerCls : String;
    FTriggerBaseCls : String;
    FTriggerWrapCls : String;
    FHideTrigger : Boolean;
    FEditable : Boolean;
    FReadOnly : Boolean;
    FSelectOnFocus : Boolean;
    FRepeatTriggerClick : Boolean;
    FGrow : Boolean;
    FGrowMin : Integer;
    FGrowMax : Integer;
    procedure SetFTriggerCls(Value : String);
    procedure SetFTriggerBaseCls(Value : String);
    procedure SetFTriggerWrapCls(Value : String);
    procedure SetFHideTrigger(Value : Boolean);
    procedure SetFEditable(Value : Boolean);
    procedure SetFReadOnly(Value : Boolean);
    procedure SetFSelectOnFocus(Value : Boolean);
    procedure SetFRepeatTriggerClick(Value : Boolean);
    procedure SetFGrow(Value : Boolean);
    procedure SetFGrowMin(Value : Integer);
    procedure SetFGrowMax(Value : Integer);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property TriggerCls : String read FTriggerCls write SetFTriggerCls;
    property TriggerBaseCls : String read FTriggerBaseCls write SetFTriggerBaseCls;
    property TriggerWrapCls : String read FTriggerWrapCls write SetFTriggerWrapCls;
    property HideTrigger : Boolean read FHideTrigger write SetFHideTrigger;
    property Editable : Boolean read FEditable write SetFEditable;
    property ReadOnly : Boolean read FReadOnly write SetFReadOnly;
    property SelectOnFocus : Boolean read FSelectOnFocus write SetFSelectOnFocus;
    property RepeatTriggerClick : Boolean read FRepeatTriggerClick write SetFRepeatTriggerClick;
    property Grow : Boolean read FGrow write SetFGrow;
    property GrowMin : Integer read FGrowMin write SetFGrowMin;
    property GrowMax : Integer read FGrowMax write SetFGrowMax;
  end;

  TExtDdStatusProxy = class(TExtFunction)
  private
    FDropAllowed : String;
    FDropNotAllowed : String;
    procedure SetFDropAllowed(Value : String);
    procedure SetFDropNotAllowed(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function SetStatus(CssClass : String) : TExtFunction;
    function Reset(ClearGhost : Boolean) : TExtFunction;
    function Update(Html : String) : TExtFunction; overload;
    function Update(Html : THTMLElement) : TExtFunction; overload;
    function GetEl : TExtFunction;
    function GetGhost : TExtFunction;
    function Hide(Clear : Boolean) : TExtFunction;
    function Stop : TExtFunction;
    function Show : TExtFunction;
    function Sync : TExtFunction;
    function Repair(Xy : TArrayOfInteger; Callback : TExtFunction; Scope : TExtObject) : TExtFunction;
    property DropAllowed : String read FDropAllowed write SetFDropAllowed;
    property DropNotAllowed : String read FDropNotAllowed write SetFDropNotAllowed;
  end;

  TExtComponentLoader = class(TExtFunction)
  private
    FTarget : TExtComponent;
    FTargetString : String;
    FLoadMask : Boolean;
    FLoadMaskTExtObject : TExtObject;
    FScripts : Boolean;
    FRenderer : String;
    FRendererTExtFunction : TExtFunction;
    procedure SetFTarget(Value : TExtComponent);
    procedure SetFTargetString(Value : String);
    procedure SetFLoadMask(Value : Boolean);
    procedure SetFLoadMaskTExtObject(Value : TExtObject);
    procedure SetFScripts(Value : Boolean);
    procedure SetFRenderer(Value : String);
    procedure SetFRendererTExtFunction(Value : TExtFunction);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function SetTarget(Target : String) : TExtFunction; overload;
    function SetTarget(Target : TExtComponent) : TExtFunction; overload;
    function SetOptions : TExtFunction;
    destructor Destroy; override;
    property Target : TExtComponent read FTarget write SetFTarget;
    property TargetString : String read FTargetString write SetFTargetString;
    property LoadMask : Boolean read FLoadMask write SetFLoadMask;
    property LoadMaskTExtObject : TExtObject read FLoadMaskTExtObject write SetFLoadMaskTExtObject;
    property Scripts : Boolean read FScripts write SetFScripts;
    property Renderer : String read FRenderer write SetFRenderer;
    property RendererTExtFunction : TExtFunction read FRendererTExtFunction write SetFRendererTExtFunction;
  end;

  TExtChartSeriesRadar = class(TExtFunction)
  private
    FStyle : TExtObject;
    procedure SetFStyle(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function DrawSeries : TExtFunction;
    destructor Destroy; override;
    property Style : TExtObject read FStyle write SetFStyle;
  end;

  TExtPluginManagerSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function FindByType(TypeJS : String; DefaultsOnly : Boolean) : TExtFunction;
    function Preg(Ptype : String; Cls : TExtFunction) : TExtFunction;
  end;

  TExtLayoutContainerAbsolute = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  // Procedural types for events TExtChartChart
  TExtChartChartOnBeforerefresh = procedure(This : TExtChartChart; This_ : TExtChartChart; Resize : Boolean = false) of object;

  TExtChartChart = class(TExtFunction)
  private
    FTheme : String;
    FAnimate : Boolean;
    FAnimateTExtObject : TExtObject;
    FLegend : Boolean;
    FLegendTExtObject : TExtObject;
    FInsetPadding : Integer;
    FEnginePriority : TExtObjectList;
    FBackground : TExtObject;
    FBackgroundBoolean : Boolean;
    FGradients : TExtObjectList;
    FStore : TExtDataStore;
    FSeries : TExtObjectList;
    FAxes : TExtObjectList;
    FOnBeforerefresh : TExtChartChartOnBeforerefresh;
    procedure SetFTheme(Value : String);
    procedure SetFAnimate(Value : Boolean);
    procedure SetFAnimateTExtObject(Value : TExtObject);
    procedure SetFLegend(Value : Boolean);
    procedure SetFLegendTExtObject(Value : TExtObject);
    procedure SetFInsetPadding(Value : Integer);
    procedure SetFEnginePriority(Value : TExtObjectList);
    procedure SetFBackground(Value : TExtObject);
    procedure SetFBackgroundBoolean(Value : Boolean);
    procedure SetFGradients(Value : TExtObjectList);
    procedure SetFStore(Value : TExtDataStore);
    procedure SetFSeries(Value : TExtObjectList);
    procedure SetFAxes(Value : TExtObjectList);
    procedure SetFOnBeforerefresh(Value : TExtChartChartOnBeforerefresh);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function BindStore(Store : TExtDataStore) : TExtFunction;
    destructor Destroy; override;
    property Theme : String read FTheme write SetFTheme;
    property Animate : Boolean read FAnimate write SetFAnimate;
    property AnimateTExtObject : TExtObject read FAnimateTExtObject write SetFAnimateTExtObject;
    property Legend : Boolean read FLegend write SetFLegend;
    property LegendTExtObject : TExtObject read FLegendTExtObject write SetFLegendTExtObject;
    property InsetPadding : Integer read FInsetPadding write SetFInsetPadding;
    property EnginePriority : TExtObjectList read FEnginePriority write SetFEnginePriority;
    property Background : TExtObject read FBackground write SetFBackground;
    property BackgroundBoolean : Boolean read FBackgroundBoolean write SetFBackgroundBoolean;
    property Gradients : TExtObjectList read FGradients write SetFGradients;
    property Store : TExtDataStore read FStore write SetFStore;
    property Series : TExtObjectList read FSeries write SetFSeries;
    property Axes : TExtObjectList read FAxes write SetFAxes;
    property OnBeforerefresh : TExtChartChartOnBeforerefresh read FOnBeforerefresh write SetFOnBeforerefresh;
  end;

  TExtDataProxyRest = class(TExtFunction)
  private
    FAppendId : Boolean;
    FFormat : String;
    FBatchActions : Boolean;
    procedure SetFAppendId(Value : Boolean);
    procedure SetFFormat(Value : String);
    procedure SetFBatchActions(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function BuildUrl(Request : TExtObject) : TExtFunction;
    property AppendId : Boolean read FAppendId write SetFAppendId;
    property Format : String read FFormat write SetFFormat;
    property BatchActions : Boolean read FBatchActions write SetFBatchActions;
  end;

  TExtDirectJsonProvider = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function CreateEvent(Response : TExtObject) : TExtFunction;
  end;

  TExtDataProxyMemory = class(TExtFunction)
  private
    FData : TExtObjectList;
    procedure SetFData(Value : TExtObjectList);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function Read(Operation : TExtDataOperation; Callback : TExtFunction; Scope : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property Data : TExtObjectList read FData write SetFData;
  end;

  TExtDataProxyProxy = class(TExtFunction)
  private
    FBatchOrder : String;
    FBatchActions : Boolean;
    FDefaultReaderType : String;
    FDefaultWriterType : String;
    FModel : String;
    FModelTExtDataModel : TExtDataModel;
    FReader : TExtObject;
    FReaderString : String;
    FReaderTExtDataReaderReader : TExtDataReaderReader;
    FWriter : TExtObject;
    FWriterString : String;
    FWriterTExtDataWriterWriter : TExtDataWriterWriter;
    procedure SetFBatchOrder(Value : String);
    procedure SetFBatchActions(Value : Boolean);
    procedure SetFDefaultReaderType(Value : String);
    procedure SetFDefaultWriterType(Value : String);
    procedure SetFModel(Value : String);
    procedure SetFModelTExtDataModel(Value : TExtDataModel);
    procedure SetFReader(Value : TExtObject);
    procedure SetFReaderString(Value : String);
    procedure SetFReaderTExtDataReaderReader(Value : TExtDataReaderReader);
    procedure SetFWriter(Value : TExtObject);
    procedure SetFWriterString(Value : String);
    procedure SetFWriterTExtDataWriterWriter(Value : TExtDataWriterWriter);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    constructor Create(Config : TExtObject = nil);
    function SetModel(Model : String; SetOnStore : Boolean) : TExtFunction; overload;
    function SetModel(Model : TExtDataModel; SetOnStore : Boolean) : TExtFunction; overload;
    function GetModel : TExtFunction;
    function SetReader(Reader : String) : TExtFunction; overload;
    function SetReader(Reader : TExtObject) : TExtFunction; overload;
    function SetReader(Reader : TExtDataReaderReader) : TExtFunction; overload;
    function GetReader : TExtFunction;
    function SetWriter(Writer : String) : TExtFunction; overload;
    function SetWriter(Writer : TExtObject) : TExtFunction; overload;
    function SetWriter(Writer : TExtDataWriterWriter) : TExtFunction; overload;
    function GetWriter : TExtFunction;
    function Read(Operation : TExtDataOperation; Callback : TExtFunction; Scope : TExtObject) : TExtFunction;
    function Update(Operation : TExtDataOperation; Callback : TExtFunction; Scope : TExtObject) : TExtFunction;
    function DestroyJS(Operation : TExtDataOperation; Callback : TExtFunction; Scope : TExtObject) : TExtFunction; reintroduce;
    function Batch(Operations : TExtObject; Listeners : TExtObject = nil) : TExtFunction;
    destructor Destroy; override;
    property BatchOrder : String read FBatchOrder write SetFBatchOrder;
    property BatchActions : Boolean read FBatchActions write SetFBatchActions;
    property DefaultReaderType : String read FDefaultReaderType write SetFDefaultReaderType;
    property DefaultWriterType : String read FDefaultWriterType write SetFDefaultWriterType;
    property Model : String read FModel write SetFModel;
    property ModelTExtDataModel : TExtDataModel read FModelTExtDataModel write SetFModelTExtDataModel;
    property Reader : TExtObject read FReader write SetFReader;
    property ReaderString : String read FReaderString write SetFReaderString;
    property ReaderTExtDataReaderReader : TExtDataReaderReader read FReaderTExtDataReaderReader write SetFReaderTExtDataReaderReader;
    property Writer : TExtObject read FWriter write SetFWriter;
    property WriterString : String read FWriterString write SetFWriterString;
    property WriterTExtDataWriterWriter : TExtDataWriterWriter read FWriterTExtDataWriterWriter write SetFWriterTExtDataWriterWriter;
  end;

  // Procedural types for events TExtViewView
  TExtViewViewOnBeforeitemmousedown = procedure(This : TExtViewView; RecordJS : TExtDataModel; Item : THTMLElement; Index : Integer; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnBeforeitemmouseup = procedure(This : TExtViewView; RecordJS : TExtDataModel; Item : THTMLElement; Index : Integer; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnBeforeitemmouseenter = procedure(This : TExtViewView; RecordJS : TExtDataModel; Item : THTMLElement; Index : Integer; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnBeforeitemmouseleave = procedure(This : TExtViewView; RecordJS : TExtDataModel; Item : THTMLElement; Index : Integer; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnBeforeitemclick = procedure(This : TExtViewView; RecordJS : TExtDataModel; Item : THTMLElement; Index : Integer; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnBeforeitemdblclick = procedure(This : TExtViewView; RecordJS : TExtDataModel; Item : THTMLElement; Index : Integer; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnBeforeitemcontextmenu = procedure(This : TExtViewView; RecordJS : TExtDataModel; Item : THTMLElement; Index : Integer; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnBeforeitemkeydown = procedure(This : TExtViewView; RecordJS : TExtDataModel; Item : THTMLElement; Index : Integer; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnItemmousedown = procedure(This : TExtViewView; RecordJS : TExtDataModel; Item : THTMLElement; Index : Integer; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnItemmouseup = procedure(This : TExtViewView; RecordJS : TExtDataModel; Item : THTMLElement; Index : Integer; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnItemmouseenter = procedure(This : TExtViewView; RecordJS : TExtDataModel; Item : THTMLElement; Index : Integer; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnItemmouseleave = procedure(This : TExtViewView; RecordJS : TExtDataModel; Item : THTMLElement; Index : Integer; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnItemclick = procedure(This : TExtViewView; RecordJS : TExtDataModel; Item : THTMLElement; Index : Integer; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnItemdblclick = procedure(This : TExtViewView; RecordJS : TExtDataModel; Item : THTMLElement; Index : Integer; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnItemcontextmenu = procedure(This : TExtViewView; RecordJS : TExtDataModel; Item : THTMLElement; Index : Integer; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnItemkeydown = procedure(This : TExtViewView; RecordJS : TExtDataModel; Item : THTMLElement; Index : Integer; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnBeforecontainermousedown = procedure(This : TExtViewView; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnBeforecontainermouseup = procedure(This : TExtViewView; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnBeforecontainermouseover = procedure(This : TExtViewView; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnBeforecontainermouseout = procedure(This : TExtViewView; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnBeforecontainerclick = procedure(This : TExtViewView; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnBeforecontainerdblclick = procedure(This : TExtViewView; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnBeforecontainercontextmenu = procedure(This : TExtViewView; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnBeforecontainerkeydown = procedure(This : TExtViewView; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnContainermouseup = procedure(This : TExtViewView; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnContainermouseover = procedure(This : TExtViewView; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnContainermouseout = procedure(This : TExtViewView; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnContainerclick = procedure(This : TExtViewView; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnContainerdblclick = procedure(This : TExtViewView; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnContainercontextmenu = procedure(This : TExtViewView; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnContainerkeydown = procedure(This : TExtViewView; E : TExtEventObjectSingleton) of object;
  TExtViewViewOnSelectionchange = procedure(This : TExtViewView; Selections : TExtObjectList) of object;
  TExtViewViewOnBeforeselect = procedure(This : TExtViewView; Node : THTMLElement; Selections : TExtObjectList) of object;

  TExtViewView = class(TExtFunction)
  private
    FOnBeforeitemmousedown : TExtViewViewOnBeforeitemmousedown;
    FOnBeforeitemmouseup : TExtViewViewOnBeforeitemmouseup;
    FOnBeforeitemmouseenter : TExtViewViewOnBeforeitemmouseenter;
    FOnBeforeitemmouseleave : TExtViewViewOnBeforeitemmouseleave;
    FOnBeforeitemclick : TExtViewViewOnBeforeitemclick;
    FOnBeforeitemdblclick : TExtViewViewOnBeforeitemdblclick;
    FOnBeforeitemcontextmenu : TExtViewViewOnBeforeitemcontextmenu;
    FOnBeforeitemkeydown : TExtViewViewOnBeforeitemkeydown;
    FOnItemmousedown : TExtViewViewOnItemmousedown;
    FOnItemmouseup : TExtViewViewOnItemmouseup;
    FOnItemmouseenter : TExtViewViewOnItemmouseenter;
    FOnItemmouseleave : TExtViewViewOnItemmouseleave;
    FOnItemclick : TExtViewViewOnItemclick;
    FOnItemdblclick : TExtViewViewOnItemdblclick;
    FOnItemcontextmenu : TExtViewViewOnItemcontextmenu;
    FOnItemkeydown : TExtViewViewOnItemkeydown;
    FOnBeforecontainermousedown : TExtViewViewOnBeforecontainermousedown;
    FOnBeforecontainermouseup : TExtViewViewOnBeforecontainermouseup;
    FOnBeforecontainermouseover : TExtViewViewOnBeforecontainermouseover;
    FOnBeforecontainermouseout : TExtViewViewOnBeforecontainermouseout;
    FOnBeforecontainerclick : TExtViewViewOnBeforecontainerclick;
    FOnBeforecontainerdblclick : TExtViewViewOnBeforecontainerdblclick;
    FOnBeforecontainercontextmenu : TExtViewViewOnBeforecontainercontextmenu;
    FOnBeforecontainerkeydown : TExtViewViewOnBeforecontainerkeydown;
    FOnContainermouseup : TExtViewViewOnContainermouseup;
    FOnContainermouseover : TExtViewViewOnContainermouseover;
    FOnContainermouseout : TExtViewViewOnContainermouseout;
    FOnContainerclick : TExtViewViewOnContainerclick;
    FOnContainerdblclick : TExtViewViewOnContainerdblclick;
    FOnContainercontextmenu : TExtViewViewOnContainercontextmenu;
    FOnContainerkeydown : TExtViewViewOnContainerkeydown;
    FOnSelectionchange : TExtViewViewOnSelectionchange;
    FOnBeforeselect : TExtViewViewOnBeforeselect;
    procedure SetFOnBeforeitemmousedown(Value : TExtViewViewOnBeforeitemmousedown);
    procedure SetFOnBeforeitemmouseup(Value : TExtViewViewOnBeforeitemmouseup);
    procedure SetFOnBeforeitemmouseenter(Value : TExtViewViewOnBeforeitemmouseenter);
    procedure SetFOnBeforeitemmouseleave(Value : TExtViewViewOnBeforeitemmouseleave);
    procedure SetFOnBeforeitemclick(Value : TExtViewViewOnBeforeitemclick);
    procedure SetFOnBeforeitemdblclick(Value : TExtViewViewOnBeforeitemdblclick);
    procedure SetFOnBeforeitemcontextmenu(Value : TExtViewViewOnBeforeitemcontextmenu);
    procedure SetFOnBeforeitemkeydown(Value : TExtViewViewOnBeforeitemkeydown);
    procedure SetFOnItemmousedown(Value : TExtViewViewOnItemmousedown);
    procedure SetFOnItemmouseup(Value : TExtViewViewOnItemmouseup);
    procedure SetFOnItemmouseenter(Value : TExtViewViewOnItemmouseenter);
    procedure SetFOnItemmouseleave(Value : TExtViewViewOnItemmouseleave);
    procedure SetFOnItemclick(Value : TExtViewViewOnItemclick);
    procedure SetFOnItemdblclick(Value : TExtViewViewOnItemdblclick);
    procedure SetFOnItemcontextmenu(Value : TExtViewViewOnItemcontextmenu);
    procedure SetFOnItemkeydown(Value : TExtViewViewOnItemkeydown);
    procedure SetFOnBeforecontainermousedown(Value : TExtViewViewOnBeforecontainermousedown);
    procedure SetFOnBeforecontainermouseup(Value : TExtViewViewOnBeforecontainermouseup);
    procedure SetFOnBeforecontainermouseover(Value : TExtViewViewOnBeforecontainermouseover);
    procedure SetFOnBeforecontainermouseout(Value : TExtViewViewOnBeforecontainermouseout);
    procedure SetFOnBeforecontainerclick(Value : TExtViewViewOnBeforecontainerclick);
    procedure SetFOnBeforecontainerdblclick(Value : TExtViewViewOnBeforecontainerdblclick);
    procedure SetFOnBeforecontainercontextmenu(Value : TExtViewViewOnBeforecontainercontextmenu);
    procedure SetFOnBeforecontainerkeydown(Value : TExtViewViewOnBeforecontainerkeydown);
    procedure SetFOnContainermouseup(Value : TExtViewViewOnContainermouseup);
    procedure SetFOnContainermouseover(Value : TExtViewViewOnContainermouseover);
    procedure SetFOnContainermouseout(Value : TExtViewViewOnContainermouseout);
    procedure SetFOnContainerclick(Value : TExtViewViewOnContainerclick);
    procedure SetFOnContainerdblclick(Value : TExtViewViewOnContainerdblclick);
    procedure SetFOnContainercontextmenu(Value : TExtViewViewOnContainercontextmenu);
    procedure SetFOnContainerkeydown(Value : TExtViewViewOnContainerkeydown);
    procedure SetFOnSelectionchange(Value : TExtViewViewOnSelectionchange);
    procedure SetFOnBeforeselect(Value : TExtViewViewOnBeforeselect);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function HighlightItem(Item : THTMLElement) : TExtFunction;
    function ClearHighlight : TExtFunction;
    property OnBeforeitemmousedown : TExtViewViewOnBeforeitemmousedown read FOnBeforeitemmousedown write SetFOnBeforeitemmousedown;
    property OnBeforeitemmouseup : TExtViewViewOnBeforeitemmouseup read FOnBeforeitemmouseup write SetFOnBeforeitemmouseup;
    property OnBeforeitemmouseenter : TExtViewViewOnBeforeitemmouseenter read FOnBeforeitemmouseenter write SetFOnBeforeitemmouseenter;
    property OnBeforeitemmouseleave : TExtViewViewOnBeforeitemmouseleave read FOnBeforeitemmouseleave write SetFOnBeforeitemmouseleave;
    property OnBeforeitemclick : TExtViewViewOnBeforeitemclick read FOnBeforeitemclick write SetFOnBeforeitemclick;
    property OnBeforeitemdblclick : TExtViewViewOnBeforeitemdblclick read FOnBeforeitemdblclick write SetFOnBeforeitemdblclick;
    property OnBeforeitemcontextmenu : TExtViewViewOnBeforeitemcontextmenu read FOnBeforeitemcontextmenu write SetFOnBeforeitemcontextmenu;
    property OnBeforeitemkeydown : TExtViewViewOnBeforeitemkeydown read FOnBeforeitemkeydown write SetFOnBeforeitemkeydown;
    property OnItemmousedown : TExtViewViewOnItemmousedown read FOnItemmousedown write SetFOnItemmousedown;
    property OnItemmouseup : TExtViewViewOnItemmouseup read FOnItemmouseup write SetFOnItemmouseup;
    property OnItemmouseenter : TExtViewViewOnItemmouseenter read FOnItemmouseenter write SetFOnItemmouseenter;
    property OnItemmouseleave : TExtViewViewOnItemmouseleave read FOnItemmouseleave write SetFOnItemmouseleave;
    property OnItemclick : TExtViewViewOnItemclick read FOnItemclick write SetFOnItemclick;
    property OnItemdblclick : TExtViewViewOnItemdblclick read FOnItemdblclick write SetFOnItemdblclick;
    property OnItemcontextmenu : TExtViewViewOnItemcontextmenu read FOnItemcontextmenu write SetFOnItemcontextmenu;
    property OnItemkeydown : TExtViewViewOnItemkeydown read FOnItemkeydown write SetFOnItemkeydown;
    property OnBeforecontainermousedown : TExtViewViewOnBeforecontainermousedown read FOnBeforecontainermousedown write SetFOnBeforecontainermousedown;
    property OnBeforecontainermouseup : TExtViewViewOnBeforecontainermouseup read FOnBeforecontainermouseup write SetFOnBeforecontainermouseup;
    property OnBeforecontainermouseover : TExtViewViewOnBeforecontainermouseover read FOnBeforecontainermouseover write SetFOnBeforecontainermouseover;
    property OnBeforecontainermouseout : TExtViewViewOnBeforecontainermouseout read FOnBeforecontainermouseout write SetFOnBeforecontainermouseout;
    property OnBeforecontainerclick : TExtViewViewOnBeforecontainerclick read FOnBeforecontainerclick write SetFOnBeforecontainerclick;
    property OnBeforecontainerdblclick : TExtViewViewOnBeforecontainerdblclick read FOnBeforecontainerdblclick write SetFOnBeforecontainerdblclick;
    property OnBeforecontainercontextmenu : TExtViewViewOnBeforecontainercontextmenu read FOnBeforecontainercontextmenu write SetFOnBeforecontainercontextmenu;
    property OnBeforecontainerkeydown : TExtViewViewOnBeforecontainerkeydown read FOnBeforecontainerkeydown write SetFOnBeforecontainerkeydown;
    property OnContainermouseup : TExtViewViewOnContainermouseup read FOnContainermouseup write SetFOnContainermouseup;
    property OnContainermouseover : TExtViewViewOnContainermouseover read FOnContainermouseover write SetFOnContainermouseover;
    property OnContainermouseout : TExtViewViewOnContainermouseout read FOnContainermouseout write SetFOnContainermouseout;
    property OnContainerclick : TExtViewViewOnContainerclick read FOnContainerclick write SetFOnContainerclick;
    property OnContainerdblclick : TExtViewViewOnContainerdblclick read FOnContainerdblclick write SetFOnContainerdblclick;
    property OnContainercontextmenu : TExtViewViewOnContainercontextmenu read FOnContainercontextmenu write SetFOnContainercontextmenu;
    property OnContainerkeydown : TExtViewViewOnContainerkeydown read FOnContainerkeydown write SetFOnContainerkeydown;
    property OnSelectionchange : TExtViewViewOnSelectionchange read FOnSelectionchange write SetFOnSelectionchange;
    property OnBeforeselect : TExtViewViewOnBeforeselect read FOnBeforeselect write SetFOnBeforeselect;
  end;

  // Procedural types for events TExtFormFieldPicker
  TExtFormFieldPickerOnExpand = procedure(Field : TExtFormFieldPicker) of object;
  TExtFormFieldPickerOnCollapse = procedure(Field : TExtFormFieldPicker) of object;
  TExtFormFieldPickerOnSelect = procedure(Field : TExtFormFieldPicker; Value : TExtObject) of object;

  TExtFormFieldPicker = class(TExtFunction)
  private
    FMatchFieldWidth : Boolean;
    FPickerAlign : String;
    FPickerOffset : TArrayOfInteger;
    FOpenCls : String;
    FEditable : Boolean;
    FOnExpand : TExtFormFieldPickerOnExpand;
    FOnCollapse : TExtFormFieldPickerOnCollapse;
    FOnSelect : TExtFormFieldPickerOnSelect;
    procedure SetFMatchFieldWidth(Value : Boolean);
    procedure SetFPickerAlign(Value : String);
    procedure SetFPickerOffset(Value : TArrayOfInteger);
    procedure SetFOpenCls(Value : String);
    procedure SetFEditable(Value : Boolean);
    procedure SetFOnExpand(Value : TExtFormFieldPickerOnExpand);
    procedure SetFOnCollapse(Value : TExtFormFieldPickerOnCollapse);
    procedure SetFOnSelect(Value : TExtFormFieldPickerOnSelect);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Expand : TExtFunction;
    function Collapse : TExtFunction;
    function GetPicker : TExtFunction;
    function CreatePicker : TExtFunction;
    property MatchFieldWidth : Boolean read FMatchFieldWidth write SetFMatchFieldWidth;
    property PickerAlign : String read FPickerAlign write SetFPickerAlign;
    property PickerOffset : TArrayOfInteger read FPickerOffset write SetFPickerOffset;
    property OpenCls : String read FOpenCls write SetFOpenCls;
    property Editable : Boolean read FEditable write SetFEditable;
    property OnExpand : TExtFormFieldPickerOnExpand read FOnExpand write SetFOnExpand;
    property OnCollapse : TExtFormFieldPickerOnCollapse read FOnCollapse write SetFOnCollapse;
    property OnSelect : TExtFormFieldPickerOnSelect read FOnSelect write SetFOnSelect;
  end;

  // Procedural types for events TExtTabBar
  TExtTabBarOnChange = procedure(TabBar : TExtTabBar; Tab : TExtTabTab; Card : TExtComponent) of object;

  TExtTabBar = class(TExtFunction)
  private
    FTitle : String;
    FIconCls : String;
    FPlain : Boolean;
    FMinTabWidth : Integer;
    FMaxTabWidth : Integer;
    FOnChange : TExtTabBarOnChange;
    procedure SetFTitle(Value : String);
    procedure SetFIconCls(Value : String);
    procedure SetFPlain(Value : Boolean);
    procedure SetFMinTabWidth(Value : Integer);
    procedure SetFMaxTabWidth(Value : Integer);
    procedure SetFOnChange(Value : TExtTabBarOnChange);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property Title : String read FTitle write SetFTitle;
    property IconCls : String read FIconCls write SetFIconCls;
    property Plain : Boolean read FPlain write SetFPlain;
    property MinTabWidth : Integer read FMinTabWidth write SetFMinTabWidth;
    property MaxTabWidth : Integer read FMaxTabWidth write SetFMaxTabWidth;
    property OnChange : TExtTabBarOnChange read FOnChange write SetFOnChange;
  end;

  TExtViewBoundListKeyNav = class(TExtFunction)
  private
    FBoundList : TExtViewBoundList;
    procedure SetFBoundList(Value : TExtViewBoundList);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function HighlightAt(Index : Integer) : TExtFunction;
    function SelectHighlighted : TExtFunction;
    destructor Destroy; override;
    property BoundList : TExtViewBoundList read FBoundList write SetFBoundList;
  end;

  // Procedural types for events TExtSelectionModel
  TExtSelectionModelOnSelectionchange = procedure(This : TExtSelectionModel; Selected : TExtObjectList) of object;

  TExtSelectionModel = class(TExtFunction)
  private
    FMode : String;
    FAllowDeselect : Boolean;
    FOnSelectionchange : TExtSelectionModelOnSelectionchange;
    procedure SetFMode(Value : String);
    procedure SetFAllowDeselect(Value : Boolean);
    procedure SetFOnSelectionchange(Value : TExtSelectionModelOnSelectionchange);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function SelectAll(SuppressEvent : Boolean) : TExtFunction;
    function DeselectAll(SuppressEvent : Boolean) : TExtFunction;
    function SelectRange(StartRow : TExtDataModel; EndRow : TExtDataModel; KeepExisting : Boolean = false) : TExtFunction; overload;
    function SelectRange(StartRow : Integer; EndRow : TExtDataModel; KeepExisting : Boolean = false) : TExtFunction; overload;
    function SelectRange(StartRow : Integer; EndRow : Integer; KeepExisting : Boolean = false) : TExtFunction; overload;
    function SelectRange(StartRow : TExtDataModel; EndRow : Integer; KeepExisting : Boolean = false) : TExtFunction; overload;
    function Select(Records : TExtObjectList; KeepExisting : Boolean = false; SuppressEvent : Boolean = false) : TExtFunction; overload;
    function Select(Records : Integer; KeepExisting : Boolean = false; SuppressEvent : Boolean = false) : TExtFunction; overload;
    function Deselect(Records : TExtObjectList; SuppressEvent : Boolean = false) : TExtFunction; overload;
    function Deselect(Records : Integer; SuppressEvent : Boolean = false) : TExtFunction; overload;
    function SetLastFocused(RecordJS : TExtDataModel; RecordJS_ : TExtDataModel) : TExtFunction;
    function GetLastSelected : TExtFunction;
    function GetSelection : TExtFunction;
    function GetSelectionMode : TExtFunction;
    function SetSelectionMode(SelModel : String) : TExtFunction;
    function IsLocked : TExtFunction;
    function SetLocked(Locked : Boolean) : TExtFunction;
    function IsSelected(RecordJS : TExtDataModel) : TExtFunction; overload;
    function IsSelected(RecordJS : Integer) : TExtFunction; overload;
    function HasSelection : TExtFunction;
    function GetCount : TExtFunction;
    property Mode : String read FMode write SetFMode;
    property AllowDeselect : Boolean read FAllowDeselect write SetFAllowDeselect;
    property OnSelectionchange : TExtSelectionModelOnSelectionchange read FOnSelectionchange write SetFOnSelectionchange;
  end;

  // Procedural types for events TExtEditor
  TExtEditorOnBeforestartedit = procedure(This : TExtEditor; BoundEl : TExtElement; Value : TExtObject) of object;
  TExtEditorOnStartedit = procedure(This : TExtEditor; BoundEl : TExtElement; Value : TExtObject) of object;
  TExtEditorOnBeforecomplete = procedure(This : TExtEditor; Value : TExtObject; StartValue : TExtObject) of object;
  TExtEditorOnComplete = procedure(This : TExtEditor; Value : TExtObject; StartValue : TExtObject) of object;
  TExtEditorOnCanceledit = procedure(This : TExtEditor; Value : TExtObject; StartValue : TExtObject) of object;
  TExtEditorOnSpecialkey = procedure(This : TExtEditor; The : TExtFormFieldField; Event : TExtEventObjectSingleton) of object;

  TExtEditor = class(TExtFunction)
  private
    FField : TExtFormFieldField;
    FAllowBlur : Boolean;
    FAutoSize : Boolean;
    FAutoSizeTExtObject : TExtObject;
    FRevertInvalid : Boolean;
    FIgnoreNoChange : Boolean;
    FHideEl : Boolean;
    FValue : TExtObject;
    FAlignment : String;
    FOffsets : TArrayOfInteger;
    FShadow : Boolean;
    FShadowString : String;
    FConstrain : Boolean;
    FSwallowKeys : Boolean;
    FCompleteOnEnter : Boolean;
    FCancelOnEsc : Boolean;
    FUpdateEl : Boolean;
    FParentEl : String;
    FParentElTHTMLElement : THTMLElement;
    FParentElTExtElement : TExtElement;
    FOnBeforestartedit : TExtEditorOnBeforestartedit;
    FOnStartedit : TExtEditorOnStartedit;
    FOnBeforecomplete : TExtEditorOnBeforecomplete;
    FOnComplete : TExtEditorOnComplete;
    FOnCanceledit : TExtEditorOnCanceledit;
    FOnSpecialkey : TExtEditorOnSpecialkey;
    procedure SetFField(Value : TExtFormFieldField);
    procedure SetFAllowBlur(Value : Boolean);
    procedure SetFAutoSize(Value : Boolean);
    procedure SetFAutoSizeTExtObject(Value : TExtObject);
    procedure SetFRevertInvalid(Value : Boolean);
    procedure SetFIgnoreNoChange(Value : Boolean);
    procedure SetFHideEl(Value : Boolean);
    procedure SetFValue(Value : TExtObject);
    procedure SetFAlignment(Value : String);
    procedure SetFOffsets(Value : TArrayOfInteger);
    procedure SetFShadow(Value : Boolean);
    procedure SetFShadowString(Value : String);
    procedure SetFConstrain(Value : Boolean);
    procedure SetFSwallowKeys(Value : Boolean);
    procedure SetFCompleteOnEnter(Value : Boolean);
    procedure SetFCancelOnEsc(Value : Boolean);
    procedure SetFUpdateEl(Value : Boolean);
    procedure SetFParentEl(Value : String);
    procedure SetFParentElTHTMLElement(Value : THTMLElement);
    procedure SetFParentElTExtElement(Value : TExtElement);
    procedure SetFOnBeforestartedit(Value : TExtEditorOnBeforestartedit);
    procedure SetFOnStartedit(Value : TExtEditorOnStartedit);
    procedure SetFOnBeforecomplete(Value : TExtEditorOnBeforecomplete);
    procedure SetFOnComplete(Value : TExtEditorOnComplete);
    procedure SetFOnCanceledit(Value : TExtEditorOnCanceledit);
    procedure SetFOnSpecialkey(Value : TExtEditorOnSpecialkey);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function StartEdit(El : String; Value : String = '') : TExtFunction; overload;
    function StartEdit(El : THTMLElement; Value : String = '') : TExtFunction; overload;
    function StartEdit(El : TExtElement; Value : String = '') : TExtFunction; overload;
    function Realign(AutoSize : Boolean = false) : TExtFunction;
    function CompleteEdit(RemainVisible : Boolean = false) : TExtFunction;
    function CancelEdit(RemainVisible : Boolean = false) : TExtFunction;
    function SetValue(Value : TExtObject) : TExtFunction;
    function GetValue : TExtFunction;
    destructor Destroy; override;
    property Field : TExtFormFieldField read FField write SetFField;
    property AllowBlur : Boolean read FAllowBlur write SetFAllowBlur;
    property AutoSize : Boolean read FAutoSize write SetFAutoSize;
    property AutoSizeTExtObject : TExtObject read FAutoSizeTExtObject write SetFAutoSizeTExtObject;
    property RevertInvalid : Boolean read FRevertInvalid write SetFRevertInvalid;
    property IgnoreNoChange : Boolean read FIgnoreNoChange write SetFIgnoreNoChange;
    property HideEl : Boolean read FHideEl write SetFHideEl;
    property Value : TExtObject read FValue write SetFValue;
    property Alignment : String read FAlignment write SetFAlignment;
    property Offsets : TArrayOfInteger read FOffsets write SetFOffsets;
    property Shadow : Boolean read FShadow write SetFShadow;
    property ShadowString : String read FShadowString write SetFShadowString;
    property Constrain : Boolean read FConstrain write SetFConstrain;
    property SwallowKeys : Boolean read FSwallowKeys write SetFSwallowKeys;
    property CompleteOnEnter : Boolean read FCompleteOnEnter write SetFCompleteOnEnter;
    property CancelOnEsc : Boolean read FCancelOnEsc write SetFCancelOnEsc;
    property UpdateEl : Boolean read FUpdateEl write SetFUpdateEl;
    property ParentEl : String read FParentEl write SetFParentEl;
    property ParentElTHTMLElement : THTMLElement read FParentElTHTMLElement write SetFParentElTHTMLElement;
    property ParentElTExtElement : TExtElement read FParentElTExtElement write SetFParentElTExtElement;
    property OnBeforestartedit : TExtEditorOnBeforestartedit read FOnBeforestartedit write SetFOnBeforestartedit;
    property OnStartedit : TExtEditorOnStartedit read FOnStartedit write SetFOnStartedit;
    property OnBeforecomplete : TExtEditorOnBeforecomplete read FOnBeforecomplete write SetFOnBeforecomplete;
    property OnComplete : TExtEditorOnComplete read FOnComplete write SetFOnComplete;
    property OnCanceledit : TExtEditorOnCanceledit read FOnCanceledit write SetFOnCanceledit;
    property OnSpecialkey : TExtEditorOnSpecialkey read FOnSpecialkey write SetFOnSpecialkey;
  end;

  TObject = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Value : TExtObject = nil);
    function HasOwnProperty(Prop : String) : TExtFunction;
    function IsPrototypeOf(Prototype : TExtObject; ObjectJS : TExtObject) : TExtFunction;
    function PropertyIsEnumerable(Prop : String) : TExtFunction;
    function ToLocaleString : TExtFunction;
    function ToString : TExtFunction;
    function ValueOf : TExtFunction;
  end;

  TExtGridColumnDate = class(TExtFunction)
  private
    FFormat : String;
    procedure SetFFormat(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property Format : String read FFormat write SetFFormat;
  end;

  TExtChartThemeTheme = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtDataSortTypesSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function None(S : TExtObject) : TExtFunction;
    function AsText(S : TExtObject) : TExtFunction;
    function AsUCText(S : TExtObject) : TExtFunction;
    function AsUCString(S : TExtObject) : TExtFunction;
    function AsDate(S : TExtObject) : TExtFunction;
    function AsFloat(S : TExtObject) : TExtFunction;
    function AsInt(S : TExtObject) : TExtFunction;
  end;

  TExtDdDDProxy = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Id : String; SGroup : String; Config : TExtObject);
    function CreateFrame : TExtFunction;
    function InitFrame : TExtFunction;
  end;

  TExtAbstractManager = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Get(Id : String) : TExtFunction;
    function Register(Item : TExtObject) : TExtFunction;
    function Unregister(Item : TExtObject) : TExtFunction;
    function RegisterType(TypeJS : String; Cls : TExtFunction) : TExtFunction;
    function IsRegistered(TypeJS : String) : TExtFunction;
    function OnAvailable(Id : String; Fn : TExtFunction; Scope : TExtObject) : TExtFunction;
    function Each(Fn : TExtFunction; FnKey : String; FnValue : Integer; FnLength : Integer; FnReturn : Boolean; Scope : TExtObject) : TExtFunction;
    function GetCount : TExtFunction;
  end;

  // Procedural types for events TExtSelectionCellModel
  TExtSelectionCellModelOnDeselect = procedure(This : TExtSelectionCellModel; RecordJS : TExtDataModel; Row : Integer; Column : Integer) of object;
  TExtSelectionCellModelOnSelect = procedure(This : TExtSelectionCellModel; RecordJS : TExtDataModel; Row : Integer; Column : Integer) of object;

  TExtSelectionCellModel = class(TExtFunction)
  private
    FEnableKeyNav : Boolean;
    FPreventWrap : Boolean;
    FOnDeselect : TExtSelectionCellModelOnDeselect;
    FOnSelect : TExtSelectionCellModelOnSelect;
    procedure SetFEnableKeyNav(Value : Boolean);
    procedure SetFPreventWrap(Value : Boolean);
    procedure SetFOnDeselect(Value : TExtSelectionCellModelOnDeselect);
    procedure SetFOnSelect(Value : TExtSelectionCellModelOnSelect);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetCurrentPosition : TExtFunction;
    function SetCurrentPosition(Position : TExtObject) : TExtFunction;
    property EnableKeyNav : Boolean read FEnableKeyNav write SetFEnableKeyNav;
    property PreventWrap : Boolean read FPreventWrap write SetFPreventWrap;
    property OnDeselect : TExtSelectionCellModelOnDeselect read FOnDeselect write SetFOnDeselect;
    property OnSelect : TExtSelectionCellModelOnSelect read FOnSelect write SetFOnSelect;
  end;

  TExtFormRadioGroup = class(TExtFunction)
  private
    FItems : TExtObjectList;
    FItemsTExtObjectList : TExtObjectList;
    FAllowBlank : Boolean;
    FBlankText : String;
    procedure SetFItems(Value : TExtObjectList);
    procedure SetFItemsTExtObjectList(Value : TExtObjectList);
    procedure SetFAllowBlank(Value : Boolean);
    procedure SetFBlankText(Value : String);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function SetValue(Value : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property Items : TExtObjectList read FItems write SetFItems;
    property ItemsTExtObjectList : TExtObjectList read FItemsTExtObjectList write SetFItemsTExtObjectList;
    property AllowBlank : Boolean read FAllowBlank write SetFAllowBlank;
    property BlankText : String read FBlankText write SetFBlankText;
  end;

  TExtViewTable = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetRowClass(RecordJS : TExtDataModel; Index : Integer; RowParams : TExtObject; Store : TExtDataStore) : TExtFunction;
    function GetFeature(Id : String) : TExtFunction;
    function GetTableChunker : TExtFunction;
    function AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; overload;
    function AddRowCls(RowInfo : String; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; overload;
    function AddRowCls(RowInfo : String; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; overload;
    function AddRowCls(RowInfo : String; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : String) : TExtFunction; overload;
    function AddRowCls(RowInfo : String; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : Integer) : TExtFunction; overload;
    function AddRowCls(RowInfo : String; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; overload;
    function AddRowCls(RowInfo : String; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; overload;
    function AddRowCls(RowInfo : String; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : String) : TExtFunction; overload;
    function AddRowCls(RowInfo : String; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : Integer) : TExtFunction; overload;
    function AddRowCls(RowInfo : String; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; overload;
    function AddRowCls(RowInfo : String; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; overload;
    function AddRowCls(RowInfo : String; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : String) : TExtFunction; overload;
    function AddRowCls(RowInfo : String; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : Integer) : TExtFunction; overload;
    function AddRowCls(RowInfo : String; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; overload;
    function AddRowCls(RowInfo : String; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : String) : TExtFunction; overload;
    function AddRowCls(RowInfo : String; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : Integer) : TExtFunction; overload;
    function AddRowCls(RowInfo : String; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; overload;
    function AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; overload;
    function AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; overload;
    function AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : String) : TExtFunction; overload;
    function AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : Integer) : TExtFunction; overload;
    function AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; overload;
    function AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; overload;
    function AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : String) : TExtFunction; overload;
    function AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : Integer) : TExtFunction; overload;
    function AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; overload;
    function AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; overload;
    function AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : String) : TExtFunction; overload;
    function AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : Integer) : TExtFunction; overload;
    function AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; overload;
    function AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : String) : TExtFunction; overload;
    function AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : Integer) : TExtFunction; overload;
    function AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; overload;
    function AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; overload;
    function AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; overload;
    function AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : String) : TExtFunction; overload;
    function AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : Integer) : TExtFunction; overload;
    function AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; overload;
    function AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; overload;
    function AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : String) : TExtFunction; overload;
    function AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : Integer) : TExtFunction; overload;
    function AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; overload;
    function AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; overload;
    function AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : String) : TExtFunction; overload;
    function AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : Integer) : TExtFunction; overload;
    function AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; overload;
    function AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : String) : TExtFunction; overload;
    function AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : Integer) : TExtFunction; overload;
    function AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; overload;
    function AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; overload;
    function AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : String) : TExtFunction; overload;
    function AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : Integer) : TExtFunction; overload;
    function AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; overload;
    function AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; overload;
    function AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : String) : TExtFunction; overload;
    function AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : Integer) : TExtFunction; overload;
    function AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; overload;
    function AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; overload;
    function AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : String) : TExtFunction; overload;
    function AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : Integer) : TExtFunction; overload;
    function AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; overload;
    function AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : String) : TExtFunction; overload;
    function AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : Integer) : TExtFunction; overload;
    function AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; overload;
    function SaveScrollState : TExtFunction;
    function Refresh : TExtFunction;
  end;

  // Procedural types for events TExtFxAnim
  TExtFxAnimOnBeforeanimate = procedure(This : TExtFxAnim; This_ : TExtFxAnim; StartTime : TDateTime; This__ : TExtFxAnim; StartTime_ : TDateTime) of object;

  TExtFxAnim = class(TExtFunction)
  private
    FCallback : TExtFunction;
    FScope : TExtFunction;
    FDuration : Integer;
    FDelay : Integer;
    FDynamic : Boolean;
    FEasing : String;
    FKeyframes : TExtObject;
    FReverse : Boolean;
    FIterations : Integer;
    FAlternate : Boolean;
    FTarget : String;
    FTargetTExtObject : TExtObject;
    FFrom : TExtObject;
    FToJS : TExtObject;
    FOnBeforeanimate : TExtFxAnimOnBeforeanimate;
    procedure SetFCallback(Value : TExtFunction);
    procedure SetFScope(Value : TExtFunction);
    procedure SetFDuration(Value : Integer);
    procedure SetFDelay(Value : Integer);
    procedure SetFDynamic(Value : Boolean);
    procedure SetFEasing(Value : String);
    procedure SetFKeyframes(Value : TExtObject);
    procedure SetFReverse(Value : Boolean);
    procedure SetFIterations(Value : Integer);
    procedure SetFAlternate(Value : Boolean);
    procedure SetFTarget(Value : String);
    procedure SetFTargetTExtObject(Value : TExtObject);
    procedure SetFFrom(Value : TExtObject);
    procedure SetFToJS(Value : TExtObject);
    procedure SetFOnBeforeanimate(Value : TExtFxAnimOnBeforeanimate);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function EndJS : TExtFunction;
    destructor Destroy; override;
    property Callback : TExtFunction read FCallback write SetFCallback;
    property Scope : TExtFunction read FScope write SetFScope;
    property Duration : Integer read FDuration write SetFDuration;
    property Delay : Integer read FDelay write SetFDelay;
    property Dynamic : Boolean read FDynamic write SetFDynamic;
    property Easing : String read FEasing write SetFEasing;
    property Keyframes : TExtObject read FKeyframes write SetFKeyframes;
    property Reverse : Boolean read FReverse write SetFReverse;
    property Iterations : Integer read FIterations write SetFIterations;
    property Alternate : Boolean read FAlternate write SetFAlternate;
    property Target : String read FTarget write SetFTarget;
    property TargetTExtObject : TExtObject read FTargetTExtObject write SetFTargetTExtObject;
    property From : TExtObject read FFrom write SetFFrom;
    property ToJS : TExtObject read FToJS write SetFToJS;
    property OnBeforeanimate : TExtFxAnimOnBeforeanimate read FOnBeforeanimate write SetFOnBeforeanimate;
  end;

  TExtLoaderSingleton = class(TExtFunction)
  private
    FEnabled : Boolean;
    FDisableCaching : Boolean;
    FDisableCachingParam : String;
    FPaths : TExtObject;
    FRequires : TExtObjectList;
    FUsesJS : TExtObjectList;
    procedure SetFEnabled(Value : Boolean);
    procedure SetFDisableCaching(Value : Boolean);
    procedure SetFDisableCachingParam(Value : String);
    procedure SetFPaths(Value : TExtObject);
    procedure SetFRequires(Value : TExtObjectList);
    procedure SetFUsesJS(Value : TExtObjectList);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    destructor Destroy; override;
    property Enabled : Boolean read FEnabled write SetFEnabled;
    property DisableCaching : Boolean read FDisableCaching write SetFDisableCaching;
    property DisableCachingParam : String read FDisableCachingParam write SetFDisableCachingParam;
    property Paths : TExtObject read FPaths write SetFPaths;
    property Requires : TExtObjectList read FRequires write SetFRequires;
    property UsesJS : TExtObjectList read FUsesJS write SetFUsesJS;
  end;

  TExtGridPanel = class(TExtFunction)
  private
    FColumnLines : Boolean;
    procedure SetFColumnLines(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property ColumnLines : Boolean read FColumnLines write SetFColumnLines;
  end;

  TExtUtilAnimate = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Animate(Config : TExtObject) : TExtFunction;
    function StopFx : TExtFunction;
    function StopAnimation : TExtFunction;
    function SyncFx : TExtFunction;
    function SequenceFx : TExtFunction;
    function HasActiveFx : TExtFunction;
    function GetActiveAnimation : TExtFunction;
  end;

  // Procedural types for events TExtStateProvider
  TExtStateProviderOnStatechange = procedure(This : TExtStateProvider; Key : String; Value : String) of object;

  TExtStateProvider = class(TExtFunction)
  private
    FPrefix : String;
    FOnStatechange : TExtStateProviderOnStatechange;
    procedure SetFPrefix(Value : String);
    procedure SetFOnStatechange(Value : TExtStateProviderOnStatechange);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Get(Name : String; DefaultValue : TExtObject) : TExtFunction;
    function Clear(Name : String) : TExtFunction;
    function SetJS(Name : String; Value : TExtObject) : TExtFunction;
    function DecodeValue(Value : String) : TExtFunction;
    function EncodeValue(Value : TExtObject) : TExtFunction;
    property Prefix : String read FPrefix write SetFPrefix;
    property OnStatechange : TExtStateProviderOnStatechange read FOnStatechange write SetFOnStatechange;
  end;

  TExtLayoutLayout = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function DestroyJS : TExtFunction; override;
  end;

  TExtFxTargetCompositeSprite = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtChartCallout = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtFormFieldFile = class(TExtFunction)
  private
    FButtonText : String;
    FButtonOnly : Boolean;
    FButtonMargin : Integer;
    FButtonConfig : TExtObject;
    FFieldBodyCls : String;
    FReadOnly : Boolean;
    procedure SetFButtonText(Value : String);
    procedure SetFButtonOnly(Value : Boolean);
    procedure SetFButtonMargin(Value : Integer);
    procedure SetFButtonConfig(Value : TExtObject);
    procedure SetFFieldBodyCls(Value : String);
    procedure SetFReadOnly(Value : Boolean);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    destructor Destroy; override;
    property ButtonText : String read FButtonText write SetFButtonText;
    property ButtonOnly : Boolean read FButtonOnly write SetFButtonOnly;
    property ButtonMargin : Integer read FButtonMargin write SetFButtonMargin;
    property ButtonConfig : TExtObject read FButtonConfig write SetFButtonConfig;
    property FieldBodyCls : String read FFieldBodyCls write SetFFieldBodyCls;
    property ReadOnly : Boolean read FReadOnly write SetFReadOnly;
  end;

  TExtViewTableChunkerSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtGridFeatureRowBody = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetAdditionalData(Data : TExtObject; Idx : Integer; RecordJS : TExtDataModel; Orig : TExtObject) : TExtFunction;
  end;

  TExtDdDragZone = class(TExtFunction)
  private
    FContainerScroll : Boolean;
    procedure SetFContainerScroll(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetDragData(E : TEvent) : TExtFunction;
    function OnInitDrag(X : Integer; Y : Integer) : TExtFunction;
    function AfterRepair : TExtFunction;
    function GetRepairXY(E : TEvent) : TExtFunction;
    property ContainerScroll : Boolean read FContainerScroll write SetFContainerScroll;
  end;

  TExtFormPanel = class(TExtFunction)
  private
    FPollForChanges : Boolean;
    FPollInterval : Integer;
    FLayout : String;
    procedure SetFPollForChanges(Value : Boolean);
    procedure SetFPollInterval(Value : Integer);
    procedure SetFLayout(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetForm : TExtFunction;
    function LoadRecord(RecordJS : TExtDataModel) : TExtFunction;
    function GetRecord : TExtFunction;
    function GetValues : TExtFunction;
    function Load(Options : TExtObject) : TExtFunction;
    function Submit(Options : TExtObject) : TExtFunction;
    function StartPolling(Interval : Integer) : TExtFunction;
    function StopPolling : TExtFunction;
    function CheckChange : TExtFunction;
    property PollForChanges : Boolean read FPollForChanges write SetFPollForChanges;
    property PollInterval : Integer read FPollInterval write SetFPollInterval;
    property Layout : String read FLayout write SetFLayout;
  end;

  TExtDataProxyAjax = class(TExtFunction)
  private
    FHeaders : TExtObject;
    procedure SetFHeaders(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function DoRequest : TExtFunction;
    function GetMethod(Request : TExtDataRequest) : TExtFunction;
    destructor Destroy; override;
    property Headers : TExtObject read FHeaders write SetFHeaders;
  end;

  TExtUtilSortable = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function InitSortable : TExtFunction;
    function Sort(Sorters : String; Direction : String) : TExtFunction; overload;
    function Sort(Sorters : TExtObjectList; Direction : String) : TExtFunction; overload;
  end;

  TExtFxTargetComponent = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtChartAxisGauge = class(TExtFunction)
  private
    FMinimum : Integer;
    FMaximum : Integer;
    FSteps : Integer;
    FMargin : Integer;
    FTitle : String;
    procedure SetFMinimum(Value : Integer);
    procedure SetFMaximum(Value : Integer);
    procedure SetFSteps(Value : Integer);
    procedure SetFMargin(Value : Integer);
    procedure SetFTitle(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function SetTitle(Title : String) : TExtFunction;
    property Minimum : Integer read FMinimum write SetFMinimum;
    property Maximum : Integer read FMaximum write SetFMaximum;
    property Steps : Integer read FSteps write SetFSteps;
    property Margin : Integer read FMargin write SetFMargin;
    property Title : String read FTitle write SetFTitle;
  end;

  // Procedural types for events TExtMenuCheckItem
  TExtMenuCheckItemOnBeforecheckchange = procedure(This : TExtMenuCheckItem; Checked : Boolean; This_ : TExtMenuCheckItem; Checked_ : Boolean) of object;

  TExtMenuCheckItem = class(TExtFunction)
  private
    FCheckedCls : String;
    FUncheckedCls : String;
    FGroupCls : String;
    FHideOnClick : Boolean;
    FOnBeforecheckchange : TExtMenuCheckItemOnBeforecheckchange;
    procedure SetFCheckedCls(Value : String);
    procedure SetFUncheckedCls(Value : String);
    procedure SetFGroupCls(Value : String);
    procedure SetFHideOnClick(Value : Boolean);
    procedure SetFOnBeforecheckchange(Value : TExtMenuCheckItemOnBeforecheckchange);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function DisableCheckChange : TExtFunction;
    function EnableCheckChange : TExtFunction;
    function SetChecked(Checked : Boolean; SuppressEvents : Boolean = false) : TExtFunction;
    property CheckedCls : String read FCheckedCls write SetFCheckedCls;
    property UncheckedCls : String read FUncheckedCls write SetFUncheckedCls;
    property GroupCls : String read FGroupCls write SetFGroupCls;
    property HideOnClick : Boolean read FHideOnClick write SetFHideOnClick;
    property OnBeforecheckchange : TExtMenuCheckItemOnBeforecheckchange read FOnBeforecheckchange write SetFOnBeforecheckchange;
  end;

  TExtGridPluginEditing = class(TExtFunction)
  private
    FClicksToEdit : Integer;
    procedure SetFClicksToEdit(Value : Integer);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function StartEdit(RecordJS : TExtDataModel; ColumnHeader : TExtGridColumnColumn) : TExtFunction; overload;
    function StartEdit(RecordJS : Integer; ColumnHeader : TExtGridColumnColumn) : TExtFunction; overload;
    function StartEdit(RecordJS : Integer; ColumnHeader : Integer) : TExtFunction; overload;
    function StartEdit(RecordJS : TExtDataModel; ColumnHeader : Integer) : TExtFunction; overload;
    function CancelEdit : TExtFunction;
    function CompleteEdit : TExtFunction;
    property ClicksToEdit : Integer read FClicksToEdit write SetFClicksToEdit;
  end;

  TExtArraySingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Each(Iterable : TExtObjectList; Fn : TExtFunction; FnItem : TExtObject; FnIndex : Integer; FnAllItems : TExtObjectList; FnReturn : Boolean; Scope : TExtObject = nil; Reverse : Boolean = false) : TExtFunction; overload;
    function Each(Iterable : TNodeList; Fn : TExtFunction; FnItem : TExtObject; FnIndex : Integer; FnAllItems : TExtObjectList; FnReturn : Boolean; Scope : TExtObject = nil; Reverse : Boolean = false) : TExtFunction; overload;
    function Each(Iterable : TExtObject; Fn : TExtFunction; FnItem : TExtObject; FnIndex : Integer; FnAllItems : TExtObjectList; FnReturn : Boolean; Scope : TExtObject = nil; Reverse : Boolean = false) : TExtFunction; overload;
    function ForEach(ArrayJS : TExtObjectList; Fn : TExtFunction; FnItem : TExtObject; FnIndex : Integer; Param : TExtObjectList; Scope : TExtObject = nil) : TExtFunction;
    function IndexOf(ArrayJS : TExtObjectList; Item : TExtObject; From : Integer = 0) : TExtFunction;
    function Contains(ArrayJS : TExtObjectList; Item : TExtObject) : TExtFunction;
    function ToArray(Iterable : TExtObject; Start : Integer = 0; EndJS : Integer = 0) : TExtFunction;
    function Pluck(ArrayJS : TExtObjectList; PropertyName : String) : TExtFunction; overload;
    function Pluck(ArrayJS : TNodeList; PropertyName : String) : TExtFunction; overload;
    function Map(ArrayJS : TExtObjectList; Fn : TExtFunction; Scope : TExtObject) : TExtFunction;
    function Every(ArrayJS : TExtObjectList; Fn : TExtFunction; Scope : TExtObject) : TExtFunction;
    function Some(ArrayJS : TExtObjectList; Fn : TExtFunction; Scope : TExtObject) : TExtFunction;
    function Clean(ArrayJS : TExtObjectList) : TExtFunction;
    function Unique(ArrayJS : TExtObjectList) : TExtFunction;
    function Filter(ArrayJS : TExtObjectList; Fn : TExtFunction; Scope : TExtObject) : TExtFunction;
    function From(Value : TExtObject; NewReference : Boolean = false) : TExtFunction;
    function Remove(ArrayJS : TExtObjectList; Item : TExtObject) : TExtFunction;
    function Include(ArrayJS : TExtObjectList; Item : TExtObject) : TExtFunction;
    function Clone(ArrayJS : TExtObjectList) : TExtFunction;
    function Merge(Array1 : TExtObjectList; Array2 : TExtObjectList; Etc : TExtObjectList) : TExtFunction;
    function Intersect(Array1 : TExtObjectList; Array2 : TExtObjectList; Etc : TExtObjectList) : TExtFunction;
    function Difference(ArrayA : TExtObjectList; ArrayB : TExtObjectList) : TExtFunction;
    function Sort(ArrayJS : TExtObjectList; SortFn : TExtFunction = nil) : TExtFunction;
    function Flatten(ArrayJS : TExtObjectList) : TExtFunction;
    function Min(ArrayJS : TExtObjectList; ComparisonFn : TExtFunction = nil) : TExtFunction; overload;
    function Min(ArrayJS : TNodeList; ComparisonFn : TExtFunction = nil) : TExtFunction; overload;
    function Max(ArrayJS : TExtObjectList; ComparisonFn : TExtFunction = nil) : TExtFunction; overload;
    function Max(ArrayJS : TNodeList; ComparisonFn : TExtFunction = nil) : TExtFunction; overload;
    function Mean(ArrayJS : TExtObjectList) : TExtFunction;
    function Sum(ArrayJS : TExtObjectList) : TExtFunction;
    function Erase(ArrayJS : TExtObjectList; Index : Integer; RemoveCount : Integer) : TExtFunction;
    function Insert(ArrayJS : TExtObjectList; Index : Integer; Items : TExtObjectList) : TExtFunction;
    function Replace(ArrayJS : TExtObjectList; Index : Integer; RemoveCount : Integer; Insert : TExtObjectList = nil) : TExtFunction;
    function Splice(ArrayJS : TExtObjectList; Index : Integer; RemoveCount : Integer) : TExtFunction;
    function Each_ : TExtFunction;
    function Union : TExtFunction;
    function Min_ : TExtFunction;
    function Max_ : TExtFunction;
    function Sum_ : TExtFunction;
    function Mean_ : TExtFunction;
    function Flatten_ : TExtFunction;
    function Clean_ : TExtFunction;
    function Unique_ : TExtFunction;
    function Pluck_ : TExtFunction;
    function ToArray_ : TExtFunction;
  end;

  // Procedural types for events TExtGridHeaderContainer
  TExtGridHeaderContainerOnColumnresize = procedure(Ct : TExtGridHeaderContainer; Column : TExtGridColumnColumn; Width : Integer; Ct_ : TExtGridHeaderContainer; Column_ : TExtGridColumnColumn; E : TExtEventObjectSingleton; T : THTMLElement; Ct__ : TExtGridHeaderContainer; Column__ : TExtGridColumnColumn; E_ : TExtEventObjectSingleton; T_ : THTMLElement; Ct___ : TExtGridHeaderContainer; Column___ : TExtGridColumnColumn; FromIdx : Integer; ToIdx : Integer; Ct____ : TExtGridHeaderContainer; Column____ : TExtGridColumnColumn) of object;
  TExtGridHeaderContainerOnColumnshow = procedure(Ct : TExtGridHeaderContainer; Column : TExtGridColumnColumn) of object;
  TExtGridHeaderContainerOnSortchange = procedure(Ct : TExtGridHeaderContainer; Column : TExtGridColumnColumn; Direction : String; Ct_ : TExtGridHeaderContainer; Menu : TExtMenuMenu) of object;

  TExtGridHeaderContainer = class(TExtFunction)
  private
    FWeight : Integer;
    FDefaultWidth : Integer;
    FSortable : Boolean;
    FOnColumnresize : TExtGridHeaderContainerOnColumnresize;
    FOnColumnshow : TExtGridHeaderContainerOnColumnshow;
    FOnSortchange : TExtGridHeaderContainerOnSortchange;
    procedure SetFWeight(Value : Integer);
    procedure SetFDefaultWidth(Value : Integer);
    procedure SetFSortable(Value : Boolean);
    procedure SetFOnColumnresize(Value : TExtGridHeaderContainerOnColumnresize);
    procedure SetFOnColumnshow(Value : TExtGridHeaderContainerOnColumnshow);
    procedure SetFOnSortchange(Value : TExtGridHeaderContainerOnSortchange);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetMenuItems : TExtFunction;
    function GetColumnMenu : TExtFunction;
    function GetColumnCount : TExtFunction;
    function GetFullWidth : TExtFunction;
    function GetVisibleGridColumns(RefreshCache : Boolean) : TExtFunction;
    function GetGridColumns(RefreshCache : Boolean) : TExtFunction;
    function GetHeaderIndex : TExtFunction;
    function GetHeaderAtIndex : TExtFunction;
    function PrepareData : TExtFunction;
    property Weight : Integer read FWeight write SetFWeight;
    property DefaultWidth : Integer read FDefaultWidth write SetFDefaultWidth;
    property Sortable : Boolean read FSortable write SetFSortable;
    property OnColumnresize : TExtGridHeaderContainerOnColumnresize read FOnColumnresize write SetFOnColumnresize;
    property OnColumnshow : TExtGridHeaderContainerOnColumnshow read FOnColumnshow write SetFOnColumnshow;
    property OnSortchange : TExtGridHeaderContainerOnSortchange read FOnSortchange write SetFOnSortchange;
  end;

  TExtChartAxisNumeric = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtLayoutContainerColumn = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtDataTypesSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtJSONSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function EncodeDate(D : TDateTime) : TExtFunction;
    function Encode(O : TExtObject) : TExtFunction;
    function Decode(Json : String; Safe : Boolean = false) : TExtFunction;
    function Encode_ : TExtFunction;
    function Decode_ : TExtFunction;
  end;

  TExtFormFieldRadio = class(TExtFunction)
  private
    FUncheckedValue : String;
    procedure SetFUncheckedValue(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetGroupValue : TExtFunction;
    function SetValue(Value : String) : TExtFunction; overload;
    function SetValue(Value : Boolean) : TExtFunction; overload;
    function GetSubmitValue : TExtFunction;
    property UncheckedValue : String read FUncheckedValue write SetFUncheckedValue;
  end;

  TExtDrawCompositeSprite = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetBBox : TExtFunction;
    function SetAttributes(Attrs : TExtObject; Redraw : Boolean) : TExtFunction;
    function Hide(Redraw : Boolean) : TExtFunction;
    function Show(Redraw : Boolean) : TExtFunction;
    function DestroyJS : TExtFunction; override;
  end;

  TExtAction = class(TExtFunction)
  private
    FText : String;
    FIconCls : String;
    FDisabled : Boolean;
    FHidden : Boolean;
    FHandler : TExtFunction;
    FItemId : String;
    FScope : TExtObject;
    procedure SetFText(Value : String);
    procedure SetFIconCls(Value : String);
    procedure SetFDisabled(Value : Boolean);
    procedure SetFHidden(Value : Boolean);
    procedure SetFHandler(Value : TExtFunction);
    procedure SetFItemId(Value : String);
    procedure SetFScope(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    constructor Create(Config : TExtObject);
    function SetText(Text : String) : TExtFunction;
    function GetText : TExtFunction;
    function SetIconCls(Cls : String) : TExtFunction;
    function GetIconCls : TExtFunction;
    function SetDisabled(Disabled : Boolean) : TExtFunction;
    function Enable : TExtFunction;
    function Disable : TExtFunction;
    function IsDisabled : TExtFunction;
    function SetHidden(Hidden : Boolean) : TExtFunction;
    function Show : TExtFunction;
    function Hide : TExtFunction;
    function IsHidden : TExtFunction;
    function SetHandler(Fn : TExtFunction; Scope : TExtObject) : TExtFunction;
    function Each(Fn : TExtFunction; Scope : TExtObject) : TExtFunction;
    function Execute(Args : TExtObjectList = nil) : TExtFunction;
    destructor Destroy; override;
    property Text : String read FText write SetFText;
    property IconCls : String read FIconCls write SetFIconCls;
    property Disabled : Boolean read FDisabled write SetFDisabled;
    property Hidden : Boolean read FHidden write SetFHidden;
    property Handler : TExtFunction read FHandler write SetFHandler;
    property ItemId : String read FItemId write SetFItemId;
    property Scope : TExtObject read FScope write SetFScope;
  end;

  // Procedural types for events TExtDataAbstractStore
  TExtDataAbstractStoreOnAdd = procedure(Store : TExtDataStore; Records : TExtObjectList; Index : Integer) of object;
  TExtDataAbstractStoreOnRemove = procedure(Store : TExtDataStore; RecordJS : TExtDataModel; Index : Integer) of object;
  TExtDataAbstractStoreOnUpdate = procedure(This : TExtDataAbstractStore; RecordJS : TExtDataModel; Operation : String) of object;
  TExtDataAbstractStoreOnDatachanged = procedure(This : TExtDataAbstractStore) of object;
  TExtDataAbstractStoreOnBeforeload = procedure(Store : TExtDataStore; Operation : TExtDataOperation) of object;
  TExtDataAbstractStoreOnLoad = procedure(This : TExtDataAbstractStore; Records : TExtObjectList; Successful : Boolean) of object;
  TExtDataAbstractStoreOnWrite = procedure(Store : TExtDataStore; Operation : TExtDataOperation) of object;
  TExtDataAbstractStoreOnBeforesync = procedure(Options : TExtObject) of object;
  TExtDataAbstractStoreOnClear = procedure(This : TExtDataAbstractStore) of object;

  TExtDataAbstractStore = class(TExtFunction)
  private
    FProxy : String;
    FProxyTExtDataProxyProxy : TExtDataProxyProxy;
    FProxyTExtObject : TExtObject;
    FAutoLoad : Boolean;
    FAutoLoadTExtObject : TExtObject;
    FAutoSync : Boolean;
    FStoreId : String;
    FFields : TExtObjectList;
    FModel : String;
    FOnAdd : TExtDataAbstractStoreOnAdd;
    FOnRemove : TExtDataAbstractStoreOnRemove;
    FOnUpdate : TExtDataAbstractStoreOnUpdate;
    FOnDatachanged : TExtDataAbstractStoreOnDatachanged;
    FOnBeforeload : TExtDataAbstractStoreOnBeforeload;
    FOnLoad : TExtDataAbstractStoreOnLoad;
    FOnWrite : TExtDataAbstractStoreOnWrite;
    FOnBeforesync : TExtDataAbstractStoreOnBeforesync;
    FOnClear : TExtDataAbstractStoreOnClear;
    procedure SetFProxy(Value : String);
    procedure SetFProxyTExtDataProxyProxy(Value : TExtDataProxyProxy);
    procedure SetFProxyTExtObject(Value : TExtObject);
    procedure SetFAutoLoad(Value : Boolean);
    procedure SetFAutoLoadTExtObject(Value : TExtObject);
    procedure SetFAutoSync(Value : Boolean);
    procedure SetFStoreId(Value : String);
    procedure SetFFields(Value : TExtObjectList);
    procedure SetFModel(Value : String);
    procedure SetFOnAdd(Value : TExtDataAbstractStoreOnAdd);
    procedure SetFOnRemove(Value : TExtDataAbstractStoreOnRemove);
    procedure SetFOnUpdate(Value : TExtDataAbstractStoreOnUpdate);
    procedure SetFOnDatachanged(Value : TExtDataAbstractStoreOnDatachanged);
    procedure SetFOnBeforeload(Value : TExtDataAbstractStoreOnBeforeload);
    procedure SetFOnLoad(Value : TExtDataAbstractStoreOnLoad);
    procedure SetFOnWrite(Value : TExtDataAbstractStoreOnWrite);
    procedure SetFOnBeforesync(Value : TExtDataAbstractStoreOnBeforesync);
    procedure SetFOnClear(Value : TExtDataAbstractStoreOnClear);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function SetProxy(Proxy : String) : TExtFunction; overload;
    function SetProxy(Proxy : TExtObject) : TExtFunction; overload;
    function SetProxy(Proxy : TExtDataProxyProxy) : TExtFunction; overload;
    function GetProxy : TExtFunction;
    function GetNewRecords : TExtFunction;
    function GetUpdatedRecords : TExtFunction;
    function GetRemovedRecords : TExtFunction;
    function Sync : TExtFunction;
    function Load(Options : TExtObject = nil) : TExtFunction;
    function RemoveAll : TExtFunction;
    function IsLoading : TExtFunction;
    destructor Destroy; override;
    property Proxy : String read FProxy write SetFProxy;
    property ProxyTExtDataProxyProxy : TExtDataProxyProxy read FProxyTExtDataProxyProxy write SetFProxyTExtDataProxyProxy;
    property ProxyTExtObject : TExtObject read FProxyTExtObject write SetFProxyTExtObject;
    property AutoLoad : Boolean read FAutoLoad write SetFAutoLoad;
    property AutoLoadTExtObject : TExtObject read FAutoLoadTExtObject write SetFAutoLoadTExtObject;
    property AutoSync : Boolean read FAutoSync write SetFAutoSync;
    property StoreId : String read FStoreId write SetFStoreId;
    property Fields : TExtObjectList read FFields write SetFFields;
    property Model : String read FModel write SetFModel;
    property OnAdd : TExtDataAbstractStoreOnAdd read FOnAdd write SetFOnAdd;
    property OnRemove : TExtDataAbstractStoreOnRemove read FOnRemove write SetFOnRemove;
    property OnUpdate : TExtDataAbstractStoreOnUpdate read FOnUpdate write SetFOnUpdate;
    property OnDatachanged : TExtDataAbstractStoreOnDatachanged read FOnDatachanged write SetFOnDatachanged;
    property OnBeforeload : TExtDataAbstractStoreOnBeforeload read FOnBeforeload write SetFOnBeforeload;
    property OnLoad : TExtDataAbstractStoreOnLoad read FOnLoad write SetFOnLoad;
    property OnWrite : TExtDataAbstractStoreOnWrite read FOnWrite write SetFOnWrite;
    property OnBeforesync : TExtDataAbstractStoreOnBeforesync read FOnBeforesync write SetFOnBeforesync;
    property OnClear : TExtDataAbstractStoreOnClear read FOnClear write SetFOnClear;
  end;

  // Procedural types for events TExtTabTab
  TExtTabTabOnActivate = procedure(This : TExtTabTab; This_ : TExtTabTab; Tab : TExtTabTab) of object;
  TExtTabTabOnClose = procedure(Tab : TExtTabTab) of object;

  TExtTabTab = class(TExtFunction)
  private
    FActiveCls : String;
    FDisabledCls : String;
    FClosableCls : String;
    FClosable : Boolean;
    FCloseText : String;
    FOnActivate : TExtTabTabOnActivate;
    FOnClose : TExtTabTabOnClose;
    procedure SetFActiveCls(Value : String);
    procedure SetFDisabledCls(Value : String);
    procedure SetFClosableCls(Value : String);
    procedure SetFClosable(Value : Boolean);
    procedure SetFCloseText(Value : String);
    procedure SetFOnActivate(Value : TExtTabTabOnActivate);
    procedure SetFOnClose(Value : TExtTabTabOnClose);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function OnRender : TExtFunction;
    function OnDestroy : TExtFunction;
    function SetClosable(Closable : Boolean) : TExtFunction;
    function SetCard(Card : TExtComponent) : TExtFunction;
    property ActiveCls : String read FActiveCls write SetFActiveCls;
    property DisabledCls : String read FDisabledCls write SetFDisabledCls;
    property ClosableCls : String read FClosableCls write SetFClosableCls;
    property Closable : Boolean read FClosable write SetFClosable;
    property CloseText : String read FCloseText write SetFCloseText;
    property OnActivate : TExtTabTabOnActivate read FOnActivate write SetFOnActivate;
    property OnClose : TExtTabTabOnClose read FOnClose write SetFOnClose;
  end;

  TExtContainerContainer = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetChildByElement(El : TExtElement) : TExtFunction; overload;
    function GetChildByElement(El : THTMLElement) : TExtFunction; overload;
    function GetChildByElement(El : String) : TExtFunction; overload;
  end;

  TExtToolbarTextItem = class(TExtFunction)
  private
    FText : String;
    procedure SetFText(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function SetText(T : String) : TExtFunction;
    property Text : String read FText write SetFText;
  end;

  TExtAjaxSingleton = class(TExtFunction)
  private
    FUrl : String;
    FExtraParams : TExtObject;
    FDefaultHeaders : TExtObject;
    FMethod : String;
    FTimeout : Integer;
    FAutoAbort : Boolean;
    FDisableCaching : Boolean;
    procedure SetFUrl(Value : String);
    procedure SetFExtraParams(Value : TExtObject);
    procedure SetFDefaultHeaders(Value : TExtObject);
    procedure SetFMethod(Value : String);
    procedure SetFTimeout(Value : Integer);
    procedure SetFAutoAbort(Value : Boolean);
    procedure SetFDisableCaching(Value : Boolean);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    destructor Destroy; override;
    property Url : String read FUrl write SetFUrl;
    property ExtraParams : TExtObject read FExtraParams write SetFExtraParams;
    property DefaultHeaders : TExtObject read FDefaultHeaders write SetFDefaultHeaders;
    property Method : String read FMethod write SetFMethod;
    property Timeout : Integer read FTimeout write SetFTimeout;
    property AutoAbort : Boolean read FAutoAbort write SetFAutoAbort;
    property DisableCaching : Boolean read FDisableCaching write SetFDisableCaching;
  end;

  // Procedural types for events TExtFormLabelable
  TExtFormLabelableOnErrorchange = procedure(This : TExtFormLabelable; Error : String) of object;

  TExtFormLabelable = class(TExtFunction)
  private
    FLabelableRenderTpl : String;
    FLabelableRenderTplTExtObjectList : TExtObjectList;
    FLabelableRenderTplTExtXTemplate : TExtXTemplate;
    FActiveErrorsTpl : TExtXTemplate;
    FFormItemCls : String;
    FLabelCls : String;
    FLabelClsExtra : String;
    FErrorMsgCls : String;
    FBaseBodyCls : String;
    FFieldBodyCls : String;
    FClearCls : String;
    FInvalidCls : String;
    FFieldLabel : String;
    FLabelAlign : String;
    FLabelWidth : Integer;
    FLabelPad : Integer;
    FLabelSeparator : String;
    FLabelStyle : String;
    FHideLabel : Boolean;
    FHideEmptyLabel : Boolean;
    FPreventMark : Boolean;
    FAutoFitErrors : Boolean;
    FMsgTarget : String;
    FActiveError : String;
    FOnErrorchange : TExtFormLabelableOnErrorchange;
    procedure SetFLabelableRenderTpl(Value : String);
    procedure SetFLabelableRenderTplTExtObjectList(Value : TExtObjectList);
    procedure SetFLabelableRenderTplTExtXTemplate(Value : TExtXTemplate);
    procedure SetFActiveErrorsTpl(Value : TExtXTemplate);
    procedure SetFFormItemCls(Value : String);
    procedure SetFLabelCls(Value : String);
    procedure SetFLabelClsExtra(Value : String);
    procedure SetFErrorMsgCls(Value : String);
    procedure SetFBaseBodyCls(Value : String);
    procedure SetFFieldBodyCls(Value : String);
    procedure SetFClearCls(Value : String);
    procedure SetFInvalidCls(Value : String);
    procedure SetFFieldLabel(Value : String);
    procedure SetFLabelAlign(Value : String);
    procedure SetFLabelWidth(Value : Integer);
    procedure SetFLabelPad(Value : Integer);
    procedure SetFLabelSeparator(Value : String);
    procedure SetFLabelStyle(Value : String);
    procedure SetFHideLabel(Value : Boolean);
    procedure SetFHideEmptyLabel(Value : Boolean);
    procedure SetFPreventMark(Value : Boolean);
    procedure SetFAutoFitErrors(Value : Boolean);
    procedure SetFMsgTarget(Value : String);
    procedure SetFActiveError(Value : String);
    procedure SetFOnErrorchange(Value : TExtFormLabelableOnErrorchange);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function GetFieldLabel : TExtFunction;
    function GetInputId : TExtFunction;
    function GetActiveError : TExtFunction;
    function HasActiveError : TExtFunction;
    function SetActiveError(Msg : String) : TExtFunction;
    function GetActiveErrors : TExtFunction;
    function SetActiveErrors(Errors : TExtObjectList) : TExtFunction;
    function UnsetActiveError : TExtFunction;
    function SetFieldDefaults(Defaults : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property LabelableRenderTpl : String read FLabelableRenderTpl write SetFLabelableRenderTpl;
    property LabelableRenderTplTExtObjectList : TExtObjectList read FLabelableRenderTplTExtObjectList write SetFLabelableRenderTplTExtObjectList;
    property LabelableRenderTplTExtXTemplate : TExtXTemplate read FLabelableRenderTplTExtXTemplate write SetFLabelableRenderTplTExtXTemplate;
    property ActiveErrorsTpl : TExtXTemplate read FActiveErrorsTpl write SetFActiveErrorsTpl;
    property FormItemCls : String read FFormItemCls write SetFFormItemCls;
    property LabelCls : String read FLabelCls write SetFLabelCls;
    property LabelClsExtra : String read FLabelClsExtra write SetFLabelClsExtra;
    property ErrorMsgCls : String read FErrorMsgCls write SetFErrorMsgCls;
    property BaseBodyCls : String read FBaseBodyCls write SetFBaseBodyCls;
    property FieldBodyCls : String read FFieldBodyCls write SetFFieldBodyCls;
    property ClearCls : String read FClearCls write SetFClearCls;
    property InvalidCls : String read FInvalidCls write SetFInvalidCls;
    property FieldLabel : String read FFieldLabel write SetFFieldLabel;
    property LabelAlign : String read FLabelAlign write SetFLabelAlign;
    property LabelWidth : Integer read FLabelWidth write SetFLabelWidth;
    property LabelPad : Integer read FLabelPad write SetFLabelPad;
    property LabelSeparator : String read FLabelSeparator write SetFLabelSeparator;
    property LabelStyle : String read FLabelStyle write SetFLabelStyle;
    property HideLabel : Boolean read FHideLabel write SetFHideLabel;
    property HideEmptyLabel : Boolean read FHideEmptyLabel write SetFHideEmptyLabel;
    property PreventMark : Boolean read FPreventMark write SetFPreventMark;
    property AutoFitErrors : Boolean read FAutoFitErrors write SetFAutoFitErrors;
    property MsgTarget : String read FMsgTarget write SetFMsgTarget;
    property ActiveError : String read FActiveError write SetFActiveError;
    property OnErrorchange : TExtFormLabelableOnErrorchange read FOnErrorchange write SetFOnErrorchange;
  end;

  TExtLayoutContainerVBox = class(TExtFunction)
  private
    FAlign : String;
    procedure SetFAlign(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property Align : String read FAlign write SetFAlign;
  end;

  TExtUtilCSSSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function CreateStyleSheet(CssText : String; Id : String) : TExtFunction;
    function RemoveStyleSheet(Id : String) : TExtFunction;
    function SwapStyleSheet(Id : String; Url : String) : TExtFunction;
    function RefreshCache : TExtFunction;
    function GetRules(RefreshCache : Boolean) : TExtFunction;
    function GetRule(Selector : String; RefreshCache : Boolean) : TExtFunction; overload;
    function GetRule(Selector : TExtObjectList; RefreshCache : Boolean) : TExtFunction; overload;
    function UpdateRule(Selector : String; PropertyJS : String; Value : String) : TExtFunction; overload;
    function UpdateRule(Selector : TExtObjectList; PropertyJS : String; Value : String) : TExtFunction; overload;
  end;

  TExtTipToolTip = class(TExtFunction)
  private
    FTarget : THTMLElement;
    FTargetTExtElement : TExtElement;
    FTargetString : String;
    FAutoHide : Boolean;
    FShowDelay : Integer;
    FHideDelay : Integer;
    FDismissDelay : Integer;
    FMouseOffset : TArrayOfInteger;
    FTrackMouse : Boolean;
    FAnchor : String;
    FAnchorToTarget : Boolean;
    FAnchorOffset : Integer;
    FDelegate : String;
    procedure SetFTarget(Value : THTMLElement);
    procedure SetFTargetTExtElement(Value : TExtElement);
    procedure SetFTargetString(Value : String);
    procedure SetFAutoHide(Value : Boolean);
    procedure SetFShowDelay(Value : Integer);
    procedure SetFHideDelay(Value : Integer);
    procedure SetFDismissDelay(Value : Integer);
    procedure SetFMouseOffset(Value : TArrayOfInteger);
    procedure SetFTrackMouse(Value : Boolean);
    procedure SetFAnchor(Value : String);
    procedure SetFAnchorToTarget(Value : Boolean);
    procedure SetFAnchorOffset(Value : Integer);
    procedure SetFDelegate(Value : String);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function SetTarget(T : String) : TExtFunction; overload;
    function SetTarget(T : THTMLElement) : TExtFunction; overload;
    function SetTarget(T : TExtElement) : TExtFunction; overload;
    function Hide : TExtFunction;
    function Show : TExtFunction;
    destructor Destroy; override;
    property Target : THTMLElement read FTarget write SetFTarget;
    property TargetTExtElement : TExtElement read FTargetTExtElement write SetFTargetTExtElement;
    property TargetString : String read FTargetString write SetFTargetString;
    property AutoHide : Boolean read FAutoHide write SetFAutoHide;
    property ShowDelay : Integer read FShowDelay write SetFShowDelay;
    property HideDelay : Integer read FHideDelay write SetFHideDelay;
    property DismissDelay : Integer read FDismissDelay write SetFDismissDelay;
    property MouseOffset : TArrayOfInteger read FMouseOffset write SetFMouseOffset;
    property TrackMouse : Boolean read FTrackMouse write SetFTrackMouse;
    property Anchor : String read FAnchor write SetFAnchor;
    property AnchorToTarget : Boolean read FAnchorToTarget write SetFAnchorToTarget;
    property AnchorOffset : Integer read FAnchorOffset write SetFAnchorOffset;
    property Delegate : String read FDelegate write SetFDelegate;
  end;

  TExtDataModel = class(TExtFunction)
  private
    FIdgen : String;
    FIdgenTExtObject : TExtObject;
    FPersistenceProperty : String;
    FIdProperty : String;
    FDefaultProxyType : String;
    FFields : TExtObjectList;
    FFieldsTExtObjectList : TExtObjectList;
    FValidations : TExtObjectList;
    FAssociations : TExtObjectList;
    FHasMany : String;
    FHasManyTExtObject : TExtObject;
    FHasManyTExtObjectList : TExtObjectList;
    FBelongsTo : String;
    FBelongsToTExtObject : TExtObject;
    FBelongsToTExtObjectList : TExtObjectList;
    FProxy : String;
    FProxyTExtObject : TExtObject;
    FProxyTExtDataProxyProxy : TExtDataProxyProxy;
    procedure SetFIdgen(Value : String);
    procedure SetFIdgenTExtObject(Value : TExtObject);
    procedure SetFPersistenceProperty(Value : String);
    procedure SetFIdProperty(Value : String);
    procedure SetFDefaultProxyType(Value : String);
    procedure SetFFields(Value : TExtObjectList);
    procedure SetFFieldsTExtObjectList(Value : TExtObjectList);
    procedure SetFValidations(Value : TExtObjectList);
    procedure SetFAssociations(Value : TExtObjectList);
    procedure SetFHasMany(Value : String);
    procedure SetFHasManyTExtObject(Value : TExtObject);
    procedure SetFHasManyTExtObjectList(Value : TExtObjectList);
    procedure SetFBelongsTo(Value : String);
    procedure SetFBelongsToTExtObject(Value : TExtObject);
    procedure SetFBelongsToTExtObjectList(Value : TExtObjectList);
    procedure SetFProxy(Value : String);
    procedure SetFProxyTExtObject(Value : TExtObject);
    procedure SetFProxyTExtDataProxyProxy(Value : TExtDataProxyProxy);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function Get(FieldName : String) : TExtFunction;
    function SetJS(FieldName : String; Value : TExtObject) : TExtFunction; overload;
    function SetJS(FieldName : TExtObject; Value : TExtObject) : TExtFunction; overload;
    function BeginEdit : TExtFunction;
    function CancelEdit : TExtFunction;
    function EndEdit(Silent : Boolean) : TExtFunction;
    function GetChanges : TExtFunction;
    function IsModified(FieldName : String) : TExtFunction;
    function SetDirty : TExtFunction;
    function Reject(Silent : Boolean = false) : TExtFunction;
    function Commit(Silent : Boolean = false) : TExtFunction;
    function Copy(Id : String = '') : TExtFunction;
    function SetProxy(Proxy : String) : TExtFunction; overload;
    function SetProxy(Proxy : TExtObject) : TExtFunction; overload;
    function SetProxy(Proxy : TExtDataProxyProxy) : TExtFunction; overload;
    function GetProxy : TExtFunction;
    function Validate : TExtFunction;
    function IsValid : TExtFunction;
    function Save(Options : TExtObject) : TExtFunction;
    function DestroyJS(Options : TExtObject) : TExtFunction; reintroduce;
    function GetId : TExtFunction;
    function SetId(Id : Integer) : TExtFunction;
    function Join(Store : TExtDataStore) : TExtFunction;
    function Unjoin(Store : TExtDataStore) : TExtFunction;
    function GetAssociatedData : TExtFunction;
    destructor Destroy; override;
    property Idgen : String read FIdgen write SetFIdgen;
    property IdgenTExtObject : TExtObject read FIdgenTExtObject write SetFIdgenTExtObject;
    property PersistenceProperty : String read FPersistenceProperty write SetFPersistenceProperty;
    property IdProperty : String read FIdProperty write SetFIdProperty;
    property DefaultProxyType : String read FDefaultProxyType write SetFDefaultProxyType;
    property Fields : TExtObjectList read FFields write SetFFields;
    property FieldsTExtObjectList : TExtObjectList read FFieldsTExtObjectList write SetFFieldsTExtObjectList;
    property Validations : TExtObjectList read FValidations write SetFValidations;
    property Associations : TExtObjectList read FAssociations write SetFAssociations;
    property HasMany : String read FHasMany write SetFHasMany;
    property HasManyTExtObject : TExtObject read FHasManyTExtObject write SetFHasManyTExtObject;
    property HasManyTExtObjectList : TExtObjectList read FHasManyTExtObjectList write SetFHasManyTExtObjectList;
    property BelongsTo : String read FBelongsTo write SetFBelongsTo;
    property BelongsToTExtObject : TExtObject read FBelongsToTExtObject write SetFBelongsToTExtObject;
    property BelongsToTExtObjectList : TExtObjectList read FBelongsToTExtObjectList write SetFBelongsToTExtObjectList;
    property Proxy : String read FProxy write SetFProxy;
    property ProxyTExtObject : TExtObject read FProxyTExtObject write SetFProxyTExtObject;
    property ProxyTExtDataProxyProxy : TExtDataProxyProxy read FProxyTExtDataProxyProxy write SetFProxyTExtDataProxyProxy;
  end;

  TExtChartLegendItem = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function CreateLegend : TExtFunction;
    function UpdatePosition(RelativeTo : TExtObject = nil) : TExtFunction;
  end;

  TExtDataUuidGenerator = class(TExtFunction)
  private
    FVersion : Integer;
    procedure SetFVersion(Value : Integer);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Reconfigure : TExtFunction;
    property Version : Integer read FVersion write SetFVersion;
  end;

  TExtDrawSprite = class(TExtFunction)
  private
    FTypeJS : String;
    FWidth : Integer;
    FHeight : Integer;
    FSize : Integer;
    FRadius : Integer;
    FX : Integer;
    FY : Integer;
    FPath : TExtObjectList;
    FOpacity : Integer;
    FFill : String;
    FStroke : String;
    FStrokeWidth : Integer;
    FFont : String;
    FText : String;
    FGroup : String;
    FGroupTExtObjectList : TExtObjectList;
    FDraggable : Boolean;
    procedure SetFTypeJS(Value : String);
    procedure SetFWidth(Value : Integer);
    procedure SetFHeight(Value : Integer);
    procedure SetFSize(Value : Integer);
    procedure SetFRadius(Value : Integer);
    procedure SetFX(Value : Integer);
    procedure SetFY(Value : Integer);
    procedure SetFPath(Value : TExtObjectList);
    procedure SetFOpacity(Value : Integer);
    procedure SetFFill(Value : String);
    procedure SetFStroke(Value : String);
    procedure SetFStrokeWidth(Value : Integer);
    procedure SetFFont(Value : String);
    procedure SetFText(Value : String);
    procedure SetFGroup(Value : String);
    procedure SetFGroupTExtObjectList(Value : TExtObjectList);
    procedure SetFDraggable(Value : Boolean);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function SetAttributes(Attrs : TExtObject; Redraw : Boolean) : TExtFunction;
    function GetBBox : TExtFunction;
    function Hide(Redraw : Boolean) : TExtFunction;
    function Show(Redraw : Boolean) : TExtFunction;
    function Remove : TExtFunction;
    function DestroyJS : TExtFunction; override;
    function Redraw : TExtFunction;
    function SetStyle(PropertyJS : String; Value : String = '') : TExtFunction; overload;
    function SetStyle(PropertyJS : TExtObject; Value : String = '') : TExtFunction; overload;
    function AddCls(ClassName : String) : TExtFunction; overload;
    function AddCls(ClassName : TExtObjectList) : TExtFunction; overload;
    function RemoveCls(ClassName : String) : TExtFunction; overload;
    function RemoveCls(ClassName : TExtObjectList) : TExtFunction; overload;
    destructor Destroy; override;
    property TypeJS : String read FTypeJS write SetFTypeJS;
    property Width : Integer read FWidth write SetFWidth;
    property Height : Integer read FHeight write SetFHeight;
    property Size : Integer read FSize write SetFSize;
    property Radius : Integer read FRadius write SetFRadius;
    property X : Integer read FX write SetFX;
    property Y : Integer read FY write SetFY;
    property Path : TExtObjectList read FPath write SetFPath;
    property Opacity : Integer read FOpacity write SetFOpacity;
    property Fill : String read FFill write SetFFill;
    property Stroke : String read FStroke write SetFStroke;
    property StrokeWidth : Integer read FStrokeWidth write SetFStrokeWidth;
    property Font : String read FFont write SetFFont;
    property Text : String read FText write SetFText;
    property Group : String read FGroup write SetFGroup;
    property GroupTExtObjectList : TExtObjectList read FGroupTExtObjectList write SetFGroupTExtObjectList;
    property Draggable : Boolean read FDraggable write SetFDraggable;
  end;

  TExtToolbarSpacer = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtChartTip = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtDataReaderArray = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtAbstractPlugin = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Init(Client : TExtComponent) : TExtFunction;
    function DestroyJS : TExtFunction; override;
    function Enable : TExtFunction;
    function Disable : TExtFunction;
  end;

  TExtFxTargetTarget = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Target : TExtComponent);
    constructor Create(Target : TExtElement);
    constructor Create(Target : TExtDrawSprite);
  end;

  TExtNumberSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Constrain(Number : Integer; Min : Integer; Max : Integer) : TExtFunction;
    function Snap(Value : Integer; Increment : Integer; MinValue : Integer; MaxValue : Integer) : TExtFunction;
    function ToFixed(Value : Integer; Precision : Integer) : TExtFunction;
    function From(Value : TExtObject; DefaultValue : Integer) : TExtFunction;
    function Num : TExtFunction;
  end;

  TExtComponentQuery = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Query(Selector : String; Root : TExtContainerContainer) : TExtFunction;
    function IsJS(Component : TExtComponent; Selector : String) : TExtFunction;
  end;

  TExtStateLocalStorageProvider = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtDataStoreManager = class(TExtFunction)
  private
    FListeners : TExtObject;
    procedure SetFListeners(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function Register(Stores : TExtDataStore) : TExtFunction;
    function Unregister(Stores : String) : TExtFunction; overload;
    function Unregister(Stores : TExtObjectList) : TExtFunction; overload;
    function Lookup(Store : String) : TExtFunction; overload;
    function Lookup(Store : TExtObject) : TExtFunction; overload;
    function RegStore(Id : String; Config : TExtObject) : TExtFunction;
    function GetStore : TExtFunction;
    destructor Destroy; override;
    property Listeners : TExtObject read FListeners write SetFListeners;
  end;

  TExtPanelHeader = class(TExtFunction)
  private
    FTitle : String;
    FIconCls : String;
    procedure SetFTitle(Value : String);
    procedure SetFIconCls(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function SetTitle(Title : String) : TExtFunction;
    function SetIconCls(Cls : String) : TExtFunction;
    function AddTool(Tool : TExtObject; Param : TExtObjectList) : TExtFunction;
    property Title : String read FTitle write SetFTitle;
    property IconCls : String read FIconCls write SetFIconCls;
  end;

  TExtBase = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    class function AddStatics(Members : TExtObject) : TExtFunction;
    class function Implement(Members : TExtObject) : TExtFunction;
    class function Borrow(FromClass : TExtBase; Members : String) : TExtFunction; overload;
    function Borrow(FromClass : TExtBase; Members : TExtObjectList) : TExtFunction; overload;
    class function Override(Members : TExtObject) : TExtFunction;
    class function GetName : TExtFunction;
    class function CreateAlias(Alias : String; Origin : String) : TExtFunction; overload;
    function CreateAlias(Alias : TExtObject; Origin : String) : TExtFunction; overload;
    function CreateAlias(Alias : TExtObject; Origin : TExtObject) : TExtFunction; overload;
    function CreateAlias(Alias : String; Origin : TExtObject) : TExtFunction; overload;
  end;

  // Procedural types for events TExtFormFieldComboBox
  TExtFormFieldComboBoxOnBeforequery = procedure(QueryEvent : TExtObject) of object;
  TExtFormFieldComboBoxOnSelect = procedure(Combo : TExtFormFieldComboBox; Records : TExtObjectList) of object;
  TExtFormFieldComboBoxOnBeforeselect = procedure(Combo : TExtFormFieldComboBox; RecordJS : TExtDataRecord; Index : Integer) of object;
  TExtFormFieldComboBoxOnBeforedeselect = procedure(Combo : TExtFormFieldComboBox; RecordJS : TExtDataRecord; Index : Integer) of object;

  TExtFormFieldComboBox = class(TExtFunction)
  private
    FTriggerCls : String;
    FStore : TExtDataStore;
    FStoreTExtObjectList : TExtObjectList;
    FMultiSelect : Boolean;
    FDelimiter : String;
    FDisplayField : String;
    FValueField : String;
    FTriggerAction : String;
    FAllQuery : String;
    FQueryParam : String;
    FQueryMode : String;
    FPageSize : Integer;
    FQueryDelay : Integer;
    FMinChars : Integer;
    FAutoSelect : Boolean;
    FTypeAhead : Boolean;
    FTypeAheadDelay : Integer;
    FSelectOnTab : Boolean;
    FForceSelection : Boolean;
    FValueNotFoundText : String;
    FDefaultListConfig : TExtObject;
    FTransform : String;
    FTransformTHTMLElement : THTMLElement;
    FTransformTExtElement : TExtElement;
    FListConfig : TExtObject;
    FOnBeforequery : TExtFormFieldComboBoxOnBeforequery;
    FOnSelect : TExtFormFieldComboBoxOnSelect;
    FOnBeforeselect : TExtFormFieldComboBoxOnBeforeselect;
    FOnBeforedeselect : TExtFormFieldComboBoxOnBeforedeselect;
    procedure SetFTriggerCls(Value : String);
    procedure SetFStore(Value : TExtDataStore);
    procedure SetFStoreTExtObjectList(Value : TExtObjectList);
    procedure SetFMultiSelect(Value : Boolean);
    procedure SetFDelimiter(Value : String);
    procedure SetFDisplayField(Value : String);
    procedure SetFValueField(Value : String);
    procedure SetFTriggerAction(Value : String);
    procedure SetFAllQuery(Value : String);
    procedure SetFQueryParam(Value : String);
    procedure SetFQueryMode(Value : String);
    procedure SetFPageSize(Value : Integer);
    procedure SetFQueryDelay(Value : Integer);
    procedure SetFMinChars(Value : Integer);
    procedure SetFAutoSelect(Value : Boolean);
    procedure SetFTypeAhead(Value : Boolean);
    procedure SetFTypeAheadDelay(Value : Integer);
    procedure SetFSelectOnTab(Value : Boolean);
    procedure SetFForceSelection(Value : Boolean);
    procedure SetFValueNotFoundText(Value : String);
    procedure SetFDefaultListConfig(Value : TExtObject);
    procedure SetFTransform(Value : String);
    procedure SetFTransformTHTMLElement(Value : THTMLElement);
    procedure SetFTransformTExtElement(Value : TExtElement);
    procedure SetFListConfig(Value : TExtObject);
    procedure SetFOnBeforequery(Value : TExtFormFieldComboBoxOnBeforequery);
    procedure SetFOnSelect(Value : TExtFormFieldComboBoxOnSelect);
    procedure SetFOnBeforeselect(Value : TExtFormFieldComboBoxOnBeforeselect);
    procedure SetFOnBeforedeselect(Value : TExtFormFieldComboBoxOnBeforedeselect);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function GetStore : TExtFunction;
    function DoQuery(QueryString : String; ForceAll : Boolean = false; RawQuery : Boolean = false) : TExtFunction;
    function Select(R : TExtObject; Field : String; Value : TExtObject) : TExtFunction;
    function FindRecordByValue(Value : TExtObject) : TExtFunction;
    function FindRecordByDisplay(Value : TExtObject) : TExtFunction;
    function SetValue(Value : String) : TExtFunction; overload;
    function SetValue(Value : TExtObjectList) : TExtFunction; overload;
    function ClearValue : TExtFunction;
    destructor Destroy; override;
    property TriggerCls : String read FTriggerCls write SetFTriggerCls;
    property Store : TExtDataStore read FStore write SetFStore;
    property StoreTExtObjectList : TExtObjectList read FStoreTExtObjectList write SetFStoreTExtObjectList;
    property MultiSelect : Boolean read FMultiSelect write SetFMultiSelect;
    property Delimiter : String read FDelimiter write SetFDelimiter;
    property DisplayField : String read FDisplayField write SetFDisplayField;
    property ValueField : String read FValueField write SetFValueField;
    property TriggerAction : String read FTriggerAction write SetFTriggerAction;
    property AllQuery : String read FAllQuery write SetFAllQuery;
    property QueryParam : String read FQueryParam write SetFQueryParam;
    property QueryMode : String read FQueryMode write SetFQueryMode;
    property PageSize : Integer read FPageSize write SetFPageSize;
    property QueryDelay : Integer read FQueryDelay write SetFQueryDelay;
    property MinChars : Integer read FMinChars write SetFMinChars;
    property AutoSelect : Boolean read FAutoSelect write SetFAutoSelect;
    property TypeAhead : Boolean read FTypeAhead write SetFTypeAhead;
    property TypeAheadDelay : Integer read FTypeAheadDelay write SetFTypeAheadDelay;
    property SelectOnTab : Boolean read FSelectOnTab write SetFSelectOnTab;
    property ForceSelection : Boolean read FForceSelection write SetFForceSelection;
    property ValueNotFoundText : String read FValueNotFoundText write SetFValueNotFoundText;
    property DefaultListConfig : TExtObject read FDefaultListConfig write SetFDefaultListConfig;
    property Transform : String read FTransform write SetFTransform;
    property TransformTHTMLElement : THTMLElement read FTransformTHTMLElement write SetFTransformTHTMLElement;
    property TransformTExtElement : TExtElement read FTransformTExtElement write SetFTransformTExtElement;
    property ListConfig : TExtObject read FListConfig write SetFListConfig;
    property OnBeforequery : TExtFormFieldComboBoxOnBeforequery read FOnBeforequery write SetFOnBeforequery;
    property OnSelect : TExtFormFieldComboBoxOnSelect read FOnSelect write SetFOnSelect;
    property OnBeforeselect : TExtFormFieldComboBoxOnBeforeselect read FOnBeforeselect write SetFOnBeforeselect;
    property OnBeforedeselect : TExtFormFieldComboBoxOnBeforedeselect read FOnBeforedeselect write SetFOnBeforedeselect;
  end;

  // Procedural types for events TExtFormFieldAncestor
  TExtFormFieldAncestorOnFieldvaliditychange = procedure(This : TExtFormFieldAncestor; The : TExtFormLabelable; IsValid : String) of object;
  TExtFormFieldAncestorOnFielderrorchange = procedure(This : TExtFormFieldAncestor; The : TExtFormLabelable; Error : String) of object;

  TExtFormFieldAncestor = class(TExtFunction)
  private
    FFieldDefaults : TExtObject;
    FOnFieldvaliditychange : TExtFormFieldAncestorOnFieldvaliditychange;
    FOnFielderrorchange : TExtFormFieldAncestorOnFielderrorchange;
    procedure SetFFieldDefaults(Value : TExtObject);
    procedure SetFOnFieldvaliditychange(Value : TExtFormFieldAncestorOnFieldvaliditychange);
    procedure SetFOnFielderrorchange(Value : TExtFormFieldAncestorOnFielderrorchange);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    destructor Destroy; override;
    property FieldDefaults : TExtObject read FFieldDefaults write SetFFieldDefaults;
    property OnFieldvaliditychange : TExtFormFieldAncestorOnFieldvaliditychange read FOnFieldvaliditychange write SetFOnFieldvaliditychange;
    property OnFielderrorchange : TExtFormFieldAncestorOnFielderrorchange read FOnFielderrorchange write SetFOnFielderrorchange;
  end;

  TExtUtilFilter = class(TExtFunction)
  private
    FPropertyJS : String;
    FFilterFn : TExtFunction;
    FAnyMatch : Boolean;
    FExactMatch : Boolean;
    FCaseSensitive : Boolean;
    FRoot : String;
    procedure SetFPropertyJS(Value : String);
    procedure SetFFilterFn(Value : TExtFunction);
    procedure SetFAnyMatch(Value : Boolean);
    procedure SetFExactMatch(Value : Boolean);
    procedure SetFCaseSensitive(Value : Boolean);
    procedure SetFRoot(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Config : TExtObject = nil);
    property PropertyJS : String read FPropertyJS write SetFPropertyJS;
    property FilterFn : TExtFunction read FFilterFn write SetFFilterFn;
    property AnyMatch : Boolean read FAnyMatch write SetFAnyMatch;
    property ExactMatch : Boolean read FExactMatch write SetFExactMatch;
    property CaseSensitive : Boolean read FCaseSensitive write SetFCaseSensitive;
    property Root : String read FRoot write SetFRoot;
  end;

  // Procedural types for events TExtTreePanel
  TExtTreePanelOnBeforeload = procedure of object;
  TExtTreePanelOnLoad = procedure of object;
  TExtTreePanelOnItemappend = procedure of object;
  TExtTreePanelOnItemremove = procedure of object;
  TExtTreePanelOnItemmove = procedure of object;
  TExtTreePanelOnIteminsert = procedure of object;
  TExtTreePanelOnBeforeitemappend = procedure of object;
  TExtTreePanelOnBeforeitemremove = procedure of object;
  TExtTreePanelOnBeforeitemmove = procedure of object;
  TExtTreePanelOnBeforeiteminsert = procedure of object;
  TExtTreePanelOnItemexpand = procedure of object;
  TExtTreePanelOnItemcollapse = procedure of object;
  TExtTreePanelOnBeforeitemexpand = procedure of object;
  TExtTreePanelOnBeforeitemcollapse = procedure of object;
  TExtTreePanelOnCheckchange = procedure(Node : TExtDataModel; Checked : Boolean) of object;

  TExtTreePanel = class(TExtFunction)
  private
    FLines : Boolean;
    FUseArrows : Boolean;
    FSingleExpand : Boolean;
    FAnimate : Boolean;
    FRootVisible : Boolean;
    FDisplayField : Boolean;
    FRoot : TExtDataModel;
    FRootTExtDataNodeInterface : TExtDataNodeInterface;
    FRootTExtObject : TExtObject;
    FHideHeaders : Boolean;
    FFolderSort : Boolean;
    FOnBeforeload : TExtTreePanelOnBeforeload;
    FOnLoad : TExtTreePanelOnLoad;
    FOnItemappend : TExtTreePanelOnItemappend;
    FOnItemremove : TExtTreePanelOnItemremove;
    FOnItemmove : TExtTreePanelOnItemmove;
    FOnIteminsert : TExtTreePanelOnIteminsert;
    FOnBeforeitemappend : TExtTreePanelOnBeforeitemappend;
    FOnBeforeitemremove : TExtTreePanelOnBeforeitemremove;
    FOnBeforeitemmove : TExtTreePanelOnBeforeitemmove;
    FOnBeforeiteminsert : TExtTreePanelOnBeforeiteminsert;
    FOnItemexpand : TExtTreePanelOnItemexpand;
    FOnItemcollapse : TExtTreePanelOnItemcollapse;
    FOnBeforeitemexpand : TExtTreePanelOnBeforeitemexpand;
    FOnBeforeitemcollapse : TExtTreePanelOnBeforeitemcollapse;
    FOnCheckchange : TExtTreePanelOnCheckchange;
    procedure SetFLines(Value : Boolean);
    procedure SetFUseArrows(Value : Boolean);
    procedure SetFSingleExpand(Value : Boolean);
    procedure SetFAnimate(Value : Boolean);
    procedure SetFRootVisible(Value : Boolean);
    procedure SetFDisplayField(Value : Boolean);
    procedure SetFRoot(Value : TExtDataModel);
    procedure SetFRootTExtDataNodeInterface(Value : TExtDataNodeInterface);
    procedure SetFRootTExtObject(Value : TExtObject);
    procedure SetFHideHeaders(Value : Boolean);
    procedure SetFFolderSort(Value : Boolean);
    procedure SetFOnBeforeload(Value : TExtTreePanelOnBeforeload);
    procedure SetFOnLoad(Value : TExtTreePanelOnLoad);
    procedure SetFOnItemappend(Value : TExtTreePanelOnItemappend);
    procedure SetFOnItemremove(Value : TExtTreePanelOnItemremove);
    procedure SetFOnItemmove(Value : TExtTreePanelOnItemmove);
    procedure SetFOnIteminsert(Value : TExtTreePanelOnIteminsert);
    procedure SetFOnBeforeitemappend(Value : TExtTreePanelOnBeforeitemappend);
    procedure SetFOnBeforeitemremove(Value : TExtTreePanelOnBeforeitemremove);
    procedure SetFOnBeforeitemmove(Value : TExtTreePanelOnBeforeitemmove);
    procedure SetFOnBeforeiteminsert(Value : TExtTreePanelOnBeforeiteminsert);
    procedure SetFOnItemexpand(Value : TExtTreePanelOnItemexpand);
    procedure SetFOnItemcollapse(Value : TExtTreePanelOnItemcollapse);
    procedure SetFOnBeforeitemexpand(Value : TExtTreePanelOnBeforeitemexpand);
    procedure SetFOnBeforeitemcollapse(Value : TExtTreePanelOnBeforeitemcollapse);
    procedure SetFOnCheckchange(Value : TExtTreePanelOnCheckchange);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function SetRootNode(Root : TExtDataModel) : TExtFunction; overload;
    function SetRootNode(Root : TExtDataNodeInterface) : TExtFunction; overload;
    function SetRootNode(Root : TExtObject) : TExtFunction; overload;
    function GetRootNode : TExtFunction;
    function GetChecked : TExtFunction;
    function ExpandAll(Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction;
    function CollapseAll(Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction;
    function ExpandPath(Path : String; Field : String = ''; Separator : String = ''; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction;
    function SelectPath(Path : String; Field : String = ''; Separator : String = ''; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction;
    destructor Destroy; override;
    property Lines : Boolean read FLines write SetFLines;
    property UseArrows : Boolean read FUseArrows write SetFUseArrows;
    property SingleExpand : Boolean read FSingleExpand write SetFSingleExpand;
    property Animate : Boolean read FAnimate write SetFAnimate;
    property RootVisible : Boolean read FRootVisible write SetFRootVisible;
    property DisplayField : Boolean read FDisplayField write SetFDisplayField;
    property Root : TExtDataModel read FRoot write SetFRoot;
    property RootTExtDataNodeInterface : TExtDataNodeInterface read FRootTExtDataNodeInterface write SetFRootTExtDataNodeInterface;
    property RootTExtObject : TExtObject read FRootTExtObject write SetFRootTExtObject;
    property HideHeaders : Boolean read FHideHeaders write SetFHideHeaders;
    property FolderSort : Boolean read FFolderSort write SetFFolderSort;
    property OnBeforeload : TExtTreePanelOnBeforeload read FOnBeforeload write SetFOnBeforeload;
    property OnLoad : TExtTreePanelOnLoad read FOnLoad write SetFOnLoad;
    property OnItemappend : TExtTreePanelOnItemappend read FOnItemappend write SetFOnItemappend;
    property OnItemremove : TExtTreePanelOnItemremove read FOnItemremove write SetFOnItemremove;
    property OnItemmove : TExtTreePanelOnItemmove read FOnItemmove write SetFOnItemmove;
    property OnIteminsert : TExtTreePanelOnIteminsert read FOnIteminsert write SetFOnIteminsert;
    property OnBeforeitemappend : TExtTreePanelOnBeforeitemappend read FOnBeforeitemappend write SetFOnBeforeitemappend;
    property OnBeforeitemremove : TExtTreePanelOnBeforeitemremove read FOnBeforeitemremove write SetFOnBeforeitemremove;
    property OnBeforeitemmove : TExtTreePanelOnBeforeitemmove read FOnBeforeitemmove write SetFOnBeforeitemmove;
    property OnBeforeiteminsert : TExtTreePanelOnBeforeiteminsert read FOnBeforeiteminsert write SetFOnBeforeiteminsert;
    property OnItemexpand : TExtTreePanelOnItemexpand read FOnItemexpand write SetFOnItemexpand;
    property OnItemcollapse : TExtTreePanelOnItemcollapse read FOnItemcollapse write SetFOnItemcollapse;
    property OnBeforeitemexpand : TExtTreePanelOnBeforeitemexpand read FOnBeforeitemexpand write SetFOnBeforeitemexpand;
    property OnBeforeitemcollapse : TExtTreePanelOnBeforeitemcollapse read FOnBeforeitemcollapse write SetFOnBeforeitemcollapse;
    property OnCheckchange : TExtTreePanelOnCheckchange read FOnCheckchange write SetFOnCheckchange;
  end;

  TExtUtilComponentDragger = class(TExtFunction)
  private
    FConstrain : Boolean;
    FDelegate : String;
    FDelegateTExtElement : TExtElement;
    FConstrainDelegate : Boolean;
    procedure SetFConstrain(Value : Boolean);
    procedure SetFDelegate(Value : String);
    procedure SetFDelegateTExtElement(Value : TExtElement);
    procedure SetFConstrainDelegate(Value : Boolean);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    constructor Create(Comp : TExtObject; Config : TExtObject = nil);
    destructor Destroy; override;
    property Constrain : Boolean read FConstrain write SetFConstrain;
    property Delegate : String read FDelegate write SetFDelegate;
    property DelegateTExtElement : TExtElement read FDelegateTExtElement write SetFDelegateTExtElement;
    property ConstrainDelegate : Boolean read FConstrainDelegate write SetFConstrainDelegate;
  end;

  // Procedural types for events TExtFormFieldText
  TExtFormFieldTextOnAutosize = procedure(This : TExtFormFieldText; Width : Integer) of object;
  TExtFormFieldTextOnKeydown = procedure(This : TExtFormFieldText; E : TExtEventObjectSingleton; This_ : TExtFormFieldText; E_ : TExtEventObjectSingleton; This__ : TExtFormFieldText; E__ : TExtEventObjectSingleton) of object;

  TExtFormFieldText = class(TExtFunction)
  private
    FVtypeText : String;
    FStripCharsRe : TRegExp;
    FSize : Integer;
    FGrow : Boolean;
    FGrowMin : Integer;
    FGrowMax : Integer;
    FGrowAppend : String;
    FVtype : String;
    FMaskRe : TRegExp;
    FDisableKeyFilter : Boolean;
    FAllowBlank : Boolean;
    FMinLength : Integer;
    FMaxLength : Integer;
    FEnforceMaxLength : Boolean;
    FMinLengthText : String;
    FMaxLengthText : String;
    FSelectOnFocus : Boolean;
    FBlankText : String;
    FValidator : TExtFunction;
    FRegex : TRegExp;
    FRegexText : String;
    FEmptyText : String;
    FEmptyCls : String;
    FEnableKeyEvents : Boolean;
    FOnAutosize : TExtFormFieldTextOnAutosize;
    FOnKeydown : TExtFormFieldTextOnKeydown;
    procedure SetFVtypeText(Value : String);
    procedure SetFStripCharsRe(Value : TRegExp);
    procedure SetFSize(Value : Integer);
    procedure SetFGrow(Value : Boolean);
    procedure SetFGrowMin(Value : Integer);
    procedure SetFGrowMax(Value : Integer);
    procedure SetFGrowAppend(Value : String);
    procedure SetFVtype(Value : String);
    procedure SetFMaskRe(Value : TRegExp);
    procedure SetFDisableKeyFilter(Value : Boolean);
    procedure SetFAllowBlank(Value : Boolean);
    procedure SetFMinLength(Value : Integer);
    procedure SetFMaxLength(Value : Integer);
    procedure SetFEnforceMaxLength(Value : Boolean);
    procedure SetFMinLengthText(Value : String);
    procedure SetFMaxLengthText(Value : String);
    procedure SetFSelectOnFocus(Value : Boolean);
    procedure SetFBlankText(Value : String);
    procedure SetFValidator(Value : TExtFunction);
    procedure SetFRegex(Value : TRegExp);
    procedure SetFRegexText(Value : String);
    procedure SetFEmptyText(Value : String);
    procedure SetFEmptyCls(Value : String);
    procedure SetFEnableKeyEvents(Value : Boolean);
    procedure SetFOnAutosize(Value : TExtFormFieldTextOnAutosize);
    procedure SetFOnKeydown(Value : TExtFormFieldTextOnKeydown);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    class function Value : TExtObject;
    class function Return : Boolean;
    class function ReturnString : String;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function ProcessRawValue(Value : String) : TExtFunction;
    function Reset : TExtFunction;
    function GetRawValue : TExtFunction;
    function SetValue(Value : TExtObject) : TExtFunction;
    function GetErrors(Value : TExtObject) : TExtFunction;
    function SelectText(Start : Integer = 0; EndJS : Integer = 0) : TExtFunction;
    function AutoSize : TExtFunction;
    property VtypeText : String read FVtypeText write SetFVtypeText;
    property StripCharsRe : TRegExp read FStripCharsRe write SetFStripCharsRe;
    property Size : Integer read FSize write SetFSize;
    property Grow : Boolean read FGrow write SetFGrow;
    property GrowMin : Integer read FGrowMin write SetFGrowMin;
    property GrowMax : Integer read FGrowMax write SetFGrowMax;
    property GrowAppend : String read FGrowAppend write SetFGrowAppend;
    property Vtype : String read FVtype write SetFVtype;
    property MaskRe : TRegExp read FMaskRe write SetFMaskRe;
    property DisableKeyFilter : Boolean read FDisableKeyFilter write SetFDisableKeyFilter;
    property AllowBlank : Boolean read FAllowBlank write SetFAllowBlank;
    property MinLength : Integer read FMinLength write SetFMinLength;
    property MaxLength : Integer read FMaxLength write SetFMaxLength;
    property EnforceMaxLength : Boolean read FEnforceMaxLength write SetFEnforceMaxLength;
    property MinLengthText : String read FMinLengthText write SetFMinLengthText;
    property MaxLengthText : String read FMaxLengthText write SetFMaxLengthText;
    property SelectOnFocus : Boolean read FSelectOnFocus write SetFSelectOnFocus;
    property BlankText : String read FBlankText write SetFBlankText;
    property Validator : TExtFunction read FValidator write SetFValidator;
    property Regex : TRegExp read FRegex write SetFRegex;
    property RegexText : String read FRegexText write SetFRegexText;
    property EmptyText : String read FEmptyText write SetFEmptyText;
    property EmptyCls : String read FEmptyCls write SetFEmptyCls;
    property EnableKeyEvents : Boolean read FEnableKeyEvents write SetFEnableKeyEvents;
    property OnAutosize : TExtFormFieldTextOnAutosize read FOnAutosize write SetFOnAutosize;
    property OnKeydown : TExtFormFieldTextOnKeydown read FOnKeydown write SetFOnKeydown;
  end;

  TExtTemplate = class(TExtFunction)
  private
    FCompiled : Boolean;
    FDisableFormats : Boolean;
    procedure SetFCompiled(Value : Boolean);
    procedure SetFDisableFormats(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function ApplyTemplate(Values : TExtObject) : TExtFunction; overload;
    function ApplyTemplate(Values : TExtObjectList) : TExtFunction; overload;
    function SetJS(Html : String; Compile : Boolean = false) : TExtFunction;
    function Compile : TExtFunction;
    function InsertFirst(El : String; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertFirst(El : THTMLElement; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertFirst(El : THTMLElement; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertFirst(El : TExtElement; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertFirst(El : TExtElement; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertFirst(El : String; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertBefore(El : String; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertBefore(El : THTMLElement; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertBefore(El : THTMLElement; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertBefore(El : TExtElement; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertBefore(El : TExtElement; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertBefore(El : String; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertAfter(El : String; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertAfter(El : THTMLElement; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertAfter(El : THTMLElement; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertAfter(El : TExtElement; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertAfter(El : TExtElement; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; overload;
    function InsertAfter(El : String; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Append(El : String; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Append(El : THTMLElement; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Append(El : THTMLElement; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Append(El : TExtElement; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Append(El : TExtElement; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Append(El : String; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Overwrite(El : String; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Overwrite(El : THTMLElement; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Overwrite(El : THTMLElement; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Overwrite(El : TExtElement; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Overwrite(El : TExtElement; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Overwrite(El : String; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; overload;
    function Apply : TExtFunction;
    property Compiled : Boolean read FCompiled write SetFCompiled;
    property DisableFormats : Boolean read FDisableFormats write SetFDisableFormats;
  end;

  TExtLayoutContainerCheckboxGroup = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtFormActionDirectLoad = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtUtilPoint = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    class function FromEvent(E : TEvent) : TExtFunction;
    constructor Create(X : Integer; Y : Integer);
    function ToString : TExtFunction;
    function Equals(The : TExtUtilPoint) : TExtFunction; overload;
    function Equals(The : TExtObject) : TExtFunction; overload;
    function IsWithin(P : TExtUtilPoint; Threshold : TExtObject) : TExtFunction; overload;
    function IsWithin(P : TExtObject; Threshold : TExtObject) : TExtFunction; overload;
    function IsWithin(P : TExtObject; Threshold : Integer) : TExtFunction; overload;
    function IsWithin(P : TExtUtilPoint; Threshold : Integer) : TExtFunction; overload;
    function RoundedEquals(P : TExtUtilPoint) : TExtFunction; overload;
    function RoundedEquals(P : TExtObject) : TExtFunction; overload;
    function Translate : TExtFunction;
  end;

  // Procedural types for events TExtButtonCycle
  TExtButtonCycleOnChange = procedure(This : TExtButtonCycle; Item : TExtMenuCheckItem) of object;

  TExtButtonCycle = class(TExtFunction)
  private
    FItems : TExtObjectList;
    FShowText : Boolean;
    FPrependText : String;
    FChangeHandler : TExtFunction;
    FForceIcon : String;
    FOnChange : TExtButtonCycleOnChange;
    procedure SetFItems(Value : TExtObjectList);
    procedure SetFShowText(Value : Boolean);
    procedure SetFPrependText(Value : String);
    procedure SetFChangeHandler(Value : TExtFunction);
    procedure SetFForceIcon(Value : String);
    procedure SetFOnChange(Value : TExtButtonCycleOnChange);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function ToggleSelected : TExtFunction;
    destructor Destroy; override;
    property Items : TExtObjectList read FItems write SetFItems;
    property ShowText : Boolean read FShowText write SetFShowText;
    property PrependText : String read FPrependText write SetFPrependText;
    property ChangeHandler : TExtFunction read FChangeHandler write SetFChangeHandler;
    property ForceIcon : String read FForceIcon write SetFForceIcon;
    property OnChange : TExtButtonCycleOnChange read FOnChange write SetFOnChange;
  end;

  TExtGridFeatureChunking = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtEventManagerSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function OnDocumentReady(Fn : TExtFunction; Scope : TExtObject = nil; Options : Boolean = false) : TExtFunction;
    function GetId(Element : THTMLElement) : TExtFunction; overload;
    function GetId(Element : TExtElement) : TExtFunction; overload;
    function AddListener(El : String; EventName : String; Handler : TExtFunction; Scope : TExtObject = nil; Options : TExtObject = nil) : TExtFunction; overload;
    function AddListener(El : THTMLElement; EventName : String; Handler : TExtFunction; Scope : TExtObject = nil; Options : TExtObject = nil) : TExtFunction; overload;
    function RemoveListener(El : String; EventName : String; Fn : TExtFunction; Scope : TExtObject) : TExtFunction; overload;
    function RemoveListener(El : THTMLElement; EventName : String; Fn : TExtFunction; Scope : TExtObject) : TExtFunction; overload;
    function RemoveAll(El : String) : TExtFunction; overload;
    function RemoveAll(El : THTMLElement) : TExtFunction; overload;
    function PurgeElement(El : String; EventName : String = '') : TExtFunction; overload;
    function PurgeElement(El : THTMLElement; EventName : String = '') : TExtFunction; overload;
    function StopEvent(The : TEvent) : TExtFunction;
    function StopPropagation(The : TEvent) : TExtFunction;
    function PreventDefault(The : TEvent) : TExtFunction;
    function GetRelatedTarget(Event : TExtObject) : TExtFunction;
    function GetPageX(Event : TExtObject) : TExtFunction;
    function GetPageY(Event : TExtObject) : TExtFunction;
    function GetPageXY(Event : TExtObject) : TExtFunction;
    function GetTarget(Event : TExtObject) : TExtFunction;
    function OnWindowResize(Fn : TExtFunction; Param : TExtObject; _ : Boolean) : TExtFunction;
    function RemoveResizeListener(Fn : TExtFunction; Param : TExtObject) : TExtFunction;
    function RemoveUnloadListener(Fn : TExtFunction; Param : TExtObject) : TExtFunction;
    function GetKeyEvent : TExtFunction;
    function OnReady : TExtFunction;
    function OnDocumentReady_ : TExtFunction;
    function On : TExtFunction;
    function Un : TExtFunction;
  end;

  // Procedural types for events TExtFocusManagerSingleton
  TExtFocusManagerSingletonOnBeforecomponentfocus = procedure(Fm : TExtFocusManagerSingleton; Cmp : TExtComponent; PreviousCmp : TExtComponent) of object;
  TExtFocusManagerSingletonOnComponentfocus = procedure(Fm : TExtFocusManagerSingleton; Cmp : TExtComponent; PreviousCmp : TExtComponent) of object;
  TExtFocusManagerSingletonOnDisable = procedure(Fm : TExtFocusManagerSingleton) of object;
  TExtFocusManagerSingletonOnEnable = procedure(Fm : TExtFocusManagerSingleton) of object;

  TExtFocusManagerSingleton = class(TExtFunction)
  private
    FOnBeforecomponentfocus : TExtFocusManagerSingletonOnBeforecomponentfocus;
    FOnComponentfocus : TExtFocusManagerSingletonOnComponentfocus;
    FOnDisable : TExtFocusManagerSingletonOnDisable;
    FOnEnable : TExtFocusManagerSingletonOnEnable;
    procedure SetFOnBeforecomponentfocus(Value : TExtFocusManagerSingletonOnBeforecomponentfocus);
    procedure SetFOnComponentfocus(Value : TExtFocusManagerSingletonOnComponentfocus);
    procedure SetFOnDisable(Value : TExtFocusManagerSingletonOnDisable);
    procedure SetFOnEnable(Value : TExtFocusManagerSingletonOnEnable);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function AddXTypeToWhitelist(Xtype : String) : TExtFunction; overload;
    function AddXTypeToWhitelist(Xtype : TExtObjectList) : TExtFunction; overload;
    function Disable : TExtFunction;
    function Enable(Options : Boolean) : TExtFunction; overload;
    function Enable(Options : TExtObject) : TExtFunction; overload;
    function RemoveXTypeFromWhitelist(Xtype : String) : TExtFunction; overload;
    function RemoveXTypeFromWhitelist(Xtype : TExtObjectList) : TExtFunction; overload;
    function Subscribe(Container : TExtContainerContainer; Options : Boolean; OptionsKeys : TExtObjectList; OptionsFocusFrame : Boolean) : TExtFunction; overload;
    function Subscribe(Container : TExtContainerContainer; Options : TExtObject; OptionsKeys : TExtObjectList; OptionsFocusFrame : Boolean) : TExtFunction; overload;
    function Subscribe(Container : TExtContainerContainer; Options : TExtObject; OptionsKeys : TExtObject; OptionsFocusFrame : Boolean) : TExtFunction; overload;
    function Subscribe(Container : TExtContainerContainer; Options : Boolean; OptionsKeys : TExtObject; OptionsFocusFrame : Boolean) : TExtFunction; overload;
    function Unsubscribe(Container : TExtContainerContainer) : TExtFunction;
    property OnBeforecomponentfocus : TExtFocusManagerSingletonOnBeforecomponentfocus read FOnBeforecomponentfocus write SetFOnBeforecomponentfocus;
    property OnComponentfocus : TExtFocusManagerSingletonOnComponentfocus read FOnComponentfocus write SetFOnComponentfocus;
    property OnDisable : TExtFocusManagerSingletonOnDisable read FOnDisable write SetFOnDisable;
    property OnEnable : TExtFocusManagerSingletonOnEnable read FOnEnable write SetFOnEnable;
  end;

  // Procedural types for events TExtToolbarPaging
  TExtToolbarPagingOnChange = procedure(This : TExtToolbarPaging; PageData : TExtObject) of object;
  TExtToolbarPagingOnBeforechange = procedure(This : TExtToolbarPaging; Page : Integer) of object;

  TExtToolbarPaging = class(TExtFunction)
  private
    FStore : TExtDataStore;
    FDisplayInfo : Boolean;
    FPrependButtons : Boolean;
    FDisplayMsg : String;
    FEmptyMsg : String;
    FBeforePageText : String;
    FAfterPageText : String;
    FFirstText : String;
    FPrevText : String;
    FNextText : String;
    FLastText : String;
    FRefreshText : String;
    FInputItemWidth : Integer;
    FOnChange : TExtToolbarPagingOnChange;
    FOnBeforechange : TExtToolbarPagingOnBeforechange;
    procedure SetFStore(Value : TExtDataStore);
    procedure SetFDisplayInfo(Value : Boolean);
    procedure SetFPrependButtons(Value : Boolean);
    procedure SetFDisplayMsg(Value : String);
    procedure SetFEmptyMsg(Value : String);
    procedure SetFBeforePageText(Value : String);
    procedure SetFAfterPageText(Value : String);
    procedure SetFFirstText(Value : String);
    procedure SetFPrevText(Value : String);
    procedure SetFNextText(Value : String);
    procedure SetFLastText(Value : String);
    procedure SetFRefreshText(Value : String);
    procedure SetFInputItemWidth(Value : Integer);
    procedure SetFOnChange(Value : TExtToolbarPagingOnChange);
    procedure SetFOnBeforechange(Value : TExtToolbarPagingOnBeforechange);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function MoveFirst : TExtFunction;
    function MovePrevious : TExtFunction;
    function MoveNext : TExtFunction;
    function MoveLast : TExtFunction;
    function DoRefresh : TExtFunction;
    function BindStore(Store : TExtDataStore; Initial : Boolean = false) : TExtFunction;
    function Unbind(Store : TExtDataStore) : TExtFunction;
    function Bind(Store : TExtDataStore) : TExtFunction;
    destructor Destroy; override;
    property Store : TExtDataStore read FStore write SetFStore;
    property DisplayInfo : Boolean read FDisplayInfo write SetFDisplayInfo;
    property PrependButtons : Boolean read FPrependButtons write SetFPrependButtons;
    property DisplayMsg : String read FDisplayMsg write SetFDisplayMsg;
    property EmptyMsg : String read FEmptyMsg write SetFEmptyMsg;
    property BeforePageText : String read FBeforePageText write SetFBeforePageText;
    property AfterPageText : String read FAfterPageText write SetFAfterPageText;
    property FirstText : String read FFirstText write SetFFirstText;
    property PrevText : String read FPrevText write SetFPrevText;
    property NextText : String read FNextText write SetFNextText;
    property LastText : String read FLastText write SetFLastText;
    property RefreshText : String read FRefreshText write SetFRefreshText;
    property InputItemWidth : Integer read FInputItemWidth write SetFInputItemWidth;
    property OnChange : TExtToolbarPagingOnChange read FOnChange write SetFOnChange;
    property OnBeforechange : TExtToolbarPagingOnBeforechange read FOnBeforechange write SetFOnBeforechange;
  end;

  TExtSliderSingle = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetValue : TExtFunction;
    function SetValue(Value : Integer; Animate : Boolean = false) : TExtFunction;
  end;

  TExtVersion = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Version : String);
    constructor Create(Version : Integer);
    function GetMajor : TExtFunction;
    function GetMinor : TExtFunction;
    function GetPatch : TExtFunction;
    function GetBuild : TExtFunction;
    function GetRelease : TExtFunction;
    function IsGreaterThan(Target : String) : TExtFunction; overload;
    function IsGreaterThan(Target : Integer) : TExtFunction; overload;
    function IsLessThan(Target : String) : TExtFunction; overload;
    function IsLessThan(Target : Integer) : TExtFunction; overload;
    function Equals(Target : String) : TExtFunction; overload;
    function Equals(Target : Integer) : TExtFunction; overload;
    function Match(Target : String) : TExtFunction; overload;
    function Match(Target : Integer) : TExtFunction; overload;
    function ToArray : TExtFunction;
    function GetShortVersion : TExtFunction;
    class function GetComponentValue(Value : TExtObject) : TExtFunction;
    class function Compare(Current : String; Target : String) : TExtFunction;
    function SetVersion(PackageName : String; Version : String) : TExtFunction; overload;
    function SetVersion(PackageName : String; Version : TExtVersion) : TExtFunction; overload;
    function GetVersion(PackageName : String = '') : TExtFunction;
    function Deprecate(PackageName : String; Since : String; Closure : TExtFunction; Scope : TExtObject) : TExtFunction;
  end;

  // Procedural types for events TExtGridPluginCellEditing
  TExtGridPluginCellEditingOnBeforeedit = procedure(E : TExtObject) of object;
  TExtGridPluginCellEditingOnEdit = procedure(Editor : TExtGridPluginEditing; E : TExtObject) of object;
  TExtGridPluginCellEditingOnValidateedit = procedure(Editor : TExtGridPluginEditing; E : TExtObject) of object;

  TExtGridPluginCellEditing = class(TExtFunction)
  private
    FOnBeforeedit : TExtGridPluginCellEditingOnBeforeedit;
    FOnEdit : TExtGridPluginCellEditingOnEdit;
    FOnValidateedit : TExtGridPluginCellEditingOnValidateedit;
    procedure SetFOnBeforeedit(Value : TExtGridPluginCellEditingOnBeforeedit);
    procedure SetFOnEdit(Value : TExtGridPluginCellEditingOnEdit);
    procedure SetFOnValidateedit(Value : TExtGridPluginCellEditingOnValidateedit);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function StartEdit(RecordJS : TExtDataModel; ColumnHeader : TExtDataModel) : TExtFunction;
    function CancelEdit : TExtFunction;
    function StartEditByPosition(Position : TExtObject) : TExtFunction;
    property OnBeforeedit : TExtGridPluginCellEditingOnBeforeedit read FOnBeforeedit write SetFOnBeforeedit;
    property OnEdit : TExtGridPluginCellEditingOnEdit read FOnEdit write SetFOnEdit;
    property OnValidateedit : TExtGridPluginCellEditingOnValidateedit read FOnValidateedit write SetFOnValidateedit;
  end;

  TExtFunctionSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function FlexSetter(Setter : TExtFunction) : TExtFunctionSingleton;
    function Bind(Fn : TExtFunction; Scope : TExtObject = nil; Args : TExtObjectList = nil; AppendArgs : Boolean = false) : TExtFunctionSingleton; overload;
    function Bind(Fn : TExtFunction; Scope : TExtObject; Args : TExtObjectList; AppendArgs : Integer) : TExtFunctionSingleton; overload;
    function Pass(Fn : TExtFunction; Args : TExtObjectList; Scope : TExtObject = nil) : TExtFunctionSingleton;
    function Alias(ObjectJS : TExtObject; MethodName : String) : TExtFunctionSingleton; overload;
    function Alias(ObjectJS : TExtFunction; MethodName : String) : TExtFunctionSingleton; overload;
    function CreateInterceptor(OrigFn : TExtFunction; NewFn : TExtFunction; Scope : TExtObject = nil; ReturnValue : TExtObject = nil) : TExtFunctionSingleton;
    function CreateDelayed(Fn : TExtFunction; Delay : Integer; Scope : TExtObject = nil; Args : TExtObjectList = nil; AppendArgs : Boolean = false) : TExtFunctionSingleton; overload;
    function CreateDelayed(Fn : TExtFunction; Delay : Integer; Scope : TExtObject; Args : TExtObjectList; AppendArgs : Integer) : TExtFunctionSingleton; overload;
    function Defer(Fn : TExtFunction; Millis : Integer; Scope : TExtObject = nil; Args : TExtObjectList = nil; AppendArgs : Boolean = false) : TExtFunctionSingleton; overload;
    function Defer(Fn : TExtFunction; Millis : Integer; Scope : TExtObject; Args : TExtObjectList; AppendArgs : Integer) : TExtFunctionSingleton; overload;
    function CreateSequence(OrigFn : TExtFunction; NewFn : TExtFunction; Scope : TExtObject = nil) : TExtFunctionSingleton;
    function CreateBuffered(Fn : TExtFunction; Buffer : Integer; Scope : TExtObject = nil; Args : TExtObjectList = nil) : TExtFunctionSingleton;
    function CreateThrottled(Fn : TExtFunction; Interval : Integer; Scope : TExtObject = nil) : TExtFunctionSingleton;
    function InterceptBefore(ObjectJS : TExtObject; MethodName : String; Fn : TExtFunction) : TExtFunctionSingleton;
    function InterceptAfter(ObjectJS : TExtObject; MethodName : String; Fn : TExtFunction) : TExtFunctionSingleton;
    function Defer_ : TExtFunctionSingleton;
    function Pass_ : TExtFunctionSingleton;
    function Bind_ : TExtFunctionSingleton;
  end;

  TExtLayoutContainerAuto = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtDataOperation = class(TExtFunction)
  private
    FSynchronous : Boolean;
    FAction : String;
    FFilters : TExtObjectList;
    FSorters : TExtObjectList;
    FGroup : TExtUtilGrouper;
    FStart : Integer;
    FLimit : Integer;
    FBatch : TExtDataBatch;
    FCallback : TExtFunction;
    FScope : TExtObject;
    procedure SetFSynchronous(Value : Boolean);
    procedure SetFAction(Value : String);
    procedure SetFFilters(Value : TExtObjectList);
    procedure SetFSorters(Value : TExtObjectList);
    procedure SetFGroup(Value : TExtUtilGrouper);
    procedure SetFStart(Value : Integer);
    procedure SetFLimit(Value : Integer);
    procedure SetFBatch(Value : TExtDataBatch);
    procedure SetFCallback(Value : TExtFunction);
    procedure SetFScope(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    constructor Create(Config : TExtObject = nil);
    function CommitRecords(ServerRecords : TExtObjectList) : TExtFunction;
    function SetStarted : TExtFunction;
    function SetCompleted : TExtFunction;
    function SetSuccessful : TExtFunction;
    function SetException(Error : String = '') : TExtFunction; overload;
    function SetException(Error : TExtObject) : TExtFunction; overload;
    function HasException : TExtFunction;
    function GetError : TExtFunction;
    function GetRecords : TExtFunction;
    function GetResultSet : TExtFunction;
    function IsStarted : TExtFunction;
    function IsRunning : TExtFunction;
    function IsComplete : TExtFunction;
    function WasSuccessful : TExtFunction;
    function AllowWrite : TExtFunction;
    destructor Destroy; override;
    property Synchronous : Boolean read FSynchronous write SetFSynchronous;
    property Action : String read FAction write SetFAction;
    property Filters : TExtObjectList read FFilters write SetFFilters;
    property Sorters : TExtObjectList read FSorters write SetFSorters;
    property Group : TExtUtilGrouper read FGroup write SetFGroup;
    property Start : Integer read FStart write SetFStart;
    property Limit : Integer read FLimit write SetFLimit;
    property Batch : TExtDataBatch read FBatch write SetFBatch;
    property Callback : TExtFunction read FCallback write SetFCallback;
    property Scope : TExtObject read FScope write SetFScope;
  end;

  TExtFormFieldTextArea = class(TExtFunction)
  private
    FGrowMin : Integer;
    FGrowMax : Integer;
    FGrowAppend : String;
    FCols : Integer;
    FCols_ : Integer;
    FEnterIsSpecial : Boolean;
    FPreventScrollbars : Boolean;
    procedure SetFGrowMin(Value : Integer);
    procedure SetFGrowMax(Value : Integer);
    procedure SetFGrowAppend(Value : String);
    procedure SetFCols(Value : Integer);
    procedure SetFCols_(Value : Integer);
    procedure SetFEnterIsSpecial(Value : Boolean);
    procedure SetFPreventScrollbars(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function AutoSize : TExtFunction;
    property GrowMin : Integer read FGrowMin write SetFGrowMin;
    property GrowMax : Integer read FGrowMax write SetFGrowMax;
    property GrowAppend : String read FGrowAppend write SetFGrowAppend;
    property Cols : Integer read FCols write SetFCols;
    property Cols_ : Integer read FCols_ write SetFCols_;
    property EnterIsSpecial : Boolean read FEnterIsSpecial write SetFEnterIsSpecial;
    property PreventScrollbars : Boolean read FPreventScrollbars write SetFPreventScrollbars;
  end;

  TExtDrawEngineVml = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function AddGradient(Gradient : TExtObject) : TExtFunction;
  end;

  TExtDataProxyDirect = class(TExtFunction)
  private
    FParamOrder : String;
    FParamOrderTExtObjectList : TExtObjectList;
    FParamsAsHash : Boolean;
    FDirectFn : TExtFunction;
    FApi : TExtObject;
    FExtraParams : TExtObject;
    procedure SetFParamOrder(Value : String);
    procedure SetFParamOrderTExtObjectList(Value : TExtObjectList);
    procedure SetFParamsAsHash(Value : Boolean);
    procedure SetFDirectFn(Value : TExtFunction);
    procedure SetFApi(Value : TExtObject);
    procedure SetFExtraParams(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    destructor Destroy; override;
    property ParamOrder : String read FParamOrder write SetFParamOrder;
    property ParamOrderTExtObjectList : TExtObjectList read FParamOrderTExtObjectList write SetFParamOrderTExtObjectList;
    property ParamsAsHash : Boolean read FParamsAsHash write SetFParamsAsHash;
    property DirectFn : TExtFunction read FDirectFn write SetFDirectFn;
    property Api : TExtObject read FApi write SetFApi;
    property ExtraParams : TExtObject read FExtraParams write SetFExtraParams;
  end;

  TExtGridColumnAction = class(TExtFunction)
  private
    FIcon : String;
    FIconCls : String;
    FHandler : TExtFunction;
    FScope : TExtObject;
    FTooltip : String;
    FDisabled : Boolean;
    FStopSelection : Boolean;
    FGetClass : TExtFunction;
    FItems : TExtObjectList;
    procedure SetFIcon(Value : String);
    procedure SetFIconCls(Value : String);
    procedure SetFHandler(Value : TExtFunction);
    procedure SetFScope(Value : TExtObject);
    procedure SetFTooltip(Value : String);
    procedure SetFDisabled(Value : Boolean);
    procedure SetFStopSelection(Value : Boolean);
    procedure SetFGetClass(Value : TExtFunction);
    procedure SetFItems(Value : TExtObjectList);
  public
    function JSClassName : string; override;
    class function View : TExtViewTable;
    class function RowIndex : Integer;
    class function ColIndex : Integer;
    class function Item : TExtObject;
    class function E : TEvent;
    class function V : TExtObject;
    class function Metadata : TExtObject;
    class function Css : String;
    class function Attr : String;
    class function R : TExtDataModel;
    class function RowIndex_ : Integer;
    class function ColIndex_ : Integer;
    class function Store : TExtDataStore;
    class function Icon_ : String;
    class function IconCls_ : String;
    class function GetClass_ : TExtFunction;
    class function V_ : TExtObject;
    class function Metadata_ : TExtObject;
    class function Css_ : String;
    class function Attr_ : String;
    class function R_ : TExtDataModel;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function EnableAction : TExtFunction;
    function DisableAction : TExtFunction;
    property Icon : String read FIcon write SetFIcon;
    property IconCls : String read FIconCls write SetFIconCls;
    property Handler : TExtFunction read FHandler write SetFHandler;
    property Scope : TExtObject read FScope write SetFScope;
    property Tooltip : String read FTooltip write SetFTooltip;
    property Disabled : Boolean read FDisabled write SetFDisabled;
    property StopSelection : Boolean read FStopSelection write SetFStopSelection;
    property GetClass : TExtFunction read FGetClass write SetFGetClass;
    property Items : TExtObjectList read FItems write SetFItems;
  end;

  TExtEnvFeatureDetector = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtCompositeElement = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Select(Selector : String; Unique : Boolean = false; Root : THTMLElement = nil) : TExtFunction; overload;
    function Select(Selector : TExtObjectList; Unique : Boolean = false; Root : THTMLElement = nil) : TExtFunction; overload;
    function Select(Selector : TExtObjectList; Unique : Boolean; Root : String) : TExtFunction; overload;
    function Select(Selector : String; Unique : Boolean; Root : String) : TExtFunction; overload;
    function Select_ : TExtFunction;
  end;

  TExtAppController = class(TExtFunction)
  private
    FId : String;
    FModels : TExtObjectList;
    FViews : TExtObjectList;
    FStores : TExtObjectList;
    procedure SetFId(Value : String);
    procedure SetFModels(Value : TExtObjectList);
    procedure SetFViews(Value : TExtObjectList);
    procedure SetFStores(Value : TExtObjectList);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    constructor Create(Config : TExtObject = nil);
    function Init(Application : TExtAppApplication) : TExtFunction;
    function OnLaunch(Application : TExtAppApplication) : TExtFunction;
    function Control(Selectors : String; Listeners : TExtObject; Name : String) : TExtFunction; overload;
    function Control(Selectors : TExtObject; Listeners : TExtObject; Name : String) : TExtFunction; overload;
    function GetStore(Name : String) : TExtFunction;
    function GetModel(Name : String) : TExtFunction;
    function GetView(Name : String) : TExtFunction;
    destructor Destroy; override;
    property Id : String read FId write SetFId;
    property Models : TExtObjectList read FModels write SetFModels;
    property Views : TExtObjectList read FViews write SetFViews;
    property Stores : TExtObjectList read FStores write SetFStores;
  end;

  TExtUtilFloating = class(TExtFunction)
  private
    FFocusOnToFront : Boolean;
    FShadow : String;
    FShadowBoolean : Boolean;
    procedure SetFFocusOnToFront(Value : Boolean);
    procedure SetFShadow(Value : String);
    procedure SetFShadowBoolean(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function DoConstrain(ConstrainTo : String = '') : TExtFunction; overload;
    function DoConstrain(ConstrainTo : THTMLElement) : TExtFunction; overload;
    function DoConstrain(ConstrainTo : TExtElement) : TExtFunction; overload;
    function DoConstrain(ConstrainTo : TExtUtilRegion) : TExtFunction; overload;
    function AlignTo(Element : TExtComponent; Position : String = ''; Offsets : TArrayOfInteger = nil) : TExtFunction; overload;
    function AlignTo(Element : TExtElement; Position : String = ''; Offsets : TArrayOfInteger = nil) : TExtFunction; overload;
    function AlignTo(Element : THTMLElement; Position : String = ''; Offsets : TArrayOfInteger = nil) : TExtFunction; overload;
    function AlignTo(Element : String; Position : String = ''; Offsets : TArrayOfInteger = nil) : TExtFunction; overload;
    function ToFront(PreventFocus : Boolean = false) : TExtFunction;
    function SetActive(Active : Boolean = false; NewActive : TExtComponent = nil) : TExtFunction;
    function ToBack : TExtFunction;
    function Center : TExtFunction;
    property FocusOnToFront : Boolean read FFocusOnToFront write SetFFocusOnToFront;
    property Shadow : String read FShadow write SetFShadow;
    property ShadowBoolean : Boolean read FShadowBoolean write SetFShadowBoolean;
  end;

  TExtFxTargetCompositeElement = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtUtilKeyNav = class(TExtFunction)
  private
    FDisabled : Boolean;
    FDefaultEventAction : String;
    FForceKeyDown : Boolean;
    procedure SetFDisabled(Value : Boolean);
    procedure SetFDefaultEventAction(Value : String);
    procedure SetFForceKeyDown(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function DestroyJS(RemoveEl : Boolean) : TExtFunction; reintroduce;
    function Enable : TExtFunction;
    function Disable : TExtFunction;
    function SetDisabled(Disabled : Boolean) : TExtFunction;
    function GetKeyEvent : TExtFunction;
    property Disabled : Boolean read FDisabled write SetFDisabled;
    property DefaultEventAction : String read FDefaultEventAction write SetFDefaultEventAction;
    property ForceKeyDown : Boolean read FForceKeyDown write SetFForceKeyDown;
  end;

  // Procedural types for events TExtDataBatch
  TExtDataBatchOnComplete = procedure(Batch : TExtDataBatch; Operation : TExtObject) of object;
  TExtDataBatchOnException = procedure(Batch : TExtDataBatch; Operation : TExtObject) of object;
  TExtDataBatchOnOperationcomplete = procedure(Batch : TExtDataBatch; Operation : TExtObject) of object;

  TExtDataBatch = class(TExtFunction)
  private
    FOnComplete : TExtDataBatchOnComplete;
    FOnException : TExtDataBatchOnException;
    FOnOperationcomplete : TExtDataBatchOnOperationcomplete;
    procedure SetFOnComplete(Value : TExtDataBatchOnComplete);
    procedure SetFOnException(Value : TExtDataBatchOnException);
    procedure SetFOnOperationcomplete(Value : TExtDataBatchOnOperationcomplete);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Add(Operation : TExtObject) : TExtFunction;
    function Start : TExtFunction;
    function Pause : TExtFunction;
    function RunOperation(Index : Integer) : TExtFunction;
    property OnComplete : TExtDataBatchOnComplete read FOnComplete write SetFOnComplete;
    property OnException : TExtDataBatchOnException read FOnException write SetFOnException;
    property OnOperationcomplete : TExtDataBatchOnOperationcomplete read FOnOperationcomplete write SetFOnOperationcomplete;
  end;

  TExtGridPropertyStore = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Grid : TExtGridPanel; Source : TExtObject);
  end;

  // Procedural types for events TExtButtonSplit
  TExtButtonSplitOnArrowclick = procedure(This : TExtButtonSplit; E : TEvent) of object;

  TExtButtonSplit = class(TExtFunction)
  private
    FArrowHandler : TExtFunction;
    FArrowTooltip : String;
    FOnArrowclick : TExtButtonSplitOnArrowclick;
    procedure SetFArrowHandler(Value : TExtFunction);
    procedure SetFArrowTooltip(Value : String);
    procedure SetFOnArrowclick(Value : TExtButtonSplitOnArrowclick);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function SetArrowHandler(Handler : TExtFunction; Scope : TExtObject = nil) : TExtFunction;
    property ArrowHandler : TExtFunction read FArrowHandler write SetFArrowHandler;
    property ArrowTooltip : String read FArrowTooltip write SetFArrowTooltip;
    property OnArrowclick : TExtButtonSplitOnArrowclick read FOnArrowclick write SetFOnArrowclick;
  end;

  TExtGridColumnTemplate = class(TExtFunction)
  private
    FTpl : String;
    FTplTExtXTemplate : TExtXTemplate;
    procedure SetFTpl(Value : String);
    procedure SetFTplTExtXTemplate(Value : TExtXTemplate);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    destructor Destroy; override;
    property Tpl : String read FTpl write SetFTpl;
    property TplTExtXTemplate : TExtXTemplate read FTplTExtXTemplate write SetFTplTExtXTemplate;
  end;

  // Procedural types for events TExtChartSeriesSeries
  TExtChartSeriesSeriesOnTitlechange = procedure(Title : String; Index : Integer) of object;

  TExtChartSeriesSeries = class(TExtFunction)
  private
    FHighlight : Boolean;
    FHighlightTExtObject : TExtObject;
    FTips : TExtObject;
    FTypeJS : String;
    FTitle : String;
    FShowInLegend : Boolean;
    FRenderer : TExtFunction;
    FShadowAttributes : TExtObjectList;
    FListeners : TExtObject;
    FOnTitlechange : TExtChartSeriesSeriesOnTitlechange;
    procedure SetFHighlight(Value : Boolean);
    procedure SetFHighlightTExtObject(Value : TExtObject);
    procedure SetFTips(Value : TExtObject);
    procedure SetFTypeJS(Value : String);
    procedure SetFTitle(Value : String);
    procedure SetFShowInLegend(Value : Boolean);
    procedure SetFRenderer(Value : TExtFunction);
    procedure SetFShadowAttributes(Value : TExtObjectList);
    procedure SetFListeners(Value : TExtObject);
    procedure SetFOnTitlechange(Value : TExtChartSeriesSeriesOnTitlechange);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function EachRecord(Fn : TExtFunction; Scope : TExtObject) : TExtFunction;
    function GetRecordCount : TExtFunction;
    function IsExcluded(ElseJS : TExtObjectList; X : Integer; Y : Integer) : TExtFunction; overload;
    function IsExcluded(ElseJS : ; X : Integer; Y : Integer) : TExtFunction; overload;
    function IsExcluded(ElseJS : TExtObjectList; X : Integer; Y : Integer) : TExtFunction; overload;
    function IsExcluded(ElseJS : ; X : Integer; Y : Integer) : TExtFunction; overload;
    function IsExcluded(ElseJS : TExtObjectList; X : Integer; Y : Integer) : TExtFunction; overload;
    function HideAll : TExtFunction;
    function ShowAll : TExtFunction;
    function GetLegendColor : TExtFunction;
    function SetTitle(Index : Integer; Title : String) : TExtFunction;
    destructor Destroy; override;
    property Highlight : Boolean read FHighlight write SetFHighlight;
    property HighlightTExtObject : TExtObject read FHighlightTExtObject write SetFHighlightTExtObject;
    property Tips : TExtObject read FTips write SetFTips;
    property TypeJS : String read FTypeJS write SetFTypeJS;
    property Title : String read FTitle write SetFTitle;
    property ShowInLegend : Boolean read FShowInLegend write SetFShowInLegend;
    property Renderer : TExtFunction read FRenderer write SetFRenderer;
    property ShadowAttributes : TExtObjectList read FShadowAttributes write SetFShadowAttributes;
    property Listeners : TExtObject read FListeners write SetFListeners;
    property OnTitlechange : TExtChartSeriesSeriesOnTitlechange read FOnTitlechange write SetFOnTitlechange;
  end;

  TExtDdScrollManagerSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Register(El : String) : TExtFunction; overload;
    function Register(El : THTMLElement) : TExtFunction; overload;
    function Register(El : TExtElement) : TExtFunction; overload;
    function Register(El : TExtObjectList) : TExtFunction; overload;
    function Unregister(El : String) : TExtFunction; overload;
    function Unregister(El : THTMLElement) : TExtFunction; overload;
    function Unregister(El : TExtElement) : TExtFunction; overload;
    function Unregister(El : TExtObjectList) : TExtFunction; overload;
    function RefreshCache : TExtFunction;
  end;

  // Procedural types for events TExtUtilHistorySingleton
  TExtUtilHistorySingletonOnReady = procedure(The : TExtUtilHistorySingleton) of object;
  TExtUtilHistorySingletonOnChange = procedure(Token : String) of object;

  TExtUtilHistorySingleton = class(TExtFunction)
  private
    FOnReady : TExtUtilHistorySingletonOnReady;
    FOnChange : TExtUtilHistorySingletonOnChange;
    procedure SetFOnReady(Value : TExtUtilHistorySingletonOnReady);
    procedure SetFOnChange(Value : TExtUtilHistorySingletonOnChange);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Add(Token : String; PreventDuplicates : Boolean = false) : TExtFunction;
    function Back : TExtFunction;
    function Forward : TExtFunction;
    function GetToken : TExtFunction;
    property OnReady : TExtUtilHistorySingletonOnReady read FOnReady write SetFOnReady;
    property OnChange : TExtUtilHistorySingletonOnChange read FOnChange write SetFOnChange;
  end;

  TExtTipQuickTip = class(TExtFunction)
  private
    FTarget : String;
    FTargetTHTMLElement : THTMLElement;
    FTargetTExtElement : TExtElement;
    FInterceptTitles : Boolean;
    procedure SetFTarget(Value : String);
    procedure SetFTargetTHTMLElement(Value : THTMLElement);
    procedure SetFTargetTExtElement(Value : TExtElement);
    procedure SetFInterceptTitles(Value : Boolean);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function Register(Config : TExtObject) : TExtFunction;
    function Unregister(El : String) : TExtFunction; overload;
    function Unregister(El : THTMLElement) : TExtFunction; overload;
    function Unregister(El : TExtElement) : TExtFunction; overload;
    function CancelShow(El : String) : TExtFunction; overload;
    function CancelShow(El : THTMLElement) : TExtFunction; overload;
    function CancelShow(El : TExtElement) : TExtFunction; overload;
    destructor Destroy; override;
    property Target : String read FTarget write SetFTarget;
    property TargetTHTMLElement : THTMLElement read FTargetTHTMLElement write SetFTargetTHTMLElement;
    property TargetTExtElement : TExtElement read FTargetTExtElement write SetFTargetTExtElement;
    property InterceptTitles : Boolean read FInterceptTitles write SetFInterceptTitles;
  end;

  // Procedural types for events TExtFxAnimator
  TExtFxAnimatorOnBeforeanimate = procedure(This : TExtFxAnimator; This_ : TExtFxAnimator; Keyframe : Integer) of object;
  TExtFxAnimatorOnAfteranimate = procedure(This : TExtFxAnimator; StartTime : TDateTime) of object;

  TExtFxAnimator = class(TExtFunction)
  private
    FDuration : Integer;
    FDelay : Integer;
    FDynamic : Boolean;
    FEasing : String;
    FIterations : Integer;
    FTarget : TExtFxTargetTarget;
    FKeyframes : TExtObject;
    FOnBeforeanimate : TExtFxAnimatorOnBeforeanimate;
    FOnAfteranimate : TExtFxAnimatorOnAfteranimate;
    procedure SetFDuration(Value : Integer);
    procedure SetFDelay(Value : Integer);
    procedure SetFDynamic(Value : Boolean);
    procedure SetFEasing(Value : String);
    procedure SetFIterations(Value : Integer);
    procedure SetFTarget(Value : TExtFxTargetTarget);
    procedure SetFKeyframes(Value : TExtObject);
    procedure SetFOnBeforeanimate(Value : TExtFxAnimatorOnBeforeanimate);
    procedure SetFOnAfteranimate(Value : TExtFxAnimatorOnAfteranimate);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function EndJS : TExtFunction;
    destructor Destroy; override;
    property Duration : Integer read FDuration write SetFDuration;
    property Delay : Integer read FDelay write SetFDelay;
    property Dynamic : Boolean read FDynamic write SetFDynamic;
    property Easing : String read FEasing write SetFEasing;
    property Iterations : Integer read FIterations write SetFIterations;
    property Target : TExtFxTargetTarget read FTarget write SetFTarget;
    property Keyframes : TExtObject read FKeyframes write SetFKeyframes;
    property OnBeforeanimate : TExtFxAnimatorOnBeforeanimate read FOnBeforeanimate write SetFOnBeforeanimate;
    property OnAfteranimate : TExtFxAnimatorOnAfteranimate read FOnAfteranimate write SetFOnAfteranimate;
  end;

  TExtChartAxisAxis = class(TExtFunction)
  private
    FGrid : Boolean;
    FGridTExtObject : TExtObject;
    FMajorTickSteps : Integer;
    FMinorTickSteps : Integer;
    FTitle : String;
    FDashSize : Integer;
    FPosition : String;
    FLength : Integer;
    FWidth : Integer;
    procedure SetFGrid(Value : Boolean);
    procedure SetFGridTExtObject(Value : TExtObject);
    procedure SetFMajorTickSteps(Value : Integer);
    procedure SetFMinorTickSteps(Value : Integer);
    procedure SetFTitle(Value : String);
    procedure SetFDashSize(Value : Integer);
    procedure SetFPosition(Value : String);
    procedure SetFLength(Value : Integer);
    procedure SetFWidth(Value : Integer);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function DrawAxis : TExtFunction;
    function DrawGrid : TExtFunction;
    function DrawLabel : TExtFunction;
    function SetTitle(Title : String) : TExtFunction;
    destructor Destroy; override;
    property Grid : Boolean read FGrid write SetFGrid;
    property GridTExtObject : TExtObject read FGridTExtObject write SetFGridTExtObject;
    property MajorTickSteps : Integer read FMajorTickSteps write SetFMajorTickSteps;
    property MinorTickSteps : Integer read FMinorTickSteps write SetFMinorTickSteps;
    property Title : String read FTitle write SetFTitle;
    property DashSize : Integer read FDashSize write SetFDashSize;
    property Position : String read FPosition write SetFPosition;
    property Length : Integer read FLength write SetFLength;
    property Width : Integer read FWidth write SetFWidth;
  end;

  TExtDirectTransaction = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Config : TExtObject = nil);
  end;

  TExtDrawSurface = class(TExtFunction)
  private
    FHeight : Integer;
    FWidth : Integer;
    procedure SetFHeight(Value : Integer);
    procedure SetFWidth(Value : Integer);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Config : TExtObject = nil);
    function AddCls(Sprite : TExtObject; ClassName : String) : TExtFunction; overload;
    function AddCls(Sprite : TExtObject; ClassName : TExtObjectList) : TExtFunction; overload;
    function RemoveCls(Sprite : TExtObject; ClassName : String) : TExtFunction; overload;
    function RemoveCls(Sprite : TExtObject; ClassName : TExtObjectList) : TExtFunction; overload;
    function SetStyle(Sprite : TExtObject; Styles : TExtObject) : TExtFunction;
    function SetSize(W : Integer; H : Integer) : TExtFunction;
    function AddGradient : TExtFunction;
    function Add : TExtFunction;
    function Remove(Sprite : TExtDrawSprite; DestroySprite : Boolean) : TExtFunction;
    function RemoveAll(DestroySprites : Boolean) : TExtFunction;
    function GetGroup(Id : String) : TExtFunction;
    function SetText(Sprite : TExtObject; Text : String) : TExtFunction;
    function GetId : TExtFunction;
    function DestroyJS : TExtFunction; override;
    property Height : Integer read FHeight write SetFHeight;
    property Width : Integer read FWidth write SetFWidth;
  end;

  TExtGridPluginDragDrop = class(TExtFunction)
  private
    FDdGroup : String;
    FDragGroup : String;
    FDropGroup : String;
    FEnableDrop : Boolean;
    FEnableDrag : Boolean;
    procedure SetFDdGroup(Value : String);
    procedure SetFDragGroup(Value : String);
    procedure SetFDropGroup(Value : String);
    procedure SetFEnableDrop(Value : Boolean);
    procedure SetFEnableDrag(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property DdGroup : String read FDdGroup write SetFDdGroup;
    property DragGroup : String read FDragGroup write SetFDragGroup;
    property DropGroup : String read FDropGroup write SetFDropGroup;
    property EnableDrop : Boolean read FEnableDrop write SetFEnableDrop;
    property EnableDrag : Boolean read FEnableDrag write SetFEnableDrag;
  end;

  TExtResizerHandle = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtFormFieldDate = class(TExtFunction)
  private
    FFormat : String;
    FAltFormats : String;
    FDisabledDaysText : String;
    FDisabledDatesText : String;
    FMinText : String;
    FMaxText : String;
    FInvalidText : String;
    FTriggerCls : String;
    FShowToday : Boolean;
    FMinValue : TDateTime;
    FMinValueString : String;
    FMaxValue : TDateTime;
    FMaxValueString : String;
    FDisabledDays : TArrayOfInteger;
    FDisabledDates : TExtObjectList;
    FSubmitFormat : String;
    FStartDay : Integer;
    FGrow : Boolean;
    FGrowMin : Integer;
    FGrowMax : Integer;
    procedure SetFFormat(Value : String);
    procedure SetFAltFormats(Value : String);
    procedure SetFDisabledDaysText(Value : String);
    procedure SetFDisabledDatesText(Value : String);
    procedure SetFMinText(Value : String);
    procedure SetFMaxText(Value : String);
    procedure SetFInvalidText(Value : String);
    procedure SetFTriggerCls(Value : String);
    procedure SetFShowToday(Value : Boolean);
    procedure SetFMinValue(Value : TDateTime);
    procedure SetFMinValueString(Value : String);
    procedure SetFMaxValue(Value : TDateTime);
    procedure SetFMaxValueString(Value : String);
    procedure SetFDisabledDays(Value : TArrayOfInteger);
    procedure SetFDisabledDates(Value : TExtObjectList);
    procedure SetFSubmitFormat(Value : String);
    procedure SetFStartDay(Value : Integer);
    procedure SetFGrow(Value : Boolean);
    procedure SetFGrowMin(Value : Integer);
    procedure SetFGrowMax(Value : Integer);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function AutoSize : TExtFunction;
    destructor Destroy; override;
    property Format : String read FFormat write SetFFormat;
    property AltFormats : String read FAltFormats write SetFAltFormats;
    property DisabledDaysText : String read FDisabledDaysText write SetFDisabledDaysText;
    property DisabledDatesText : String read FDisabledDatesText write SetFDisabledDatesText;
    property MinText : String read FMinText write SetFMinText;
    property MaxText : String read FMaxText write SetFMaxText;
    property InvalidText : String read FInvalidText write SetFInvalidText;
    property TriggerCls : String read FTriggerCls write SetFTriggerCls;
    property ShowToday : Boolean read FShowToday write SetFShowToday;
    property MinValue : TDateTime read FMinValue write SetFMinValue;
    property MinValueString : String read FMinValueString write SetFMinValueString;
    property MaxValue : TDateTime read FMaxValue write SetFMaxValue;
    property MaxValueString : String read FMaxValueString write SetFMaxValueString;
    property DisabledDays : TArrayOfInteger read FDisabledDays write SetFDisabledDays;
    property DisabledDates : TExtObjectList read FDisabledDates write SetFDisabledDates;
    property SubmitFormat : String read FSubmitFormat write SetFSubmitFormat;
    property StartDay : Integer read FStartDay write SetFStartDay;
    property Grow : Boolean read FGrow write SetFGrow;
    property GrowMin : Integer read FGrowMin write SetFGrowMin;
    property GrowMax : Integer read FGrowMax write SetFGrowMax;
  end;

  TExtFxTargetSprite = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtDataJsonPSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Request(Options : TExtObject) : TExtFunction;
    function Abort(Request : TExtObject = nil) : TExtFunction; overload;
    function Abort(Request : String) : TExtFunction; overload;
  end;

  // Procedural types for events TExtDirectPollingProvider
  TExtDirectPollingProviderOnBeforepoll = procedure(This : TExtDirectPollingProvider; This_ : TExtDirectPollingProvider) of object;

  TExtDirectPollingProvider = class(TExtFunction)
  private
    FInterval : Integer;
    FBaseParams : TExtObject;
    FUrl : String;
    FUrlTExtFunction : TExtFunction;
    FOnBeforepoll : TExtDirectPollingProviderOnBeforepoll;
    procedure SetFInterval(Value : Integer);
    procedure SetFBaseParams(Value : TExtObject);
    procedure SetFUrl(Value : String);
    procedure SetFUrlTExtFunction(Value : TExtFunction);
    procedure SetFOnBeforepoll(Value : TExtDirectPollingProviderOnBeforepoll);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function Connect : TExtFunction;
    function Disconnect : TExtFunction;
    destructor Destroy; override;
    property Interval : Integer read FInterval write SetFInterval;
    property BaseParams : TExtObject read FBaseParams write SetFBaseParams;
    property Url : String read FUrl write SetFUrl;
    property UrlTExtFunction : TExtFunction read FUrlTExtFunction write SetFUrlTExtFunction;
    property OnBeforepoll : TExtDirectPollingProviderOnBeforepoll read FOnBeforepoll write SetFOnBeforepoll;
  end;

  TExtDataReaderReader = class(TExtFunction)
  private
    FIdProperty : String;
    FTotalProperty : String;
    FSuccessProperty : String;
    FRoot : String;
    FMessageProperty : String;
    FImplicitIncludes : Boolean;
    procedure SetFIdProperty(Value : String);
    procedure SetFTotalProperty(Value : String);
    procedure SetFSuccessProperty(Value : String);
    procedure SetFRoot(Value : String);
    procedure SetFMessageProperty(Value : String);
    procedure SetFImplicitIncludes(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Config : TExtObject = nil);
    function Read(Response : TExtObject) : TExtFunction;
    function ReadRecords(Data : TExtObject) : TExtFunction;
    function GetResponseData(Response : TExtObject) : TExtFunction;
    property IdProperty : String read FIdProperty write SetFIdProperty;
    property TotalProperty : String read FTotalProperty write SetFTotalProperty;
    property SuccessProperty : String read FSuccessProperty write SetFSuccessProperty;
    property Root : String read FRoot write SetFRoot;
    property MessageProperty : String read FMessageProperty write SetFMessageProperty;
    property ImplicitIncludes : Boolean read FImplicitIncludes write SetFImplicitIncludes;
  end;

  TExtUtilDelayedTask = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Delay(Delay : Integer; NewFn : TExtFunction = nil; NewScope : TExtObject = nil; NewArgs : TExtObjectList = nil) : TExtFunction;
    function Cancel : TExtFunction;
  end;

  TExtGridPropertyHeaderContainer = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Grid : TExtGridPropertyGrid; Source : TExtObject);
  end;

  TExtUtilSorter = class(TExtFunction)
  private
    FPropertyJS : String;
    FSorterFn : TExtFunction;
    FRoot : String;
    FTransform : TExtFunction;
    FDirection : String;
    procedure SetFPropertyJS(Value : String);
    procedure SetFSorterFn(Value : TExtFunction);
    procedure SetFRoot(Value : String);
    procedure SetFTransform(Value : TExtFunction);
    procedure SetFDirection(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function SetDirection(Direction : String) : TExtFunction;
    function Toggle : TExtFunction;
    function UpdateSortFunction(Fn : TExtFunction = nil) : TExtFunction;
    property PropertyJS : String read FPropertyJS write SetFPropertyJS;
    property SorterFn : TExtFunction read FSorterFn write SetFSorterFn;
    property Root : String read FRoot write SetFRoot;
    property Transform : TExtFunction read FTransform write SetFTransform;
    property Direction : String read FDirection write SetFDirection;
  end;

  TExtGridPluginHeaderResizer = class(TExtFunction)
  private
    FDynamic : Boolean;
    procedure SetFDynamic(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property Dynamic : Boolean read FDynamic write SetFDynamic;
  end;

  TExtEnvBrowser = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function IsJS(Value : String) : TExtFunction;
  end;

  TExtChartHighlight = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function HighlightItem(Item : TExtObject) : TExtFunction;
    function UnHighlightItem : TExtFunction;
  end;

  TExtStateCookieProvider = class(TExtFunction)
  private
    FPath : String;
    FExpires : TDateTime;
    FDomain : String;
    FSecure : Boolean;
    procedure SetFPath(Value : String);
    procedure SetFExpires(Value : TDateTime);
    procedure SetFDomain(Value : String);
    procedure SetFSecure(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Config : TExtObject = nil);
    property Path : String read FPath write SetFPath;
    property Expires : TDateTime read FExpires write SetFExpires;
    property Domain : String read FDomain write SetFDomain;
    property Secure : Boolean read FSecure write SetFSecure;
  end;

  TExtGridFeatureAbstractSummary = class(TExtFunction)
  private
    FShowSummaryRow : Boolean;
    procedure SetFShowSummaryRow(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function ToggleSummaryRow(Visible : Boolean) : TExtFunction;
    function GetColumnValue(Column : TExtGridColumnColumn; Data : TExtObject) : TExtFunction;
    property ShowSummaryRow : Boolean read FShowSummaryRow write SetFShowSummaryRow;
  end;

  TExtViewBoundList = class(TExtFunction)
  private
    FPageSize : Integer;
    procedure SetFPageSize(Value : Integer);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property PageSize : Integer read FPageSize write SetFPageSize;
  end;

  TExtGridFeatureGrouping = class(TExtFunction)
  private
    FGroupHeaderTpl : String;
    FDepthToIndent : Integer;
    FGroupByText : String;
    FShowGroupsText : String;
    FHideGroupedHeader : Boolean;
    FStartCollapsed : Boolean;
    FEnableGroupingMenu : Boolean;
    FEnableNoGroups : Boolean;
    procedure SetFGroupHeaderTpl(Value : String);
    procedure SetFDepthToIndent(Value : Integer);
    procedure SetFGroupByText(Value : String);
    procedure SetFShowGroupsText(Value : String);
    procedure SetFHideGroupedHeader(Value : Boolean);
    procedure SetFStartCollapsed(Value : Boolean);
    procedure SetFEnableGroupingMenu(Value : Boolean);
    procedure SetFEnableNoGroups(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property GroupHeaderTpl : String read FGroupHeaderTpl write SetFGroupHeaderTpl;
    property DepthToIndent : Integer read FDepthToIndent write SetFDepthToIndent;
    property GroupByText : String read FGroupByText write SetFGroupByText;
    property ShowGroupsText : String read FShowGroupsText write SetFShowGroupsText;
    property HideGroupedHeader : Boolean read FHideGroupedHeader write SetFHideGroupedHeader;
    property StartCollapsed : Boolean read FStartCollapsed write SetFStartCollapsed;
    property EnableGroupingMenu : Boolean read FEnableGroupingMenu write SetFEnableGroupingMenu;
    property EnableNoGroups : Boolean read FEnableNoGroups write SetFEnableNoGroups;
  end;

  TExtUtilClickRepeater = class(TExtFunction)
  private
    FEl : String;
    FElTHTMLElement : THTMLElement;
    FElTExtElement : TExtElement;
    FPressedCls : String;
    FAccelerate : Boolean;
    FInterval : Integer;
    FDelay : Integer;
    FPreventDefault : Boolean;
    FStopDefault : Boolean;
    procedure SetFEl(Value : String);
    procedure SetFElTHTMLElement(Value : THTMLElement);
    procedure SetFElTExtElement(Value : TExtElement);
    procedure SetFPressedCls(Value : String);
    procedure SetFAccelerate(Value : Boolean);
    procedure SetFInterval(Value : Integer);
    procedure SetFDelay(Value : Integer);
    procedure SetFPreventDefault(Value : Boolean);
    procedure SetFStopDefault(Value : Boolean);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function Enable : TExtFunction;
    function Disable : TExtFunction;
    function SetDisabled(Disabled : Boolean) : TExtFunction;
    destructor Destroy; override;
    property El : String read FEl write SetFEl;
    property ElTHTMLElement : THTMLElement read FElTHTMLElement write SetFElTHTMLElement;
    property ElTExtElement : TExtElement read FElTExtElement write SetFElTExtElement;
    property PressedCls : String read FPressedCls write SetFPressedCls;
    property Accelerate : Boolean read FAccelerate write SetFAccelerate;
    property Interval : Integer read FInterval write SetFInterval;
    property Delay : Integer read FDelay write SetFDelay;
    property PreventDefault : Boolean read FPreventDefault write SetFPreventDefault;
    property StopDefault : Boolean read FStopDefault write SetFStopDefault;
  end;

  // Procedural types for events TExtElementLoader
  TExtElementLoaderOnBeforeload = procedure(This : TExtElementLoader; Options : TExtObject) of object;
  TExtElementLoaderOnException = procedure(This : TExtElementLoader; Response : TExtObject; Options : TExtObject) of object;
  TExtElementLoaderOnLoad = procedure(This : TExtElementLoader; Response : TExtObject; Options : TExtObject) of object;

  TExtElementLoader = class(TExtFunction)
  private
    FUrl : String;
    FParams : TExtObject;
    FBaseParams : TExtObject;
    FAutoLoad : Boolean;
    FAutoLoadTExtObject : TExtObject;
    FTarget : THTMLElement;
    FTargetTExtElement : TExtElement;
    FTargetString : String;
    FLoadMask : Boolean;
    FLoadMaskString : String;
    FAjaxOptions : TExtObject;
    FScripts : Boolean;
    FSuccess : TExtFunction;
    FFailure : TExtFunction;
    FCallback : TExtFunction;
    FScope : TExtObject;
    FRenderer : TExtFunction;
    FOnBeforeload : TExtElementLoaderOnBeforeload;
    FOnException : TExtElementLoaderOnException;
    FOnLoad : TExtElementLoaderOnLoad;
    procedure SetFUrl(Value : String);
    procedure SetFParams(Value : TExtObject);
    procedure SetFBaseParams(Value : TExtObject);
    procedure SetFAutoLoad(Value : Boolean);
    procedure SetFAutoLoadTExtObject(Value : TExtObject);
    procedure SetFTarget(Value : THTMLElement);
    procedure SetFTargetTExtElement(Value : TExtElement);
    procedure SetFTargetString(Value : String);
    procedure SetFLoadMask(Value : Boolean);
    procedure SetFLoadMaskString(Value : String);
    procedure SetFAjaxOptions(Value : TExtObject);
    procedure SetFScripts(Value : Boolean);
    procedure SetFSuccess(Value : TExtFunction);
    procedure SetFFailure(Value : TExtFunction);
    procedure SetFCallback(Value : TExtFunction);
    procedure SetFScope(Value : TExtObject);
    procedure SetFRenderer(Value : TExtFunction);
    procedure SetFOnBeforeload(Value : TExtElementLoaderOnBeforeload);
    procedure SetFOnException(Value : TExtElementLoaderOnException);
    procedure SetFOnLoad(Value : TExtElementLoaderOnLoad);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function SetTarget(Target : String) : TExtFunction; overload;
    function SetTarget(Target : THTMLElement) : TExtFunction; overload;
    function SetTarget(Target : TExtElement) : TExtFunction; overload;
    function GetTarget : TExtFunction;
    function Abort : TExtFunction;
    function Load(Options : TExtObject) : TExtFunction;
    function StartAutoRefresh(Interval : Integer; Options : TExtObject = nil) : TExtFunction;
    function StopAutoRefresh : TExtFunction;
    function IsAutoRefreshing : TExtFunction;
    function DestroyJS : TExtFunction; override;
    destructor Destroy; override;
    property Url : String read FUrl write SetFUrl;
    property Params : TExtObject read FParams write SetFParams;
    property BaseParams : TExtObject read FBaseParams write SetFBaseParams;
    property AutoLoad : Boolean read FAutoLoad write SetFAutoLoad;
    property AutoLoadTExtObject : TExtObject read FAutoLoadTExtObject write SetFAutoLoadTExtObject;
    property Target : THTMLElement read FTarget write SetFTarget;
    property TargetTExtElement : TExtElement read FTargetTExtElement write SetFTargetTExtElement;
    property TargetString : String read FTargetString write SetFTargetString;
    property LoadMask : Boolean read FLoadMask write SetFLoadMask;
    property LoadMaskString : String read FLoadMaskString write SetFLoadMaskString;
    property AjaxOptions : TExtObject read FAjaxOptions write SetFAjaxOptions;
    property Scripts : Boolean read FScripts write SetFScripts;
    property Success : TExtFunction read FSuccess write SetFSuccess;
    property Failure : TExtFunction read FFailure write SetFFailure;
    property Callback : TExtFunction read FCallback write SetFCallback;
    property Scope : TExtObject read FScope write SetFScope;
    property Renderer : TExtFunction read FRenderer write SetFRenderer;
    property OnBeforeload : TExtElementLoaderOnBeforeload read FOnBeforeload write SetFOnBeforeload;
    property OnException : TExtElementLoaderOnException read FOnException write SetFOnException;
    property OnLoad : TExtElementLoaderOnLoad read FOnLoad write SetFOnLoad;
  end;

  TExtXTemplate = class(TExtFunction)
  private
    FCodeRe : TRegExp;
    FCompiled : Boolean;
    procedure SetFCodeRe(Value : TRegExp);
    procedure SetFCompiled(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Compile : TExtFunction;
    property CodeRe : TRegExp read FCodeRe write SetFCodeRe;
    property Compiled : Boolean read FCompiled write SetFCompiled;
  end;

  TExtTreeView = class(TExtFunction)
  private
    FRootVisible : Boolean;
    FAnimate : Boolean;
    procedure SetFRootVisible(Value : Boolean);
    procedure SetFAnimate(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Expand(RecordJS : TExtDataModel; Deep : Boolean = false; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction;
    function Collapse(RecordJS : TExtDataModel; Deep : Boolean = false; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction;
    function Toggle(RecordInstance : TExtDataModel) : TExtFunction;
    function GetTreeStore : TExtFunction;
    property RootVisible : Boolean read FRootVisible write SetFRootVisible;
    property Animate : Boolean read FAnimate write SetFAnimate;
  end;

  TExtFormCheckboxGroup = class(TExtFunction)
  private
    FName : String;
    FItems : TExtObjectList;
    FItemsTExtObjectList : TExtObjectList;
    FColumns : String;
    FColumnsInteger : Integer;
    FColumnsTArrayOfInteger : TArrayOfInteger;
    FVertical : Boolean;
    FAllowBlank : Boolean;
    FBlankText : String;
    FFieldBodyCls : String;
    procedure SetFName(Value : String);
    procedure SetFItems(Value : TExtObjectList);
    procedure SetFItemsTExtObjectList(Value : TExtObjectList);
    procedure SetFColumns(Value : String);
    procedure SetFColumnsInteger(Value : Integer);
    procedure SetFColumnsTArrayOfInteger(Value : TArrayOfInteger);
    procedure SetFVertical(Value : Boolean);
    procedure SetFAllowBlank(Value : Boolean);
    procedure SetFBlankText(Value : String);
    procedure SetFFieldBodyCls(Value : String);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function GetErrors : TExtFunction;
    function GetChecked : TExtFunction;
    function Reset : TExtFunction;
    function SetValue(Value : TExtObject) : TExtFunction;
    function GetValue : TExtFunction;
    destructor Destroy; override;
    property Name : String read FName write SetFName;
    property Items : TExtObjectList read FItems write SetFItems;
    property ItemsTExtObjectList : TExtObjectList read FItemsTExtObjectList write SetFItemsTExtObjectList;
    property Columns : String read FColumns write SetFColumns;
    property ColumnsInteger : Integer read FColumnsInteger write SetFColumnsInteger;
    property ColumnsTArrayOfInteger : TArrayOfInteger read FColumnsTArrayOfInteger write SetFColumnsTArrayOfInteger;
    property Vertical : Boolean read FVertical write SetFVertical;
    property AllowBlank : Boolean read FAllowBlank write SetFAllowBlank;
    property BlankText : String read FBlankText write SetFBlankText;
    property FieldBodyCls : String read FFieldBodyCls write SetFFieldBodyCls;
  end;

  TExtComponentManagerSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Id(El : THTMLElement = nil; Prefix : String = '') : TExtFunction; overload;
    function Id(El : TExtElement; Prefix : String = '') : TExtFunction; overload;
    function GetBody : TExtFunction;
    function GetHead : TExtFunction;
    function GetDoc : TExtFunction;
    function GetCmp(Id : String) : TExtFunction;
    function GetOrientation : TExtFunction;
    function DestroyJS(Arg1 : TExtElement) : TExtFunction; overload; reintroduce;
    function DestroyJS(Arg1 : TExtComponent) : TExtFunction; overload; reintroduce;
    function DestroyJS(Arg1 : TExtObjectList) : TExtFunction; overload; reintroduce;
    function Callback(Callback : TExtFunction; Scope : TExtObject = nil; Args : TExtObjectList = nil; Delay : Integer = 0) : TExtFunction;
    function HtmlEncode(Value : String) : TExtFunction;
    function HtmlDecode(Value : String) : TExtFunction;
    function UrlAppend(Url : String; S : String) : TExtFunction;
    function GetDom(El : String) : TExtFunction; overload;
    function GetDom(El : THTMLElement) : TExtFunction; overload;
    function GetDom(El : TExtElement) : TExtFunction; overload;
    function RemoveNode(Node : THTMLElement) : TExtFunction;
    function Value(Value : TExtObject; DefaultValue : TExtObject; AllowBlank : Boolean = false) : TExtFunction;
    function EscapeRe(Str : String) : TExtFunction;
    function AddBehaviors(Obj : TExtObject) : TExtFunction;
    function GetScrollbarSize(Force : Boolean = false) : TExtFunction;
    function GetScrollBarWidth(Force : Boolean = false) : TExtFunction;
    function CopyTo(Dest : TExtObject; Source : TExtObject; Names : String; UsePrototypeKeys : Boolean = false) : TExtFunction; overload;
    function CopyTo(Dest : TExtObject; Source : TExtObject; Names : TExtObjectList; UsePrototypeKeys : Boolean = false) : TExtFunction; overload;
    function DestroyMembers(O : TExtObject; Args : TString) : TExtFunction;
    function Partition(Arr : TExtObjectList; Truth : TExtFunction = nil) : TExtFunction; overload;
    function Partition(Arr : TNodeList; Truth : TExtFunction = nil) : TExtFunction; overload;
    function Invoke(Arr : TExtObjectList; MethodName : String; Args : TExtObjectList) : TExtFunction; overload;
    function Invoke(Arr : TNodeList; MethodName : String; Args : TExtObjectList) : TExtFunction; overload;
    function Zip(Arr : TExtObjectList; Zipper : TExtFunction = nil) : TExtFunction; overload;
    function Zip(Arr : TNodeList; Zipper : TExtFunction = nil) : TExtFunction; overload;
    function ToSentence(Items : TExtObjectList; Connector : String) : TExtFunction;
    function Application(Config : TExtObject) : TExtFunction;
    function Apply(ObjectJS : TExtObject; Config : TExtObject; Defaults : TExtObject) : TExtFunction;
    function EmptyFn : TExtFunction;
    function ApplyIf(ObjectJS : TExtObject; Config : TExtObject) : TExtFunction;
    function Iterate(ObjectJS : TExtObject; Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; overload;
    function Iterate(ObjectJS : TExtObjectList; Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; overload;
    function Extend(Superclass : TExtFunction; Overrides : TExtObject) : TExtFunction;
    function Override(Cls : TExtObject; Overrides : TExtObject) : TExtFunction;
    function ValueFrom(Value : TExtObject; DefaultValue : TExtObject; AllowBlank : Boolean = false) : TExtFunction;
    function TypeOf(Value : TExtObject) : TExtFunction;
    function IsEmpty(Value : TExtObject; AllowEmptyString : Boolean = false) : TExtFunction;
    function IsArray(Target : TExtObject) : TExtFunction;
    function IsDate(ObjectJS : TExtObject) : TExtFunction;
    function IsObject(Value : TExtObject) : TExtFunction;
    function IsPrimitive(Value : TExtObject) : TExtFunction;
    function IsFunction(Value : TExtObject) : TExtFunction;
    function IsNumber(Value : TExtObject) : TExtFunction;
    function IsNumeric(Value : TExtObject) : TExtFunction;
    function IsString(Value : TExtObject) : TExtFunction;
    function IsBoolean(Value : TExtObject) : TExtFunction;
    function IsElement(Value : TExtObject) : TExtFunction;
    function IsTextNode(Value : TExtObject) : TExtFunction;
    function IsDefined(Value : TExtObject) : TExtFunction;
    function IsIterable(Value : TExtObject) : TExtFunction;
    function Clone(Item : TExtObject) : TExtFunction;
    function TypeJS : TExtFunction;
  end;

  TExtDdDropTarget = class(TExtFunction)
  private
    FDdGroup : String;
    FOverClass : String;
    FDropAllowed : String;
    FDropNotAllowed : String;
    procedure SetFDdGroup(Value : String);
    procedure SetFOverClass(Value : String);
    procedure SetFDropAllowed(Value : String);
    procedure SetFDropNotAllowed(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function NotifyEnter(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function NotifyOver(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function NotifyOut(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    function NotifyDrop(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction;
    property DdGroup : String read FDdGroup write SetFDdGroup;
    property OverClass : String read FOverClass write SetFOverClass;
    property DropAllowed : String read FDropAllowed write SetFDropAllowed;
    property DropNotAllowed : String read FDropNotAllowed write SetFDropNotAllowed;
  end;

  TExtFormBasic = class(TExtFunction)
  private
    FMethod : String;
    FReader : TExtDataReaderReader;
    FErrorReader : TExtDataReaderReader;
    FUrl : String;
    FBaseParams : TExtObject;
    FTimeout : Integer;
    FApi : TExtObject;
    FParamOrder : String;
    FParamOrderTExtObjectList : TExtObjectList;
    FParamsAsHash : Boolean;
    FWaitTitle : String;
    FTrackResetOnLoad : Boolean;
    FStandardSubmit : Boolean;
    FWaitMsgTarget : String;
    FWaitMsgTargetTHTMLElement : THTMLElement;
    FWaitMsgTargetTExtElement : TExtElement;
    procedure SetFMethod(Value : String);
    procedure SetFReader(Value : TExtDataReaderReader);
    procedure SetFErrorReader(Value : TExtDataReaderReader);
    procedure SetFUrl(Value : String);
    procedure SetFBaseParams(Value : TExtObject);
    procedure SetFTimeout(Value : Integer);
    procedure SetFApi(Value : TExtObject);
    procedure SetFParamOrder(Value : String);
    procedure SetFParamOrderTExtObjectList(Value : TExtObjectList);
    procedure SetFParamsAsHash(Value : Boolean);
    procedure SetFWaitTitle(Value : String);
    procedure SetFTrackResetOnLoad(Value : Boolean);
    procedure SetFStandardSubmit(Value : Boolean);
    procedure SetFWaitMsgTarget(Value : String);
    procedure SetFWaitMsgTargetTHTMLElement(Value : THTMLElement);
    procedure SetFWaitMsgTargetTExtElement(Value : TExtElement);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function DestroyJS : TExtFunction; override;
    function GetFields : TExtFunction;
    function HasInvalidField : TExtFunction;
    function IsValid : TExtFunction;
    function CheckValidity : TExtFunction;
    function IsDirty : TExtFunction;
    function CheckDirty : TExtFunction;
    function HasUpload : TExtFunction;
    function DoAction(Action : String; Options : TExtObject = nil) : TExtFunction; overload;
    function DoAction(Action : TExtFormActionAction; Options : TExtObject = nil) : TExtFunction; overload;
    function Submit(Options : TExtObject) : TExtFunction;
    function Load(Options : TExtObject) : TExtFunction;
    function UpdateRecord(RecordJS : TExtDataModel) : TExtFunction;
    function LoadRecord(RecordJS : TExtDataModel) : TExtFunction;
    function GetRecord : TExtFunction;
    function FindField(Id : String) : TExtFunction;
    function MarkInvalid(Errors : TExtObject) : TExtFunction; overload;
    function MarkInvalid(Errors : TExtObjectList) : TExtFunction; overload;
    function MarkInvalid(Errors : TExtDataErrors) : TExtFunction; overload;
    function SetValues(Values : TExtObject) : TExtFunction; overload;
    function SetValues(Values : TExtObjectList) : TExtFunction; overload;
    function GetValues(AsString : Boolean = false; DirtyOnly : Boolean = false; IncludeEmptyText : Boolean = false) : TExtFunction;
    function GetFieldValues(DirtyOnly : Boolean = false) : TExtFunction;
    function ClearInvalid : TExtFunction;
    function Reset : TExtFunction;
    function ApplyToFields(Obj : TExtObject) : TExtFunction;
    function ApplyIfToFields(Obj : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property Method : String read FMethod write SetFMethod;
    property Reader : TExtDataReaderReader read FReader write SetFReader;
    property ErrorReader : TExtDataReaderReader read FErrorReader write SetFErrorReader;
    property Url : String read FUrl write SetFUrl;
    property BaseParams : TExtObject read FBaseParams write SetFBaseParams;
    property Timeout : Integer read FTimeout write SetFTimeout;
    property Api : TExtObject read FApi write SetFApi;
    property ParamOrder : String read FParamOrder write SetFParamOrder;
    property ParamOrderTExtObjectList : TExtObjectList read FParamOrderTExtObjectList write SetFParamOrderTExtObjectList;
    property ParamsAsHash : Boolean read FParamsAsHash write SetFParamsAsHash;
    property WaitTitle : String read FWaitTitle write SetFWaitTitle;
    property TrackResetOnLoad : Boolean read FTrackResetOnLoad write SetFTrackResetOnLoad;
    property StandardSubmit : Boolean read FStandardSubmit write SetFStandardSubmit;
    property WaitMsgTarget : String read FWaitMsgTarget write SetFWaitMsgTarget;
    property WaitMsgTargetTHTMLElement : THTMLElement read FWaitMsgTargetTHTMLElement write SetFWaitMsgTargetTHTMLElement;
    property WaitMsgTargetTExtElement : TExtElement read FWaitMsgTargetTExtElement write SetFWaitMsgTargetTExtElement;
  end;

  TExtUtilFormatSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Undef(Value : TExtObject) : TExtFunction;
    function DefaultValue(Value : TExtObject; DefaultValue : String) : TExtFunction;
    function Substr(Value : String; Start : Integer; Length : Integer) : TExtFunction;
    function Lowercase(Value : String) : TExtFunction;
    function Uppercase(Value : String) : TExtFunction;
    function UsMoney(Value : Integer) : TExtFunction; overload;
    function UsMoney(Value : String) : TExtFunction; overload;
    function Currency(Value : Integer; Sign : String; Decimals : Integer; EndJS : Boolean) : TExtFunction; overload;
    function Currency(Value : String; Sign : String; Decimals : Integer; EndJS : Boolean) : TExtFunction; overload;
    function Date(Value : String; Format : String = '') : TExtFunction; overload;
    function Date(Value : TDateTime; Format : String = '') : TExtFunction; overload;
    function DateRenderer(Format : String) : TExtFunction;
    function StripTags(Value : TExtObject) : TExtFunction;
    function StripScripts(Value : TExtObject) : TExtFunction;
    function FileSize(Size : Integer) : TExtFunction; overload;
    function FileSize(Size : String) : TExtFunction; overload;
    function Math : TExtFunction;
    function Round(Value : Integer; Precision : Integer) : TExtFunction; overload;
    function Round(Value : String; Precision : Integer) : TExtFunction; overload;
    function Number(V : Integer; Format : String) : TExtFunction;
    function NumberRenderer(Format : String) : TExtFunction;
    function Plural(Value : Integer; Singular : String; Plural : String = '') : TExtFunction;
    function Nl2br(The : String) : TExtFunction;
    function Capitalize : TExtFunction;
    function Ellipsis : TExtFunction;
    function Format : TExtFunction;
    function HtmlDecode : TExtFunction;
    function HtmlEncode : TExtFunction;
    function LeftPad : TExtFunction;
    function Trim : TExtFunction;
    function ParseBox(V : Integer) : TExtFunction; overload;
    function ParseBox(V : String) : TExtFunction; overload;
    function EscapeRegex(Str : String) : TExtFunction;
  end;

  TExtGridColumnNumber = class(TExtFunction)
  private
    FFormat : String;
    procedure SetFFormat(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property Format : String read FFormat write SetFFormat;
  end;

  TExtDataProxySessionStorage = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtDrawEngineSvg = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetRegion : TExtFunction;
    function ApplyZIndex(Sprite : TExtDrawSprite; ClassName : String) : TExtFunction;
  end;

  // Procedural types for events TExtButtonButton
  TExtButtonButtonOnClick = procedure(This : TExtButtonButton; E : TEvent) of object;
  TExtButtonButtonOnToggle = procedure(This : TExtButtonButton; Pressed : Boolean; This_ : TExtButtonButton; E : TEvent) of object;
  TExtButtonButtonOnMouseout = procedure(This : TExtButtonButton; E : TEvent) of object;
  TExtButtonButtonOnMenushow = procedure(This : TExtButtonButton; Menu : TExtMenuMenu; This_ : TExtButtonButton; Menu_ : TExtMenuMenu; This__ : TExtButtonButton; Menu__ : TExtMenuMenu; E : TEvent; This___ : TExtButtonButton; Menu___ : TExtMenuMenu; E_ : TEvent) of object;

  TExtButtonButton = class(TExtFunction)
  private
    FText : String;
    FIcon : String;
    FHandler : TExtFunction;
    FMinWidth : Integer;
    FTooltip : String;
    FTooltipTExtObject : TExtObject;
    FHidden : Boolean;
    FDisabled : Boolean;
    FPressed : Boolean;
    FToggleGroup : String;
    FRepeatJS : Boolean;
    FRepeatJSTExtObject : TExtObject;
    FTabIndex : Integer;
    FAllowDepress : Boolean;
    FEnableToggle : Boolean;
    FToggleHandler : TExtFunction;
    FMenu : TExtMenuMenu;
    FMenuString : String;
    FMenuTExtObject : TExtObject;
    FMenuAlign : String;
    FTextAlign : String;
    FOverflowText : String;
    FIconCls : String;
    FTypeJS : String;
    FClickEvent : String;
    FPreventDefault : Boolean;
    FHandleMouseEvents : Boolean;
    FTooltipType : String;
    FBaseCls : String;
    FPressedCls : String;
    FOverCls : String;
    FFocusCls : String;
    FMenuActiveCls : String;
    FHref : String;
    FBaseParams : TExtObject;
    FParams : TExtObject;
    FScale : String;
    FScope : TExtObject;
    FIconAlign : String;
    FArrowAlign : String;
    FArrowCls : String;
    FCls : String;
    FAutoWidth : Boolean;
    FOnClick : TExtButtonButtonOnClick;
    FOnToggle : TExtButtonButtonOnToggle;
    FOnMouseout : TExtButtonButtonOnMouseout;
    FOnMenushow : TExtButtonButtonOnMenushow;
    procedure SetFText(Value : String);
    procedure SetFIcon(Value : String);
    procedure SetFHandler(Value : TExtFunction);
    procedure SetFMinWidth(Value : Integer);
    procedure SetFTooltip(Value : String);
    procedure SetFTooltipTExtObject(Value : TExtObject);
    procedure SetFHidden(Value : Boolean);
    procedure SetFDisabled(Value : Boolean);
    procedure SetFPressed(Value : Boolean);
    procedure SetFToggleGroup(Value : String);
    procedure SetFRepeatJS(Value : Boolean);
    procedure SetFRepeatJSTExtObject(Value : TExtObject);
    procedure SetFTabIndex(Value : Integer);
    procedure SetFAllowDepress(Value : Boolean);
    procedure SetFEnableToggle(Value : Boolean);
    procedure SetFToggleHandler(Value : TExtFunction);
    procedure SetFMenu(Value : TExtMenuMenu);
    procedure SetFMenuString(Value : String);
    procedure SetFMenuTExtObject(Value : TExtObject);
    procedure SetFMenuAlign(Value : String);
    procedure SetFTextAlign(Value : String);
    procedure SetFOverflowText(Value : String);
    procedure SetFIconCls(Value : String);
    procedure SetFTypeJS(Value : String);
    procedure SetFClickEvent(Value : String);
    procedure SetFPreventDefault(Value : Boolean);
    procedure SetFHandleMouseEvents(Value : Boolean);
    procedure SetFTooltipType(Value : String);
    procedure SetFBaseCls(Value : String);
    procedure SetFPressedCls(Value : String);
    procedure SetFOverCls(Value : String);
    procedure SetFFocusCls(Value : String);
    procedure SetFMenuActiveCls(Value : String);
    procedure SetFHref(Value : String);
    procedure SetFBaseParams(Value : TExtObject);
    procedure SetFParams(Value : TExtObject);
    procedure SetFScale(Value : String);
    procedure SetFScope(Value : TExtObject);
    procedure SetFIconAlign(Value : String);
    procedure SetFArrowAlign(Value : String);
    procedure SetFArrowCls(Value : String);
    procedure SetFCls(Value : String);
    procedure SetFAutoWidth(Value : Boolean);
    procedure SetFOnClick(Value : TExtButtonButtonOnClick);
    procedure SetFOnToggle(Value : TExtButtonButtonOnToggle);
    procedure SetFOnMouseout(Value : TExtButtonButtonOnMouseout);
    procedure SetFOnMenushow(Value : TExtButtonButtonOnMenushow);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    class function Button : TExtButtonButton;
    class function E : TExtEventObjectSingleton;
    class function Button_ : TExtButtonButton;
    class function State : Boolean;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function GetTemplateArgs : TExtFunction;
    function SetParams(Params : TExtObject) : TExtFunction;
    function SetIconCls(Cls : String) : TExtFunction;
    function SetTooltip(Tooltip : String) : TExtFunction; overload;
    function SetTooltip(Tooltip : TExtObject) : TExtFunction; overload;
    function SetTextAlign(Align : String) : TExtFunction;
    function SetHandler(Handler : TExtFunction; Scope : TExtObject = nil) : TExtFunction;
    function SetText(Text : String) : TExtFunction;
    function SetIcon(Icon : String) : TExtFunction;
    function GetText : TExtFunction;
    function Toggle(State : Boolean = false; SuppressEvent : Boolean = false) : TExtFunction;
    function ShowMenu : TExtFunction;
    function HideMenu : TExtFunction;
    function HasVisibleMenu : TExtFunction;
    function SetScale(Scale : String) : TExtFunction;
    function GetPressed(Group : String) : TExtFunction;
    destructor Destroy; override;
    property Text : String read FText write SetFText;
    property Icon : String read FIcon write SetFIcon;
    property Handler : TExtFunction read FHandler write SetFHandler;
    property MinWidth : Integer read FMinWidth write SetFMinWidth;
    property Tooltip : String read FTooltip write SetFTooltip;
    property TooltipTExtObject : TExtObject read FTooltipTExtObject write SetFTooltipTExtObject;
    property Hidden : Boolean read FHidden write SetFHidden;
    property Disabled : Boolean read FDisabled write SetFDisabled;
    property Pressed : Boolean read FPressed write SetFPressed;
    property ToggleGroup : String read FToggleGroup write SetFToggleGroup;
    property RepeatJS : Boolean read FRepeatJS write SetFRepeatJS;
    property RepeatJSTExtObject : TExtObject read FRepeatJSTExtObject write SetFRepeatJSTExtObject;
    property TabIndex : Integer read FTabIndex write SetFTabIndex;
    property AllowDepress : Boolean read FAllowDepress write SetFAllowDepress;
    property EnableToggle : Boolean read FEnableToggle write SetFEnableToggle;
    property ToggleHandler : TExtFunction read FToggleHandler write SetFToggleHandler;
    property Menu : TExtMenuMenu read FMenu write SetFMenu;
    property MenuString : String read FMenuString write SetFMenuString;
    property MenuTExtObject : TExtObject read FMenuTExtObject write SetFMenuTExtObject;
    property MenuAlign : String read FMenuAlign write SetFMenuAlign;
    property TextAlign : String read FTextAlign write SetFTextAlign;
    property OverflowText : String read FOverflowText write SetFOverflowText;
    property IconCls : String read FIconCls write SetFIconCls;
    property TypeJS : String read FTypeJS write SetFTypeJS;
    property ClickEvent : String read FClickEvent write SetFClickEvent;
    property PreventDefault : Boolean read FPreventDefault write SetFPreventDefault;
    property HandleMouseEvents : Boolean read FHandleMouseEvents write SetFHandleMouseEvents;
    property TooltipType : String read FTooltipType write SetFTooltipType;
    property BaseCls : String read FBaseCls write SetFBaseCls;
    property PressedCls : String read FPressedCls write SetFPressedCls;
    property OverCls : String read FOverCls write SetFOverCls;
    property FocusCls : String read FFocusCls write SetFFocusCls;
    property MenuActiveCls : String read FMenuActiveCls write SetFMenuActiveCls;
    property Href : String read FHref write SetFHref;
    property BaseParams : TExtObject read FBaseParams write SetFBaseParams;
    property Params : TExtObject read FParams write SetFParams;
    property Scale : String read FScale write SetFScale;
    property Scope : TExtObject read FScope write SetFScope;
    property IconAlign : String read FIconAlign write SetFIconAlign;
    property ArrowAlign : String read FArrowAlign write SetFArrowAlign;
    property ArrowCls : String read FArrowCls write SetFArrowCls;
    property Cls : String read FCls write SetFCls;
    property AutoWidth : Boolean read FAutoWidth write SetFAutoWidth;
    property OnClick : TExtButtonButtonOnClick read FOnClick write SetFOnClick;
    property OnToggle : TExtButtonButtonOnToggle read FOnToggle write SetFOnToggle;
    property OnMouseout : TExtButtonButtonOnMouseout read FOnMouseout write SetFOnMouseout;
    property OnMenushow : TExtButtonButtonOnMenushow read FOnMenushow write SetFOnMenushow;
  end;

  TExtFormFieldHtmlEditor = class(TExtFunction)
  private
    FEnableFormat : Boolean;
    FEnableFontSize : Boolean;
    FEnableColors : Boolean;
    FEnableAlignments : Boolean;
    FEnableLists : Boolean;
    FEnableSourceEdit : Boolean;
    FEnableLinks : Boolean;
    FEnableFont : Boolean;
    FCreateLinkText : String;
    FDefaultLinkValue : String;
    FFontFamilies : TExtObjectList;
    FDefaultValue : String;
    FFieldCls : String;
    FFocusCls : String;
    FAutoCreate : String;
    FInputType : String;
    FInvalidCls : String;
    FInvalidText : String;
    FMsgFx : String;
    FAllowDomMove : Boolean;
    FApplyTo : String;
    FReadOnly : String;
    FTabIndex : String;
    procedure SetFEnableFormat(Value : Boolean);
    procedure SetFEnableFontSize(Value : Boolean);
    procedure SetFEnableColors(Value : Boolean);
    procedure SetFEnableAlignments(Value : Boolean);
    procedure SetFEnableLists(Value : Boolean);
    procedure SetFEnableSourceEdit(Value : Boolean);
    procedure SetFEnableLinks(Value : Boolean);
    procedure SetFEnableFont(Value : Boolean);
    procedure SetFCreateLinkText(Value : String);
    procedure SetFDefaultLinkValue(Value : String);
    procedure SetFFontFamilies(Value : TExtObjectList);
    procedure SetFDefaultValue(Value : String);
    procedure SetFFieldCls(Value : String);
    procedure SetFFocusCls(Value : String);
    procedure SetFAutoCreate(Value : String);
    procedure SetFInputType(Value : String);
    procedure SetFInvalidCls(Value : String);
    procedure SetFInvalidText(Value : String);
    procedure SetFMsgFx(Value : String);
    procedure SetFAllowDomMove(Value : Boolean);
    procedure SetFApplyTo(Value : String);
    procedure SetFReadOnly(Value : String);
    procedure SetFTabIndex(Value : String);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function Validate : TExtFunction;
    destructor Destroy; override;
    property EnableFormat : Boolean read FEnableFormat write SetFEnableFormat;
    property EnableFontSize : Boolean read FEnableFontSize write SetFEnableFontSize;
    property EnableColors : Boolean read FEnableColors write SetFEnableColors;
    property EnableAlignments : Boolean read FEnableAlignments write SetFEnableAlignments;
    property EnableLists : Boolean read FEnableLists write SetFEnableLists;
    property EnableSourceEdit : Boolean read FEnableSourceEdit write SetFEnableSourceEdit;
    property EnableLinks : Boolean read FEnableLinks write SetFEnableLinks;
    property EnableFont : Boolean read FEnableFont write SetFEnableFont;
    property CreateLinkText : String read FCreateLinkText write SetFCreateLinkText;
    property DefaultLinkValue : String read FDefaultLinkValue write SetFDefaultLinkValue;
    property FontFamilies : TExtObjectList read FFontFamilies write SetFFontFamilies;
    property DefaultValue : String read FDefaultValue write SetFDefaultValue;
    property FieldCls : String read FFieldCls write SetFFieldCls;
    property FocusCls : String read FFocusCls write SetFFocusCls;
    property AutoCreate : String read FAutoCreate write SetFAutoCreate;
    property InputType : String read FInputType write SetFInputType;
    property InvalidCls : String read FInvalidCls write SetFInvalidCls;
    property InvalidText : String read FInvalidText write SetFInvalidText;
    property MsgFx : String read FMsgFx write SetFMsgFx;
    property AllowDomMove : Boolean read FAllowDomMove write SetFAllowDomMove;
    property ApplyTo : String read FApplyTo write SetFApplyTo;
    property ReadOnly : String read FReadOnly write SetFReadOnly;
    property TabIndex : String read FTabIndex write SetFTabIndex;
  end;

  TExtLayer = class(TExtFunction)
  private
    FShim : Boolean;
    FShadow : String;
    FShadowBoolean : Boolean;
    FDh : TExtObject;
    FConstrain : Boolean;
    FCls : String;
    FZindex : Integer;
    FShadowOffset : Integer;
    FUseDisplay : Boolean;
    FVisibilityCls : String;
    FHideMode : String;
    procedure SetFShim(Value : Boolean);
    procedure SetFShadow(Value : String);
    procedure SetFShadowBoolean(Value : Boolean);
    procedure SetFDh(Value : TExtObject);
    procedure SetFConstrain(Value : Boolean);
    procedure SetFCls(Value : String);
    procedure SetFZindex(Value : Integer);
    procedure SetFShadowOffset(Value : Integer);
    procedure SetFUseDisplay(Value : Boolean);
    procedure SetFVisibilityCls(Value : String);
    procedure SetFHideMode(Value : String);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    constructor Create(Config : TExtObject = nil; ExistingEl : String = '');
    constructor Create(Config : TExtObject; ExistingEl : THTMLElement);
    function SetZIndex(Zindex : Integer) : TExtFunction;
    destructor Destroy; override;
    property Shim : Boolean read FShim write SetFShim;
    property Shadow : String read FShadow write SetFShadow;
    property ShadowBoolean : Boolean read FShadowBoolean write SetFShadowBoolean;
    property Dh : TExtObject read FDh write SetFDh;
    property Constrain : Boolean read FConstrain write SetFConstrain;
    property Cls : String read FCls write SetFCls;
    property Zindex : Integer read FZindex write SetFZindex;
    property ShadowOffset : Integer read FShadowOffset write SetFShadowOffset;
    property UseDisplay : Boolean read FUseDisplay write SetFUseDisplay;
    property VisibilityCls : String read FVisibilityCls write SetFVisibilityCls;
    property HideMode : String read FHideMode write SetFHideMode;
  end;

  // Procedural types for events TExtPickerMonth
  TExtPickerMonthOnCancelclick = procedure(This : TExtPickerMonth; This_ : TExtPickerMonth; Value : TExtObjectList) of object;
  TExtPickerMonthOnMonthdblclick = procedure(This : TExtPickerMonth; Value : TExtObjectList) of object;
  TExtPickerMonthOnOkclick = procedure(This : TExtPickerMonth; Value : TExtObjectList) of object;
  TExtPickerMonthOnSelect = procedure(This : TExtPickerMonth; Value : TExtObjectList) of object;
  TExtPickerMonthOnYearclick = procedure(This : TExtPickerMonth; Value : TExtObjectList) of object;
  TExtPickerMonthOnYeardblclick = procedure(This : TExtPickerMonth; Value : TExtObjectList) of object;

  TExtPickerMonth = class(TExtFunction)
  private
    FOkText : String;
    FCancelText : String;
    FBaseCls : String;
    FShowButtons : Boolean;
    FSelectedCls : String;
    FValue : TDateTime;
    FValueTArrayOfInteger : TArrayOfInteger;
    FOnCancelclick : TExtPickerMonthOnCancelclick;
    FOnMonthdblclick : TExtPickerMonthOnMonthdblclick;
    FOnOkclick : TExtPickerMonthOnOkclick;
    FOnSelect : TExtPickerMonthOnSelect;
    FOnYearclick : TExtPickerMonthOnYearclick;
    FOnYeardblclick : TExtPickerMonthOnYeardblclick;
    procedure SetFOkText(Value : String);
    procedure SetFCancelText(Value : String);
    procedure SetFBaseCls(Value : String);
    procedure SetFShowButtons(Value : Boolean);
    procedure SetFSelectedCls(Value : String);
    procedure SetFValue(Value : TDateTime);
    procedure SetFValueTArrayOfInteger(Value : TArrayOfInteger);
    procedure SetFOnCancelclick(Value : TExtPickerMonthOnCancelclick);
    procedure SetFOnMonthdblclick(Value : TExtPickerMonthOnMonthdblclick);
    procedure SetFOnOkclick(Value : TExtPickerMonthOnOkclick);
    procedure SetFOnSelect(Value : TExtPickerMonthOnSelect);
    procedure SetFOnYearclick(Value : TExtPickerMonthOnYearclick);
    procedure SetFOnYeardblclick(Value : TExtPickerMonthOnYeardblclick);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function SetValue(Value : TDateTime) : TExtFunction; overload;
    function SetValue(Value : TArrayOfInteger) : TExtFunction; overload;
    function GetValue : TExtFunction;
    function HasSelection : TExtFunction;
    function AdjustYear(Offset : Integer = 0) : TExtFunction;
    property OkText : String read FOkText write SetFOkText;
    property CancelText : String read FCancelText write SetFCancelText;
    property BaseCls : String read FBaseCls write SetFBaseCls;
    property ShowButtons : Boolean read FShowButtons write SetFShowButtons;
    property SelectedCls : String read FSelectedCls write SetFSelectedCls;
    property Value : TDateTime read FValue write SetFValue;
    property ValueTArrayOfInteger : TArrayOfInteger read FValueTArrayOfInteger write SetFValueTArrayOfInteger;
    property OnCancelclick : TExtPickerMonthOnCancelclick read FOnCancelclick write SetFOnCancelclick;
    property OnMonthdblclick : TExtPickerMonthOnMonthdblclick read FOnMonthdblclick write SetFOnMonthdblclick;
    property OnOkclick : TExtPickerMonthOnOkclick read FOnOkclick write SetFOnOkclick;
    property OnSelect : TExtPickerMonthOnSelect read FOnSelect write SetFOnSelect;
    property OnYearclick : TExtPickerMonthOnYearclick read FOnYearclick write SetFOnYearclick;
    property OnYeardblclick : TExtPickerMonthOnYeardblclick read FOnYeardblclick write SetFOnYeardblclick;
  end;

  TExtGridColumnBoolean = class(TExtFunction)
  private
    FTrueText : String;
    FFalseText : String;
    FUndefinedText : String;
    procedure SetFTrueText(Value : String);
    procedure SetFFalseText(Value : String);
    procedure SetFUndefinedText(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property TrueText : String read FTrueText write SetFTrueText;
    property FalseText : String read FFalseText write SetFFalseText;
    property UndefinedText : String read FUndefinedText write SetFUndefinedText;
  end;

  TExtStateManagerSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function SetProvider(StateProvider : TExtStateProvider) : TExtFunction;
    function Get(Name : String; DefaultValue : TExtObject) : TExtFunction;
    function SetJS(Name : String; Value : TExtObject) : TExtFunction;
    function Clear(Name : String) : TExtFunction;
    function GetProvider : TExtFunction;
  end;

  // Procedural types for events TExtTabPanel
  TExtTabPanelOnBeforetabchange = procedure(TabPanel : TExtTabPanel; NewCard : TExtComponent; OldCard : TExtComponent) of object;
  TExtTabPanelOnTabchange = procedure(TabPanel : TExtTabPanel; NewCard : TExtComponent; OldCard : TExtComponent) of object;

  TExtTabPanel = class(TExtFunction)
  private
    FTabPosition : String;
    FActiveItem : String;
    FActiveItemInteger : Integer;
    FActiveTab : String;
    FActiveTabInteger : Integer;
    FActiveTabTExtComponent : TExtComponent;
    FTabBar : TExtObject;
    FLayout : TExtObject;
    FRemovePanelHeader : Boolean;
    FPlain : Boolean;
    FItemCls : String;
    FMinTabWidth : Integer;
    FMaxTabWidth : Integer;
    FDeferredRender : Boolean;
    FOnBeforetabchange : TExtTabPanelOnBeforetabchange;
    FOnTabchange : TExtTabPanelOnTabchange;
    procedure SetFTabPosition(Value : String);
    procedure SetFActiveItem(Value : String);
    procedure SetFActiveItemInteger(Value : Integer);
    procedure SetFActiveTab(Value : String);
    procedure SetFActiveTabInteger(Value : Integer);
    procedure SetFActiveTabTExtComponent(Value : TExtComponent);
    procedure SetFTabBar(Value : TExtObject);
    procedure SetFLayout(Value : TExtObject);
    procedure SetFRemovePanelHeader(Value : Boolean);
    procedure SetFPlain(Value : Boolean);
    procedure SetFItemCls(Value : String);
    procedure SetFMinTabWidth(Value : Integer);
    procedure SetFMaxTabWidth(Value : Integer);
    procedure SetFDeferredRender(Value : Boolean);
    procedure SetFOnBeforetabchange(Value : TExtTabPanelOnBeforetabchange);
    procedure SetFOnTabchange(Value : TExtTabPanelOnTabchange);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function SetActiveTab(Card : String) : TExtFunction; overload;
    function SetActiveTab(Card : Integer) : TExtFunction; overload;
    function SetActiveTab(Card : TExtComponent) : TExtFunction; overload;
    function GetActiveTab : TExtFunction;
    function GetTabBar : TExtFunction;
    function OnAdd : TExtFunction;
    function DoRemove : TExtFunction;
    function OnRemove : TExtFunction;
    destructor Destroy; override;
    property TabPosition : String read FTabPosition write SetFTabPosition;
    property ActiveItem : String read FActiveItem write SetFActiveItem;
    property ActiveItemInteger : Integer read FActiveItemInteger write SetFActiveItemInteger;
    property ActiveTab : String read FActiveTab write SetFActiveTab;
    property ActiveTabInteger : Integer read FActiveTabInteger write SetFActiveTabInteger;
    property ActiveTabTExtComponent : TExtComponent read FActiveTabTExtComponent write SetFActiveTabTExtComponent;
    property TabBar : TExtObject read FTabBar write SetFTabBar;
    property Layout : TExtObject read FLayout write SetFLayout;
    property RemovePanelHeader : Boolean read FRemovePanelHeader write SetFRemovePanelHeader;
    property Plain : Boolean read FPlain write SetFPlain;
    property ItemCls : String read FItemCls write SetFItemCls;
    property MinTabWidth : Integer read FMinTabWidth write SetFMinTabWidth;
    property MaxTabWidth : Integer read FMaxTabWidth write SetFMaxTabWidth;
    property DeferredRender : Boolean read FDeferredRender write SetFDeferredRender;
    property OnBeforetabchange : TExtTabPanelOnBeforetabchange read FOnBeforetabchange write SetFOnBeforetabchange;
    property OnTabchange : TExtTabPanelOnTabchange read FOnTabchange write SetFOnTabchange;
  end;

  // Procedural types for events TExtDataTreeStore
  TExtDataTreeStoreOnAppend = procedure of object;
  TExtDataTreeStoreOnRemove = procedure of object;
  TExtDataTreeStoreOnMove = procedure of object;
  TExtDataTreeStoreOnInsert = procedure of object;
  TExtDataTreeStoreOnBeforeappend = procedure of object;
  TExtDataTreeStoreOnBeforeremove = procedure of object;
  TExtDataTreeStoreOnBeforemove = procedure of object;
  TExtDataTreeStoreOnBeforeinsert = procedure of object;
  TExtDataTreeStoreOnExpand = procedure of object;
  TExtDataTreeStoreOnCollapse = procedure of object;
  TExtDataTreeStoreOnBeforeexpand = procedure of object;
  TExtDataTreeStoreOnBeforecollapse = procedure of object;
  TExtDataTreeStoreOnRootchange = procedure of object;
  TExtDataTreeStoreOnSort = procedure(Node : TExtDataNodeInterface) of object;
  TExtDataTreeStoreOnLoad = procedure(This : TExtDataTreeStore; Node : TExtDataNodeInterface; Records : TExtObjectList; Successful : Boolean) of object;

  TExtDataTreeStore = class(TExtFunction)
  private
    FRoot : TExtDataModel;
    FRootTExtDataNodeInterface : TExtDataNodeInterface;
    FRootTExtObject : TExtObject;
    FClearOnLoad : Boolean;
    FNodeParam : String;
    FDefaultRootId : String;
    FDefaultRootProperty : String;
    FFolderSort : Boolean;
    FOnAppend : TExtDataTreeStoreOnAppend;
    FOnRemove : TExtDataTreeStoreOnRemove;
    FOnMove : TExtDataTreeStoreOnMove;
    FOnInsert : TExtDataTreeStoreOnInsert;
    FOnBeforeappend : TExtDataTreeStoreOnBeforeappend;
    FOnBeforeremove : TExtDataTreeStoreOnBeforeremove;
    FOnBeforemove : TExtDataTreeStoreOnBeforemove;
    FOnBeforeinsert : TExtDataTreeStoreOnBeforeinsert;
    FOnExpand : TExtDataTreeStoreOnExpand;
    FOnCollapse : TExtDataTreeStoreOnCollapse;
    FOnBeforeexpand : TExtDataTreeStoreOnBeforeexpand;
    FOnBeforecollapse : TExtDataTreeStoreOnBeforecollapse;
    FOnRootchange : TExtDataTreeStoreOnRootchange;
    FOnSort : TExtDataTreeStoreOnSort;
    FOnLoad : TExtDataTreeStoreOnLoad;
    procedure SetFRoot(Value : TExtDataModel);
    procedure SetFRootTExtDataNodeInterface(Value : TExtDataNodeInterface);
    procedure SetFRootTExtObject(Value : TExtObject);
    procedure SetFClearOnLoad(Value : Boolean);
    procedure SetFNodeParam(Value : String);
    procedure SetFDefaultRootId(Value : String);
    procedure SetFDefaultRootProperty(Value : String);
    procedure SetFFolderSort(Value : Boolean);
    procedure SetFOnAppend(Value : TExtDataTreeStoreOnAppend);
    procedure SetFOnRemove(Value : TExtDataTreeStoreOnRemove);
    procedure SetFOnMove(Value : TExtDataTreeStoreOnMove);
    procedure SetFOnInsert(Value : TExtDataTreeStoreOnInsert);
    procedure SetFOnBeforeappend(Value : TExtDataTreeStoreOnBeforeappend);
    procedure SetFOnBeforeremove(Value : TExtDataTreeStoreOnBeforeremove);
    procedure SetFOnBeforemove(Value : TExtDataTreeStoreOnBeforemove);
    procedure SetFOnBeforeinsert(Value : TExtDataTreeStoreOnBeforeinsert);
    procedure SetFOnExpand(Value : TExtDataTreeStoreOnExpand);
    procedure SetFOnCollapse(Value : TExtDataTreeStoreOnCollapse);
    procedure SetFOnBeforeexpand(Value : TExtDataTreeStoreOnBeforeexpand);
    procedure SetFOnBeforecollapse(Value : TExtDataTreeStoreOnBeforecollapse);
    procedure SetFOnRootchange(Value : TExtDataTreeStoreOnRootchange);
    procedure SetFOnSort(Value : TExtDataTreeStoreOnSort);
    procedure SetFOnLoad(Value : TExtDataTreeStoreOnLoad);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    destructor Destroy; override;
    property Root : TExtDataModel read FRoot write SetFRoot;
    property RootTExtDataNodeInterface : TExtDataNodeInterface read FRootTExtDataNodeInterface write SetFRootTExtDataNodeInterface;
    property RootTExtObject : TExtObject read FRootTExtObject write SetFRootTExtObject;
    property ClearOnLoad : Boolean read FClearOnLoad write SetFClearOnLoad;
    property NodeParam : String read FNodeParam write SetFNodeParam;
    property DefaultRootId : String read FDefaultRootId write SetFDefaultRootId;
    property DefaultRootProperty : String read FDefaultRootProperty write SetFDefaultRootProperty;
    property FolderSort : Boolean read FFolderSort write SetFFolderSort;
    property OnAppend : TExtDataTreeStoreOnAppend read FOnAppend write SetFOnAppend;
    property OnRemove : TExtDataTreeStoreOnRemove read FOnRemove write SetFOnRemove;
    property OnMove : TExtDataTreeStoreOnMove read FOnMove write SetFOnMove;
    property OnInsert : TExtDataTreeStoreOnInsert read FOnInsert write SetFOnInsert;
    property OnBeforeappend : TExtDataTreeStoreOnBeforeappend read FOnBeforeappend write SetFOnBeforeappend;
    property OnBeforeremove : TExtDataTreeStoreOnBeforeremove read FOnBeforeremove write SetFOnBeforeremove;
    property OnBeforemove : TExtDataTreeStoreOnBeforemove read FOnBeforemove write SetFOnBeforemove;
    property OnBeforeinsert : TExtDataTreeStoreOnBeforeinsert read FOnBeforeinsert write SetFOnBeforeinsert;
    property OnExpand : TExtDataTreeStoreOnExpand read FOnExpand write SetFOnExpand;
    property OnCollapse : TExtDataTreeStoreOnCollapse read FOnCollapse write SetFOnCollapse;
    property OnBeforeexpand : TExtDataTreeStoreOnBeforeexpand read FOnBeforeexpand write SetFOnBeforeexpand;
    property OnBeforecollapse : TExtDataTreeStoreOnBeforecollapse read FOnBeforecollapse write SetFOnBeforecollapse;
    property OnRootchange : TExtDataTreeStoreOnRootchange read FOnRootchange write SetFOnRootchange;
    property OnSort : TExtDataTreeStoreOnSort read FOnSort write SetFOnSort;
    property OnLoad : TExtDataTreeStoreOnLoad read FOnLoad write SetFOnLoad;
  end;

  TExtDataField = class(TExtFunction)
  private
    FName : String;
    FTypeJS : String;
    FTypeJSTExtObject : TExtObject;
    FConvert : TExtFunction;
    FDateFormat : String;
    FUseNull : Boolean;
    FDefaultValue : TExtObject;
    FMapping : String;
    FMappingInteger : Integer;
    FSortType : TExtFunction;
    FSortDir : String;
    FAllowBlank : Boolean;
    FPersist : Boolean;
    procedure SetFName(Value : String);
    procedure SetFTypeJS(Value : String);
    procedure SetFTypeJSTExtObject(Value : TExtObject);
    procedure SetFConvert(Value : TExtFunction);
    procedure SetFDateFormat(Value : String);
    procedure SetFUseNull(Value : Boolean);
    procedure SetFDefaultValue(Value : TExtObject);
    procedure SetFMapping(Value : String);
    procedure SetFMappingInteger(Value : Integer);
    procedure SetFSortType(Value : TExtFunction);
    procedure SetFSortDir(Value : String);
    procedure SetFAllowBlank(Value : Boolean);
    procedure SetFPersist(Value : Boolean);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    destructor Destroy; override;
    property Name : String read FName write SetFName;
    property TypeJS : String read FTypeJS write SetFTypeJS;
    property TypeJSTExtObject : TExtObject read FTypeJSTExtObject write SetFTypeJSTExtObject;
    property Convert : TExtFunction read FConvert write SetFConvert;
    property DateFormat : String read FDateFormat write SetFDateFormat;
    property UseNull : Boolean read FUseNull write SetFUseNull;
    property DefaultValue : TExtObject read FDefaultValue write SetFDefaultValue;
    property Mapping : String read FMapping write SetFMapping;
    property MappingInteger : Integer read FMappingInteger write SetFMappingInteger;
    property SortType : TExtFunction read FSortType write SetFSortType;
    property SortDir : String read FSortDir write SetFSortDir;
    property AllowBlank : Boolean read FAllowBlank write SetFAllowBlank;
    property Persist : Boolean read FPersist write SetFPersist;
  end;

  // Procedural types for events TExtPanelTable
  TExtPanelTableOnReconfigure = procedure(This : TExtPanelTable; This_ : TExtPanelTable; Scroller : TExtGridScroller; Orientation : String) of object;
  TExtPanelTableOnScrollershow = procedure(Scroller : TExtGridScroller; Orientation : String) of object;
  TExtPanelTableOnBeforeitemmousedown = procedure of object;
  TExtPanelTableOnBeforeitemmouseup = procedure of object;
  TExtPanelTableOnBeforeitemmouseenter = procedure of object;
  TExtPanelTableOnBeforeitemmouseleave = procedure of object;
  TExtPanelTableOnBeforeitemclick = procedure of object;
  TExtPanelTableOnBeforeitemdblclick = procedure of object;
  TExtPanelTableOnBeforeitemcontextmenu = procedure of object;
  TExtPanelTableOnItemmousedown = procedure of object;
  TExtPanelTableOnItemmouseup = procedure of object;
  TExtPanelTableOnItemmouseenter = procedure of object;
  TExtPanelTableOnItemmouseleave = procedure of object;
  TExtPanelTableOnItemclick = procedure of object;
  TExtPanelTableOnItemdblclick = procedure of object;
  TExtPanelTableOnItemcontextmenu = procedure of object;
  TExtPanelTableOnBeforecontainermousedown = procedure of object;
  TExtPanelTableOnBeforecontainermouseup = procedure of object;
  TExtPanelTableOnBeforecontainermouseover = procedure of object;
  TExtPanelTableOnBeforecontainermouseout = procedure of object;
  TExtPanelTableOnBeforecontainerclick = procedure of object;
  TExtPanelTableOnBeforecontainerdblclick = procedure of object;
  TExtPanelTableOnBeforecontainercontextmenu = procedure of object;
  TExtPanelTableOnContainermouseup = procedure of object;
  TExtPanelTableOnContainermouseover = procedure of object;
  TExtPanelTableOnContainermouseout = procedure of object;
  TExtPanelTableOnContainerclick = procedure of object;
  TExtPanelTableOnContainerdblclick = procedure of object;
  TExtPanelTableOnContainercontextmenu = procedure of object;
  TExtPanelTableOnSelectionchange = procedure of object;
  TExtPanelTableOnBeforeselect = procedure of object;
  TExtPanelTableOnSelect = procedure of object;
  TExtPanelTableOnBeforedeselect = procedure of object;
  TExtPanelTableOnDeselect = procedure of object;
  TExtPanelTableOnColumnresize = procedure of object;
  TExtPanelTableOnColumnmove = procedure of object;
  TExtPanelTableOnColumnhide = procedure of object;
  TExtPanelTableOnColumnshow = procedure of object;
  TExtPanelTableOnSortchange = procedure of object;

  TExtPanelTable = class(TExtFunction)
  private
    FViewType : String;
    FViewConfig : TExtObject;
    FView : TExtViewTable;
    FSelType : String;
    FSelModel : TExtSelectionModel;
    FSelModelTExtObject : TExtObject;
    FMultiSelect : Boolean;
    FSimpleSelect : Boolean;
    FStore : TExtDataStore;
    FScrollDelta : Integer;
    FScroll : String;
    FScrollBoolean : Boolean;
    FColumns : TExtObjectList;
    FForceFit : Boolean;
    FFeatures : TExtObjectList;
    FHideHeaders : Boolean;
    FDeferRowRender : Boolean;
    FSortableColumns : Boolean;
    FEnableLocking : Boolean;
    FEnableColumnMove : Boolean;
    FEnableColumnResize : Boolean;
    FEnableColumnHide : Boolean;
    FOnReconfigure : TExtPanelTableOnReconfigure;
    FOnScrollershow : TExtPanelTableOnScrollershow;
    FOnBeforeitemmousedown : TExtPanelTableOnBeforeitemmousedown;
    FOnBeforeitemmouseup : TExtPanelTableOnBeforeitemmouseup;
    FOnBeforeitemmouseenter : TExtPanelTableOnBeforeitemmouseenter;
    FOnBeforeitemmouseleave : TExtPanelTableOnBeforeitemmouseleave;
    FOnBeforeitemclick : TExtPanelTableOnBeforeitemclick;
    FOnBeforeitemdblclick : TExtPanelTableOnBeforeitemdblclick;
    FOnBeforeitemcontextmenu : TExtPanelTableOnBeforeitemcontextmenu;
    FOnItemmousedown : TExtPanelTableOnItemmousedown;
    FOnItemmouseup : TExtPanelTableOnItemmouseup;
    FOnItemmouseenter : TExtPanelTableOnItemmouseenter;
    FOnItemmouseleave : TExtPanelTableOnItemmouseleave;
    FOnItemclick : TExtPanelTableOnItemclick;
    FOnItemdblclick : TExtPanelTableOnItemdblclick;
    FOnItemcontextmenu : TExtPanelTableOnItemcontextmenu;
    FOnBeforecontainermousedown : TExtPanelTableOnBeforecontainermousedown;
    FOnBeforecontainermouseup : TExtPanelTableOnBeforecontainermouseup;
    FOnBeforecontainermouseover : TExtPanelTableOnBeforecontainermouseover;
    FOnBeforecontainermouseout : TExtPanelTableOnBeforecontainermouseout;
    FOnBeforecontainerclick : TExtPanelTableOnBeforecontainerclick;
    FOnBeforecontainerdblclick : TExtPanelTableOnBeforecontainerdblclick;
    FOnBeforecontainercontextmenu : TExtPanelTableOnBeforecontainercontextmenu;
    FOnContainermouseup : TExtPanelTableOnContainermouseup;
    FOnContainermouseover : TExtPanelTableOnContainermouseover;
    FOnContainermouseout : TExtPanelTableOnContainermouseout;
    FOnContainerclick : TExtPanelTableOnContainerclick;
    FOnContainerdblclick : TExtPanelTableOnContainerdblclick;
    FOnContainercontextmenu : TExtPanelTableOnContainercontextmenu;
    FOnSelectionchange : TExtPanelTableOnSelectionchange;
    FOnBeforeselect : TExtPanelTableOnBeforeselect;
    FOnSelect : TExtPanelTableOnSelect;
    FOnBeforedeselect : TExtPanelTableOnBeforedeselect;
    FOnDeselect : TExtPanelTableOnDeselect;
    FOnColumnresize : TExtPanelTableOnColumnresize;
    FOnColumnmove : TExtPanelTableOnColumnmove;
    FOnColumnhide : TExtPanelTableOnColumnhide;
    FOnColumnshow : TExtPanelTableOnColumnshow;
    FOnSortchange : TExtPanelTableOnSortchange;
    procedure SetFViewType(Value : String);
    procedure SetFViewConfig(Value : TExtObject);
    procedure SetFView(Value : TExtViewTable);
    procedure SetFSelType(Value : String);
    procedure SetFSelModel(Value : TExtSelectionModel);
    procedure SetFSelModelTExtObject(Value : TExtObject);
    procedure SetFMultiSelect(Value : Boolean);
    procedure SetFSimpleSelect(Value : Boolean);
    procedure SetFStore(Value : TExtDataStore);
    procedure SetFScrollDelta(Value : Integer);
    procedure SetFScroll(Value : String);
    procedure SetFScrollBoolean(Value : Boolean);
    procedure SetFColumns(Value : TExtObjectList);
    procedure SetFForceFit(Value : Boolean);
    procedure SetFFeatures(Value : TExtObjectList);
    procedure SetFHideHeaders(Value : Boolean);
    procedure SetFDeferRowRender(Value : Boolean);
    procedure SetFSortableColumns(Value : Boolean);
    procedure SetFEnableLocking(Value : Boolean);
    procedure SetFEnableColumnMove(Value : Boolean);
    procedure SetFEnableColumnResize(Value : Boolean);
    procedure SetFEnableColumnHide(Value : Boolean);
    procedure SetFOnReconfigure(Value : TExtPanelTableOnReconfigure);
    procedure SetFOnScrollershow(Value : TExtPanelTableOnScrollershow);
    procedure SetFOnBeforeitemmousedown(Value : TExtPanelTableOnBeforeitemmousedown);
    procedure SetFOnBeforeitemmouseup(Value : TExtPanelTableOnBeforeitemmouseup);
    procedure SetFOnBeforeitemmouseenter(Value : TExtPanelTableOnBeforeitemmouseenter);
    procedure SetFOnBeforeitemmouseleave(Value : TExtPanelTableOnBeforeitemmouseleave);
    procedure SetFOnBeforeitemclick(Value : TExtPanelTableOnBeforeitemclick);
    procedure SetFOnBeforeitemdblclick(Value : TExtPanelTableOnBeforeitemdblclick);
    procedure SetFOnBeforeitemcontextmenu(Value : TExtPanelTableOnBeforeitemcontextmenu);
    procedure SetFOnItemmousedown(Value : TExtPanelTableOnItemmousedown);
    procedure SetFOnItemmouseup(Value : TExtPanelTableOnItemmouseup);
    procedure SetFOnItemmouseenter(Value : TExtPanelTableOnItemmouseenter);
    procedure SetFOnItemmouseleave(Value : TExtPanelTableOnItemmouseleave);
    procedure SetFOnItemclick(Value : TExtPanelTableOnItemclick);
    procedure SetFOnItemdblclick(Value : TExtPanelTableOnItemdblclick);
    procedure SetFOnItemcontextmenu(Value : TExtPanelTableOnItemcontextmenu);
    procedure SetFOnBeforecontainermousedown(Value : TExtPanelTableOnBeforecontainermousedown);
    procedure SetFOnBeforecontainermouseup(Value : TExtPanelTableOnBeforecontainermouseup);
    procedure SetFOnBeforecontainermouseover(Value : TExtPanelTableOnBeforecontainermouseover);
    procedure SetFOnBeforecontainermouseout(Value : TExtPanelTableOnBeforecontainermouseout);
    procedure SetFOnBeforecontainerclick(Value : TExtPanelTableOnBeforecontainerclick);
    procedure SetFOnBeforecontainerdblclick(Value : TExtPanelTableOnBeforecontainerdblclick);
    procedure SetFOnBeforecontainercontextmenu(Value : TExtPanelTableOnBeforecontainercontextmenu);
    procedure SetFOnContainermouseup(Value : TExtPanelTableOnContainermouseup);
    procedure SetFOnContainermouseover(Value : TExtPanelTableOnContainermouseover);
    procedure SetFOnContainermouseout(Value : TExtPanelTableOnContainermouseout);
    procedure SetFOnContainerclick(Value : TExtPanelTableOnContainerclick);
    procedure SetFOnContainerdblclick(Value : TExtPanelTableOnContainerdblclick);
    procedure SetFOnContainercontextmenu(Value : TExtPanelTableOnContainercontextmenu);
    procedure SetFOnSelectionchange(Value : TExtPanelTableOnSelectionchange);
    procedure SetFOnBeforeselect(Value : TExtPanelTableOnBeforeselect);
    procedure SetFOnSelect(Value : TExtPanelTableOnSelect);
    procedure SetFOnBeforedeselect(Value : TExtPanelTableOnBeforedeselect);
    procedure SetFOnDeselect(Value : TExtPanelTableOnDeselect);
    procedure SetFOnColumnresize(Value : TExtPanelTableOnColumnresize);
    procedure SetFOnColumnmove(Value : TExtPanelTableOnColumnmove);
    procedure SetFOnColumnhide(Value : TExtPanelTableOnColumnhide);
    procedure SetFOnColumnshow(Value : TExtPanelTableOnColumnshow);
    procedure SetFOnSortchange(Value : TExtPanelTableOnSortchange);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function GetStore : TExtFunction;
    function GetView : TExtFunction;
    function DetermineScrollbars : TExtFunction;
    function HideHorizontalScroller : TExtFunction;
    function ShowHorizontalScroller : TExtFunction;
    function HideVerticalScroller : TExtFunction;
    function ShowVerticalScroller : TExtFunction;
    function InvalidateScroller : TExtFunction;
    function SetScrollTop(Top : Integer; DeltaY : Integer; DeltaX : Integer) : TExtFunction;
    function GetSelectionModel : TExtFunction;
    function Reconfigure(Store : TExtDataStore = nil; Columns : TExtObjectList = nil) : TExtFunction;
    destructor Destroy; override;
    property ViewType : String read FViewType write SetFViewType;
    property ViewConfig : TExtObject read FViewConfig write SetFViewConfig;
    property View : TExtViewTable read FView write SetFView;
    property SelType : String read FSelType write SetFSelType;
    property SelModel : TExtSelectionModel read FSelModel write SetFSelModel;
    property SelModelTExtObject : TExtObject read FSelModelTExtObject write SetFSelModelTExtObject;
    property MultiSelect : Boolean read FMultiSelect write SetFMultiSelect;
    property SimpleSelect : Boolean read FSimpleSelect write SetFSimpleSelect;
    property Store : TExtDataStore read FStore write SetFStore;
    property ScrollDelta : Integer read FScrollDelta write SetFScrollDelta;
    property Scroll : String read FScroll write SetFScroll;
    property ScrollBoolean : Boolean read FScrollBoolean write SetFScrollBoolean;
    property Columns : TExtObjectList read FColumns write SetFColumns;
    property ForceFit : Boolean read FForceFit write SetFForceFit;
    property Features : TExtObjectList read FFeatures write SetFFeatures;
    property HideHeaders : Boolean read FHideHeaders write SetFHideHeaders;
    property DeferRowRender : Boolean read FDeferRowRender write SetFDeferRowRender;
    property SortableColumns : Boolean read FSortableColumns write SetFSortableColumns;
    property EnableLocking : Boolean read FEnableLocking write SetFEnableLocking;
    property EnableColumnMove : Boolean read FEnableColumnMove write SetFEnableColumnMove;
    property EnableColumnResize : Boolean read FEnableColumnResize write SetFEnableColumnResize;
    property EnableColumnHide : Boolean read FEnableColumnHide write SetFEnableColumnHide;
    property OnReconfigure : TExtPanelTableOnReconfigure read FOnReconfigure write SetFOnReconfigure;
    property OnScrollershow : TExtPanelTableOnScrollershow read FOnScrollershow write SetFOnScrollershow;
    property OnBeforeitemmousedown : TExtPanelTableOnBeforeitemmousedown read FOnBeforeitemmousedown write SetFOnBeforeitemmousedown;
    property OnBeforeitemmouseup : TExtPanelTableOnBeforeitemmouseup read FOnBeforeitemmouseup write SetFOnBeforeitemmouseup;
    property OnBeforeitemmouseenter : TExtPanelTableOnBeforeitemmouseenter read FOnBeforeitemmouseenter write SetFOnBeforeitemmouseenter;
    property OnBeforeitemmouseleave : TExtPanelTableOnBeforeitemmouseleave read FOnBeforeitemmouseleave write SetFOnBeforeitemmouseleave;
    property OnBeforeitemclick : TExtPanelTableOnBeforeitemclick read FOnBeforeitemclick write SetFOnBeforeitemclick;
    property OnBeforeitemdblclick : TExtPanelTableOnBeforeitemdblclick read FOnBeforeitemdblclick write SetFOnBeforeitemdblclick;
    property OnBeforeitemcontextmenu : TExtPanelTableOnBeforeitemcontextmenu read FOnBeforeitemcontextmenu write SetFOnBeforeitemcontextmenu;
    property OnItemmousedown : TExtPanelTableOnItemmousedown read FOnItemmousedown write SetFOnItemmousedown;
    property OnItemmouseup : TExtPanelTableOnItemmouseup read FOnItemmouseup write SetFOnItemmouseup;
    property OnItemmouseenter : TExtPanelTableOnItemmouseenter read FOnItemmouseenter write SetFOnItemmouseenter;
    property OnItemmouseleave : TExtPanelTableOnItemmouseleave read FOnItemmouseleave write SetFOnItemmouseleave;
    property OnItemclick : TExtPanelTableOnItemclick read FOnItemclick write SetFOnItemclick;
    property OnItemdblclick : TExtPanelTableOnItemdblclick read FOnItemdblclick write SetFOnItemdblclick;
    property OnItemcontextmenu : TExtPanelTableOnItemcontextmenu read FOnItemcontextmenu write SetFOnItemcontextmenu;
    property OnBeforecontainermousedown : TExtPanelTableOnBeforecontainermousedown read FOnBeforecontainermousedown write SetFOnBeforecontainermousedown;
    property OnBeforecontainermouseup : TExtPanelTableOnBeforecontainermouseup read FOnBeforecontainermouseup write SetFOnBeforecontainermouseup;
    property OnBeforecontainermouseover : TExtPanelTableOnBeforecontainermouseover read FOnBeforecontainermouseover write SetFOnBeforecontainermouseover;
    property OnBeforecontainermouseout : TExtPanelTableOnBeforecontainermouseout read FOnBeforecontainermouseout write SetFOnBeforecontainermouseout;
    property OnBeforecontainerclick : TExtPanelTableOnBeforecontainerclick read FOnBeforecontainerclick write SetFOnBeforecontainerclick;
    property OnBeforecontainerdblclick : TExtPanelTableOnBeforecontainerdblclick read FOnBeforecontainerdblclick write SetFOnBeforecontainerdblclick;
    property OnBeforecontainercontextmenu : TExtPanelTableOnBeforecontainercontextmenu read FOnBeforecontainercontextmenu write SetFOnBeforecontainercontextmenu;
    property OnContainermouseup : TExtPanelTableOnContainermouseup read FOnContainermouseup write SetFOnContainermouseup;
    property OnContainermouseover : TExtPanelTableOnContainermouseover read FOnContainermouseover write SetFOnContainermouseover;
    property OnContainermouseout : TExtPanelTableOnContainermouseout read FOnContainermouseout write SetFOnContainermouseout;
    property OnContainerclick : TExtPanelTableOnContainerclick read FOnContainerclick write SetFOnContainerclick;
    property OnContainerdblclick : TExtPanelTableOnContainerdblclick read FOnContainerdblclick write SetFOnContainerdblclick;
    property OnContainercontextmenu : TExtPanelTableOnContainercontextmenu read FOnContainercontextmenu write SetFOnContainercontextmenu;
    property OnSelectionchange : TExtPanelTableOnSelectionchange read FOnSelectionchange write SetFOnSelectionchange;
    property OnBeforeselect : TExtPanelTableOnBeforeselect read FOnBeforeselect write SetFOnBeforeselect;
    property OnSelect : TExtPanelTableOnSelect read FOnSelect write SetFOnSelect;
    property OnBeforedeselect : TExtPanelTableOnBeforedeselect read FOnBeforedeselect write SetFOnBeforedeselect;
    property OnDeselect : TExtPanelTableOnDeselect read FOnDeselect write SetFOnDeselect;
    property OnColumnresize : TExtPanelTableOnColumnresize read FOnColumnresize write SetFOnColumnresize;
    property OnColumnmove : TExtPanelTableOnColumnmove read FOnColumnmove write SetFOnColumnmove;
    property OnColumnhide : TExtPanelTableOnColumnhide read FOnColumnhide write SetFOnColumnhide;
    property OnColumnshow : TExtPanelTableOnColumnshow read FOnColumnshow write SetFOnColumnshow;
    property OnSortchange : TExtPanelTableOnSortchange read FOnSortchange write SetFOnSortchange;
  end;

  TExtGridPropertyProperty = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtContainerViewport = class(TExtFunction)
  private
    FApplyTo : String;
    FApplyToTHTMLElement : THTMLElement;
    FApplyToTExtElement : TExtElement;
    FAllowDomMove : Boolean;
    FHideParent : Boolean;
    FRenderTo : String;
    FRenderToTHTMLElement : THTMLElement;
    FRenderToTExtElement : TExtElement;
    FHideParent_ : Boolean;
    FHeight : Integer;
    FWidth : Integer;
    FAutoHeight : Boolean;
    FAutoWidth : Boolean;
    FDeferHeight : Boolean;
    FMonitorResize : Boolean;
    procedure SetFApplyTo(Value : String);
    procedure SetFApplyToTHTMLElement(Value : THTMLElement);
    procedure SetFApplyToTExtElement(Value : TExtElement);
    procedure SetFAllowDomMove(Value : Boolean);
    procedure SetFHideParent(Value : Boolean);
    procedure SetFRenderTo(Value : String);
    procedure SetFRenderToTHTMLElement(Value : THTMLElement);
    procedure SetFRenderToTExtElement(Value : TExtElement);
    procedure SetFHideParent_(Value : Boolean);
    procedure SetFHeight(Value : Integer);
    procedure SetFWidth(Value : Integer);
    procedure SetFAutoHeight(Value : Boolean);
    procedure SetFAutoWidth(Value : Boolean);
    procedure SetFDeferHeight(Value : Boolean);
    procedure SetFMonitorResize(Value : Boolean);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    destructor Destroy; override;
    property ApplyTo : String read FApplyTo write SetFApplyTo;
    property ApplyToTHTMLElement : THTMLElement read FApplyToTHTMLElement write SetFApplyToTHTMLElement;
    property ApplyToTExtElement : TExtElement read FApplyToTExtElement write SetFApplyToTExtElement;
    property AllowDomMove : Boolean read FAllowDomMove write SetFAllowDomMove;
    property HideParent : Boolean read FHideParent write SetFHideParent;
    property RenderTo : String read FRenderTo write SetFRenderTo;
    property RenderToTHTMLElement : THTMLElement read FRenderToTHTMLElement write SetFRenderToTHTMLElement;
    property RenderToTExtElement : TExtElement read FRenderToTExtElement write SetFRenderToTExtElement;
    property HideParent_ : Boolean read FHideParent_ write SetFHideParent_;
    property Height : Integer read FHeight write SetFHeight;
    property Width : Integer read FWidth write SetFWidth;
    property AutoHeight : Boolean read FAutoHeight write SetFAutoHeight;
    property AutoWidth : Boolean read FAutoWidth write SetFAutoWidth;
    property DeferHeight : Boolean read FDeferHeight write SetFDeferHeight;
    property MonitorResize : Boolean read FMonitorResize write SetFMonitorResize;
  end;

  TExtIsSingleton = class(TExtFunction)
  private
    FDesktop : Boolean;
    FTablet : Boolean;
    FIOS : Boolean;
    FStandalone : Boolean;
    FIPhone : Boolean;
    FIPod : Boolean;
    FIPad : Boolean;
    FBlackberry : Boolean;
    FAndroid : Boolean;
    FMac : Boolean;
    FWindows : Boolean;
    FLinux : Boolean;
    FCSS3BoxShadow : Boolean;
    FClassList : Boolean;
    FOrientationChange : Boolean;
    FDeviceMotion : Boolean;
    FTouch : Boolean;
    FTransitions : Boolean;
    FRightMargin : Boolean;
    FDisplayChangeInputSelectionBug : Boolean;
    FComputedStyle : Boolean;
    FCanvas : Boolean;
    FFloat : Boolean;
    FAudioTag : Boolean;
    FHistory : Boolean;
    FCSS3DTransform : Boolean;
    FCSS3LinearGradient : Boolean;
    FCSS3BorderRadius : Boolean;
    FGeoLocation : Boolean;
    FMouseEnterLeave : Boolean;
    FMouseWheel : Boolean;
    FOpacity : Boolean;
    FPlaceholder : Boolean;
    FDirect2DBug : Boolean;
    FBoundingClientRect : Boolean;
    FArraySort : Boolean;
    FRange : Boolean;
    FCreateContextualFragment : Boolean;
    FWindowOnError : Boolean;
    procedure SetFDesktop(Value : Boolean);
    procedure SetFTablet(Value : Boolean);
    procedure SetFIOS(Value : Boolean);
    procedure SetFStandalone(Value : Boolean);
    procedure SetFIPhone(Value : Boolean);
    procedure SetFIPod(Value : Boolean);
    procedure SetFIPad(Value : Boolean);
    procedure SetFBlackberry(Value : Boolean);
    procedure SetFAndroid(Value : Boolean);
    procedure SetFMac(Value : Boolean);
    procedure SetFWindows(Value : Boolean);
    procedure SetFLinux(Value : Boolean);
    procedure SetFCSS3BoxShadow(Value : Boolean);
    procedure SetFClassList(Value : Boolean);
    procedure SetFOrientationChange(Value : Boolean);
    procedure SetFDeviceMotion(Value : Boolean);
    procedure SetFTouch(Value : Boolean);
    procedure SetFTransitions(Value : Boolean);
    procedure SetFRightMargin(Value : Boolean);
    procedure SetFDisplayChangeInputSelectionBug(Value : Boolean);
    procedure SetFComputedStyle(Value : Boolean);
    procedure SetFCanvas(Value : Boolean);
    procedure SetFFloat(Value : Boolean);
    procedure SetFAudioTag(Value : Boolean);
    procedure SetFHistory(Value : Boolean);
    procedure SetFCSS3DTransform(Value : Boolean);
    procedure SetFCSS3LinearGradient(Value : Boolean);
    procedure SetFCSS3BorderRadius(Value : Boolean);
    procedure SetFGeoLocation(Value : Boolean);
    procedure SetFMouseEnterLeave(Value : Boolean);
    procedure SetFMouseWheel(Value : Boolean);
    procedure SetFOpacity(Value : Boolean);
    procedure SetFPlaceholder(Value : Boolean);
    procedure SetFDirect2DBug(Value : Boolean);
    procedure SetFBoundingClientRect(Value : Boolean);
    procedure SetFArraySort(Value : Boolean);
    procedure SetFRange(Value : Boolean);
    procedure SetFCreateContextualFragment(Value : Boolean);
    procedure SetFWindowOnError(Value : Boolean);
  public
    function JSClassName : string; override;
    class function SVG : Boolean;
    class function VML : Boolean;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property Desktop : Boolean read FDesktop write SetFDesktop;
    property Tablet : Boolean read FTablet write SetFTablet;
    property IOS : Boolean read FIOS write SetFIOS;
    property Standalone : Boolean read FStandalone write SetFStandalone;
    property IPhone : Boolean read FIPhone write SetFIPhone;
    property IPod : Boolean read FIPod write SetFIPod;
    property IPad : Boolean read FIPad write SetFIPad;
    property Blackberry : Boolean read FBlackberry write SetFBlackberry;
    property Android : Boolean read FAndroid write SetFAndroid;
    property Mac : Boolean read FMac write SetFMac;
    property Windows : Boolean read FWindows write SetFWindows;
    property Linux : Boolean read FLinux write SetFLinux;
    property CSS3BoxShadow : Boolean read FCSS3BoxShadow write SetFCSS3BoxShadow;
    property ClassList : Boolean read FClassList write SetFClassList;
    property OrientationChange : Boolean read FOrientationChange write SetFOrientationChange;
    property DeviceMotion : Boolean read FDeviceMotion write SetFDeviceMotion;
    property Touch : Boolean read FTouch write SetFTouch;
    property Transitions : Boolean read FTransitions write SetFTransitions;
    property RightMargin : Boolean read FRightMargin write SetFRightMargin;
    property DisplayChangeInputSelectionBug : Boolean read FDisplayChangeInputSelectionBug write SetFDisplayChangeInputSelectionBug;
    property ComputedStyle : Boolean read FComputedStyle write SetFComputedStyle;
    property Canvas : Boolean read FCanvas write SetFCanvas;
    property Float : Boolean read FFloat write SetFFloat;
    property AudioTag : Boolean read FAudioTag write SetFAudioTag;
    property History : Boolean read FHistory write SetFHistory;
    property CSS3DTransform : Boolean read FCSS3DTransform write SetFCSS3DTransform;
    property CSS3LinearGradient : Boolean read FCSS3LinearGradient write SetFCSS3LinearGradient;
    property CSS3BorderRadius : Boolean read FCSS3BorderRadius write SetFCSS3BorderRadius;
    property GeoLocation : Boolean read FGeoLocation write SetFGeoLocation;
    property MouseEnterLeave : Boolean read FMouseEnterLeave write SetFMouseEnterLeave;
    property MouseWheel : Boolean read FMouseWheel write SetFMouseWheel;
    property Opacity : Boolean read FOpacity write SetFOpacity;
    property Placeholder : Boolean read FPlaceholder write SetFPlaceholder;
    property Direct2DBug : Boolean read FDirect2DBug write SetFDirect2DBug;
    property BoundingClientRect : Boolean read FBoundingClientRect write SetFBoundingClientRect;
    property ArraySort : Boolean read FArraySort write SetFArraySort;
    property Range : Boolean read FRange write SetFRange;
    property CreateContextualFragment : Boolean read FCreateContextualFragment write SetFCreateContextualFragment;
    property WindowOnError : Boolean read FWindowOnError write SetFWindowOnError;
  end;

  TExtSliderTip = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetText(Thumb : TExtSliderThumb) : TExtFunction;
  end;

  TExtGridScroller = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function SetScrollTop(ScrollTop : Integer) : TExtFunction;
    function SetScrollLeft(ScrollLeft : Integer) : TExtFunction;
    function ScrollByDeltaY(Delta : Integer) : TExtFunction;
    function ScrollByDeltaX(Delta : Integer) : TExtFunction;
    function ScrollToTop : TExtFunction;
  end;

  TExtContainerButtonGroup = class(TExtFunction)
  private
    FColumns : Integer;
    FBaseCls : String;
    FLayout : TExtObject;
    FFrame : Boolean;
    FTools : TExtObjectList;
    FCollapsible : Boolean;
    FCollapseMode : Boolean;
    FAnimCollapse : Boolean;
    FClosable : Boolean;
    procedure SetFColumns(Value : Integer);
    procedure SetFBaseCls(Value : String);
    procedure SetFLayout(Value : TExtObject);
    procedure SetFFrame(Value : Boolean);
    procedure SetFTools(Value : TExtObjectList);
    procedure SetFCollapsible(Value : Boolean);
    procedure SetFCollapseMode(Value : Boolean);
    procedure SetFAnimCollapse(Value : Boolean);
    procedure SetFClosable(Value : Boolean);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    destructor Destroy; override;
    property Columns : Integer read FColumns write SetFColumns;
    property BaseCls : String read FBaseCls write SetFBaseCls;
    property Layout : TExtObject read FLayout write SetFLayout;
    property Frame : Boolean read FFrame write SetFFrame;
    property Tools : TExtObjectList read FTools write SetFTools;
    property Collapsible : Boolean read FCollapsible write SetFCollapsible;
    property CollapseMode : Boolean read FCollapseMode write SetFCollapseMode;
    property AnimCollapse : Boolean read FAnimCollapse write SetFAnimCollapse;
    property Closable : Boolean read FClosable write SetFClosable;
  end;

  // Procedural types for events TExtProgressBar
  TExtProgressBarOnUpdate = procedure(This : TExtProgressBar; Value : Integer; Text : String) of object;

  TExtProgressBar = class(TExtFunction)
  private
    FValue : Integer;
    FText : String;
    FTextEl : String;
    FTextElTHTMLElement : THTMLElement;
    FTextElTExtElement : TExtElement;
    FId : String;
    FBaseCls : String;
    FAnimate : Boolean;
    FText_ : String;
    FOnUpdate : TExtProgressBarOnUpdate;
    procedure SetFValue(Value : Integer);
    procedure SetFText(Value : String);
    procedure SetFTextEl(Value : String);
    procedure SetFTextElTHTMLElement(Value : THTMLElement);
    procedure SetFTextElTExtElement(Value : TExtElement);
    procedure SetFId(Value : String);
    procedure SetFBaseCls(Value : String);
    procedure SetFAnimate(Value : Boolean);
    procedure SetFText_(Value : String);
    procedure SetFOnUpdate(Value : TExtProgressBarOnUpdate);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function UpdateProgress(Value : Integer = 0; Text : String = ''; Animate : Boolean = false) : TExtFunction;
    function UpdateText(Text : String = '') : TExtFunction;
    function Wait(Config : TExtObject = nil; ConfigDuration : Integer = 0; ConfigInterval : Integer = 0; ConfigAnimate : Boolean = false; ConfigIncrement : Integer = 0; ConfigText : String = ''; ConfigFn : TExtFunction = nil; ConfigScope : TExtObject = nil) : TExtFunction;
    function IsWaiting : TExtFunction;
    function Reset(Hide : Boolean = false) : TExtFunction;
    destructor Destroy; override;
    property Value : Integer read FValue write SetFValue;
    property Text : String read FText write SetFText;
    property TextEl : String read FTextEl write SetFTextEl;
    property TextElTHTMLElement : THTMLElement read FTextElTHTMLElement write SetFTextElTHTMLElement;
    property TextElTExtElement : TExtElement read FTextElTExtElement write SetFTextElTExtElement;
    property Id : String read FId write SetFId;
    property BaseCls : String read FBaseCls write SetFBaseCls;
    property Animate : Boolean read FAnimate write SetFAnimate;
    property Text_ : String read FText_ write SetFText_;
    property OnUpdate : TExtProgressBarOnUpdate read FOnUpdate write SetFOnUpdate;
  end;

  TExtDataValidations = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Presence(Config : TExtObject; Value : TExtObject) : TExtFunction;
    function Length(Config : TExtObject; Value : String) : TExtFunction;
    function Email(Config : TExtObject; Email : String) : TExtFunction;
    function Format(Config : TExtObject; Value : String) : TExtFunction;
    function Inclusion(Config : TExtObject; Value : String) : TExtFunction;
    function Exclusion(Config : TExtObject; Value : String) : TExtFunction;
  end;

  // Procedural types for events TExtDataTree
  TExtDataTreeOnAppend = procedure of object;
  TExtDataTreeOnRemove = procedure of object;
  TExtDataTreeOnMove = procedure of object;
  TExtDataTreeOnInsert = procedure of object;
  TExtDataTreeOnBeforeappend = procedure of object;
  TExtDataTreeOnBeforeremove = procedure of object;
  TExtDataTreeOnBeforemove = procedure of object;
  TExtDataTreeOnBeforeinsert = procedure of object;
  TExtDataTreeOnExpand = procedure of object;
  TExtDataTreeOnCollapse = procedure of object;
  TExtDataTreeOnBeforeexpand = procedure of object;
  TExtDataTreeOnBeforecollapse = procedure of object;
  TExtDataTreeOnRootchange = procedure(Root : TExtDataModel) of object;

  TExtDataTree = class(TExtFunction)
  private
    FOnAppend : TExtDataTreeOnAppend;
    FOnRemove : TExtDataTreeOnRemove;
    FOnMove : TExtDataTreeOnMove;
    FOnInsert : TExtDataTreeOnInsert;
    FOnBeforeappend : TExtDataTreeOnBeforeappend;
    FOnBeforeremove : TExtDataTreeOnBeforeremove;
    FOnBeforemove : TExtDataTreeOnBeforemove;
    FOnBeforeinsert : TExtDataTreeOnBeforeinsert;
    FOnExpand : TExtDataTreeOnExpand;
    FOnCollapse : TExtDataTreeOnCollapse;
    FOnBeforeexpand : TExtDataTreeOnBeforeexpand;
    FOnBeforecollapse : TExtDataTreeOnBeforecollapse;
    FOnRootchange : TExtDataTreeOnRootchange;
    procedure SetFOnAppend(Value : TExtDataTreeOnAppend);
    procedure SetFOnRemove(Value : TExtDataTreeOnRemove);
    procedure SetFOnMove(Value : TExtDataTreeOnMove);
    procedure SetFOnInsert(Value : TExtDataTreeOnInsert);
    procedure SetFOnBeforeappend(Value : TExtDataTreeOnBeforeappend);
    procedure SetFOnBeforeremove(Value : TExtDataTreeOnBeforeremove);
    procedure SetFOnBeforemove(Value : TExtDataTreeOnBeforemove);
    procedure SetFOnBeforeinsert(Value : TExtDataTreeOnBeforeinsert);
    procedure SetFOnExpand(Value : TExtDataTreeOnExpand);
    procedure SetFOnCollapse(Value : TExtDataTreeOnCollapse);
    procedure SetFOnBeforeexpand(Value : TExtDataTreeOnBeforeexpand);
    procedure SetFOnBeforecollapse(Value : TExtDataTreeOnBeforecollapse);
    procedure SetFOnRootchange(Value : TExtDataTreeOnRootchange);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetNodeById(Id : String) : TExtFunction;
    property OnAppend : TExtDataTreeOnAppend read FOnAppend write SetFOnAppend;
    property OnRemove : TExtDataTreeOnRemove read FOnRemove write SetFOnRemove;
    property OnMove : TExtDataTreeOnMove read FOnMove write SetFOnMove;
    property OnInsert : TExtDataTreeOnInsert read FOnInsert write SetFOnInsert;
    property OnBeforeappend : TExtDataTreeOnBeforeappend read FOnBeforeappend write SetFOnBeforeappend;
    property OnBeforeremove : TExtDataTreeOnBeforeremove read FOnBeforeremove write SetFOnBeforeremove;
    property OnBeforemove : TExtDataTreeOnBeforemove read FOnBeforemove write SetFOnBeforemove;
    property OnBeforeinsert : TExtDataTreeOnBeforeinsert read FOnBeforeinsert write SetFOnBeforeinsert;
    property OnExpand : TExtDataTreeOnExpand read FOnExpand write SetFOnExpand;
    property OnCollapse : TExtDataTreeOnCollapse read FOnCollapse write SetFOnCollapse;
    property OnBeforeexpand : TExtDataTreeOnBeforeexpand read FOnBeforeexpand write SetFOnBeforeexpand;
    property OnBeforecollapse : TExtDataTreeOnBeforecollapse read FOnBeforecollapse write SetFOnBeforecollapse;
    property OnRootchange : TExtDataTreeOnRootchange read FOnRootchange write SetFOnRootchange;
  end;

  TExtDdDragSource = class(TExtFunction)
  private
    FDdGroup : String;
    FDropAllowed : String;
    FDropNotAllowed : String;
    FAnimRepair : Boolean;
    FRepairHighlightColor : String;
    procedure SetFDdGroup(Value : String);
    procedure SetFDropAllowed(Value : String);
    procedure SetFDropNotAllowed(Value : String);
    procedure SetFAnimRepair(Value : Boolean);
    procedure SetFRepairHighlightColor(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(El : String; Config : TExtObject = nil);
    constructor Create(El : THTMLElement; Config : TExtObject = nil);
    constructor Create(El : TExtElement; Config : TExtObject = nil);
    function GetDragData : TExtFunction;
    function AfterDragEnter(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction;
    function BeforeDragEnter(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction;
    function AfterDragOver(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction;
    function BeforeDragOver(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction;
    function AfterDragOut(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction;
    function BeforeDragOut(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction;
    function AfterDragDrop(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction;
    function BeforeDragDrop(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction;
    function AfterValidDrop(Target : TExtObject; E : TEvent; Id : String) : TExtFunction;
    function AfterInvalidDrop(E : TEvent; Id : String) : TExtFunction;
    function BeforeInvalidDrop(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction;
    function OnBeforeDrag(Data : TExtObject; E : TEvent) : TExtFunction;
    function OnStartDrag(X : Integer; Y : Integer) : TExtFunction;
    function GetProxy : TExtFunction;
    function HideProxy : TExtFunction;
    property DdGroup : String read FDdGroup write SetFDdGroup;
    property DropAllowed : String read FDropAllowed write SetFDropAllowed;
    property DropNotAllowed : String read FDropNotAllowed write SetFDropNotAllowed;
    property AnimRepair : Boolean read FAnimRepair write SetFAnimRepair;
    property RepairHighlightColor : String read FRepairHighlightColor write SetFRepairHighlightColor;
  end;

  TExtLayoutContainerAccordion = class(TExtFunction)
  private
    FFill : Boolean;
    FAutoWidth : Boolean;
    FTitleCollapse : Boolean;
    FHideCollapseTool : Boolean;
    FCollapseFirst : Boolean;
    FAnimate : Boolean;
    FActiveOnTop : Boolean;
    FMulti : Boolean;
    procedure SetFFill(Value : Boolean);
    procedure SetFAutoWidth(Value : Boolean);
    procedure SetFTitleCollapse(Value : Boolean);
    procedure SetFHideCollapseTool(Value : Boolean);
    procedure SetFCollapseFirst(Value : Boolean);
    procedure SetFAnimate(Value : Boolean);
    procedure SetFActiveOnTop(Value : Boolean);
    procedure SetFMulti(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property Fill : Boolean read FFill write SetFFill;
    property AutoWidth : Boolean read FAutoWidth write SetFAutoWidth;
    property TitleCollapse : Boolean read FTitleCollapse write SetFTitleCollapse;
    property HideCollapseTool : Boolean read FHideCollapseTool write SetFHideCollapseTool;
    property CollapseFirst : Boolean read FCollapseFirst write SetFCollapseFirst;
    property Animate : Boolean read FAnimate write SetFAnimate;
    property ActiveOnTop : Boolean read FActiveOnTop write SetFActiveOnTop;
    property Multi : Boolean read FMulti write SetFMulti;
  end;

  TExtUtilMemento = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Target : TExtObject; Props : String);
    constructor Create(Target : TExtObject; Props : TExtObjectList);
    function Capture(Props : String; Target : TExtObject) : TExtFunction; overload;
    function Capture(Props : TExtObjectList; Target : TExtObject) : TExtFunction; overload;
    function Remove(Props : String) : TExtFunction; overload;
    function Remove(Props : TExtObjectList) : TExtFunction; overload;
    function Restore(Props : String; Clear : Boolean; Target : TExtObject) : TExtFunction; overload;
    function Restore(Props : TExtObjectList; Clear : Boolean; Target : TExtObject) : TExtFunction; overload;
    function RestoreAll(Clear : Boolean; Target : TExtObject) : TExtFunction;
  end;

  TExtChartSeriesBar = class(TExtFunction)
  private
    FColumn : Boolean;
    FGutter : Integer;
    FGroupGutter : Integer;
    FXPadding : Integer;
    FYPadding : Integer;
    procedure SetFColumn(Value : Boolean);
    procedure SetFGutter(Value : Integer);
    procedure SetFGroupGutter(Value : Integer);
    procedure SetFXPadding(Value : Integer);
    procedure SetFYPadding(Value : Integer);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function DrawSeries : TExtFunction;
    function GetLegendColor(ElseJS : TVarMe) : TExtFunction;
    property Column : Boolean read FColumn write SetFColumn;
    property Gutter : Integer read FGutter write SetFGutter;
    property GroupGutter : Integer read FGroupGutter write SetFGroupGutter;
    property XPadding : Integer read FXPadding write SetFXPadding;
    property YPadding : Integer read FYPadding write SetFYPadding;
  end;

  TExtDataDirectStore = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtDataArrayStore = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtChartSeriesScatter = class(TExtFunction)
  private
    FMarkerConfig : TExtObject;
    FStyle : TExtObject;
    FAxis : String;
    FAxisTExtObjectList : TExtObjectList;
    procedure SetFMarkerConfig(Value : TExtObject);
    procedure SetFStyle(Value : TExtObject);
    procedure SetFAxis(Value : String);
    procedure SetFAxisTExtObjectList(Value : TExtObjectList);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function DrawSeries : TExtFunction;
    destructor Destroy; override;
    property MarkerConfig : TExtObject read FMarkerConfig write SetFMarkerConfig;
    property Style : TExtObject read FStyle write SetFStyle;
    property Axis : String read FAxis write SetFAxis;
    property AxisTExtObjectList : TExtObjectList read FAxisTExtObjectList write SetFAxisTExtObjectList;
  end;

  TExtFormActionSubmit = class(TExtFunction)
  private
    FClientValidation : Boolean;
    procedure SetFClientValidation(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property ClientValidation : Boolean read FClientValidation write SetFClientValidation;
  end;

  TExtTreePluginTreeViewDragDrop = class(TExtFunction)
  private
    FAllowParentInsert : Boolean;
    FAllowContainerDrop : String;
    FAppendOnly : String;
    FDdGroup : String;
    FDragGroup : String;
    FDropGroup : String;
    FExpandDelay : String;
    FEnableDrop : Boolean;
    FEnableDrag : Boolean;
    FNodeHighlightColor : String;
    FNodeHighlightOnDrop : Boolean;
    FNodeHighlightOnRepair : Boolean;
    procedure SetFAllowParentInsert(Value : Boolean);
    procedure SetFAllowContainerDrop(Value : String);
    procedure SetFAppendOnly(Value : String);
    procedure SetFDdGroup(Value : String);
    procedure SetFDragGroup(Value : String);
    procedure SetFDropGroup(Value : String);
    procedure SetFExpandDelay(Value : String);
    procedure SetFEnableDrop(Value : Boolean);
    procedure SetFEnableDrag(Value : Boolean);
    procedure SetFNodeHighlightColor(Value : String);
    procedure SetFNodeHighlightOnDrop(Value : Boolean);
    procedure SetFNodeHighlightOnRepair(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property AllowParentInsert : Boolean read FAllowParentInsert write SetFAllowParentInsert;
    property AllowContainerDrop : String read FAllowContainerDrop write SetFAllowContainerDrop;
    property AppendOnly : String read FAppendOnly write SetFAppendOnly;
    property DdGroup : String read FDdGroup write SetFDdGroup;
    property DragGroup : String read FDragGroup write SetFDragGroup;
    property DropGroup : String read FDropGroup write SetFDropGroup;
    property ExpandDelay : String read FExpandDelay write SetFExpandDelay;
    property EnableDrop : Boolean read FEnableDrop write SetFEnableDrop;
    property EnableDrag : Boolean read FEnableDrag write SetFEnableDrag;
    property NodeHighlightColor : String read FNodeHighlightColor write SetFNodeHighlightColor;
    property NodeHighlightOnDrop : Boolean read FNodeHighlightOnDrop write SetFNodeHighlightOnDrop;
    property NodeHighlightOnRepair : Boolean read FNodeHighlightOnRepair write SetFNodeHighlightOnRepair;
  end;

  TExtUtilKeyMap = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(El : String; Binding : TExtObject; EventName : String = '');
    constructor Create(El : THTMLElement; Binding : TExtObject; EventName : String = '');
    constructor Create(El : TExtElement; Binding : TExtObject; EventName : String = '');
    function AddBinding(Binding : TExtObject) : TExtFunction; overload;
    function AddBinding(Binding : TExtObjectList) : TExtFunction; overload;
    function On(Key : Integer; Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; overload;
    function On(Key : TArrayOfInteger; Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; overload;
    function On(Key : TExtObject; Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; overload;
    function IsEnabled : TExtFunction;
    function Enable : TExtFunction;
    function Disable : TExtFunction;
    function SetDisabled(Disabled : Boolean; RemoveEl : Boolean) : TExtFunction;
  end;

  // Procedural types for events TExtGridPropertyGrid
  TExtGridPropertyGridOnBeforepropertychange = procedure(Source : TExtObject; RecordId : String; Value : TExtObject; OldValue : TExtObject) of object;
  TExtGridPropertyGridOnPropertychange = procedure(Source : TExtObject; RecordId : String; Value : TExtObject; OldValue : TExtObject) of object;

  TExtGridPropertyGrid = class(TExtFunction)
  private
    FPropertyNames : TExtObject;
    FSource : TExtObject;
    FCustomEditors : TExtObject;
    FSource_ : TExtObject;
    FCustomRenderers : TExtObject;
    FValueField : String;
    FNameField : String;
    FNameColumnWidth : Integer;
    FOnBeforepropertychange : TExtGridPropertyGridOnBeforepropertychange;
    FOnPropertychange : TExtGridPropertyGridOnPropertychange;
    procedure SetFPropertyNames(Value : TExtObject);
    procedure SetFSource(Value : TExtObject);
    procedure SetFCustomEditors(Value : TExtObject);
    procedure SetFSource_(Value : TExtObject);
    procedure SetFCustomRenderers(Value : TExtObject);
    procedure SetFValueField(Value : String);
    procedure SetFNameField(Value : String);
    procedure SetFNameColumnWidth(Value : Integer);
    procedure SetFOnBeforepropertychange(Value : TExtGridPropertyGridOnBeforepropertychange);
    procedure SetFOnPropertychange(Value : TExtGridPropertyGridOnPropertychange);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function SetSource(Source : TExtObject) : TExtFunction;
    function GetSource : TExtFunction;
    function SetProperty(Prop : String; Value : TExtObject; Create : Boolean = false) : TExtFunction;
    function RemoveProperty(Prop : String) : TExtFunction;
    destructor Destroy; override;
    property PropertyNames : TExtObject read FPropertyNames write SetFPropertyNames;
    property Source : TExtObject read FSource write SetFSource;
    property CustomEditors : TExtObject read FCustomEditors write SetFCustomEditors;
    property Source_ : TExtObject read FSource_ write SetFSource_;
    property CustomRenderers : TExtObject read FCustomRenderers write SetFCustomRenderers;
    property ValueField : String read FValueField write SetFValueField;
    property NameField : String read FNameField write SetFNameField;
    property NameColumnWidth : Integer read FNameColumnWidth write SetFNameColumnWidth;
    property OnBeforepropertychange : TExtGridPropertyGridOnBeforepropertychange read FOnBeforepropertychange write SetFOnBeforepropertychange;
    property OnPropertychange : TExtGridPropertyGridOnPropertychange read FOnPropertychange write SetFOnPropertychange;
  end;

  TExtDataIdGenerator = class(TExtFunction)
  private
    FId : String;
    procedure SetFId(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Generate : TExtFunction;
    class function Get(Config : String) : TExtFunction; overload;
    function Get(Config : TExtObject) : TExtFunction; overload;
    property Id : String read FId write SetFId;
  end;

  // Procedural types for events TExtSelectionRowModel
  TExtSelectionRowModelOnBeforedeselect = procedure(This : TExtSelectionRowModel; RecordJS : TExtDataModel; Index : Integer) of object;
  TExtSelectionRowModelOnBeforeselect = procedure(This : TExtSelectionRowModel; RecordJS : TExtDataModel; Index : Integer) of object;
  TExtSelectionRowModelOnDeselect = procedure(This : TExtSelectionRowModel; RecordJS : TExtDataModel; Index : Integer) of object;
  TExtSelectionRowModelOnSelect = procedure(This : TExtSelectionRowModel; RecordJS : TExtDataModel; Index : Integer) of object;

  TExtSelectionRowModel = class(TExtFunction)
  private
    FEnableKeyNav : Boolean;
    FIgnoreRightMouseSelection : Boolean;
    FOnBeforedeselect : TExtSelectionRowModelOnBeforedeselect;
    FOnBeforeselect : TExtSelectionRowModelOnBeforeselect;
    FOnDeselect : TExtSelectionRowModelOnDeselect;
    FOnSelect : TExtSelectionRowModelOnSelect;
    procedure SetFEnableKeyNav(Value : Boolean);
    procedure SetFIgnoreRightMouseSelection(Value : Boolean);
    procedure SetFOnBeforedeselect(Value : TExtSelectionRowModelOnBeforedeselect);
    procedure SetFOnBeforeselect(Value : TExtSelectionRowModelOnBeforeselect);
    procedure SetFOnDeselect(Value : TExtSelectionRowModelOnDeselect);
    procedure SetFOnSelect(Value : TExtSelectionRowModelOnSelect);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property EnableKeyNav : Boolean read FEnableKeyNav write SetFEnableKeyNav;
    property IgnoreRightMouseSelection : Boolean read FIgnoreRightMouseSelection write SetFIgnoreRightMouseSelection;
    property OnBeforedeselect : TExtSelectionRowModelOnBeforedeselect read FOnBeforedeselect write SetFOnBeforedeselect;
    property OnBeforeselect : TExtSelectionRowModelOnBeforeselect read FOnBeforeselect write SetFOnBeforeselect;
    property OnDeselect : TExtSelectionRowModelOnDeselect read FOnDeselect write SetFOnDeselect;
    property OnSelect : TExtSelectionRowModelOnSelect read FOnSelect write SetFOnSelect;
  end;

  // Procedural types for events TExtResizerResizer
  TExtResizerResizerOnBeforeresize = procedure(This : TExtResizerResizer; Width : Integer; Height : Integer; E : TExtEventObjectSingleton) of object;
  TExtResizerResizerOnResizedrag = procedure(This : TExtResizerResizer; Width : Integer; Height : Integer; E : TExtEventObjectSingleton) of object;
  TExtResizerResizerOnResize = procedure(This : TExtResizerResizer; Width : Integer; Height : Integer; E : TExtEventObjectSingleton) of object;

  TExtResizerResizer = class(TExtFunction)
  private
    FDynamic : Boolean;
    FHandles : String;
    FHeight : Integer;
    FWidth : Integer;
    FHeightIncrement : Integer;
    FWidthIncrement : Integer;
    FMinHeight : Integer;
    FMinWidth : Integer;
    FMaxHeight : Integer;
    FMaxWidth : Integer;
    FPinned : Boolean;
    FPreserveRatio : Boolean;
    FTransparent : Boolean;
    FConstrainTo : TExtElement;
    FConstrainToTExtUtilRegion : TExtUtilRegion;
    FTarget : TExtElement;
    FTargetTExtComponent : TExtComponent;
    FOnBeforeresize : TExtResizerResizerOnBeforeresize;
    FOnResizedrag : TExtResizerResizerOnResizedrag;
    FOnResize : TExtResizerResizerOnResize;
    procedure SetFDynamic(Value : Boolean);
    procedure SetFHandles(Value : String);
    procedure SetFHeight(Value : Integer);
    procedure SetFWidth(Value : Integer);
    procedure SetFHeightIncrement(Value : Integer);
    procedure SetFWidthIncrement(Value : Integer);
    procedure SetFMinHeight(Value : Integer);
    procedure SetFMinWidth(Value : Integer);
    procedure SetFMaxHeight(Value : Integer);
    procedure SetFMaxWidth(Value : Integer);
    procedure SetFPinned(Value : Boolean);
    procedure SetFPreserveRatio(Value : Boolean);
    procedure SetFTransparent(Value : Boolean);
    procedure SetFConstrainTo(Value : TExtElement);
    procedure SetFConstrainToTExtUtilRegion(Value : TExtUtilRegion);
    procedure SetFTarget(Value : TExtElement);
    procedure SetFTargetTExtComponent(Value : TExtComponent);
    procedure SetFOnBeforeresize(Value : TExtResizerResizerOnBeforeresize);
    procedure SetFOnResizedrag(Value : TExtResizerResizerOnResizedrag);
    procedure SetFOnResize(Value : TExtResizerResizerOnResize);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function ResizeTo(Width : Integer; Height : Integer) : TExtFunction;
    function GetEl : TExtFunction;
    function GetTarget : TExtFunction;
    destructor Destroy; override;
    property Dynamic : Boolean read FDynamic write SetFDynamic;
    property Handles : String read FHandles write SetFHandles;
    property Height : Integer read FHeight write SetFHeight;
    property Width : Integer read FWidth write SetFWidth;
    property HeightIncrement : Integer read FHeightIncrement write SetFHeightIncrement;
    property WidthIncrement : Integer read FWidthIncrement write SetFWidthIncrement;
    property MinHeight : Integer read FMinHeight write SetFMinHeight;
    property MinWidth : Integer read FMinWidth write SetFMinWidth;
    property MaxHeight : Integer read FMaxHeight write SetFMaxHeight;
    property MaxWidth : Integer read FMaxWidth write SetFMaxWidth;
    property Pinned : Boolean read FPinned write SetFPinned;
    property PreserveRatio : Boolean read FPreserveRatio write SetFPreserveRatio;
    property Transparent : Boolean read FTransparent write SetFTransparent;
    property ConstrainTo : TExtElement read FConstrainTo write SetFConstrainTo;
    property ConstrainToTExtUtilRegion : TExtUtilRegion read FConstrainToTExtUtilRegion write SetFConstrainToTExtUtilRegion;
    property Target : TExtElement read FTarget write SetFTarget;
    property TargetTExtComponent : TExtComponent read FTargetTExtComponent write SetFTargetTExtComponent;
    property OnBeforeresize : TExtResizerResizerOnBeforeresize read FOnBeforeresize write SetFOnBeforeresize;
    property OnResizedrag : TExtResizerResizerOnResizedrag read FOnResizedrag write SetFOnResizedrag;
    property OnResize : TExtResizerResizerOnResize read FOnResize write SetFOnResize;
  end;

  TExtUtilGrouper = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetGroupString(Instance : TExtDataModel) : TExtFunction;
  end;

  TExtFxTargetElementCSS = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtUtilCookiesSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function SetJS(Name : String; Value : TExtObject; Expires : TExtObject = nil; Path : String = ''; Domain : String = ''; Secure : Boolean = false) : TExtFunction;
    function Get(Name : String) : TExtFunction;
    function Clear(Name : String; Path : String = '') : TExtFunction;
  end;

  TExtChartAxisTime = class(TExtFunction)
  private
    FDateFormat : String;
    FDateFormatBoolean : Boolean;
    FFromDate : TDateTime;
    FToDate : TDateTime;
    FStep : TExtObjectList;
    FStepBoolean : Boolean;
    FConstrain : Boolean;
    procedure SetFDateFormat(Value : String);
    procedure SetFDateFormatBoolean(Value : Boolean);
    procedure SetFFromDate(Value : TDateTime);
    procedure SetFToDate(Value : TDateTime);
    procedure SetFStep(Value : TExtObjectList);
    procedure SetFStepBoolean(Value : Boolean);
    procedure SetFConstrain(Value : Boolean);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    destructor Destroy; override;
    property DateFormat : String read FDateFormat write SetFDateFormat;
    property DateFormatBoolean : Boolean read FDateFormatBoolean write SetFDateFormatBoolean;
    property FromDate : TDateTime read FFromDate write SetFFromDate;
    property ToDate : TDateTime read FToDate write SetFToDate;
    property Step : TExtObjectList read FStep write SetFStep;
    property StepBoolean : Boolean read FStepBoolean write SetFStepBoolean;
    property Constrain : Boolean read FConstrain write SetFConstrain;
  end;

  TArray = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Items : Integer);
    constructor Create(Items : TExtObjectList);
    function Pop : TExtFunction;
    function Push(Elements : TExtObjectList) : TExtFunction;
    function Reverse : TExtFunction;
    function Shift : TExtFunction;
    function Sort(CompareFunction : TExtFunction) : TExtFunction;
    function Splice(Index : Integer; HowMany : Integer; Elements : TExtObjectList) : TExtFunction;
    function Unshift(Elements : TExtObjectList) : TExtFunction;
    function Concat(Values : TExtObjectList) : TExtFunction;
    function Join(Separator : String) : TExtFunction;
    function Slice(BeginJS : Integer; EndJS : Integer) : TExtFunction;
    function ToString : TExtFunction;
  end;

  TExtGridFeatureSummary = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  // Procedural types for events TExtMenuDatePicker
  TExtMenuDatePickerOnClick = procedure of object;
  TExtMenuDatePickerOnItemclick = procedure of object;
  TExtMenuDatePickerOnSelect = procedure of object;

  TExtMenuDatePicker = class(TExtFunction)
  private
    FHideOnClick : Boolean;
    FPickerId : String;
    FMaxHeight : Integer;
    FOnClick : TExtMenuDatePickerOnClick;
    FOnItemclick : TExtMenuDatePickerOnItemclick;
    FOnSelect : TExtMenuDatePickerOnSelect;
    procedure SetFHideOnClick(Value : Boolean);
    procedure SetFPickerId(Value : String);
    procedure SetFMaxHeight(Value : Integer);
    procedure SetFOnClick(Value : TExtMenuDatePickerOnClick);
    procedure SetFOnItemclick(Value : TExtMenuDatePickerOnItemclick);
    procedure SetFOnSelect(Value : TExtMenuDatePickerOnSelect);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property HideOnClick : Boolean read FHideOnClick write SetFHideOnClick;
    property PickerId : String read FPickerId write SetFPickerId;
    property MaxHeight : Integer read FMaxHeight write SetFMaxHeight;
    property OnClick : TExtMenuDatePickerOnClick read FOnClick write SetFOnClick;
    property OnItemclick : TExtMenuDatePickerOnItemclick read FOnItemclick write SetFOnItemclick;
    property OnSelect : TExtMenuDatePickerOnSelect read FOnSelect write SetFOnSelect;
  end;

  TExtLayoutContainerFit = class(TExtFunction)
  private
    FDefaultMargins : TExtObject;
    procedure SetFDefaultMargins(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    destructor Destroy; override;
    property DefaultMargins : TExtObject read FDefaultMargins write SetFDefaultMargins;
  end;

  TExtDataErrors = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function IsValid : TExtFunction;
    function GetByField(FieldName : String) : TExtFunction;
  end;

  TExtFormFieldNumber = class(TExtFunction)
  private
    FStripCharsRe : TRegExp;
    FMaskRe : TRegExp;
    FAllowDecimals : Boolean;
    FDecimalSeparator : String;
    FDecimalPrecision : Integer;
    FMinValue : Integer;
    FMaxValue : Integer;
    FStep : Integer;
    FMinText : String;
    FMaxText : String;
    FNanText : String;
    FNegativeText : String;
    FBaseChars : String;
    FAutoStripChars : Boolean;
    procedure SetFStripCharsRe(Value : TRegExp);
    procedure SetFMaskRe(Value : TRegExp);
    procedure SetFAllowDecimals(Value : Boolean);
    procedure SetFDecimalSeparator(Value : String);
    procedure SetFDecimalPrecision(Value : Integer);
    procedure SetFMinValue(Value : Integer);
    procedure SetFMaxValue(Value : Integer);
    procedure SetFStep(Value : Integer);
    procedure SetFMinText(Value : String);
    procedure SetFMaxText(Value : String);
    procedure SetFNanText(Value : String);
    procedure SetFNegativeText(Value : String);
    procedure SetFBaseChars(Value : String);
    procedure SetFAutoStripChars(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetErrors(Value : TExtObject = nil) : TExtFunction;
    function SetMinValue(Value : Integer) : TExtFunction;
    function SetMaxValue(Value : Integer) : TExtFunction;
    property StripCharsRe : TRegExp read FStripCharsRe write SetFStripCharsRe;
    property MaskRe : TRegExp read FMaskRe write SetFMaskRe;
    property AllowDecimals : Boolean read FAllowDecimals write SetFAllowDecimals;
    property DecimalSeparator : String read FDecimalSeparator write SetFDecimalSeparator;
    property DecimalPrecision : Integer read FDecimalPrecision write SetFDecimalPrecision;
    property MinValue : Integer read FMinValue write SetFMinValue;
    property MaxValue : Integer read FMaxValue write SetFMaxValue;
    property Step : Integer read FStep write SetFStep;
    property MinText : String read FMinText write SetFMinText;
    property MaxText : String read FMaxText write SetFMaxText;
    property NanText : String read FNanText write SetFNanText;
    property NegativeText : String read FNegativeText write SetFNegativeText;
    property BaseChars : String read FBaseChars write SetFBaseChars;
    property AutoStripChars : Boolean read FAutoStripChars write SetFAutoStripChars;
  end;

  TExtModelManagerSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetModel(Id : String) : TExtFunction; overload;
    function GetModel(Id : TExtObject) : TExtFunction; overload;
    function RegModel(Name : String; Config : TExtObject) : TExtFunction;
  end;

  TExtToolbarFill = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  // Procedural types for events TExtStateStateful
  TExtStateStatefulOnBeforestaterestore = procedure(This : TExtStateStateful; State : TExtObject) of object;
  TExtStateStatefulOnStaterestore = procedure(This : TExtStateStateful; State : TExtObject) of object;
  TExtStateStatefulOnBeforestatesave = procedure(This : TExtStateStateful; State : TExtObject) of object;
  TExtStateStatefulOnStatesave = procedure(This : TExtStateStateful; State : TExtObject) of object;

  TExtStateStateful = class(TExtFunction)
  private
    FStateful : Boolean;
    FStateId : String;
    FStateEvents : TExtObjectList;
    FSaveDelay : Integer;
    FOnBeforestaterestore : TExtStateStatefulOnBeforestaterestore;
    FOnStaterestore : TExtStateStatefulOnStaterestore;
    FOnBeforestatesave : TExtStateStatefulOnBeforestatesave;
    FOnStatesave : TExtStateStatefulOnStatesave;
    procedure SetFStateful(Value : Boolean);
    procedure SetFStateId(Value : String);
    procedure SetFStateEvents(Value : TExtObjectList);
    procedure SetFSaveDelay(Value : Integer);
    procedure SetFOnBeforestaterestore(Value : TExtStateStatefulOnBeforestaterestore);
    procedure SetFOnStaterestore(Value : TExtStateStatefulOnStaterestore);
    procedure SetFOnBeforestatesave(Value : TExtStateStatefulOnBeforestatesave);
    procedure SetFOnStatesave(Value : TExtStateStatefulOnStatesave);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function AddStateEvents(Events : String) : TExtFunction; overload;
    function AddStateEvents(Events : TExtObjectList) : TExtFunction; overload;
    function GetState : TExtFunction;
    function ApplyState(State : TExtObject) : TExtFunction;
    function GetStateId : TExtFunction;
    function SavePropToState(PropName : String; State : TExtObject; StateName : String = '') : TExtFunction;
    function DestroyJS : TExtFunction; override;
    destructor Destroy; override;
    property Stateful : Boolean read FStateful write SetFStateful;
    property StateId : String read FStateId write SetFStateId;
    property StateEvents : TExtObjectList read FStateEvents write SetFStateEvents;
    property SaveDelay : Integer read FSaveDelay write SetFSaveDelay;
    property OnBeforestaterestore : TExtStateStatefulOnBeforestaterestore read FOnBeforestaterestore write SetFOnBeforestaterestore;
    property OnStaterestore : TExtStateStatefulOnStaterestore read FOnStaterestore write SetFOnStaterestore;
    property OnBeforestatesave : TExtStateStatefulOnBeforestatesave read FOnBeforestatesave write SetFOnBeforestatesave;
    property OnStatesave : TExtStateStatefulOnStatesave read FOnStatesave write SetFOnStatesave;
  end;

  TExtChartLabel = class(TExtFunction)
  private
    FLabelJS : TExtObject;
    procedure SetFLabelJS(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    destructor Destroy; override;
    property LabelJS : TExtObject read FLabelJS write SetFLabelJS;
  end;

  TString = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Value : TExtObject);
    function FromCharCode(Num1 : Integer) : TExtFunction;
    function CharAt(Index : Integer) : TExtFunction;
    function CharCodeAt(Index : Integer) : TExtFunction;
    function Concat(String2StringN : String) : TExtFunction;
    function IndexOf(SearchValue : String; FromIndex : Integer) : TExtFunction;
    function LastIndexOf(SearchValue : String; FromIndex : Integer) : TExtFunction;
    function LocaleCompare(CompareString : String) : TExtFunction;
    function Match(Regexp : TRegExp) : TExtFunction;
    function Replace(Regexp : TRegExp; Substr : String; NewSubStr : String; FunctionJS : TExtFunction) : TExtFunction;
    function Search(Regexp : TRegExp) : TExtFunction;
    function Slice(BeginSlice : Integer; EndSlice : Integer) : TExtFunction;
    function Split(Seperator : String; Limit : Integer) : TExtFunction;
    function Substr(Start : Integer; Length : Integer) : TExtFunction;
    function Substring(IndexA : Integer; IndexB : Integer = 0) : TExtFunction;
    function ToLocaleLowerCase : TExtFunction;
    function ToLocaleUpperCase : TExtFunction;
    function ToLowerCase : TExtFunction;
    function ToString : TExtFunction;
    function ToUpperCase : TExtFunction;
    function ValueOf : TExtFunction;
  end;

  TExtWindowMessageBox = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Show(Config : TExtObject) : TExtFunction;
    function SetIcon(Icon : String) : TExtFunction;
    function UpdateProgress(Value : Integer = 0; ProgressText : String = ''; Msg : String = '') : TExtFunction;
    function Confirm(Title : String; Msg : String; Fn : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction;
    function Prompt(Title : String; Msg : String; Fn : TExtFunction = nil; Scope : TExtObject = nil; Multiline : Boolean = false; Value : String = '') : TExtFunction; overload;
    function Prompt(Title : String; Msg : String; Fn : TExtFunction; Scope : TExtObject; Multiline : Integer; Value : String = '') : TExtFunction; overload;
    function Wait(Msg : String; Title : String = ''; Config : TExtObject = nil) : TExtFunction;
    function Alert(Title : String; Msg : String; Fn : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction;
    function Progress(Title : String; Msg : String; ProgressText : String = '') : TExtFunction;
  end;

  // Procedural types for events TExtDataStore
  TExtDataStoreOnBeforeprefetch = procedure(This : TExtDataStore; Operation : TExtDataOperation) of object;
  TExtDataStoreOnGroupchange = procedure(Store : TExtDataStore; Groupers : TExtObjectList) of object;
  TExtDataStoreOnLoad = procedure(This : TExtDataStore; Records : TExtObjectList; Successful : Boolean; Operation : TExtDataOperation) of object;

  TExtDataStore = class(TExtFunction)
  private
    FRemoteSort : Boolean;
    FRemoteFilter : Boolean;
    FRemoteGroup : Boolean;
    FProxy : String;
    FProxyTExtDataProxyProxy : TExtDataProxyProxy;
    FProxyTExtObject : TExtObject;
    FData : TExtObjectList;
    FDataTExtObjectList : TExtObjectList;
    FPageSize : Integer;
    FClearOnPageLoad : Boolean;
    FSortOnFilter : Boolean;
    FBuffered : Boolean;
    FPurgePageCount : Integer;
    FOnBeforeprefetch : TExtDataStoreOnBeforeprefetch;
    FOnGroupchange : TExtDataStoreOnGroupchange;
    FOnLoad : TExtDataStoreOnLoad;
    procedure SetFRemoteSort(Value : Boolean);
    procedure SetFRemoteFilter(Value : Boolean);
    procedure SetFRemoteGroup(Value : Boolean);
    procedure SetFProxy(Value : String);
    procedure SetFProxyTExtDataProxyProxy(Value : TExtDataProxyProxy);
    procedure SetFProxyTExtObject(Value : TExtObject);
    procedure SetFData(Value : TExtObjectList);
    procedure SetFDataTExtObjectList(Value : TExtObjectList);
    procedure SetFPageSize(Value : Integer);
    procedure SetFClearOnPageLoad(Value : Boolean);
    procedure SetFSortOnFilter(Value : Boolean);
    procedure SetFBuffered(Value : Boolean);
    procedure SetFPurgePageCount(Value : Integer);
    procedure SetFOnBeforeprefetch(Value : TExtDataStoreOnBeforeprefetch);
    procedure SetFOnGroupchange(Value : TExtDataStoreOnGroupchange);
    procedure SetFOnLoad(Value : TExtDataStoreOnLoad);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function Group(Groupers : String; Direction : String) : TExtFunction; overload;
    function Group(Groupers : TExtObjectList; Direction : String) : TExtFunction; overload;
    function ClearGrouping : TExtFunction;
    function IsGrouped : TExtFunction;
    function GetGroups(GroupName : String = '') : TExtFunction;
    function GetGroupString(Instance : TExtDataModel) : TExtFunction;
    function Insert(Index : Integer; Records : TExtObjectList) : TExtFunction;
    function Add(Model : TExtObjectList) : TExtFunction; overload;
    function Add(Model : TExtDataModel) : TExtFunction; overload;
    function Each(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction;
    function Remove(Records : TExtDataModel) : TExtFunction; overload;
    function Remove(Records : TExtObjectList) : TExtFunction; overload;
    function RemoveAt(Index : Integer) : TExtFunction;
    function Load(Options : TExtObject = nil) : TExtFunction; overload;
    function Load(Options : TExtFunction) : TExtFunction; overload;
    function Filter(Filters : TExtObjectList; Value : String = '') : TExtFunction; overload;
    function Filter(Filters : String; Value : String = '') : TExtFunction; overload;
    function ClearFilter(SuppressEvent : Boolean) : TExtFunction;
    function IsFiltered : TExtFunction;
    function FilterBy(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction;
    function QueryBy(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction;
    function LoadData(Data : TExtObjectList; Append : Boolean = false) : TExtFunction; overload;
    function LoadRawData(Data : TExtObjectList; Append : Boolean = false) : TExtFunction;
    function LoadRecords(Records : TExtObjectList; Options : TExtObject) : TExtFunction;
    function LoadPage(Page : Integer; Options : TExtObject) : TExtFunction;
    function NextPage(Options : TExtObject) : TExtFunction;
    function PreviousPage(Options : TExtObject) : TExtFunction;
    function Prefetch(Options : TExtObject = nil) : TExtFunction;
    function PrefetchPage(Page : Integer; Options : TExtObject = nil) : TExtFunction;
    function PurgeRecords : TExtFunction;
    function GetPageFromRecordIndex(Index : Integer) : TExtFunction;
    function HasPendingRequests : TExtFunction;
    function GuaranteeRange : TExtFunction;
    function Find(FieldName : String; Value : String; StartIndex : Integer = 0; AnyMatch : Boolean = false; CaseSensitive : Boolean = false; ExactMatch : Boolean = false) : TExtFunction; overload;
    function Find(FieldName : String; Value : TRegExp; StartIndex : Integer = 0; AnyMatch : Boolean = false; CaseSensitive : Boolean = false; ExactMatch : Boolean = false) : TExtFunction; overload;
    function FindRecord(FieldName : String; Value : String; StartIndex : Integer = 0; AnyMatch : Boolean = false; CaseSensitive : Boolean = false; ExactMatch : Boolean = false) : TExtFunction; overload;
    function FindRecord(FieldName : String; Value : TRegExp; StartIndex : Integer = 0; AnyMatch : Boolean = false; CaseSensitive : Boolean = false; ExactMatch : Boolean = false) : TExtFunction; overload;
    function FindExact(FieldName : String; Value : TExtObject; StartIndex : Integer = 0) : TExtFunction;
    function FindBy(Fn : TExtFunction; Scope : TExtObject = nil; StartIndex : Integer = 0) : TExtFunction;
    function Collect(DataIndex : String; AllowNull : Boolean = false; BypassFilter : Boolean = false) : TExtFunction;
    function GetCount : TExtFunction;
    function GetTotalCount : TExtFunction;
    function GetAt(Index : Integer) : TExtFunction;
    function GetRange(StartIndex : Integer = 0; EndIndex : Integer = 0) : TExtFunction;
    function GetById(Id : String) : TExtFunction;
    function IndexOf(RecordJS : TExtDataModel) : TExtFunction;
    function IndexOfTotal(RecordJS : TExtDataModel) : TExtFunction;
    function IndexOfId(Id : String) : TExtFunction;
    function RemoveAll(Silent : Boolean) : TExtFunction;
    function First(Grouped : Boolean = false) : TExtFunction;
    function Last(Grouped : Boolean = false) : TExtFunction;
    function Sum(Field : String; Grouped : Boolean = false) : TExtFunction;
    function Count(Grouped : Boolean = false) : TExtFunction;
    function Min(Field : String; Grouped : Boolean = false) : TExtFunction;
    function Max(Field : String; Grouped : Boolean = false) : TExtFunction;
    function Average(Field : String; Grouped : Boolean = false) : TExtFunction;
    function Aggregate(Fn : TExtFunction; Scope : TExtObject = nil; Grouped : Boolean = false; Args : TExtObjectList = nil) : TExtFunction;
    destructor Destroy; override;
    property RemoteSort : Boolean read FRemoteSort write SetFRemoteSort;
    property RemoteFilter : Boolean read FRemoteFilter write SetFRemoteFilter;
    property RemoteGroup : Boolean read FRemoteGroup write SetFRemoteGroup;
    property Proxy : String read FProxy write SetFProxy;
    property ProxyTExtDataProxyProxy : TExtDataProxyProxy read FProxyTExtDataProxyProxy write SetFProxyTExtDataProxyProxy;
    property ProxyTExtObject : TExtObject read FProxyTExtObject write SetFProxyTExtObject;
    property Data : TExtObjectList read FData write SetFData;
    property DataTExtObjectList : TExtObjectList read FDataTExtObjectList write SetFDataTExtObjectList;
    property PageSize : Integer read FPageSize write SetFPageSize;
    property ClearOnPageLoad : Boolean read FClearOnPageLoad write SetFClearOnPageLoad;
    property SortOnFilter : Boolean read FSortOnFilter write SetFSortOnFilter;
    property Buffered : Boolean read FBuffered write SetFBuffered;
    property PurgePageCount : Integer read FPurgePageCount write SetFPurgePageCount;
    property OnBeforeprefetch : TExtDataStoreOnBeforeprefetch read FOnBeforeprefetch write SetFOnBeforeprefetch;
    property OnGroupchange : TExtDataStoreOnGroupchange read FOnGroupchange write SetFOnGroupchange;
    property OnLoad : TExtDataStoreOnLoad read FOnLoad write SetFOnLoad;
  end;

  TExtTipQuickTipManagerSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Init(AutoRender : Boolean = false; Config : TExtObject = nil) : TExtFunction;
    function DestroyJS : TExtFunction; override;
    function Enable : TExtFunction;
    function Disable : TExtFunction;
    function IsEnabled : TExtFunction;
    function GetQuickTip : TExtFunction;
    function Register(Config : TExtObject) : TExtFunction;
    function Unregister(El : String) : TExtFunction; overload;
    function Unregister(El : THTMLElement) : TExtFunction; overload;
    function Unregister(El : TExtElement) : TExtFunction; overload;
    function Tips(Config : TExtObject) : TExtFunction;
  end;

  // Procedural types for events TExtMenuMenu
  TExtMenuMenuOnClick = procedure(Menu : TExtMenuMenu; Item : TExtComponent; E : TExtEventObjectSingleton) of object;
  TExtMenuMenuOnMouseenter = procedure(Menu : TExtMenuMenu; E : TExtEventObjectSingleton) of object;
  TExtMenuMenuOnMouseleave = procedure(Menu : TExtMenuMenu; E : TExtEventObjectSingleton) of object;
  TExtMenuMenuOnMouseover = procedure(Menu : TExtMenuMenu; Item : TExtComponent; E : TExtEventObjectSingleton) of object;

  TExtMenuMenu = class(TExtFunction)
  private
    FAllowOtherMenus : Boolean;
    FAriaRole : String;
    FAutoRender : Boolean;
    FDefaultAlign : String;
    FFloating : Boolean;
    FHide : Boolean;
    FHidden : Boolean;
    FIgnoreParentClicks : Boolean;
    FLayout : String;
    FLayoutTExtObject : TExtObject;
    FShowSeparator : Boolean;
    FMinWidth : Integer;
    FPlain : Boolean;
    FOnClick : TExtMenuMenuOnClick;
    FOnMouseenter : TExtMenuMenuOnMouseenter;
    FOnMouseleave : TExtMenuMenuOnMouseleave;
    FOnMouseover : TExtMenuMenuOnMouseover;
    procedure SetFAllowOtherMenus(Value : Boolean);
    procedure SetFAriaRole(Value : String);
    procedure SetFAutoRender(Value : Boolean);
    procedure SetFDefaultAlign(Value : String);
    procedure SetFFloating(Value : Boolean);
    procedure SetFHide(Value : Boolean);
    procedure SetFHidden(Value : Boolean);
    procedure SetFIgnoreParentClicks(Value : Boolean);
    procedure SetFLayout(Value : String);
    procedure SetFLayoutTExtObject(Value : TExtObject);
    procedure SetFShowSeparator(Value : Boolean);
    procedure SetFMinWidth(Value : Integer);
    procedure SetFPlain(Value : Boolean);
    procedure SetFOnClick(Value : TExtMenuMenuOnClick);
    procedure SetFOnMouseenter(Value : TExtMenuMenuOnMouseenter);
    procedure SetFOnMouseleave(Value : TExtMenuMenuOnMouseleave);
    procedure SetFOnMouseover(Value : TExtMenuMenuOnMouseover);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function CanActivateItem : TExtFunction;
    function DeactivateActiveItem : TExtFunction;
    function ShowBy(Component : TExtComponent; Position : String = ''; Offsets : TArrayOfInteger = nil) : TExtFunction; overload;
    function ShowBy(Component : TExtElement; Position : String = ''; Offsets : TArrayOfInteger = nil) : TExtFunction; overload;
    destructor Destroy; override;
    property AllowOtherMenus : Boolean read FAllowOtherMenus write SetFAllowOtherMenus;
    property AriaRole : String read FAriaRole write SetFAriaRole;
    property AutoRender : Boolean read FAutoRender write SetFAutoRender;
    property DefaultAlign : String read FDefaultAlign write SetFDefaultAlign;
    property Floating : Boolean read FFloating write SetFFloating;
    property Hide : Boolean read FHide write SetFHide;
    property Hidden : Boolean read FHidden write SetFHidden;
    property IgnoreParentClicks : Boolean read FIgnoreParentClicks write SetFIgnoreParentClicks;
    property Layout : String read FLayout write SetFLayout;
    property LayoutTExtObject : TExtObject read FLayoutTExtObject write SetFLayoutTExtObject;
    property ShowSeparator : Boolean read FShowSeparator write SetFShowSeparator;
    property MinWidth : Integer read FMinWidth write SetFMinWidth;
    property Plain : Boolean read FPlain write SetFPlain;
    property OnClick : TExtMenuMenuOnClick read FOnClick write SetFOnClick;
    property OnMouseenter : TExtMenuMenuOnMouseenter read FOnMouseenter write SetFOnMouseenter;
    property OnMouseleave : TExtMenuMenuOnMouseleave read FOnMouseleave write SetFOnMouseleave;
    property OnMouseover : TExtMenuMenuOnMouseover read FOnMouseover write SetFOnMouseover;
  end;

  TExtChartLegend = class(TExtFunction)
  private
    FVisible : Boolean;
    FPosition : String;
    FX : Integer;
    FY : Integer;
    FLabelFont : String;
    FBoxStroke : String;
    FBoxStrokeWidth : String;
    FBoxFill : String;
    FItemSpacing : Integer;
    FPadding : Integer;
    FBoxZIndex : Integer;
    procedure SetFVisible(Value : Boolean);
    procedure SetFPosition(Value : String);
    procedure SetFX(Value : Integer);
    procedure SetFY(Value : Integer);
    procedure SetFLabelFont(Value : String);
    procedure SetFBoxStroke(Value : String);
    procedure SetFBoxStrokeWidth(Value : String);
    procedure SetFBoxFill(Value : String);
    procedure SetFItemSpacing(Value : Integer);
    procedure SetFPadding(Value : Integer);
    procedure SetFBoxZIndex(Value : Integer);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Config : TExtObject);
    property Visible : Boolean read FVisible write SetFVisible;
    property Position : String read FPosition write SetFPosition;
    property X : Integer read FX write SetFX;
    property Y : Integer read FY write SetFY;
    property LabelFont : String read FLabelFont write SetFLabelFont;
    property BoxStroke : String read FBoxStroke write SetFBoxStroke;
    property BoxStrokeWidth : String read FBoxStrokeWidth write SetFBoxStrokeWidth;
    property BoxFill : String read FBoxFill write SetFBoxFill;
    property ItemSpacing : Integer read FItemSpacing write SetFItemSpacing;
    property Padding : Integer read FPadding write SetFPadding;
    property BoxZIndex : Integer read FBoxZIndex write SetFBoxZIndex;
  end;

var
  ExtFormFieldVTypes : TExtFormFieldVTypesSingleton;
  ExtDate : TExtDateSingleton;
  ExtDirectManager : TExtDirectManagerSingleton;
  ExtString : TExtStringSingleton;
  ExtClassManager : TExtClassManagerSingleton;
  ExtDdDragDropManager : TExtDdDragDropManagerSingleton;
  ExtDomHelper : TExtDomHelperSingleton;
  ExtMenuManager : TExtMenuManagerSingleton;
  ExtDdRegistry : TExtDdRegistrySingleton;
  ExtEventObject : TExtEventObjectSingleton;
  ExtObject : TExtObjectSingleton;
  ExtDomQuery : TExtDomQuerySingleton;
  ExtFxEasing : TExtFxEasingSingleton;
  ExtPluginManager : TExtPluginManagerSingleton;
  ExtDataSortTypes : TExtDataSortTypesSingleton;
  ExtLoader : TExtLoaderSingleton;
  ExtViewTableChunker : TExtViewTableChunkerSingleton;
  ExtArray : TExtArraySingleton;
  ExtDataTypes : TExtDataTypesSingleton;
  ExtJSON : TExtJSONSingleton;
  ExtAjax : TExtAjaxSingleton;
  ExtUtilCSS : TExtUtilCSSSingleton;
  ExtNumber : TExtNumberSingleton;
  ExtEventManager : TExtEventManagerSingleton;
  ExtFocusManager : TExtFocusManagerSingleton;
  ExtFunction : TExtFunctionSingleton;
  ExtDdScrollManager : TExtDdScrollManagerSingleton;
  ExtUtilHistory : TExtUtilHistorySingleton;
  ExtDataJsonP : TExtDataJsonPSingleton;
  ExtComponentManager : TExtComponentManagerSingleton;
  Ext : TExtSingleton;
  ExtUtilFormat : TExtUtilFormatSingleton;
  ExtStateManager : TExtStateManagerSingleton;
  ExtIs : TExtIsSingleton;
  ExtUtilCookies : TExtUtilCookiesSingleton;
  ExtModelManager : TExtModelManagerSingleton;
  ExtTipQuickTipManager : TExtTipQuickTipManagerSingleton;

implementation

procedure TExtImg.SetFSrc(Value : String); begin
  FSrc := Value;
  JSCode('src:' + VarToJSON([Value]));
end;

function TExtImg.JSClassName : string; begin
  Result := 'Ext-Img';
end;

{$IFDEF FPC}constructor TExtImg.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtImg.SetSrc : TExtFunction; begin
  JSCode(JSName + '.setSrc();', 'TExtImg');
  Result := Self;
end;

procedure TExtSelectionCheckboxModel.SetFMode(Value : String); begin
  FMode := Value;
  JSCode('mode:' + VarToJSON([Value]));
end;

procedure TExtSelectionCheckboxModel.SetFInjectCheckbox(Value : Integer); begin
  FInjectCheckbox := Value;
  JSCode('injectCheckbox:' + VarToJSON([Value]));
end;

procedure TExtSelectionCheckboxModel.SetFInjectCheckboxBoolean(Value : Boolean); begin
  FInjectCheckboxBoolean := Value;
  JSCode('injectCheckbox:' + VarToJSON([Value]));
end;

procedure TExtSelectionCheckboxModel.SetFInjectCheckboxString(Value : String); begin
  FInjectCheckboxString := Value;
  JSCode('injectCheckbox:' + VarToJSON([Value]));
end;

procedure TExtSelectionCheckboxModel.SetFCheckOnly(Value : Boolean); begin
  FCheckOnly := Value;
  JSCode('checkOnly:' + VarToJSON([Value]));
end;

function TExtSelectionCheckboxModel.JSClassName : string; begin
  Result := 'Ext-selection-CheckboxModel';
end;

{$IFDEF FPC}constructor TExtSelectionCheckboxModel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtSelectionCheckboxModel.OnHeaderClick : TExtFunction; begin
  JSCode(JSName + '.onHeaderClick();', 'TExtSelectionCheckboxModel');
  Result := Self;
end;

function TExtSelectionCheckboxModel.GetHeaderConfig : TExtFunction; begin
  JSCode(JSName + '.getHeaderConfig();', 'TExtSelectionCheckboxModel');
  Result := Self;
end;

function TExtSelectionCheckboxModel.Renderer : TExtFunction; begin
  JSCode(JSName + '.renderer();', 'TExtSelectionCheckboxModel');
  Result := Self;
end;

function TExtLayoutContainerContainer.JSClassName : string; begin
  Result := 'Ext-layout-container-Container';
end;

{$IFDEF FPC}constructor TExtLayoutContainerContainer.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtFormFieldVTypesSingleton.JSClassName : string; begin
  Result := 'Ext-form-field-VTypesSingleton';
end;

{$IFDEF FPC}constructor TExtFormFieldVTypesSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtFormFieldVTypesSingleton.Email(Value : String) : TExtFunction; begin
  JSCode(JSName + '.email(' + VarToJSON([Value]) + ');', 'TExtFormFieldVTypesSingleton');
  Result := Self;
end;

function TExtFormFieldVTypesSingleton.Url(Value : String) : TExtFunction; begin
  JSCode(JSName + '.url(' + VarToJSON([Value]) + ');', 'TExtFormFieldVTypesSingleton');
  Result := Self;
end;

function TExtFormFieldVTypesSingleton.Alpha(Value : String) : TExtFunction; begin
  JSCode(JSName + '.alpha(' + VarToJSON([Value]) + ');', 'TExtFormFieldVTypesSingleton');
  Result := Self;
end;

function TExtFormFieldVTypesSingleton.Alphanum(Value : String) : TExtFunction; begin
  JSCode(JSName + '.alphanum(' + VarToJSON([Value]) + ');', 'TExtFormFieldVTypesSingleton');
  Result := Self;
end;

function TExtLayoutContainerCard.JSClassName : string; begin
  Result := 'Ext-layout-container-Card';
end;

{$IFDEF FPC}constructor TExtLayoutContainerCard.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtLayoutContainerCard.SetActiveItem(NewCard : TExtComponent) : TExtFunction; begin
  JSCode(JSName + '.setActiveItem(' + VarToJSON([NewCard, false]) + ');', 'TExtLayoutContainerCard');
  Result := Self;
end;

function TExtLayoutContainerCard.SetActiveItem(NewCard : Integer) : TExtFunction; begin
  JSCode(JSName + '.SetActiveItem(' + VarToJSON([NewCard]) + ');', 'TExtLayoutContainerCard');
  Result := Self;
end;

function TExtLayoutContainerCard.SetActiveItem(NewCard : String) : TExtFunction; begin
  JSCode(JSName + '.SetActiveItem(' + VarToJSON([NewCard]) + ');', 'TExtLayoutContainerCard');
  Result := Self;
end;

procedure TExtFormFieldDisplay.SetFFieldCls(Value : String); begin
  FFieldCls := Value;
  JSCode('fieldCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDisplay.SetFHtmlEncode(Value : Boolean); begin
  FHtmlEncode := Value;
  JSCode('htmlEncode:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDisplay.SetFInputType(Value : String); begin
  FInputType := Value;
  JSCode('inputType:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDisplay.SetFDisabled(Value : Boolean); begin
  FDisabled := Value;
  JSCode('disabled:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDisplay.SetFReadOnly(Value : Boolean); begin
  FReadOnly := Value;
  JSCode('readOnly:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDisplay.SetFValidateOnChange(Value : Boolean); begin
  FValidateOnChange := Value;
  JSCode('validateOnChange:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDisplay.SetFCheckChangeEvents(Value : Integer); begin
  FCheckChangeEvents := Value;
  JSCode('checkChangeEvents:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDisplay.SetFCheckChangeBuffer(Value : Integer); begin
  FCheckChangeBuffer := Value;
  JSCode('checkChangeBuffer:' + VarToJSON([Value]));
end;

function TExtFormFieldDisplay.JSClassName : string; begin
  Result := 'Ext-form-field-Display';
end;

{$IFDEF FPC}constructor TExtFormFieldDisplay.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtAppApplication.SetFName(Value : String); begin
  FName := Value;
  JSCode('name:' + VarToJSON([Value]));
end;

procedure TExtAppApplication.SetFScope(Value : TExtObject); begin
  FScope := Value;
  Value.DeleteFromGarbage;
  JSCode('scope:' + VarToJSON([Value, false]));
end;

procedure TExtAppApplication.SetFEnableQuickTips(Value : Boolean); begin
  FEnableQuickTips := Value;
  JSCode('enableQuickTips:' + VarToJSON([Value]));
end;

procedure TExtAppApplication.SetFDefaultUrl(Value : String); begin
  FDefaultUrl := Value;
  JSCode('defaultUrl:' + VarToJSON([Value]));
end;

procedure TExtAppApplication.SetFAppFolder(Value : String); begin
  FAppFolder := Value;
  JSCode('appFolder:' + VarToJSON([Value]));
end;

procedure TExtAppApplication.SetFAutoCreateViewport(Value : Boolean); begin
  FAutoCreateViewport := Value;
  JSCode('autoCreateViewport:' + VarToJSON([Value]));
end;

function TExtAppApplication.JSClassName : string; begin
  Result := 'Ext-app-Application';
end;

procedure TExtAppApplication.InitDefaults; begin
  inherited;
  FScope := TExtObject.CreateInternal(Self, 'scope');
end;

{$IFDEF FPC}constructor TExtAppApplication.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtAppApplication.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

constructor TExtAppApplication.Create(Config : TExtObject = nil); begin
  if Config = nil then CreateVar(JSClassName + '({});') else
  CreateVar(JSClassName + '(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

destructor TExtAppApplication.Destroy; begin
  try
    FScope.Free;
  except end;
  inherited;
end;

procedure TExtComponent.SetFResizable(Value : Boolean); begin
  FResizable := Value;
  JSCode('resizable:' + VarToJSON([Value]));
end;

procedure TExtComponent.SetFResizableTExtObject(Value : TExtObject); begin
  FResizableTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('resizable:' + VarToJSON([Value, false]));
end;

procedure TExtComponent.SetFResizeHandles(Value : String); begin
  FResizeHandles := Value;
  JSCode('resizeHandles:' + VarToJSON([Value]));
end;

procedure TExtComponent.SetFAutoScroll(Value : Boolean); begin
  FAutoScroll := Value;
  if not ConfigAvailable(JSName) then
    SetAutoScroll(Value)
  else
    JSCode('autoScroll:' + VarToJSON([Value]));
end;

procedure TExtComponent.SetFFloating(Value : Boolean); begin
  FFloating := Value;
  JSCode('floating:' + VarToJSON([Value]));
end;

procedure TExtComponent.SetFToFrontOnShow(Value : Boolean); begin
  FToFrontOnShow := Value;
  JSCode('toFrontOnShow:' + VarToJSON([Value]));
end;

procedure TExtComponent.SetFDraggable(Value : Boolean); begin
  FDraggable := Value;
  JSCode('draggable:' + VarToJSON([Value]));
end;

procedure TExtComponent.SetFDraggableTExtObject(Value : TExtObject); begin
  FDraggableTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('draggable:' + VarToJSON([Value, false]));
end;

procedure TExtComponent.SetFMaintainFlex(Value : Boolean); begin
  FMaintainFlex := Value;
  JSCode('maintainFlex:' + VarToJSON([Value]));
end;

function TExtComponent.JSClassName : string; begin
  Result := 'Ext-Component';
end;

procedure TExtComponent.InitDefaults; begin
  inherited;
  FResizableTExtObject := TExtObject.CreateInternal(Self, 'resizable');
  FDraggableTExtObject := TExtObject.CreateInternal(Self, 'draggable');
end;

{$IFDEF FPC}constructor TExtComponent.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtComponent.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

constructor TExtComponent.Create(Config : TExtElement); begin
  CreateVar(JSClassName + '(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

constructor TExtComponent.Create(Config : String); begin
  CreateVar(JSClassName + '(' + VarToJSON([Config]) + ');');
  InitDefaults;
end;

constructor TExtComponent.Create(Config : TExtObject); begin
  if Config = nil then CreateVar(JSClassName + '({});') else
  CreateVar(JSClassName + '(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

function TExtComponent.InitComponent : TExtFunction; begin
  JSCode(JSName + '.initComponent();', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.SetAutoScroll(Scroll : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setAutoScroll(' + VarToJSON([Scroll]) + ');', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.SetPosition(Left : Integer; Top : Integer; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.setPosition(' + VarToJSON([Left, Top, Animate]) + ');', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.SetPosition(Left : Integer; Top : Integer; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetPosition(' + VarToJSON([Left, Top, Animate, false]) + ');', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.ShowAt(X : Integer; Y : Integer; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.showAt(' + VarToJSON([X, Y, Animate]) + ');', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.ShowAt(X : Integer; Y : Integer; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.ShowAt(' + VarToJSON([X, Y, Animate, false]) + ');', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.SetPagePosition(X : Integer; Y : Integer; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.setPagePosition(' + VarToJSON([X, Y, Animate]) + ');', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.SetPagePosition(X : Integer; Y : Integer; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetPagePosition(' + VarToJSON([X, Y, Animate, false]) + ');', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.GetBox(Local : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.getBox(' + VarToJSON([Local]) + ');', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.UpdateBox(Box : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.updateBox(' + VarToJSON([Box, false]) + ');', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.GetPosition(Local : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.getPosition(' + VarToJSON([Local]) + ');', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.Show(AnimateTarget : String = ''; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.show(' + VarToJSON([AnimateTarget, Callback, true, Scope, false]) + ');', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.Show(AnimateTarget : TExtElement; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.Show(' + VarToJSON([AnimateTarget, false, Callback, true, Scope, false]) + ');', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.Hide(AnimateTarget : String = ''; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.hide(' + VarToJSON([AnimateTarget, Callback, true, Scope, false]) + ');', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.Hide(AnimateTarget : TExtElement; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.Hide(' + VarToJSON([AnimateTarget, false, Callback, true, Scope, false]) + ');', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.Hide(AnimateTarget : TExtComponent; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.Hide(' + VarToJSON([AnimateTarget, false, Callback, true, Scope, false]) + ');', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.Focus(SelectText : Boolean = false; Delay : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.focus(' + VarToJSON([SelectText, Delay]) + ');', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.Focus(SelectText : Boolean; Delay : Integer) : TExtFunction; begin
  JSCode(JSName + '.Focus(' + VarToJSON([SelectText, Delay]) + ');', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.CloneConfig(Overrides : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.cloneConfig(' + VarToJSON([Overrides, false]) + ');', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.GetXType : TExtFunction; begin
  JSCode(JSName + '.getXType();', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.FindParentBy(Fn : TExtFunction) : TExtFunction; begin
  JSCode(JSName + '.findParentBy(' + VarToJSON([Fn, true]) + ');', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.FindParentByType(Xtype : String) : TExtFunction; begin
  JSCode(JSName + '.findParentByType(' + VarToJSON([Xtype]) + ');', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.FindParentByType(Xtype : TExtClass) : TExtFunction; begin
  JSCode(JSName + '.FindParentByType(' + VarToJSON([Xtype, false]) + ');', 'TExtComponent');
  Result := Self;
end;

function TExtComponent.Bubble(Fn : TExtFunction; Scope : TExtObject = nil; Args : TExtObjectList = nil) : TExtFunction; begin
  JSCode(JSName + '.bubble(' + VarToJSON([Fn, true, Scope, false]) + ',' + VarToJSON(Args) + ');', 'TExtComponent');
  Result := Self;
end;

destructor TExtComponent.Destroy; begin
  try
    FResizableTExtObject.Free;
    FDraggableTExtObject.Free;
  except end;
  inherited;
end;

procedure TExtShadow.SetFMode(Value : String); begin
  FMode := Value;
  JSCode('mode:' + VarToJSON([Value]));
end;

procedure TExtShadow.SetFOffset(Value : Integer); begin
  FOffset := Value;
  JSCode('offset:' + VarToJSON([Value]));
end;

function TExtShadow.JSClassName : string; begin
  Result := 'Ext-Shadow';
end;

{$IFDEF FPC}constructor TExtShadow.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtShadow.Show(TargetEl : String) : TExtFunction; begin
  JSCode(JSName + '.show(' + VarToJSON([TargetEl]) + ');', 'TExtShadow');
  Result := Self;
end;

function TExtShadow.Show(TargetEl : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.Show(' + VarToJSON([TargetEl, false]) + ');', 'TExtShadow');
  Result := Self;
end;

function TExtShadow.Show(TargetEl : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.Show(' + VarToJSON([TargetEl, false]) + ');', 'TExtShadow');
  Result := Self;
end;

function TExtShadow.IsVisible : TExtFunction; begin
  JSCode(JSName + '.isVisible();', 'TExtShadow');
  Result := Self;
end;

function TExtShadow.Realign(Left : Integer; Top : Integer; Width : Integer; Height : Integer) : TExtFunction; begin
  JSCode(JSName + '.realign(' + VarToJSON([Left, Top, Width, Height]) + ');', 'TExtShadow');
  Result := Self;
end;

function TExtShadow.Hide : TExtFunction; begin
  JSCode(JSName + '.hide();', 'TExtShadow');
  Result := Self;
end;

function TExtShadow.SetZIndex(Zindex : Integer) : TExtFunction; begin
  JSCode(JSName + '.setZIndex(' + VarToJSON([Zindex]) + ');', 'TExtShadow');
  Result := Self;
end;

function TExtShadow.SetOpacity(Opacity : Integer) : TExtFunction; begin
  JSCode(JSName + '.setOpacity(' + VarToJSON([Opacity]) + ');', 'TExtShadow');
  Result := Self;
end;

function TExtDateSingleton.JSClassName : string; begin
  Result := 'Ext-DateSingleton';
end;

{$IFDEF FPC}constructor TExtDateSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDateSingleton.Now : TExtFunction; begin
  JSCode(JSName + '.now();', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.GetElapsed(DateA : TDateTime; DateB : TDateTime = 0) : TExtFunction; begin
  JSCode(JSName + '.getElapsed(' + VarToJSON([DateA, DateB]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.GetShortMonthName(Month : Integer) : TExtFunction; begin
  JSCode(JSName + '.getShortMonthName(' + VarToJSON([Month]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.GetShortDayName(Day : Integer) : TExtFunction; begin
  JSCode(JSName + '.getShortDayName(' + VarToJSON([Day]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.GetMonthNumber(Name : String) : TExtFunction; begin
  JSCode(JSName + '.getMonthNumber(' + VarToJSON([Name]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.FormatContainsHourInfo(Format : String) : TExtFunction; begin
  JSCode(JSName + '.formatContainsHourInfo(' + VarToJSON([Format]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.FormatContainsDateInfo(Format : String) : TExtFunction; begin
  JSCode(JSName + '.formatContainsDateInfo(' + VarToJSON([Format]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.IsValid(Year : Integer; Month : Integer; Day : Integer; Hour : Integer = 0; Minute : Integer = 0; Second : Integer = 0; Millisecond : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.isValid(' + VarToJSON([Year, Month, Day, Hour, Minute, Second, Millisecond]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.Parse(Input : String; Format : String; Strict : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.parse(' + VarToJSON([Input, Format, Strict]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.Format(Date : TDateTime; Format : String) : TExtFunction; begin
  JSCode(JSName + '.format(' + VarToJSON([Date, Format]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.GetTimezone(Date : TDateTime) : TExtFunction; begin
  JSCode(JSName + '.getTimezone(' + VarToJSON([Date]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.GetGMTOffset(Date : TDateTime; Colon : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.getGMTOffset(' + VarToJSON([Date, Colon]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.GetDayOfYear(Date : TDateTime) : TExtFunction; begin
  JSCode(JSName + '.getDayOfYear(' + VarToJSON([Date]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.GetWeekOfYear(Date : TDateTime) : TExtFunction; begin
  JSCode(JSName + '.getWeekOfYear(' + VarToJSON([Date]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.IsLeapYear(Date : TDateTime) : TExtFunction; begin
  JSCode(JSName + '.isLeapYear(' + VarToJSON([Date]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.GetFirstDayOfMonth(Date : TDateTime) : TExtFunction; begin
  JSCode(JSName + '.getFirstDayOfMonth(' + VarToJSON([Date]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.GetLastDayOfMonth(Date : TDateTime) : TExtFunction; begin
  JSCode(JSName + '.getLastDayOfMonth(' + VarToJSON([Date]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.GetFirstDateOfMonth(Date : TDateTime) : TExtFunction; begin
  JSCode(JSName + '.getFirstDateOfMonth(' + VarToJSON([Date]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.GetLastDateOfMonth(Date : TDateTime) : TExtFunction; begin
  JSCode(JSName + '.getLastDateOfMonth(' + VarToJSON([Date]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.GetDaysInMonth(Date : TDateTime) : TExtFunction; begin
  JSCode(JSName + '.getDaysInMonth(' + VarToJSON([Date]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.GetSuffix(Date : TDateTime) : TExtFunction; begin
  JSCode(JSName + '.getSuffix(' + VarToJSON([Date]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.Clone(Date : TDateTime) : TExtFunction; begin
  JSCode(JSName + '.clone(' + VarToJSON([Date]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.IsDST(Date : TDateTime) : TExtFunction; begin
  JSCode(JSName + '.isDST(' + VarToJSON([Date]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.ClearTime(Date : TDateTime; Clone : Boolean) : TExtFunction; begin
  JSCode(JSName + '.clearTime(' + VarToJSON([Date, Clone]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.Add(Date : TDateTime; Interval : String; Value : Integer) : TExtFunction; begin
  JSCode(JSName + '.add(' + VarToJSON([Date, Interval, Value]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

function TExtDateSingleton.Between(Date : TDateTime; Start : TDateTime; EndJS : TDateTime) : TExtFunction; begin
  JSCode(JSName + '.between(' + VarToJSON([Date, Start, EndJS]) + ');', 'TExtDateSingleton');
  Result := Self;
end;

procedure TExtPickerTime.SetFMinValue(Value : TDateTime); begin
  FMinValue := Value;
  if not ConfigAvailable(JSName) then
    SetMinValue(Value, 0, 0)
  else
    JSCode('minValue:' + VarToJSON([Value]));
end;

procedure TExtPickerTime.SetFMaxValue(Value : TDateTime); begin
  FMaxValue := Value;
  JSCode('maxValue:' + VarToJSON([Value]));
end;

procedure TExtPickerTime.SetFIncrement(Value : Integer); begin
  FIncrement := Value;
  JSCode('increment:' + VarToJSON([Value]));
end;

procedure TExtPickerTime.SetFFormat(Value : String); begin
  FFormat := Value;
  JSCode('format:' + VarToJSON([Value]));
end;

function TExtPickerTime.JSClassName : string; begin
  Result := 'Ext-picker-Time';
end;

{$IFDEF FPC}constructor TExtPickerTime.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtPickerTime.SetMinValue(Value : TDateTime; Value_ : TDateTime; Date : TDateTime) : TExtFunction; begin
  JSCode(JSName + '.setMinValue(' + VarToJSON([Value, Value_, Date]) + ');', 'TExtPickerTime');
  Result := Self;
end;

function TExtPickerTime.UpdateList : TExtFunction; begin
  JSCode(JSName + '.updateList();', 'TExtPickerTime');
  Result := Self;
end;

procedure TExtSliderMulti.SetFValue(Value : Integer); begin
  FValue := Value;
  if not ConfigAvailable(JSName) then
    SetValue(Value, 0)
  else
    JSCode('value:' + VarToJSON([Value]));
end;

procedure TExtSliderMulti.SetFValues(Value : TArrayOfInteger); begin
  FValues := Value;
  JSCode('values:' + ArrayToJSON(Value));
end;

procedure TExtSliderMulti.SetFVertical(Value : Boolean); begin
  FVertical := Value;
  JSCode('vertical:' + VarToJSON([Value]));
end;

procedure TExtSliderMulti.SetFMinValue(Value : Integer); begin
  FMinValue := Value;
  if not ConfigAvailable(JSName) then
    SetMinValue(Value)
  else
    JSCode('minValue:' + VarToJSON([Value]));
end;

procedure TExtSliderMulti.SetFMaxValue(Value : Integer); begin
  FMaxValue := Value;
  if not ConfigAvailable(JSName) then
    SetMaxValue(Value)
  else
    JSCode('maxValue:' + VarToJSON([Value]));
end;

procedure TExtSliderMulti.SetFDecimalPrecision(Value : Integer); begin
  FDecimalPrecision := Value;
  JSCode('decimalPrecision:' + VarToJSON([Value]));
end;

procedure TExtSliderMulti.SetFDecimalPrecisionBoolean(Value : Boolean); begin
  FDecimalPrecisionBoolean := Value;
  JSCode('decimalPrecision:' + VarToJSON([Value]));
end;

procedure TExtSliderMulti.SetFKeyIncrement(Value : Integer); begin
  FKeyIncrement := Value;
  JSCode('keyIncrement:' + VarToJSON([Value]));
end;

procedure TExtSliderMulti.SetFIncrement(Value : Integer); begin
  FIncrement := Value;
  JSCode('increment:' + VarToJSON([Value]));
end;

procedure TExtSliderMulti.SetFClickToChange(Value : Boolean); begin
  FClickToChange := Value;
  JSCode('clickToChange:' + VarToJSON([Value]));
end;

procedure TExtSliderMulti.SetFAnimate(Value : Boolean); begin
  FAnimate := Value;
  JSCode('animate:' + VarToJSON([Value]));
end;

procedure TExtSliderMulti.SetFConstrainThumbs(Value : Boolean); begin
  FConstrainThumbs := Value;
  JSCode('constrainThumbs:' + VarToJSON([Value]));
end;

procedure TExtSliderMulti.SetFUseTips(Value : Boolean); begin
  FUseTips := Value;
  JSCode('useTips:' + VarToJSON([Value]));
end;

procedure TExtSliderMulti.SetFTipText(Value : TExtFunction); begin
  FTipText := Value;
  JSCode('tipText:' + VarToJSON([Value, true]));
end;

procedure TExtSliderMulti.SetFOnBeforechange(Value : TExtSliderMultiOnBeforechange); begin
  if Assigned(FOnBeforechange) then
    JSCode(JSName+'.events ["beforechange"].listeners=[];');
  if Assigned(Value) then
    On('beforechange', Ajax('beforechange', ['Slider', '%0.nm','NewValue', '%1','OldValue', '%2'], true));
  FOnBeforechange := Value;
end;

procedure TExtSliderMulti.SetFOnChange(Value : TExtSliderMultiOnChange); begin
  if Assigned(FOnChange) then
    JSCode(JSName+'.events ["change"].listeners=[];');
  if Assigned(Value) then
    On('change', Ajax('change', ['Slider', '%0.nm','NewValue', '%1','Thumb', '%2.nm'], true));
  FOnChange := Value;
end;

procedure TExtSliderMulti.SetFOnChangecomplete(Value : TExtSliderMultiOnChangecomplete); begin
  if Assigned(FOnChangecomplete) then
    JSCode(JSName+'.events ["changecomplete"].listeners=[];');
  if Assigned(Value) then
    On('changecomplete', Ajax('changecomplete', ['Slider', '%0.nm','NewValue', '%1','Thumb', '%2.nm'], true));
  FOnChangecomplete := Value;
end;

procedure TExtSliderMulti.SetFOnDragstart(Value : TExtSliderMultiOnDragstart); begin
  if Assigned(FOnDragstart) then
    JSCode(JSName+'.events ["dragstart"].listeners=[];');
  if Assigned(Value) then
    On('dragstart', Ajax('dragstart', ['Slider', '%0.nm','E', '%1.nm'], true));
  FOnDragstart := Value;
end;

procedure TExtSliderMulti.SetFOnDrag(Value : TExtSliderMultiOnDrag); begin
  if Assigned(FOnDrag) then
    JSCode(JSName+'.events ["drag"].listeners=[];');
  if Assigned(Value) then
    On('drag', Ajax('drag', ['Slider', '%0.nm','E', '%1.nm'], true));
  FOnDrag := Value;
end;

procedure TExtSliderMulti.SetFOnDragend(Value : TExtSliderMultiOnDragend); begin
  if Assigned(FOnDragend) then
    JSCode(JSName+'.events ["dragend"].listeners=[];');
  if Assigned(Value) then
    On('dragend', Ajax('dragend', ['Slider', '%0.nm','E', '%1.nm'], true));
  FOnDragend := Value;
end;

function TExtSliderMulti.JSClassName : string; begin
  Result := 'Ext-slider-Multi';
end;

{$IFDEF FPC}constructor TExtSliderMulti.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtSliderMulti.AddThumb(Value : Integer) : TExtFunction; begin
  JSCode(JSName + '.addThumb(' + VarToJSON([Value]) + ');', 'TExtSliderMulti');
  Result := Self;
end;

function TExtSliderMulti.SetMinValue(Val : Integer) : TExtFunction; begin
  JSCode(JSName + '.setMinValue(' + VarToJSON([Val]) + ');', 'TExtSliderMulti');
  Result := Self;
end;

function TExtSliderMulti.SetMaxValue(Val : Integer) : TExtFunction; begin
  JSCode(JSName + '.setMaxValue(' + VarToJSON([Val]) + ');', 'TExtSliderMulti');
  Result := Self;
end;

function TExtSliderMulti.SetValue(Index : Integer; Value : Integer; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.setValue(' + VarToJSON([Index, Value, Animate]) + ');', 'TExtSliderMulti');
  Result := Self;
end;

function TExtSliderMulti.SyncThumbs : TExtFunction; begin
  JSCode(JSName + '.syncThumbs();', 'TExtSliderMulti');
  Result := Self;
end;

function TExtSliderMulti.GetValue(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.getValue(' + VarToJSON([Index]) + ');', 'TExtSliderMulti');
  Result := Self;
end;

function TExtSliderMulti.GetValues : TExtFunction; begin
  JSCode(JSName + '.getValues();', 'TExtSliderMulti');
  Result := Self;
end;

procedure TExtSliderMulti.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforechange') and Assigned(FOnBeforechange) then
    FOnBeforechange(TExtSliderMulti(ParamAsObject('Slider')), ParamAsInteger('NewValue'), ParamAsInteger('OldValue'))
  else if (AEvtName = 'change') and Assigned(FOnChange) then
    FOnChange(TExtSliderMulti(ParamAsObject('Slider')), ParamAsInteger('NewValue'), TExtSliderThumb(ParamAsObject('Thumb')))
  else if (AEvtName = 'changecomplete') and Assigned(FOnChangecomplete) then
    FOnChangecomplete(TExtSliderMulti(ParamAsObject('Slider')), ParamAsInteger('NewValue'), TExtSliderThumb(ParamAsObject('Thumb')))
  else if (AEvtName = 'dragstart') and Assigned(FOnDragstart) then
    FOnDragstart(TExtSliderMulti(ParamAsObject('Slider')), ExtEventObject)
  else if (AEvtName = 'drag') and Assigned(FOnDrag) then
    FOnDrag(TExtSliderMulti(ParamAsObject('Slider')), ExtEventObject)
  else if (AEvtName = 'dragend') and Assigned(FOnDragend) then
    FOnDragend(TExtSliderMulti(ParamAsObject('Slider')), ExtEventObject);
end;

function TExtDdDDTarget.JSClassName : string; begin
  Result := 'Ext-dd-DDTarget';
end;

{$IFDEF FPC}constructor TExtDdDDTarget.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDdDDTarget.Create(Id : String; SGroup : String; Config : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Id, SGroup, Config, false]) + ');');
  InitDefaults;
end;

function TExtDdDDTarget.GetDragEl : TExtFunction; begin
  JSCode(JSName + '.getDragEl();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.IsValidHandleChild : TExtFunction; begin
  JSCode(JSName + '.isValidHandleChild();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.StartDrag : TExtFunction; begin
  JSCode(JSName + '.startDrag();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.EndDrag : TExtFunction; begin
  JSCode(JSName + '.endDrag();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.OnDrag : TExtFunction; begin
  JSCode(JSName + '.onDrag();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.OnDragDrop : TExtFunction; begin
  JSCode(JSName + '.onDragDrop();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.OnDragEnter : TExtFunction; begin
  JSCode(JSName + '.onDragEnter();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.OnDragOut : TExtFunction; begin
  JSCode(JSName + '.onDragOut();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.OnDragOver : TExtFunction; begin
  JSCode(JSName + '.onDragOver();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.OnInvalidDrop : TExtFunction; begin
  JSCode(JSName + '.onInvalidDrop();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.OnMouseDown : TExtFunction; begin
  JSCode(JSName + '.onMouseDown();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.OnMouseUp : TExtFunction; begin
  JSCode(JSName + '.onMouseUp();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.SetXConstraint : TExtFunction; begin
  JSCode(JSName + '.setXConstraint();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.SetYConstraint : TExtFunction; begin
  JSCode(JSName + '.setYConstraint();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.ResetConstraints : TExtFunction; begin
  JSCode(JSName + '.resetConstraints();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.ClearConstraints : TExtFunction; begin
  JSCode(JSName + '.clearConstraints();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.ClearTicks : TExtFunction; begin
  JSCode(JSName + '.clearTicks();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.SetInitPosition : TExtFunction; begin
  JSCode(JSName + '.setInitPosition();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.SetDragElId : TExtFunction; begin
  JSCode(JSName + '.setDragElId();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.SetHandleElId : TExtFunction; begin
  JSCode(JSName + '.setHandleElId();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.SetOuterHandleElId : TExtFunction; begin
  JSCode(JSName + '.setOuterHandleElId();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.AddInvalidHandleClass : TExtFunction; begin
  JSCode(JSName + '.addInvalidHandleClass();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.AddInvalidHandleId : TExtFunction; begin
  JSCode(JSName + '.addInvalidHandleId();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.AddInvalidHandleType : TExtFunction; begin
  JSCode(JSName + '.addInvalidHandleType();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.RemoveInvalidHandleClass : TExtFunction; begin
  JSCode(JSName + '.removeInvalidHandleClass();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.RemoveInvalidHandleId : TExtFunction; begin
  JSCode(JSName + '.removeInvalidHandleId();', 'TExtDdDDTarget');
  Result := Self;
end;

function TExtDdDDTarget.RemoveInvalidHandleType : TExtFunction; begin
  JSCode(JSName + '.removeInvalidHandleType();', 'TExtDdDDTarget');
  Result := Self;
end;

procedure TExtLoadMask.SetFStore(Value : TExtDataStore); begin
  FStore := Value;
  Value.DeleteFromGarbage;
  JSCode('store:' + VarToJSON([Value, false]));
end;

procedure TExtLoadMask.SetFMsg(Value : String); begin
  FMsg := Value;
  JSCode('msg:' + VarToJSON([Value]));
end;

procedure TExtLoadMask.SetFMsgCls(Value : String); begin
  FMsgCls := Value;
  JSCode('msgCls:' + VarToJSON([Value]));
end;

procedure TExtLoadMask.SetFUseMsg(Value : Boolean); begin
  FUseMsg := Value;
  JSCode('useMsg:' + VarToJSON([Value]));
end;

function TExtLoadMask.JSClassName : string; begin
  Result := 'Ext-LoadMask';
end;

procedure TExtLoadMask.InitDefaults; begin
  inherited;
  FStore := TExtDataStore.CreateInternal(Self, 'store');
end;

{$IFDEF FPC}constructor TExtLoadMask.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtLoadMask.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

constructor TExtLoadMask.Create(El : String; Config : TExtObject = nil); begin
  CreateVar(JSClassName + '(' + VarToJSON([El, Config, false]) + ');');
  InitDefaults;
end;

constructor TExtLoadMask.Create(El : THTMLElement; Config : TExtObject = nil); begin
  CreateVar(JSClassName + '(' + VarToJSON([El, false, Config, false]) + ');');
  InitDefaults;
end;

constructor TExtLoadMask.Create(El : TExtElement; Config : TExtObject = nil); begin
  CreateVar(JSClassName + '(' + VarToJSON([El, false, Config, false]) + ');');
  InitDefaults;
end;

function TExtLoadMask.BindStore(Store : TExtDataStore) : TExtFunction; begin
  JSCode(JSName + '.bindStore(' + VarToJSON([Store, false]) + ');', 'TExtLoadMask');
  Result := Self;
end;

destructor TExtLoadMask.Destroy; begin
  try
    FStore.Free;
  except end;
  inherited;
end;

function TExtFxTargetElement.JSClassName : string; begin
  Result := 'Ext-fx-target-Element';
end;

{$IFDEF FPC}constructor TExtFxTargetElement.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtDataAssociation.SetFOwnerModel(Value : String); begin
  FOwnerModel := Value;
  JSCode('ownerModel:' + VarToJSON([Value]));
end;

procedure TExtDataAssociation.SetFAssociatedModel(Value : String); begin
  FAssociatedModel := Value;
  JSCode('associatedModel:' + VarToJSON([Value]));
end;

procedure TExtDataAssociation.SetFPrimaryKey(Value : String); begin
  FPrimaryKey := Value;
  JSCode('primaryKey:' + VarToJSON([Value]));
end;

procedure TExtDataAssociation.SetFReader(Value : TExtDataReaderReader); begin
  FReader := Value;
  Value.DeleteFromGarbage;
  JSCode('reader:' + VarToJSON([Value, false]));
end;

procedure TExtDataAssociation.SetFAssociationKey(Value : String); begin
  FAssociationKey := Value;
  JSCode('associationKey:' + VarToJSON([Value]));
end;

function TExtDataAssociation.JSClassName : string; begin
  Result := 'Ext-data-Association';
end;

procedure TExtDataAssociation.InitDefaults; begin
  inherited;
  FReader := TExtDataReaderReader.CreateInternal(Self, 'reader');
end;

{$IFDEF FPC}constructor TExtDataAssociation.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataAssociation.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

constructor TExtDataAssociation.Create(Config : TExtObject = nil); begin
  if Config = nil then CreateVar(JSClassName + '({});') else
  CreateVar(JSClassName + '(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

function TExtDataAssociation.GetReader : TExtFunction; begin
  JSCode(JSName + '.getReader();', 'TExtDataAssociation');
  Result := Self;
end;

destructor TExtDataAssociation.Destroy; begin
  try
    FReader.Free;
  except end;
  inherited;
end;

procedure TExtWindowWindow.SetFX(Value : Integer); begin
  FX := Value;
  JSCode('x:' + VarToJSON([Value]));
end;

procedure TExtWindowWindow.SetFY(Value : Integer); begin
  FY := Value;
  JSCode('y:' + VarToJSON([Value]));
end;

procedure TExtWindowWindow.SetFModal(Value : Boolean); begin
  FModal := Value;
  JSCode('modal:' + VarToJSON([Value]));
end;

procedure TExtWindowWindow.SetFAnimateTarget(Value : String); begin
  FAnimateTarget := Value;
  JSCode('animateTarget:' + VarToJSON([Value]));
end;

procedure TExtWindowWindow.SetFAnimateTargetTExtElement(Value : TExtElement); begin
  FAnimateTargetTExtElement := Value;
  Value.DeleteFromGarbage;
  JSCode('animateTarget:' + VarToJSON([Value, false]));
end;

procedure TExtWindowWindow.SetFDefaultFocus(Value : String); begin
  FDefaultFocus := Value;
  JSCode('defaultFocus:' + VarToJSON([Value]));
end;

procedure TExtWindowWindow.SetFDefaultFocusInteger(Value : Integer); begin
  FDefaultFocusInteger := Value;
  JSCode('defaultFocus:' + VarToJSON([Value]));
end;

procedure TExtWindowWindow.SetFDefaultFocusTExtComponent(Value : TExtComponent); begin
  FDefaultFocusTExtComponent := Value;
  Value.DeleteFromGarbage;
  JSCode('defaultFocus:' + VarToJSON([Value, false]));
end;

procedure TExtWindowWindow.SetFOnEsc(Value : TExtFunction); begin
  FOnEsc := Value;
  JSCode('onEsc:' + VarToJSON([Value, true]));
end;

procedure TExtWindowWindow.SetFCollapsed(Value : Boolean); begin
  FCollapsed := Value;
  JSCode('collapsed:' + VarToJSON([Value]));
end;

procedure TExtWindowWindow.SetFMaximized(Value : Boolean); begin
  FMaximized := Value;
  JSCode('maximized:' + VarToJSON([Value]));
end;

procedure TExtWindowWindow.SetFBaseCls(Value : String); begin
  FBaseCls := Value;
  JSCode('baseCls:' + VarToJSON([Value]));
end;

procedure TExtWindowWindow.SetFResizable(Value : Boolean); begin
  FResizable := Value;
  JSCode('resizable:' + VarToJSON([Value]));
end;

procedure TExtWindowWindow.SetFResizableTExtObject(Value : TExtObject); begin
  FResizableTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('resizable:' + VarToJSON([Value, false]));
end;

procedure TExtWindowWindow.SetFDraggable(Value : Boolean); begin
  FDraggable := Value;
  JSCode('draggable:' + VarToJSON([Value]));
end;

procedure TExtWindowWindow.SetFConstrain(Value : Boolean); begin
  FConstrain := Value;
  JSCode('constrain:' + VarToJSON([Value]));
end;

procedure TExtWindowWindow.SetFConstrainHeader(Value : Boolean); begin
  FConstrainHeader := Value;
  JSCode('constrainHeader:' + VarToJSON([Value]));
end;

procedure TExtWindowWindow.SetFPlain(Value : Boolean); begin
  FPlain := Value;
  JSCode('plain:' + VarToJSON([Value]));
end;

procedure TExtWindowWindow.SetFMinimizable(Value : Boolean); begin
  FMinimizable := Value;
  JSCode('minimizable:' + VarToJSON([Value]));
end;

procedure TExtWindowWindow.SetFMaximizable(Value : Boolean); begin
  FMaximizable := Value;
  JSCode('maximizable:' + VarToJSON([Value]));
end;

procedure TExtWindowWindow.SetFExpandOnShow(Value : Boolean); begin
  FExpandOnShow := Value;
  JSCode('expandOnShow:' + VarToJSON([Value]));
end;

procedure TExtWindowWindow.SetFClosable(Value : Boolean); begin
  FClosable := Value;
  JSCode('closable:' + VarToJSON([Value]));
end;

procedure TExtWindowWindow.SetFHidden(Value : Boolean); begin
  FHidden := Value;
  JSCode('hidden:' + VarToJSON([Value]));
end;

procedure TExtWindowWindow.SetFFloating(Value : Boolean); begin
  FFloating := Value;
  JSCode('floating:' + VarToJSON([Value]));
end;

procedure TExtWindowWindow.SetFAutoWidth(Value : Boolean); begin
  FAutoWidth := Value;
  JSCode('autoWidth:' + VarToJSON([Value]));
end;

function TExtWindowWindow.JSClassName : string; begin
  Result := 'Ext-window-Window';
end;

procedure TExtWindowWindow.InitDefaults; begin
  inherited;
  FAnimateTargetTExtElement := TExtElement.CreateInternal(Self, 'animateTarget');
  FDefaultFocusTExtComponent := TExtComponent.CreateInternal(Self, 'defaultFocus');
  FResizableTExtObject := TExtObject.CreateInternal(Self, 'resizable');
end;

{$IFDEF FPC}constructor TExtWindowWindow.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtWindowWindow.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

destructor TExtWindowWindow.Destroy; begin
  try
    FAnimateTargetTExtElement.Free;
    FDefaultFocusTExtComponent.Free;
    FResizableTExtObject.Free;
  except end;
  inherited;
end;

procedure TExtGridRowNumberer.SetFText(Value : String); begin
  FText := Value;
  JSCode('text:' + VarToJSON([Value]));
end;

procedure TExtGridRowNumberer.SetFWidth(Value : Integer); begin
  FWidth := Value;
  JSCode('width:' + VarToJSON([Value]));
end;

procedure TExtGridRowNumberer.SetFSortable(Value : Boolean); begin
  FSortable := Value;
  JSCode('sortable:' + VarToJSON([Value]));
end;

function TExtGridRowNumberer.JSClassName : string; begin
  Result := 'Ext-grid-RowNumberer';
end;

{$IFDEF FPC}constructor TExtGridRowNumberer.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtGridFeatureFeature.JSClassName : string; begin
  Result := 'Ext-grid-feature-Feature';
end;

{$IFDEF FPC}constructor TExtGridFeatureFeature.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtGridFeatureFeature.GetFireEventArgs : TExtFunction; begin
  JSCode(JSName + '.getFireEventArgs();', 'TExtGridFeatureFeature');
  Result := Self;
end;

function TExtGridFeatureFeature.AttachEvents : TExtFunction; begin
  JSCode(JSName + '.attachEvents();', 'TExtGridFeatureFeature');
  Result := Self;
end;

function TExtGridFeatureFeature.MutateMetaRowTpl : TExtFunction; begin
  JSCode(JSName + '.mutateMetaRowTpl();', 'TExtGridFeatureFeature');
  Result := Self;
end;

function TExtGridFeatureFeature.GetMetaRowTplFragments : TExtFunction; begin
  JSCode(JSName + '.getMetaRowTplFragments();', 'TExtGridFeatureFeature');
  Result := Self;
end;

function TExtGridFeatureFeature.GetAdditionalData(Data : TExtObject; Idx : Integer; RecordJS : TExtDataModel; Orig : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getAdditionalData(' + VarToJSON([Data, false, Idx, RecordJS, false, Orig, false]) + ');', 'TExtGridFeatureFeature');
  Result := Self;
end;

function TExtGridFeatureFeature.Enable : TExtFunction; begin
  JSCode(JSName + '.enable();', 'TExtGridFeatureFeature');
  Result := Self;
end;

function TExtGridFeatureFeature.Disable : TExtFunction; begin
  JSCode(JSName + '.disable();', 'TExtGridFeatureFeature');
  Result := Self;
end;

procedure TExtDirectManagerSingleton.SetFOnEvent(Value : TExtDirectManagerSingletonOnEvent); begin
  if Assigned(FOnEvent) then
    JSCode(JSName+'.events ["event"].listeners=[];');
  if Assigned(Value) then
    On('event', Ajax('event', ['E', '%0.nm','Provider', '%1.nm'], true));
  FOnEvent := Value;
end;

procedure TExtDirectManagerSingleton.SetFOnException(Value : TExtDirectManagerSingletonOnException); begin
  if Assigned(FOnException) then
    JSCode(JSName+'.events ["exception"].listeners=[];');
  if Assigned(Value) then
    On('exception', Ajax('exception', ['E', '%0.nm'], true));
  FOnException := Value;
end;

function TExtDirectManagerSingleton.JSClassName : string; begin
  Result := 'Ext-direct-ManagerSingleton';
end;

{$IFDEF FPC}constructor TExtDirectManagerSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDirectManagerSingleton.AddProvider(Provider : TExtDirectProvider) : TExtFunction; begin
  JSCode(JSName + '.addProvider(' + VarToJSON([Provider, false]) + ');', 'TExtDirectManagerSingleton');
  Result := Self;
end;

function TExtDirectManagerSingleton.AddProvider(Provider : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.AddProvider(' + VarToJSON(Provider) + ');', 'TExtDirectManagerSingleton');
  Result := Self;
end;

function TExtDirectManagerSingleton.GetProvider(Id : String) : TExtFunction; begin
  JSCode(JSName + '.getProvider(' + VarToJSON([Id]) + ');', 'TExtDirectManagerSingleton');
  Result := Self;
end;

function TExtDirectManagerSingleton.GetProvider(Id : TExtDirectProvider) : TExtFunction; begin
  JSCode(JSName + '.GetProvider(' + VarToJSON([Id, false]) + ');', 'TExtDirectManagerSingleton');
  Result := Self;
end;

function TExtDirectManagerSingleton.RemoveProvider(Provider : String) : TExtFunction; begin
  JSCode(JSName + '.removeProvider(' + VarToJSON([Provider]) + ');', 'TExtDirectManagerSingleton');
  Result := Self;
end;

function TExtDirectManagerSingleton.RemoveProvider(Provider : TExtDirectProvider) : TExtFunction; begin
  JSCode(JSName + '.RemoveProvider(' + VarToJSON([Provider, false]) + ');', 'TExtDirectManagerSingleton');
  Result := Self;
end;

procedure TExtDirectManagerSingleton.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'event') and Assigned(FOnEvent) then
    FOnEvent(TExtDirectEvent(ParamAsObject('E')), TExtDirectProvider(ParamAsObject('Provider')))
  else if (AEvtName = 'exception') and Assigned(FOnException) then
    FOnException(TExtDirectEvent(ParamAsObject('E')));
end;

function TExtChartNavigation.JSClassName : string; begin
  Result := 'Ext-chart-Navigation';
end;

{$IFDEF FPC}constructor TExtChartNavigation.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtChartNavigation.SetZoom : TExtFunction; begin
  JSCode(JSName + '.setZoom();', 'TExtChartNavigation');
  Result := Self;
end;

function TExtChartNavigation.RestoreZoom : TExtFunction; begin
  JSCode(JSName + '.restoreZoom();', 'TExtChartNavigation');
  Result := Self;
end;

procedure TExtFormFieldBase.SetFFieldSubTpl(Value : TExtXTemplate); begin
  FFieldSubTpl := Value;
  Value.DeleteFromGarbage;
  JSCode('fieldSubTpl:' + VarToJSON([Value, false]));
end;

procedure TExtFormFieldBase.SetFName(Value : String); begin
  FName := Value;
  JSCode('name:' + VarToJSON([Value]));
end;

procedure TExtFormFieldBase.SetFInputType(Value : String); begin
  FInputType := Value;
  JSCode('inputType:' + VarToJSON([Value]));
end;

procedure TExtFormFieldBase.SetFTabIndex(Value : Integer); begin
  FTabIndex := Value;
  JSCode('tabIndex:' + VarToJSON([Value]));
end;

procedure TExtFormFieldBase.SetFInvalidText(Value : String); begin
  FInvalidText := Value;
  JSCode('invalidText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldBase.SetFFieldCls(Value : String); begin
  FFieldCls := Value;
  JSCode('fieldCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldBase.SetFFieldStyle(Value : String); begin
  FFieldStyle := Value;
  if not ConfigAvailable(JSName) then
    SetFieldStyle(Value)
  else
    JSCode('fieldStyle:' + VarToJSON([Value]));
end;

procedure TExtFormFieldBase.SetFFocusCls(Value : String); begin
  FFocusCls := Value;
  JSCode('focusCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldBase.SetFDirtyCls(Value : String); begin
  FDirtyCls := Value;
  JSCode('dirtyCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldBase.SetFCheckChangeEvents(Value : TExtObjectList); begin
  FCheckChangeEvents := Value;
  Value.DeleteFromGarbage;
  JSCode('checkChangeEvents:' + VarToJSON([Value, false]));
end;

procedure TExtFormFieldBase.SetFCheckChangeBuffer(Value : Integer); begin
  FCheckChangeBuffer := Value;
  JSCode('checkChangeBuffer:' + VarToJSON([Value]));
end;

procedure TExtFormFieldBase.SetFReadOnly(Value : Boolean); begin
  FReadOnly := Value;
  if not ConfigAvailable(JSName) then
    SetReadOnly(Value)
  else
    JSCode('readOnly:' + VarToJSON([Value]));
end;

procedure TExtFormFieldBase.SetFReadOnlyCls(Value : String); begin
  FReadOnlyCls := Value;
  JSCode('readOnlyCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldBase.SetFInputId(Value : String); begin
  FInputId := Value;
  JSCode('inputId:' + VarToJSON([Value]));
end;

procedure TExtFormFieldBase.SetFValidateOnBlur(Value : Boolean); begin
  FValidateOnBlur := Value;
  JSCode('validateOnBlur:' + VarToJSON([Value]));
end;

procedure TExtFormFieldBase.SetFOnFocus(Value : TExtFormFieldBaseOnFocus); begin
  if Assigned(FOnFocus) then
    JSCode(JSName+'.events ["focus"].listeners=[];');
  if Assigned(Value) then
    On('focus', Ajax('focus', ['This', '%0.nm','This_', '%1.nm','This__', '%2.nm','E', '%3.nm'], true));
  FOnFocus := Value;
end;

function TExtFormFieldBase.JSClassName : string; begin
  Result := 'Ext-form-field-Base';
end;

procedure TExtFormFieldBase.InitDefaults; begin
  inherited;
  FFieldSubTpl := TExtXTemplate.CreateInternal(Self, 'fieldSubTpl');
  FCheckChangeEvents := TExtObjectList.Create(Self, 'checkChangeEvents');
end;

{$IFDEF FPC}constructor TExtFormFieldBase.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtFormFieldBase.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtFormFieldBase.GetInputId : TExtFunction; begin
  JSCode(JSName + '.getInputId();', 'TExtFormFieldBase');
  Result := Self;
end;

function TExtFormFieldBase.GetSubTplData : TExtFunction; begin
  JSCode(JSName + '.getSubTplData();', 'TExtFormFieldBase');
  Result := Self;
end;

function TExtFormFieldBase.GetSubTplMarkup : TExtFunction; begin
  JSCode(JSName + '.getSubTplMarkup();', 'TExtFormFieldBase');
  Result := Self;
end;

function TExtFormFieldBase.SetFieldStyle(Style : String) : TExtFunction; begin
  JSCode(JSName + '.setFieldStyle(' + VarToJSON([Style]) + ');', 'TExtFormFieldBase');
  Result := Self;
end;

function TExtFormFieldBase.SetFieldStyle(Style : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetFieldStyle(' + VarToJSON([Style, false]) + ');', 'TExtFormFieldBase');
  Result := Self;
end;

function TExtFormFieldBase.SetFieldStyle(Style : TExtFunction) : TExtFunction; begin
  JSCode(JSName + '.SetFieldStyle(' + VarToJSON([Style, true]) + ');', 'TExtFormFieldBase');
  Result := Self;
end;

function TExtFormFieldBase.GetSubmitValue : TExtFunction; begin
  JSCode(JSName + '.getSubmitValue();', 'TExtFormFieldBase');
  Result := Self;
end;

function TExtFormFieldBase.GetRawValue : TExtFunction; begin
  JSCode(JSName + '.getRawValue();', 'TExtFormFieldBase');
  Result := Self;
end;

function TExtFormFieldBase.SetRawValue(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setRawValue(' + VarToJSON([Value, false]) + ');', 'TExtFormFieldBase');
  Result := Self;
end;

function TExtFormFieldBase.ValueToRaw(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.valueToRaw(' + VarToJSON([Value, false]) + ');', 'TExtFormFieldBase');
  Result := Self;
end;

function TExtFormFieldBase.RawToValue(RawValue : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.rawToValue(' + VarToJSON([RawValue, false]) + ');', 'TExtFormFieldBase');
  Result := Self;
end;

function TExtFormFieldBase.ProcessRawValue(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.processRawValue(' + VarToJSON([Value, false]) + ');', 'TExtFormFieldBase');
  Result := Self;
end;

function TExtFormFieldBase.GetValue : TExtFunction; begin
  JSCode(JSName + '.getValue();', 'TExtFormFieldBase');
  Result := Self;
end;

function TExtFormFieldBase.SetValue(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setValue(' + VarToJSON([Value, false]) + ');', 'TExtFormFieldBase');
  Result := Self;
end;

function TExtFormFieldBase.SetReadOnly(ReadOnly : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setReadOnly(' + VarToJSON([ReadOnly]) + ');', 'TExtFormFieldBase');
  Result := Self;
end;

function TExtFormFieldBase.IsValid : TExtFunction; begin
  JSCode(JSName + '.isValid();', 'TExtFormFieldBase');
  Result := Self;
end;

function TExtFormFieldBase.ValidateValue(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.validateValue(' + VarToJSON([Value, false]) + ');', 'TExtFormFieldBase');
  Result := Self;
end;

function TExtFormFieldBase.MarkInvalid(Errors : String) : TExtFunction; begin
  JSCode(JSName + '.markInvalid(' + VarToJSON([Errors]) + ');', 'TExtFormFieldBase');
  Result := Self;
end;

function TExtFormFieldBase.MarkInvalid(Errors : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.MarkInvalid(' + VarToJSON(Errors) + ');', 'TExtFormFieldBase');
  Result := Self;
end;

function TExtFormFieldBase.ClearInvalid : TExtFunction; begin
  JSCode(JSName + '.clearInvalid();', 'TExtFormFieldBase');
  Result := Self;
end;

destructor TExtFormFieldBase.Destroy; begin
  try
    FFieldSubTpl.Free;
    FCheckChangeEvents.Free;
  except end;
  inherited;
end;

procedure TExtFormFieldBase.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'focus') and Assigned(FOnFocus) then
    FOnFocus(TExtFormFieldBase(ParamAsObject('This')), TExtFormFieldBase(ParamAsObject('This_')), TExtFormFieldBase(ParamAsObject('This__')), ExtEventObject);
end;

procedure TExtFormFieldSet.SetFTitle(Value : String); begin
  FTitle := Value;
  if not ConfigAvailable(JSName) then
    SetTitle(Value)
  else
    JSCode('title:' + VarToJSON([Value]));
end;

procedure TExtFormFieldSet.SetFCheckboxToggle(Value : Boolean); begin
  FCheckboxToggle := Value;
  JSCode('checkboxToggle:' + VarToJSON([Value]));
end;

procedure TExtFormFieldSet.SetFCheckboxName(Value : String); begin
  FCheckboxName := Value;
  JSCode('checkboxName:' + VarToJSON([Value]));
end;

procedure TExtFormFieldSet.SetFCollapsible(Value : Boolean); begin
  FCollapsible := Value;
  JSCode('collapsible:' + VarToJSON([Value]));
end;

procedure TExtFormFieldSet.SetFCollapsed(Value : Boolean); begin
  FCollapsed := Value;
  JSCode('collapsed:' + VarToJSON([Value]));
end;

procedure TExtFormFieldSet.SetFBaseCls(Value : String); begin
  FBaseCls := Value;
  JSCode('baseCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldSet.SetFLayout(Value : String); begin
  FLayout := Value;
  JSCode('layout:' + VarToJSON([Value]));
end;

function TExtFormFieldSet.JSClassName : string; begin
  Result := 'Ext-form-FieldSet';
end;

{$IFDEF FPC}constructor TExtFormFieldSet.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtFormFieldSet.SetTitle(Title : String) : TExtFunction; begin
  JSCode(JSName + '.setTitle(' + VarToJSON([Title]) + ');', 'TExtFormFieldSet');
  Result := Self;
end;

function TExtFormFieldSet.Expand : TExtFunction; begin
  JSCode(JSName + '.expand();', 'TExtFormFieldSet');
  Result := Self;
end;

function TExtFormFieldSet.Collapse : TExtFunction; begin
  JSCode(JSName + '.collapse();', 'TExtFormFieldSet');
  Result := Self;
end;

function TExtFormFieldSet.Toggle : TExtFunction; begin
  JSCode(JSName + '.toggle();', 'TExtFormFieldSet');
  Result := Self;
end;

procedure TExtDataWriterJson.SetFRoot(Value : String); begin
  FRoot := Value;
  JSCode('root:' + VarToJSON([Value]));
end;

procedure TExtDataWriterJson.SetFEncode(Value : Boolean); begin
  FEncode := Value;
  JSCode('encode:' + VarToJSON([Value]));
end;

procedure TExtDataWriterJson.SetFAllowSingle(Value : Boolean); begin
  FAllowSingle := Value;
  JSCode('allowSingle:' + VarToJSON([Value]));
end;

function TExtDataWriterJson.JSClassName : string; begin
  Result := 'Ext-data-writer-Json';
end;

{$IFDEF FPC}constructor TExtDataWriterJson.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtZIndexManager.JSClassName : string; begin
  Result := 'Ext-ZIndexManager';
end;

{$IFDEF FPC}constructor TExtZIndexManager.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtZIndexManager.Register(Comp : TExtComponent) : TExtFunction; begin
  JSCode(JSName + '.register(' + VarToJSON([Comp, false]) + ');', 'TExtZIndexManager');
  Result := Self;
end;

function TExtZIndexManager.Unregister(Comp : TExtComponent) : TExtFunction; begin
  JSCode(JSName + '.unregister(' + VarToJSON([Comp, false]) + ');', 'TExtZIndexManager');
  Result := Self;
end;

function TExtZIndexManager.Get(Id : String) : TExtFunction; begin
  JSCode(JSName + '.get(' + VarToJSON([Id]) + ');', 'TExtZIndexManager');
  Result := Self;
end;

function TExtZIndexManager.Get(Id : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.Get(' + VarToJSON([Id, false]) + ');', 'TExtZIndexManager');
  Result := Self;
end;

function TExtZIndexManager.BringToFront(Comp : String) : TExtFunction; begin
  JSCode(JSName + '.bringToFront(' + VarToJSON([Comp]) + ');', 'TExtZIndexManager');
  Result := Self;
end;

function TExtZIndexManager.BringToFront(Comp : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.BringToFront(' + VarToJSON([Comp, false]) + ');', 'TExtZIndexManager');
  Result := Self;
end;

function TExtZIndexManager.SendToBack(Comp : String) : TExtFunction; begin
  JSCode(JSName + '.sendToBack(' + VarToJSON([Comp]) + ');', 'TExtZIndexManager');
  Result := Self;
end;

function TExtZIndexManager.SendToBack(Comp : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SendToBack(' + VarToJSON([Comp, false]) + ');', 'TExtZIndexManager');
  Result := Self;
end;

function TExtZIndexManager.HideAll : TExtFunction; begin
  JSCode(JSName + '.hideAll();', 'TExtZIndexManager');
  Result := Self;
end;

function TExtZIndexManager.GetActive : TExtFunction; begin
  JSCode(JSName + '.getActive();', 'TExtZIndexManager');
  Result := Self;
end;

function TExtZIndexManager.GetBy(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.getBy(' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtZIndexManager');
  Result := Self;
end;

function TExtZIndexManager.Each(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.each(' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtZIndexManager');
  Result := Self;
end;

function TExtZIndexManager.EachBottomUp(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.eachBottomUp(' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtZIndexManager');
  Result := Self;
end;

function TExtZIndexManager.EachTopDown(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.eachTopDown(' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtZIndexManager');
  Result := Self;
end;

procedure TExtGridPluginRowEditing.SetFAutoCancel(Value : Boolean); begin
  FAutoCancel := Value;
  JSCode('autoCancel:' + VarToJSON([Value]));
end;

procedure TExtGridPluginRowEditing.SetFClicksToMoveEditor(Value : Integer); begin
  FClicksToMoveEditor := Value;
  JSCode('clicksToMoveEditor:' + VarToJSON([Value]));
end;

procedure TExtGridPluginRowEditing.SetFErrorSummary(Value : Boolean); begin
  FErrorSummary := Value;
  JSCode('errorSummary:' + VarToJSON([Value]));
end;

procedure TExtGridPluginRowEditing.SetFOnBeforeedit(Value : TExtGridPluginRowEditingOnBeforeedit); begin
  if Assigned(FOnBeforeedit) then
    JSCode(JSName+'.events ["beforeedit"].listeners=[];');
  if Assigned(Value) then
    On('beforeedit', Ajax('beforeedit', ['Editor', '%0.nm','E', '%1.nm'], true));
  FOnBeforeedit := Value;
end;

procedure TExtGridPluginRowEditing.SetFOnCanceledit(Value : TExtGridPluginRowEditingOnCanceledit); begin
  if Assigned(FOnCanceledit) then
    JSCode(JSName+'.events ["canceledit"].listeners=[];');
  if Assigned(Value) then
    On('canceledit', Ajax('canceledit', ['Grid', '%0.nm'], true));
  FOnCanceledit := Value;
end;

procedure TExtGridPluginRowEditing.SetFOnEdit(Value : TExtGridPluginRowEditingOnEdit); begin
  if Assigned(FOnEdit) then
    JSCode(JSName+'.events ["edit"].listeners=[];');
  if Assigned(Value) then
    On('edit', Ajax('edit', ['Editor', '%0.nm','E', '%1.nm'], true));
  FOnEdit := Value;
end;

procedure TExtGridPluginRowEditing.SetFOnValidateedit(Value : TExtGridPluginRowEditingOnValidateedit); begin
  if Assigned(FOnValidateedit) then
    JSCode(JSName+'.events ["validateedit"].listeners=[];');
  if Assigned(Value) then
    On('validateedit', Ajax('validateedit', ['Editor', '%0.nm','E', '%1.nm'], true));
  FOnValidateedit := Value;
end;

function TExtGridPluginRowEditing.JSClassName : string; begin
  Result := 'Ext-grid-plugin-RowEditing';
end;

{$IFDEF FPC}constructor TExtGridPluginRowEditing.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtGridPluginRowEditing.StartEdit(RecordJS : TExtDataModel; ColumnHeader : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.startEdit(' + VarToJSON([RecordJS, false, ColumnHeader, false]) + ');', 'TExtGridPluginRowEditing');
  Result := Self;
end;

procedure TExtGridPluginRowEditing.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforeedit') and Assigned(FOnBeforeedit) then
    FOnBeforeedit(TExtGridPluginEditing(ParamAsObject('Editor')), TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'canceledit') and Assigned(FOnCanceledit) then
    FOnCanceledit(TExtObject(ParamAsObject('Grid')))
  else if (AEvtName = 'edit') and Assigned(FOnEdit) then
    FOnEdit(TExtGridPluginEditing(ParamAsObject('Editor')), TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'validateedit') and Assigned(FOnValidateedit) then
    FOnValidateedit(TExtGridPluginEditing(ParamAsObject('Editor')), TExtObject(ParamAsObject('E')));
end;

procedure TExtPanelPanel.SetFCollapsedCls(Value : String); begin
  FCollapsedCls := Value;
  JSCode('collapsedCls:' + VarToJSON([Value]));
end;

procedure TExtPanelPanel.SetFAnimCollapse(Value : Boolean); begin
  FAnimCollapse := Value;
  JSCode('animCollapse:' + VarToJSON([Value]));
end;

procedure TExtPanelPanel.SetFMinButtonWidth(Value : Integer); begin
  FMinButtonWidth := Value;
  JSCode('minButtonWidth:' + VarToJSON([Value]));
end;

procedure TExtPanelPanel.SetFCollapsed(Value : Boolean); begin
  FCollapsed := Value;
  JSCode('collapsed:' + VarToJSON([Value]));
end;

procedure TExtPanelPanel.SetFCollapseFirst(Value : Boolean); begin
  FCollapseFirst := Value;
  JSCode('collapseFirst:' + VarToJSON([Value]));
end;

procedure TExtPanelPanel.SetFHideCollapseTool(Value : Boolean); begin
  FHideCollapseTool := Value;
  JSCode('hideCollapseTool:' + VarToJSON([Value]));
end;

procedure TExtPanelPanel.SetFTitleCollapse(Value : Boolean); begin
  FTitleCollapse := Value;
  JSCode('titleCollapse:' + VarToJSON([Value]));
end;

procedure TExtPanelPanel.SetFCollapseMode(Value : String); begin
  FCollapseMode := Value;
  JSCode('collapseMode:' + VarToJSON([Value]));
end;

procedure TExtPanelPanel.SetFPlaceholder(Value : TExtComponent); begin
  FPlaceholder := Value;
  Value.DeleteFromGarbage;
  JSCode('placeholder:' + VarToJSON([Value, false]));
end;

procedure TExtPanelPanel.SetFPlaceholderTExtObject(Value : TExtObject); begin
  FPlaceholderTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('placeholder:' + VarToJSON([Value, false]));
end;

procedure TExtPanelPanel.SetFFloatable(Value : Boolean); begin
  FFloatable := Value;
  JSCode('floatable:' + VarToJSON([Value]));
end;

procedure TExtPanelPanel.SetFOverlapHeader(Value : Boolean); begin
  FOverlapHeader := Value;
  JSCode('overlapHeader:' + VarToJSON([Value]));
end;

procedure TExtPanelPanel.SetFCollapsible(Value : Boolean); begin
  FCollapsible := Value;
  JSCode('collapsible:' + VarToJSON([Value]));
end;

procedure TExtPanelPanel.SetFCollapseDirection(Value : Boolean); begin
  FCollapseDirection := Value;
  JSCode('collapseDirection:' + VarToJSON([Value]));
end;

procedure TExtPanelPanel.SetFClosable(Value : Boolean); begin
  FClosable := Value;
  JSCode('closable:' + VarToJSON([Value]));
end;

procedure TExtPanelPanel.SetFCloseAction(Value : String); begin
  FCloseAction := Value;
  JSCode('closeAction:' + VarToJSON([Value]));
end;

procedure TExtPanelPanel.SetFDockedItems(Value : TExtObject); begin
  FDockedItems := Value;
  Value.DeleteFromGarbage;
  JSCode('dockedItems:' + VarToJSON([Value, false]));
end;

procedure TExtPanelPanel.SetFDockedItemsTExtObjectList(Value : TExtObjectList); begin
  FDockedItemsTExtObjectList := Value;
  Value.DeleteFromGarbage;
  JSCode('dockedItems:' + VarToJSON([Value, false]));
end;

procedure TExtPanelPanel.SetFPreventHeader(Value : Boolean); begin
  FPreventHeader := Value;
  JSCode('preventHeader:' + VarToJSON([Value]));
end;

procedure TExtPanelPanel.SetFHeaderPosition(Value : String); begin
  FHeaderPosition := Value;
  JSCode('headerPosition:' + VarToJSON([Value]));
end;

procedure TExtPanelPanel.SetFFrame(Value : Boolean); begin
  FFrame := Value;
  JSCode('frame:' + VarToJSON([Value]));
end;

procedure TExtPanelPanel.SetFFrameHeader(Value : Boolean); begin
  FFrameHeader := Value;
  JSCode('frameHeader:' + VarToJSON([Value]));
end;

procedure TExtPanelPanel.SetFTools(Value : TExtObjectList); begin
  FTools := Value;
  Value.DeleteFromGarbage;
  JSCode('tools:' + VarToJSON([Value, false]));
end;

procedure TExtPanelPanel.SetFToolsTExtObjectList(Value : TExtObjectList); begin
  FToolsTExtObjectList := Value;
  Value.DeleteFromGarbage;
  JSCode('tools:' + VarToJSON([Value, false]));
end;

procedure TExtPanelPanel.SetFTitle(Value : String); begin
  FTitle := Value;
  JSCode('title:' + VarToJSON([Value]));
end;

procedure TExtPanelPanel.SetFIconCls(Value : String); begin
  FIconCls := Value;
  JSCode('iconCls:' + VarToJSON([Value]));
end;

procedure TExtPanelPanel.SetFButtonAlign(Value : String); begin
  FButtonAlign := Value;
  JSCode('buttonAlign:' + VarToJSON([Value]));
end;

procedure TExtPanelPanel.SetFTbar(Value : TExtObject); begin
  FTbar := Value;
  Value.DeleteFromGarbage;
  JSCode('tbar:' + VarToJSON([Value, false]));
end;

procedure TExtPanelPanel.SetFTbarTExtObjectList(Value : TExtObjectList); begin
  FTbarTExtObjectList := Value;
  Value.DeleteFromGarbage;
  JSCode('tbar:' + VarToJSON([Value, false]));
end;

procedure TExtPanelPanel.SetFBbar(Value : TExtObject); begin
  FBbar := Value;
  Value.DeleteFromGarbage;
  JSCode('bbar:' + VarToJSON([Value, false]));
end;

procedure TExtPanelPanel.SetFBbarTExtObjectList(Value : TExtObjectList); begin
  FBbarTExtObjectList := Value;
  Value.DeleteFromGarbage;
  JSCode('bbar:' + VarToJSON([Value, false]));
end;

procedure TExtPanelPanel.SetFButtons(Value : TExtObject); begin
  FButtons := Value;
  Value.DeleteFromGarbage;
  JSCode('buttons:' + VarToJSON([Value, false]));
end;

procedure TExtPanelPanel.SetFButtonsTExtObjectList(Value : TExtObjectList); begin
  FButtonsTExtObjectList := Value;
  Value.DeleteFromGarbage;
  JSCode('buttons:' + VarToJSON([Value, false]));
end;

procedure TExtPanelPanel.SetFFbar(Value : TExtObject); begin
  FFbar := Value;
  Value.DeleteFromGarbage;
  JSCode('fbar:' + VarToJSON([Value, false]));
end;

procedure TExtPanelPanel.SetFFbarTExtObjectList(Value : TExtObjectList); begin
  FFbarTExtObjectList := Value;
  Value.DeleteFromGarbage;
  JSCode('fbar:' + VarToJSON([Value, false]));
end;

procedure TExtPanelPanel.SetFLbar(Value : TExtObject); begin
  FLbar := Value;
  Value.DeleteFromGarbage;
  JSCode('lbar:' + VarToJSON([Value, false]));
end;

procedure TExtPanelPanel.SetFLbarTExtObjectList(Value : TExtObjectList); begin
  FLbarTExtObjectList := Value;
  Value.DeleteFromGarbage;
  JSCode('lbar:' + VarToJSON([Value, false]));
end;

procedure TExtPanelPanel.SetFRbar(Value : TExtObject); begin
  FRbar := Value;
  Value.DeleteFromGarbage;
  JSCode('rbar:' + VarToJSON([Value, false]));
end;

procedure TExtPanelPanel.SetFRbarTExtObjectList(Value : TExtObjectList); begin
  FRbarTExtObjectList := Value;
  Value.DeleteFromGarbage;
  JSCode('rbar:' + VarToJSON([Value, false]));
end;

function TExtPanelPanel.JSClassName : string; begin
  Result := 'Ext-panel-Panel';
end;

procedure TExtPanelPanel.InitDefaults; begin
  inherited;
  FPlaceholder := TExtComponent.CreateInternal(Self, 'placeholder');
  FPlaceholderTExtObject := TExtObject.CreateInternal(Self, 'placeholder');
  FDockedItems := TExtObject.CreateInternal(Self, 'dockedItems');
  FDockedItemsTExtObjectList := TExtObjectList.Create(Self, 'dockedItems');
  FTools := TExtObjectList.Create(Self, 'tools');
  FToolsTExtObjectList := TExtObjectList.Create(Self, 'tools');
  FTbar := TExtObject.CreateInternal(Self, 'tbar');
  FTbarTExtObjectList := TExtObjectList.Create(Self, 'tbar');
  FBbar := TExtObject.CreateInternal(Self, 'bbar');
  FBbarTExtObjectList := TExtObjectList.Create(Self, 'bbar');
  FButtons := TExtObject.CreateInternal(Self, 'buttons');
  FButtonsTExtObjectList := TExtObjectList.Create(Self, 'buttons');
  FFbar := TExtObject.CreateInternal(Self, 'fbar');
  FFbarTExtObjectList := TExtObjectList.Create(Self, 'fbar');
  FLbar := TExtObject.CreateInternal(Self, 'lbar');
  FLbarTExtObjectList := TExtObjectList.Create(Self, 'lbar');
  FRbar := TExtObject.CreateInternal(Self, 'rbar');
  FRbarTExtObjectList := TExtObjectList.Create(Self, 'rbar');
end;

{$IFDEF FPC}constructor TExtPanelPanel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtPanelPanel.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtPanelPanel.Close : TExtFunction; begin
  JSCode(JSName + '.close();', 'TExtPanelPanel');
  Result := Self;
end;

function TExtPanelPanel.Collapse(Direction : String; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.collapse(' + VarToJSON([Direction, Animate]) + ');', 'TExtPanelPanel');
  Result := Self;
end;

function TExtPanelPanel.Expand(Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.expand(' + VarToJSON([Animate]) + ');', 'TExtPanelPanel');
  Result := Self;
end;

function TExtPanelPanel.ToggleCollapse : TExtFunction; begin
  JSCode(JSName + '.toggleCollapse();', 'TExtPanelPanel');
  Result := Self;
end;

destructor TExtPanelPanel.Destroy; begin
  try
    FPlaceholder.Free;
    FPlaceholderTExtObject.Free;
    FDockedItems.Free;
    FDockedItemsTExtObjectList.Free;
    FTools.Free;
    FToolsTExtObjectList.Free;
    FTbar.Free;
    FTbarTExtObjectList.Free;
    FBbar.Free;
    FBbarTExtObjectList.Free;
    FButtons.Free;
    FButtonsTExtObjectList.Free;
    FFbar.Free;
    FFbarTExtObjectList.Free;
    FLbar.Free;
    FLbarTExtObjectList.Free;
    FRbar.Free;
    FRbarTExtObjectList.Free;
  except end;
  inherited;
end;

procedure TExtDataReaderXml.SetFRecordJS(Value : String); begin
  FRecordJS := Value;
  JSCode('recordJS:' + VarToJSON([Value]));
end;

function TExtDataReaderXml.JSClassName : string; begin
  Result := 'Ext-data-reader-Xml';
end;

{$IFDEF FPC}constructor TExtDataReaderXml.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataReaderXml.GetData(Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getData(' + VarToJSON([Data, false]) + ');', 'TExtDataReaderXml');
  Result := Self;
end;

function TExtDataReaderXml.ReadRecords(Doc : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.readRecords(' + VarToJSON([Doc, false]) + ');', 'TExtDataReaderXml');
  Result := Self;
end;

procedure TExtDataProxyJsonP.SetFCallbackKey(Value : String); begin
  FCallbackKey := Value;
  JSCode('callbackKey:' + VarToJSON([Value]));
end;

procedure TExtDataProxyJsonP.SetFRecordParam(Value : String); begin
  FRecordParam := Value;
  JSCode('recordParam:' + VarToJSON([Value]));
end;

procedure TExtDataProxyJsonP.SetFAutoAppendParams(Value : Boolean); begin
  FAutoAppendParams := Value;
  JSCode('autoAppendParams:' + VarToJSON([Value]));
end;

procedure TExtDataProxyJsonP.SetFOnException(Value : TExtDataProxyJsonPOnException); begin
  if Assigned(FOnException) then
    JSCode(JSName+'.events ["exception"].listeners=[];');
  if Assigned(Value) then
    On('exception', Ajax('exception', ['This', '%0.nm','Request', '%1.nm','Operation', '%2.nm'], true));
  FOnException := Value;
end;

function TExtDataProxyJsonP.JSClassName : string; begin
  Result := 'Ext-data-proxy-JsonP';
end;

{$IFDEF FPC}constructor TExtDataProxyJsonP.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataProxyJsonP.BuildUrl(Request : TExtDataRequest) : TExtFunction; begin
  JSCode(JSName + '.buildUrl(' + VarToJSON([Request, false]) + ');', 'TExtDataProxyJsonP');
  Result := Self;
end;

function TExtDataProxyJsonP.Abort : TExtFunction; begin
  JSCode(JSName + '.abort();', 'TExtDataProxyJsonP');
  Result := Self;
end;

function TExtDataProxyJsonP.EncodeRecords(Records : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.encodeRecords(' + VarToJSON(Records) + ');', 'TExtDataProxyJsonP');
  Result := Self;
end;

procedure TExtDataProxyJsonP.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'exception') and Assigned(FOnException) then
    FOnException(TExtDataProxyJsonP(ParamAsObject('This')), TExtDataRequest(ParamAsObject('Request')), TExtDataOperation(ParamAsObject('Operation')));
end;

function TExtStringSingleton.JSClassName : string; begin
  Result := 'Ext-StringSingleton';
end;

{$IFDEF FPC}constructor TExtStringSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtStringSingleton.HtmlEncode(Value : String) : TExtFunction; begin
  JSCode(JSName + '.htmlEncode(' + VarToJSON([Value]) + ');', 'TExtStringSingleton');
  Result := Self;
end;

function TExtStringSingleton.HtmlDecode(Value : String) : TExtFunction; begin
  JSCode(JSName + '.htmlDecode(' + VarToJSON([Value]) + ');', 'TExtStringSingleton');
  Result := Self;
end;

function TExtStringSingleton.UrlAppend(Url : String; StringJS : String) : TExtFunction; begin
  JSCode(JSName + '.urlAppend(' + VarToJSON([Url, StringJS]) + ');', 'TExtStringSingleton');
  Result := Self;
end;

function TExtStringSingleton.Trim(StringJS : String) : TExtFunction; begin
  JSCode(JSName + '.trim(' + VarToJSON([StringJS]) + ');', 'TExtStringSingleton');
  Result := Self;
end;

function TExtStringSingleton.Capitalize(StringJS : String) : TExtFunction; begin
  JSCode(JSName + '.capitalize(' + VarToJSON([StringJS]) + ');', 'TExtStringSingleton');
  Result := Self;
end;

function TExtStringSingleton.Ellipsis(Value : String; Length : Integer; Word : Boolean) : TExtFunction; begin
  JSCode(JSName + '.ellipsis(' + VarToJSON([Value, Length, Word]) + ');', 'TExtStringSingleton');
  Result := Self;
end;

function TExtStringSingleton.EscapeRegex(StringJS : String) : TExtFunction; begin
  JSCode(JSName + '.escapeRegex(' + VarToJSON([StringJS]) + ');', 'TExtStringSingleton');
  Result := Self;
end;

function TExtStringSingleton.Escape(StringJS : String) : TExtFunction; begin
  JSCode(JSName + '.escape(' + VarToJSON([StringJS]) + ');', 'TExtStringSingleton');
  Result := Self;
end;

function TExtStringSingleton.Toggle(StringJS : String; Value : String; Other : String) : TExtFunction; begin
  JSCode(JSName + '.toggle(' + VarToJSON([StringJS, Value, Other]) + ');', 'TExtStringSingleton');
  Result := Self;
end;

function TExtStringSingleton.LeftPad(StringJS : String; Size : Integer; Character : String = '') : TExtFunction; begin
  JSCode(JSName + '.leftPad(' + VarToJSON([StringJS, Size, Character]) + ');', 'TExtStringSingleton');
  Result := Self;
end;

function TExtStringSingleton.Format(StringJS : String; Value1 : String; Value2 : String) : TExtFunction; begin
  JSCode(JSName + '.format(' + VarToJSON([StringJS, Value1, Value2]) + ');', 'TExtStringSingleton');
  Result := Self;
end;

function TExtStringSingleton.RepeatJS(Pattern : String; Count : Integer; Sep : String) : TExtFunction; begin
  JSCode(JSName + '.repeat(' + VarToJSON([Pattern, Count, Sep]) + ');', 'TExtStringSingleton');
  Result := Self;
end;

procedure TExtToolbarToolbar.SetFVertical(Value : Boolean); begin
  FVertical := Value;
  JSCode('vertical:' + VarToJSON([Value]));
end;

procedure TExtToolbarToolbar.SetFLayout(Value : String); begin
  FLayout := Value;
  JSCode('layout:' + VarToJSON([Value]));
end;

procedure TExtToolbarToolbar.SetFLayoutTExtObject(Value : TExtObject); begin
  FLayoutTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('layout:' + VarToJSON([Value, false]));
end;

procedure TExtToolbarToolbar.SetFEnableOverflow(Value : Boolean); begin
  FEnableOverflow := Value;
  JSCode('enableOverflow:' + VarToJSON([Value]));
end;

procedure TExtToolbarToolbar.SetFMenuTriggerCls(Value : String); begin
  FMenuTriggerCls := Value;
  JSCode('menuTriggerCls:' + VarToJSON([Value]));
end;

procedure TExtToolbarToolbar.SetFOnOverflowchange(Value : TExtToolbarToolbarOnOverflowchange); begin
  if Assigned(FOnOverflowchange) then
    JSCode(JSName+'.events ["overflowchange"].listeners=[];');
  if Assigned(Value) then
    On('overflowchange', Ajax('overflowchange', ['C', '%0.nm','LastOverflow', '%1'], true));
  FOnOverflowchange := Value;
end;

function TExtToolbarToolbar.JSClassName : string; begin
  Result := 'Ext-toolbar-Toolbar-method-constructor';
end;

procedure TExtToolbarToolbar.InitDefaults; begin
  inherited;
  FLayoutTExtObject := TExtObject.CreateInternal(Self, 'layout');
end;

{$IFDEF FPC}constructor TExtToolbarToolbar.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtToolbarToolbar.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtToolbarToolbar.Add(Args : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.add(' + VarToJSON(Args) + ');', 'TExtToolbarToolbar');
  Result := Self;
end;

destructor TExtToolbarToolbar.Destroy; begin
  try
    FLayoutTExtObject.Free;
  except end;
  inherited;
end;

procedure TExtToolbarToolbar.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'overflowchange') and Assigned(FOnOverflowchange) then
    FOnOverflowchange(TExtObject(ParamAsObject('C')), ParamAsBoolean('LastOverflow'));
end;

procedure TExtUtilHashMap.SetFKeyFn(Value : TExtFunction); begin
  FKeyFn := Value;
  JSCode('keyFn:' + VarToJSON([Value, true]));
end;

procedure TExtUtilHashMap.SetFOnAdd(Value : TExtUtilHashMapOnAdd); begin
  if Assigned(FOnAdd) then
    JSCode(JSName+'.events ["add"].listeners=[];');
  if Assigned(Value) then
    On('add', Ajax('add', ['This', '%0.nm','Key', '%1','Value', '%2.nm'], true));
  FOnAdd := Value;
end;

procedure TExtUtilHashMap.SetFOnClear(Value : TExtUtilHashMapOnClear); begin
  if Assigned(FOnClear) then
    JSCode(JSName+'.events ["clear"].listeners=[];');
  if Assigned(Value) then
    On('clear', Ajax('clear', ['This', '%0.nm','This_', '%1.nm','Key', '%2','Value', '%3.nm'], true));
  FOnClear := Value;
end;

procedure TExtUtilHashMap.SetFOnReplace(Value : TExtUtilHashMapOnReplace); begin
  if Assigned(FOnReplace) then
    JSCode(JSName+'.events ["replace"].listeners=[];');
  if Assigned(Value) then
    On('replace', Ajax('replace', ['This', '%0.nm','Key', '%1','Value', '%2.nm','Old', '%3.nm'], true));
  FOnReplace := Value;
end;

function TExtUtilHashMap.JSClassName : string; begin
  Result := 'Ext-util-HashMap';
end;

{$IFDEF FPC}constructor TExtUtilHashMap.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilHashMap.GetCount : TExtFunction; begin
  JSCode(JSName + '.getCount();', 'TExtUtilHashMap');
  Result := Self;
end;

function TExtUtilHashMap.GetKey(O : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getKey(' + VarToJSON([O, false]) + ');', 'TExtUtilHashMap');
  Result := Self;
end;

function TExtUtilHashMap.Add(Key : String; O : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.add(' + VarToJSON([Key, O, false]) + ');', 'TExtUtilHashMap');
  Result := Self;
end;

function TExtUtilHashMap.Replace(Key : String; Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.replace(' + VarToJSON([Key, Value, false]) + ');', 'TExtUtilHashMap');
  Result := Self;
end;

function TExtUtilHashMap.Remove(O : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.remove(' + VarToJSON([O, false]) + ');', 'TExtUtilHashMap');
  Result := Self;
end;

function TExtUtilHashMap.RemoveAtKey(Key : String) : TExtFunction; begin
  JSCode(JSName + '.removeAtKey(' + VarToJSON([Key]) + ');', 'TExtUtilHashMap');
  Result := Self;
end;

function TExtUtilHashMap.Get(Key : String) : TExtFunction; begin
  JSCode(JSName + '.get(' + VarToJSON([Key]) + ');', 'TExtUtilHashMap');
  Result := Self;
end;

function TExtUtilHashMap.Clear : TExtFunction; begin
  JSCode(JSName + '.clear();', 'TExtUtilHashMap');
  Result := Self;
end;

function TExtUtilHashMap.ContainsKey(Key : String) : TExtFunction; begin
  JSCode(JSName + '.containsKey(' + VarToJSON([Key]) + ');', 'TExtUtilHashMap');
  Result := Self;
end;

function TExtUtilHashMap.Contains(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.contains(' + VarToJSON([Value, false]) + ');', 'TExtUtilHashMap');
  Result := Self;
end;

function TExtUtilHashMap.GetKeys : TExtFunction; begin
  JSCode(JSName + '.getKeys();', 'TExtUtilHashMap');
  Result := Self;
end;

function TExtUtilHashMap.GetValues : TExtFunction; begin
  JSCode(JSName + '.getValues();', 'TExtUtilHashMap');
  Result := Self;
end;

function TExtUtilHashMap.Each(Fn : TExtFunction; Scope : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.each(' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtUtilHashMap');
  Result := Self;
end;

function TExtUtilHashMap.Clone : TExtFunction; begin
  JSCode(JSName + '.clone();', 'TExtUtilHashMap');
  Result := Self;
end;

procedure TExtUtilHashMap.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'add') and Assigned(FOnAdd) then
    FOnAdd(TExtUtilHashMap(ParamAsObject('This')), ParamAsString('Key'), TExtObject(ParamAsObject('Value')))
  else if (AEvtName = 'clear') and Assigned(FOnClear) then
    FOnClear(TExtUtilHashMap(ParamAsObject('This')), TExtUtilHashMap(ParamAsObject('This_')), ParamAsString('Key'), TExtObject(ParamAsObject('Value')))
  else if (AEvtName = 'replace') and Assigned(FOnReplace) then
    FOnReplace(TExtUtilHashMap(ParamAsObject('This')), ParamAsString('Key'), TExtObject(ParamAsObject('Value')), TExtObject(ParamAsObject('Old')));
end;

procedure TExtPickerDate.SetFTodayText(Value : String); begin
  FTodayText := Value;
  JSCode('todayText:' + VarToJSON([Value]));
end;

procedure TExtPickerDate.SetFHandler(Value : TExtFunction); begin
  FHandler := Value;
  JSCode('handler:' + VarToJSON([Value, true]));
end;

procedure TExtPickerDate.SetFScope(Value : TExtObject); begin
  FScope := Value;
  Value.DeleteFromGarbage;
  JSCode('scope:' + VarToJSON([Value, false]));
end;

procedure TExtPickerDate.SetFTodayTip(Value : String); begin
  FTodayTip := Value;
  JSCode('todayTip:' + VarToJSON([Value]));
end;

procedure TExtPickerDate.SetFMinText(Value : String); begin
  FMinText := Value;
  JSCode('minText:' + VarToJSON([Value]));
end;

procedure TExtPickerDate.SetFMaxText(Value : String); begin
  FMaxText := Value;
  JSCode('maxText:' + VarToJSON([Value]));
end;

procedure TExtPickerDate.SetFFormat(Value : String); begin
  FFormat := Value;
  JSCode('format:' + VarToJSON([Value]));
end;

procedure TExtPickerDate.SetFDisabledDaysText(Value : String); begin
  FDisabledDaysText := Value;
  JSCode('disabledDaysText:' + VarToJSON([Value]));
end;

procedure TExtPickerDate.SetFDisabledDatesText(Value : String); begin
  FDisabledDatesText := Value;
  JSCode('disabledDatesText:' + VarToJSON([Value]));
end;

procedure TExtPickerDate.SetFMonthNames(Value : TExtObjectList); begin
  FMonthNames := Value;
  Value.DeleteFromGarbage;
  JSCode('monthNames:' + VarToJSON([Value, false]));
end;

procedure TExtPickerDate.SetFDayNames(Value : TExtObjectList); begin
  FDayNames := Value;
  Value.DeleteFromGarbage;
  JSCode('dayNames:' + VarToJSON([Value, false]));
end;

procedure TExtPickerDate.SetFNextText(Value : String); begin
  FNextText := Value;
  JSCode('nextText:' + VarToJSON([Value]));
end;

procedure TExtPickerDate.SetFPrevText(Value : String); begin
  FPrevText := Value;
  JSCode('prevText:' + VarToJSON([Value]));
end;

procedure TExtPickerDate.SetFMonthYearText(Value : String); begin
  FMonthYearText := Value;
  JSCode('monthYearText:' + VarToJSON([Value]));
end;

procedure TExtPickerDate.SetFStartDay(Value : Integer); begin
  FStartDay := Value;
  JSCode('startDay:' + VarToJSON([Value]));
end;

procedure TExtPickerDate.SetFShowToday(Value : Boolean); begin
  FShowToday := Value;
  JSCode('showToday:' + VarToJSON([Value]));
end;

procedure TExtPickerDate.SetFMinDate(Value : TDateTime); begin
  FMinDate := Value;
  if not ConfigAvailable(JSName) then
    SetMinDate(Value)
  else
    JSCode('minDate:' + VarToJSON([Value]));
end;

procedure TExtPickerDate.SetFMaxDate(Value : TDateTime); begin
  FMaxDate := Value;
  if not ConfigAvailable(JSName) then
    SetMaxDate(Value)
  else
    JSCode('maxDate:' + VarToJSON([Value]));
end;

procedure TExtPickerDate.SetFDisabledDays(Value : TArrayOfInteger); begin
  FDisabledDays := Value;
  if not ConfigAvailable(JSName) then
    SetDisabledDays(Value)
  else
    JSCode('disabledDays:' + ArrayToJSON(Value));
end;

procedure TExtPickerDate.SetFDisabledDatesRE(Value : TRegExp); begin
  FDisabledDatesRE := Value;
  JSCode('disabledDatesRE:' + VarToJSON([#3 +Value]));
end;

procedure TExtPickerDate.SetFDisabledDates(Value : TExtObjectList); begin
  FDisabledDates := Value;
  Value.DeleteFromGarbage;
  if not ConfigAvailable(JSName) then
    SetDisabledDates(Value)
  else
    JSCode('disabledDates:' + VarToJSON([Value, false]));
end;

procedure TExtPickerDate.SetFDisableAnim(Value : Boolean); begin
  FDisableAnim := Value;
  JSCode('disableAnim:' + VarToJSON([Value]));
end;

procedure TExtPickerDate.SetFBaseCls(Value : String); begin
  FBaseCls := Value;
  JSCode('baseCls:' + VarToJSON([Value]));
end;

procedure TExtPickerDate.SetFSelectedCls(Value : String); begin
  FSelectedCls := Value;
  JSCode('selectedCls:' + VarToJSON([Value]));
end;

procedure TExtPickerDate.SetFDisabledCellCls(Value : String); begin
  FDisabledCellCls := Value;
  JSCode('disabledCellCls:' + VarToJSON([Value]));
end;

procedure TExtPickerDate.SetFLongDayFormat(Value : String); begin
  FLongDayFormat := Value;
  JSCode('longDayFormat:' + VarToJSON([Value]));
end;

procedure TExtPickerDate.SetFKeyNavConfig(Value : TExtObject); begin
  FKeyNavConfig := Value;
  Value.DeleteFromGarbage;
  JSCode('keyNavConfig:' + VarToJSON([Value, false]));
end;

procedure TExtPickerDate.SetFFocusOnShow(Value : Boolean); begin
  FFocusOnShow := Value;
  JSCode('focusOnShow:' + VarToJSON([Value]));
end;

procedure TExtPickerDate.SetFOnSelect(Value : TExtPickerDateOnSelect); begin
  if Assigned(FOnSelect) then
    JSCode(JSName+'.events ["select"].listeners=[];');
  if Assigned(Value) then
    On('select', Ajax('select', ['This', '%0.nm','Date', '%1'], true));
  FOnSelect := Value;
end;

function TExtPickerDate.JSClassName : string; begin
  Result := 'Ext-picker-Date';
end;

procedure TExtPickerDate.InitDefaults; begin
  inherited;
  FScope := TExtObject.CreateInternal(Self, 'scope');
  FMonthNames := TExtObjectList.Create(Self, 'monthNames');
  FDayNames := TExtObjectList.Create(Self, 'dayNames');
  FDisabledDates := TExtObjectList.Create(Self, 'disabledDates');
  FKeyNavConfig := TExtObject.CreateInternal(Self, 'keyNavConfig');
end;

{$IFDEF FPC}constructor TExtPickerDate.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtPickerDate.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtPickerDate.SetDisabledDates(DisabledDates : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.setDisabledDates(' + VarToJSON(DisabledDates) + ');', 'TExtPickerDate');
  Result := Self;
end;

function TExtPickerDate.SetDisabledDates(DisabledDates : TRegExp) : TExtFunction; begin
  JSCode(JSName + '.SetDisabledDates(' + VarToJSON([#3 + DisabledDates]) + ');', 'TExtPickerDate');
  Result := Self;
end;

function TExtPickerDate.SetDisabledDays(DisabledDays : TArrayOfInteger) : TExtFunction; begin
  JSCode(JSName + '.setDisabledDays(' + VarToJSON([DisabledDays]) + ');', 'TExtPickerDate');
  Result := Self;
end;

function TExtPickerDate.SetMinDate(Value : TDateTime) : TExtFunction; begin
  JSCode(JSName + '.setMinDate(' + VarToJSON([Value]) + ');', 'TExtPickerDate');
  Result := Self;
end;

function TExtPickerDate.SetMaxDate(Value : TDateTime) : TExtFunction; begin
  JSCode(JSName + '.setMaxDate(' + VarToJSON([Value]) + ');', 'TExtPickerDate');
  Result := Self;
end;

function TExtPickerDate.SetValue(Value : TDateTime) : TExtFunction; begin
  JSCode(JSName + '.setValue(' + VarToJSON([Value]) + ');', 'TExtPickerDate');
  Result := Self;
end;

function TExtPickerDate.GetValue : TExtFunction; begin
  JSCode(JSName + '.getValue();', 'TExtPickerDate');
  Result := Self;
end;

function TExtPickerDate.HideMonthPicker(Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.hideMonthPicker(' + VarToJSON([Animate]) + ');', 'TExtPickerDate');
  Result := Self;
end;

function TExtPickerDate.ShowMonthPicker(Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.showMonthPicker(' + VarToJSON([Animate]) + ');', 'TExtPickerDate');
  Result := Self;
end;

function TExtPickerDate.ShowPrevMonth(E : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.showPrevMonth(' + VarToJSON([E, false]) + ');', 'TExtPickerDate');
  Result := Self;
end;

function TExtPickerDate.ShowNextMonth(E : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.showNextMonth(' + VarToJSON([E, false]) + ');', 'TExtPickerDate');
  Result := Self;
end;

function TExtPickerDate.ShowPrevYear : TExtFunction; begin
  JSCode(JSName + '.showPrevYear();', 'TExtPickerDate');
  Result := Self;
end;

function TExtPickerDate.ShowNextYear : TExtFunction; begin
  JSCode(JSName + '.showNextYear();', 'TExtPickerDate');
  Result := Self;
end;

function TExtPickerDate.SelectToday : TExtFunction; begin
  JSCode(JSName + '.selectToday();', 'TExtPickerDate');
  Result := Self;
end;

destructor TExtPickerDate.Destroy; begin
  try
    FScope.Free;
    FMonthNames.Free;
    FDayNames.Free;
    FDisabledDates.Free;
    FKeyNavConfig.Free;
  except end;
  inherited;
end;

procedure TExtPickerDate.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'select') and Assigned(FOnSelect) then
    FOnSelect(TExtPickerDate(ParamAsObject('This')), ParamAsTDateTime('Date'));
end;

procedure TExtDataConnection.SetFDisableCaching(Value : Boolean); begin
  FDisableCaching := Value;
  JSCode('disableCaching:' + VarToJSON([Value]));
end;

procedure TExtDataConnection.SetFWithCredentials(Value : Boolean); begin
  FWithCredentials := Value;
  JSCode('withCredentials:' + VarToJSON([Value]));
end;

procedure TExtDataConnection.SetFCors(Value : Boolean); begin
  FCors := Value;
  JSCode('cors:' + VarToJSON([Value]));
end;

procedure TExtDataConnection.SetFDisableCachingParam(Value : String); begin
  FDisableCachingParam := Value;
  JSCode('disableCachingParam:' + VarToJSON([Value]));
end;

procedure TExtDataConnection.SetFTimeout(Value : Integer); begin
  FTimeout := Value;
  JSCode('timeout:' + VarToJSON([Value]));
end;

procedure TExtDataConnection.SetFExtraParams(Value : TExtObject); begin
  FExtraParams := Value;
  Value.DeleteFromGarbage;
  JSCode('extraParams:' + VarToJSON([Value, false]));
end;

procedure TExtDataConnection.SetFOnBeforerequest(Value : TExtDataConnectionOnBeforerequest); begin
  if Assigned(FOnBeforerequest) then
    JSCode(JSName+'.events ["beforerequest"].listeners=[];');
  if Assigned(Value) then
    On('beforerequest', Ajax('beforerequest', ['Conn', '%0.nm','Options', '%1.nm'], true));
  FOnBeforerequest := Value;
end;

procedure TExtDataConnection.SetFOnRequestcomplete(Value : TExtDataConnectionOnRequestcomplete); begin
  if Assigned(FOnRequestcomplete) then
    JSCode(JSName+'.events ["requestcomplete"].listeners=[];');
  if Assigned(Value) then
    On('requestcomplete', Ajax('requestcomplete', ['Conn', '%0.nm','Response', '%1.nm','Options', '%2.nm'], true));
  FOnRequestcomplete := Value;
end;

procedure TExtDataConnection.SetFOnRequestexception(Value : TExtDataConnectionOnRequestexception); begin
  if Assigned(FOnRequestexception) then
    JSCode(JSName+'.events ["requestexception"].listeners=[];');
  if Assigned(Value) then
    On('requestexception', Ajax('requestexception', ['Conn', '%0.nm','Response', '%1.nm','Options', '%2.nm'], true));
  FOnRequestexception := Value;
end;

function TExtDataConnection.JSClassName : string; begin
  Result := 'Ext-data-Connection';
end;

procedure TExtDataConnection.InitDefaults; begin
  inherited;
  FExtraParams := TExtObject.CreateInternal(Self, 'extraParams');
end;

{$IFDEF FPC}constructor TExtDataConnection.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataConnection.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.request(' + VarToJSON([Options, false, OptionsUrl, OptionsParams, false, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, false, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, true, OptionsParams, false, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, false, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, true, OptionsParams, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, false, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, true, OptionsParams, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, false, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, true, OptionsParams, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, true, OptionsParams, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, false, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, true, OptionsParams, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, true, OptionsParams, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, true, OptionsParams, true, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, false, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, true, OptionsParams, true, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, false, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, true, OptionsParams, true, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, true, OptionsParams, true, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, false, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, true, OptionsParams, true, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, true, OptionsParams, true, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, true, OptionsParams, false, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, false, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, true, OptionsParams, false, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, true, OptionsParams, false, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, false, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, true, OptionsParams, false, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : TExtFunction; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, true, OptionsParams, false, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : String; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, OptionsParams, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, false, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : String; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, OptionsParams, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, false, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : String; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, OptionsParams, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : String; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, OptionsParams, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, false, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : String; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, OptionsParams, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : String; OptionsParams : String; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, OptionsParams, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, OptionsParams, true, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, false, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, OptionsParams, true, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, false, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, OptionsParams, true, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, OptionsParams, true, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, false, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, OptionsParams, true, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtFunction; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, OptionsParams, true, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, OptionsParams, false, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, false, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : THTMLElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, OptionsParams, false, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : TExtObject; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, OptionsParams, false, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, false, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : String; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, OptionsParams, false, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject; OptionsUrl : String; OptionsParams : TExtObject; OptionsMethod : String; OptionsCallback : TExtFunction; OptionsCallbackOptions : TExtObject; OptionsCallbackSuccess : Boolean; OptionsCallbackResponse : TExtObject; OptionsSuccess : TExtFunction; OptionsSuccessResponse : TExtObject; OptionsSuccessOptions : TExtObject; OptionsFailure : TExtFunction; OptionsFailureResponse : TExtObject; OptionsFailureOptions : TExtObject; OptionsScope : TExtObject; OptionsTimeout : Integer; OptionsForm : TExtElement; OptionsIsUpload : Boolean; OptionsHeaders : TExtObject; OptionsXmlData : TExtObject; OptionsJsonData : String; OptionsDisableCaching : Boolean; OptionsWithCredentials : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Request(' + VarToJSON([Options, false, OptionsUrl, OptionsParams, false, OptionsMethod, OptionsCallback, true, OptionsCallbackOptions, false, OptionsCallbackSuccess, OptionsCallbackResponse, false, OptionsSuccess, true, OptionsSuccessResponse, false, OptionsSuccessOptions, false, OptionsFailure, true, OptionsFailureResponse, false, OptionsFailureOptions, false, OptionsScope, false, OptionsTimeout, OptionsForm, false, OptionsIsUpload, OptionsHeaders, false, OptionsXmlData, false, OptionsJsonData, OptionsDisableCaching, OptionsWithCredentials]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Upload(Form : String; Url : String; Params : String; Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.upload(' + VarToJSON([Form, Url, Params, Options, false]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Upload(Form : THTMLElement; Url : String; Params : String; Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.Upload(' + VarToJSON([Form, false, Url, Params, Options, false]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Upload(Form : TExtElement; Url : String; Params : String; Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.Upload(' + VarToJSON([Form, false, Url, Params, Options, false]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.SetOptions(Options : TExtObject; Scope : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setOptions(' + VarToJSON([Options, false, Scope, false]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.IsLoading(Request : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.isLoading(' + VarToJSON([Request, false]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Abort(Request : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.abort(' + VarToJSON([Request, false]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.AbortAll : TExtFunction; begin
  JSCode(JSName + '.abortAll();', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.ParseStatus(Status : Integer) : TExtFunction; begin
  JSCode(JSName + '.parseStatus(' + VarToJSON([Status]) + ');', 'TExtDataConnection');
  Result := Self;
end;

destructor TExtDataConnection.Destroy; begin
  try
    FExtraParams.Free;
  except end;
  inherited;
end;

procedure TExtDataConnection.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforerequest') and Assigned(FOnBeforerequest) then
    FOnBeforerequest(TExtDataConnection(ParamAsObject('Conn')), TExtObject(ParamAsObject('Options')))
  else if (AEvtName = 'requestcomplete') and Assigned(FOnRequestcomplete) then
    FOnRequestcomplete(TExtDataConnection(ParamAsObject('Conn')), TExtObject(ParamAsObject('Response')), TExtObject(ParamAsObject('Options')))
  else if (AEvtName = 'requestexception') and Assigned(FOnRequestexception) then
    FOnRequestexception(TExtDataConnection(ParamAsObject('Conn')), TExtObject(ParamAsObject('Response')), TExtObject(ParamAsObject('Options')));
end;

function TExtFormFieldHidden.JSClassName : string; begin
  Result := 'Ext-form-field-Hidden';
end;

{$IFDEF FPC}constructor TExtFormFieldHidden.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilInflector.JSClassName : string; begin
  Result := 'Ext-util-Inflector';
end;

{$IFDEF FPC}constructor TExtUtilInflector.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilInflector.Singular(Matcher : TRegExp; Replacer : String) : TExtFunction; begin
  JSCode(JSName + '.singular(' + VarToJSON([#3 + Matcher, Replacer]) + ');', 'TExtUtilInflector');
  Result := Self;
end;

function TExtUtilInflector.Plural(Matcher : TRegExp; Replacer : String) : TExtFunction; begin
  JSCode(JSName + '.plural(' + VarToJSON([#3 + Matcher, Replacer]) + ');', 'TExtUtilInflector');
  Result := Self;
end;

function TExtUtilInflector.ClearSingulars : TExtFunction; begin
  JSCode(JSName + '.clearSingulars();', 'TExtUtilInflector');
  Result := Self;
end;

function TExtUtilInflector.ClearPlurals : TExtFunction; begin
  JSCode(JSName + '.clearPlurals();', 'TExtUtilInflector');
  Result := Self;
end;

function TExtUtilInflector.IsTransnumeral(Word : String) : TExtFunction; begin
  JSCode(JSName + '.isTransnumeral(' + VarToJSON([Word]) + ');', 'TExtUtilInflector');
  Result := Self;
end;

function TExtUtilInflector.Pluralize(Word : String) : TExtFunction; begin
  JSCode(JSName + '.pluralize(' + VarToJSON([Word]) + ');', 'TExtUtilInflector');
  Result := Self;
end;

function TExtUtilInflector.Singularize(Word : String) : TExtFunction; begin
  JSCode(JSName + '.singularize(' + VarToJSON([Word]) + ');', 'TExtUtilInflector');
  Result := Self;
end;

function TExtUtilInflector.Classify(Word : String) : TExtFunction; begin
  JSCode(JSName + '.classify(' + VarToJSON([Word]) + ');', 'TExtUtilInflector');
  Result := Self;
end;

function TExtUtilInflector.Ordinalize(Number : Integer) : TExtFunction; begin
  JSCode(JSName + '.ordinalize(' + VarToJSON([Number]) + ');', 'TExtUtilInflector');
  Result := Self;
end;

procedure TExtResizerSplitter.SetFCollapsible(Value : Boolean); begin
  FCollapsible := Value;
  JSCode('collapsible:' + VarToJSON([Value]));
end;

procedure TExtResizerSplitter.SetFPerformCollapse(Value : Boolean); begin
  FPerformCollapse := Value;
  JSCode('performCollapse:' + VarToJSON([Value]));
end;

procedure TExtResizerSplitter.SetFCollapseOnDblClick(Value : Boolean); begin
  FCollapseOnDblClick := Value;
  JSCode('collapseOnDblClick:' + VarToJSON([Value]));
end;

procedure TExtResizerSplitter.SetFDefaultSplitMin(Value : Integer); begin
  FDefaultSplitMin := Value;
  JSCode('defaultSplitMin:' + VarToJSON([Value]));
end;

procedure TExtResizerSplitter.SetFDefaultSplitMax(Value : Integer); begin
  FDefaultSplitMax := Value;
  JSCode('defaultSplitMax:' + VarToJSON([Value]));
end;

procedure TExtResizerSplitter.SetFCollapsedCls(Value : String); begin
  FCollapsedCls := Value;
  JSCode('collapsedCls:' + VarToJSON([Value]));
end;

procedure TExtResizerSplitter.SetFCollapseTarget(Value : String); begin
  FCollapseTarget := Value;
  JSCode('collapseTarget:' + VarToJSON([Value]));
end;

procedure TExtResizerSplitter.SetFCollapseTargetTExtPanelPanel(Value : TExtPanelPanel); begin
  FCollapseTargetTExtPanelPanel := Value;
  Value.DeleteFromGarbage;
  JSCode('collapseTarget:' + VarToJSON([Value, false]));
end;

function TExtResizerSplitter.JSClassName : string; begin
  Result := 'Ext-resizer-Splitter';
end;

procedure TExtResizerSplitter.InitDefaults; begin
  inherited;
  FCollapseTargetTExtPanelPanel := TExtPanelPanel.CreateInternal(Self, 'collapseTarget');
end;

{$IFDEF FPC}constructor TExtResizerSplitter.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtResizerSplitter.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

destructor TExtResizerSplitter.Destroy; begin
  try
    FCollapseTargetTExtPanelPanel.Free;
  except end;
  inherited;
end;

function TExtDdDD.JSClassName : string; begin
  Result := 'Ext-dd-DD';
end;

{$IFDEF FPC}constructor TExtDdDD.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDdDD.Create(Id : String; SGroup : String; Config : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Id, SGroup, Config, false]) + ');');
  InitDefaults;
end;

function TExtDdDD.AutoOffset(IPageX : Integer; IPageY : Integer) : TExtFunction; begin
  JSCode(JSName + '.autoOffset(' + VarToJSON([IPageX, IPageY]) + ');', 'TExtDdDD');
  Result := Self;
end;

function TExtDdDD.SetDelta(IDeltaX : Integer; IDeltaY : Integer) : TExtFunction; begin
  JSCode(JSName + '.setDelta(' + VarToJSON([IDeltaX, IDeltaY]) + ');', 'TExtDdDD');
  Result := Self;
end;

function TExtDdDD.SetDragElPos(IPageX : Integer; IPageY : Integer) : TExtFunction; begin
  JSCode(JSName + '.setDragElPos(' + VarToJSON([IPageX, IPageY]) + ');', 'TExtDdDD');
  Result := Self;
end;

function TExtDdDD.AlignElWithMouse(El : THTMLElement; IPageX : Integer; IPageY : Integer) : TExtFunction; begin
  JSCode(JSName + '.alignElWithMouse(' + VarToJSON([El, false, IPageX, IPageY]) + ');', 'TExtDdDD');
  Result := Self;
end;

function TExtDdDD.CachePosition(IPageX : Integer = 0; IPageY : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.cachePosition(' + VarToJSON([IPageX, IPageY]) + ');', 'TExtDdDD');
  Result := Self;
end;

function TExtDdDD.ApplyConfig : TExtFunction; begin
  JSCode(JSName + '.applyConfig();', 'TExtDdDD');
  Result := Self;
end;

function TExtDdDD.B4MouseDown : TExtFunction; begin
  JSCode(JSName + '.b4MouseDown();', 'TExtDdDD');
  Result := Self;
end;

function TExtDdDD.B4Drag : TExtFunction; begin
  JSCode(JSName + '.b4Drag();', 'TExtDdDD');
  Result := Self;
end;

procedure TExtPickerColor.SetFComponentCls(Value : String); begin
  FComponentCls := Value;
  JSCode('componentCls:' + VarToJSON([Value]));
end;

procedure TExtPickerColor.SetFSelectedCls(Value : String); begin
  FSelectedCls := Value;
  JSCode('selectedCls:' + VarToJSON([Value]));
end;

procedure TExtPickerColor.SetFValue(Value : String); begin
  FValue := Value;
  JSCode('value:' + VarToJSON([Value]));
end;

procedure TExtPickerColor.SetFClickEvent(Value : String); begin
  FClickEvent := Value;
  JSCode('clickEvent:' + VarToJSON([Value]));
end;

procedure TExtPickerColor.SetFAllowReselect(Value : Boolean); begin
  FAllowReselect := Value;
  JSCode('allowReselect:' + VarToJSON([Value]));
end;

procedure TExtPickerColor.SetFHandler(Value : TExtFunction); begin
  FHandler := Value;
  JSCode('handler:' + VarToJSON([Value, true]));
end;

procedure TExtPickerColor.SetFScope(Value : TExtObject); begin
  FScope := Value;
  Value.DeleteFromGarbage;
  JSCode('scope:' + VarToJSON([Value, false]));
end;

procedure TExtPickerColor.SetFOnSelect(Value : TExtPickerColorOnSelect); begin
  if Assigned(FOnSelect) then
    JSCode(JSName+'.events ["select"].listeners=[];');
  if Assigned(Value) then
    On('select', Ajax('select', ['This', '%0.nm','Color', '%1'], true));
  FOnSelect := Value;
end;

function TExtPickerColor.JSClassName : string; begin
  Result := 'Ext-picker-Color';
end;

procedure TExtPickerColor.InitDefaults; begin
  inherited;
  FScope := TExtObject.CreateInternal(Self, 'scope');
end;

{$IFDEF FPC}constructor TExtPickerColor.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtPickerColor.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtPickerColor.Select(Color : String; SuppressEvent : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.select(' + VarToJSON([Color, SuppressEvent]) + ');', 'TExtPickerColor');
  Result := Self;
end;

function TExtPickerColor.GetValue : TExtFunction; begin
  JSCode(JSName + '.getValue();', 'TExtPickerColor');
  Result := Self;
end;

destructor TExtPickerColor.Destroy; begin
  try
    FScope.Free;
  except end;
  inherited;
end;

procedure TExtPickerColor.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'select') and Assigned(FOnSelect) then
    FOnSelect(TExtPickerColor(ParamAsObject('This')), ParamAsString('Color'));
end;

procedure TExtChartSeriesLine.SetFAxis(Value : String); begin
  FAxis := Value;
  JSCode('axis:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesLine.SetFSelectionTolerance(Value : Integer); begin
  FSelectionTolerance := Value;
  JSCode('selectionTolerance:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesLine.SetFShowMarkers(Value : Boolean); begin
  FShowMarkers := Value;
  JSCode('showMarkers:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesLine.SetFMarkerConfig(Value : TExtObject); begin
  FMarkerConfig := Value;
  Value.DeleteFromGarbage;
  JSCode('markerConfig:' + VarToJSON([Value, false]));
end;

procedure TExtChartSeriesLine.SetFStyle(Value : TExtObject); begin
  FStyle := Value;
  Value.DeleteFromGarbage;
  JSCode('style:' + VarToJSON([Value, false]));
end;

procedure TExtChartSeriesLine.SetFSmooth(Value : Boolean); begin
  FSmooth := Value;
  JSCode('smooth:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesLine.SetFSmoothInteger(Value : Integer); begin
  FSmoothInteger := Value;
  JSCode('smooth:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesLine.SetFFill(Value : Boolean); begin
  FFill := Value;
  JSCode('fill:' + VarToJSON([Value]));
end;

function TExtChartSeriesLine.JSClassName : string; begin
  Result := 'Ext-chart-series-Line';
end;

procedure TExtChartSeriesLine.InitDefaults; begin
  inherited;
  FMarkerConfig := TExtObject.CreateInternal(Self, 'markerConfig');
  FStyle := TExtObject.CreateInternal(Self, 'style');
end;

{$IFDEF FPC}constructor TExtChartSeriesLine.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtChartSeriesLine.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtChartSeriesLine.DrawSeries : TExtFunction; begin
  JSCode(JSName + '.drawSeries();', 'TExtChartSeriesLine');
  Result := Self;
end;

destructor TExtChartSeriesLine.Destroy; begin
  try
    FMarkerConfig.Free;
    FStyle.Free;
  except end;
  inherited;
end;

procedure TExtFormFieldSpinner.SetFSpinUpEnabled(Value : Boolean); begin
  FSpinUpEnabled := Value;
  if not ConfigAvailable(JSName) then
    SetSpinUpEnabled(Value)
  else
    JSCode('spinUpEnabled:' + VarToJSON([Value]));
end;

procedure TExtFormFieldSpinner.SetFSpinDownEnabled(Value : Boolean); begin
  FSpinDownEnabled := Value;
  if not ConfigAvailable(JSName) then
    SetSpinDownEnabled(Value)
  else
    JSCode('spinDownEnabled:' + VarToJSON([Value]));
end;

procedure TExtFormFieldSpinner.SetFKeyNavEnabled(Value : Boolean); begin
  FKeyNavEnabled := Value;
  JSCode('keyNavEnabled:' + VarToJSON([Value]));
end;

procedure TExtFormFieldSpinner.SetFMouseWheelEnabled(Value : Boolean); begin
  FMouseWheelEnabled := Value;
  JSCode('mouseWheelEnabled:' + VarToJSON([Value]));
end;

procedure TExtFormFieldSpinner.SetFRepeatTriggerClick(Value : Boolean); begin
  FRepeatTriggerClick := Value;
  JSCode('repeatTriggerClick:' + VarToJSON([Value]));
end;

procedure TExtFormFieldSpinner.SetFOnSpin(Value : TExtFormFieldSpinnerOnSpin); begin
  if Assigned(FOnSpin) then
    JSCode(JSName+'.events ["spin"].listeners=[];');
  if Assigned(Value) then
    On('spin', Ajax('spin', ['This', '%0.nm','Direction', '%1'], true));
  FOnSpin := Value;
end;

procedure TExtFormFieldSpinner.SetFOnSpinup(Value : TExtFormFieldSpinnerOnSpinup); begin
  if Assigned(FOnSpinup) then
    JSCode(JSName+'.events ["spinup"].listeners=[];');
  if Assigned(Value) then
    On('spinup', Ajax('spinup', ['This', '%0.nm','This_', '%1.nm'], true));
  FOnSpinup := Value;
end;

function TExtFormFieldSpinner.JSClassName : string; begin
  Result := 'Ext-form-field-Spinner';
end;

{$IFDEF FPC}constructor TExtFormFieldSpinner.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtFormFieldSpinner.SpinUp : TExtFunction; begin
  JSCode(JSName + '.spinUp();', 'TExtFormFieldSpinner');
  Result := Self;
end;

function TExtFormFieldSpinner.SpinDown : TExtFunction; begin
  JSCode(JSName + '.spinDown();', 'TExtFormFieldSpinner');
  Result := Self;
end;

function TExtFormFieldSpinner.SetSpinUpEnabled(Enabled : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setSpinUpEnabled(' + VarToJSON([Enabled]) + ');', 'TExtFormFieldSpinner');
  Result := Self;
end;

function TExtFormFieldSpinner.SetSpinDownEnabled(Enabled : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setSpinDownEnabled(' + VarToJSON([Enabled]) + ');', 'TExtFormFieldSpinner');
  Result := Self;
end;

procedure TExtFormFieldSpinner.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'spin') and Assigned(FOnSpin) then
    FOnSpin(TExtFormFieldSpinner(ParamAsObject('This')), ParamAsString('Direction'))
  else if (AEvtName = 'spinup') and Assigned(FOnSpinup) then
    FOnSpinup(TExtFormFieldSpinner(ParamAsObject('This')), TExtFormFieldSpinner(ParamAsObject('This_')));
end;

procedure TExtMenuSeparator.SetFActiveCls(Value : String); begin
  FActiveCls := Value;
  JSCode('activeCls:' + VarToJSON([Value]));
end;

procedure TExtMenuSeparator.SetFCanActivate(Value : Boolean); begin
  FCanActivate := Value;
  JSCode('canActivate:' + VarToJSON([Value]));
end;

procedure TExtMenuSeparator.SetFClickHideDelay(Value : Boolean); begin
  FClickHideDelay := Value;
  JSCode('clickHideDelay:' + VarToJSON([Value]));
end;

procedure TExtMenuSeparator.SetFDestroyMenu(Value : Boolean); begin
  FDestroyMenu := Value;
  JSCode('destroyMenu:' + VarToJSON([Value]));
end;

procedure TExtMenuSeparator.SetFDisabledCls(Value : Boolean); begin
  FDisabledCls := Value;
  JSCode('disabledCls:' + VarToJSON([Value]));
end;

procedure TExtMenuSeparator.SetFHref(Value : String); begin
  FHref := Value;
  JSCode('href:' + VarToJSON([Value]));
end;

procedure TExtMenuSeparator.SetFHrefTarget(Value : String); begin
  FHrefTarget := Value;
  JSCode('hrefTarget:' + VarToJSON([Value]));
end;

procedure TExtMenuSeparator.SetFHideOnClick(Value : Boolean); begin
  FHideOnClick := Value;
  JSCode('hideOnClick:' + VarToJSON([Value]));
end;

procedure TExtMenuSeparator.SetFIcon(Value : String); begin
  FIcon := Value;
  JSCode('icon:' + VarToJSON([Value]));
end;

procedure TExtMenuSeparator.SetFIconCls(Value : String); begin
  FIconCls := Value;
  JSCode('iconCls:' + VarToJSON([Value]));
end;

procedure TExtMenuSeparator.SetFMenu(Value : TExtObject); begin
  FMenu := Value;
  Value.DeleteFromGarbage;
  JSCode('menu:' + VarToJSON([Value, false]));
end;

procedure TExtMenuSeparator.SetFMenuAlign(Value : String); begin
  FMenuAlign := Value;
  JSCode('menuAlign:' + VarToJSON([Value]));
end;

procedure TExtMenuSeparator.SetFMenuExpandDelay(Value : Integer); begin
  FMenuExpandDelay := Value;
  JSCode('menuExpandDelay:' + VarToJSON([Value]));
end;

procedure TExtMenuSeparator.SetFMenuHideDelay(Value : Integer); begin
  FMenuHideDelay := Value;
  JSCode('menuHideDelay:' + VarToJSON([Value]));
end;

procedure TExtMenuSeparator.SetFPlain(Value : Boolean); begin
  FPlain := Value;
  JSCode('plain:' + VarToJSON([Value]));
end;

procedure TExtMenuSeparator.SetFSeparatorCls(Value : String); begin
  FSeparatorCls := Value;
  JSCode('separatorCls:' + VarToJSON([Value]));
end;

procedure TExtMenuSeparator.SetFText(Value : String); begin
  FText := Value;
  JSCode('text:' + VarToJSON([Value]));
end;

function TExtMenuSeparator.JSClassName : string; begin
  Result := 'Ext-menu-Separator';
end;

procedure TExtMenuSeparator.InitDefaults; begin
  inherited;
  FMenu := TExtObject.CreateInternal(Self, 'menu');
end;

{$IFDEF FPC}constructor TExtMenuSeparator.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtMenuSeparator.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

destructor TExtMenuSeparator.Destroy; begin
  try
    FMenu.Free;
  except end;
  inherited;
end;

procedure TExtDataSequentialIdGenerator.SetFPrefix(Value : String); begin
  FPrefix := Value;
  JSCode('prefix:' + VarToJSON([Value]));
end;

procedure TExtDataSequentialIdGenerator.SetFSeed(Value : Integer); begin
  FSeed := Value;
  JSCode('seed:' + VarToJSON([Value]));
end;

function TExtDataSequentialIdGenerator.JSClassName : string; begin
  Result := 'Ext-data-SequentialIdGenerator';
end;

{$IFDEF FPC}constructor TExtDataSequentialIdGenerator.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataSequentialIdGenerator.Generate : TExtFunction; begin
  JSCode(JSName + '.generate();', 'TExtDataSequentialIdGenerator');
  Result := Self;
end;

function TExtDataProxyLocalStorage.JSClassName : string; begin
  Result := 'Ext-data-proxy-LocalStorage';
end;

{$IFDEF FPC}constructor TExtDataProxyLocalStorage.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtDirectProvider.SetFId(Value : String); begin
  FId := Value;
  JSCode('id:' + VarToJSON([Value]));
end;

procedure TExtDirectProvider.SetFOnConnect(Value : TExtDirectProviderOnConnect); begin
  if Assigned(FOnConnect) then
    JSCode(JSName+'.events ["connect"].listeners=[];');
  if Assigned(Value) then
    On('connect', Ajax('connect', ['Provider', '%0.nm'], true));
  FOnConnect := Value;
end;

procedure TExtDirectProvider.SetFOnDisconnect(Value : TExtDirectProviderOnDisconnect); begin
  if Assigned(FOnDisconnect) then
    JSCode(JSName+'.events ["disconnect"].listeners=[];');
  if Assigned(Value) then
    On('disconnect', Ajax('disconnect', ['Provider', '%0.nm'], true));
  FOnDisconnect := Value;
end;

procedure TExtDirectProvider.SetFOnData(Value : TExtDirectProviderOnData); begin
  if Assigned(FOnData) then
    JSCode(JSName+'.events ["data"].listeners=[];');
  if Assigned(Value) then
    On('data', Ajax('data', ['Provider', '%0.nm','E', '%1.nm'], true));
  FOnData := Value;
end;

procedure TExtDirectProvider.SetFOnException(Value : TExtDirectProviderOnException); begin
  if Assigned(FOnException) then
    JSCode(JSName+'.events ["exception"].listeners=[];');
  if Assigned(Value) then
    On('exception', Ajax('exception', [], true));
  FOnException := Value;
end;

function TExtDirectProvider.JSClassName : string; begin
  Result := 'Ext-direct-Provider';
end;

{$IFDEF FPC}constructor TExtDirectProvider.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDirectProvider.IsConnected : TExtFunction; begin
  JSCode(JSName + '.isConnected();', 'TExtDirectProvider');
  Result := Self;
end;

function TExtDirectProvider.Connect : TExtFunction; begin
  JSCode(JSName + '.connect();', 'TExtDirectProvider');
  Result := Self;
end;

function TExtDirectProvider.Disconnect : TExtFunction; begin
  JSCode(JSName + '.disconnect();', 'TExtDirectProvider');
  Result := Self;
end;

procedure TExtDirectProvider.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'connect') and Assigned(FOnConnect) then
    FOnConnect(TExtDirectProvider(ParamAsObject('Provider')))
  else if (AEvtName = 'disconnect') and Assigned(FOnDisconnect) then
    FOnDisconnect(TExtDirectProvider(ParamAsObject('Provider')))
  else if (AEvtName = 'data') and Assigned(FOnData) then
    FOnData(TExtDirectProvider(ParamAsObject('Provider')), TExtDirectEvent(ParamAsObject('E')))
  else if (AEvtName = 'exception') and Assigned(FOnException) then
    FOnException();
end;

function TExtDirectRemotingEvent.JSClassName : string; begin
  Result := 'Ext-direct-RemotingEvent';
end;

{$IFDEF FPC}constructor TExtDirectRemotingEvent.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDirectRemotingEvent.GetTransaction : TExtFunction; begin
  JSCode(JSName + '.getTransaction();', 'TExtDirectRemotingEvent');
  Result := Self;
end;

function TExtError.JSClassName : string; begin
  Result := 'Ext-Error';
end;

{$IFDEF FPC}constructor TExtError.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

class function TExtError.RaiseJS(Err : String) : TExtFunction; begin
  JSCode(JSClassName + '.raise(' + VarToJSON([Err]) + ');', 'TExtError');
  Result := Self;
end;

function TExtError.RaiseJS(Err : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.RaiseJS(' + VarToJSON([Err, false]) + ');', 'TExtError');
  Result := Self;
end;

class function TExtError.Handle(Err : TExtError) : TExtFunction; begin
  JSCode(JSClassName + '.handle(' + VarToJSON([Err, false]) + ');', 'TExtError');
  Result := Self;
end;

constructor TExtError.Create(Config : String); begin
  CreateVar(JSClassName + '(' + VarToJSON([Config]) + ');');
  InitDefaults;
end;

constructor TExtError.Create(Config : TExtObject); begin
  if Config = nil then CreateVar(JSClassName + '({});') else
  CreateVar(JSClassName + '(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

function TExtError.ToString : TExtFunction; begin
  JSCode(JSName + '.toString();', 'TExtError');
  Result := Self;
end;

function TExtFormActionLoad.JSClassName : string; begin
  Result := 'Ext-form-action-Load';
end;

{$IFDEF FPC}constructor TExtFormActionLoad.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtLayoutContainerHBox.SetFAlign(Value : String); begin
  FAlign := Value;
  JSCode('align:' + VarToJSON([Value]));
end;

function TExtLayoutContainerHBox.JSClassName : string; begin
  Result := 'Ext-layout-container-HBox';
end;

{$IFDEF FPC}constructor TExtLayoutContainerHBox.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDdDragDrop.JSClassName : string; begin
  Result := 'Ext-dd-DragDrop';
end;

{$IFDEF FPC}constructor TExtDdDragDrop.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDdDragDrop.Create(Id : String; SGroup : String; Config : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Id, SGroup, Config, false]) + ');');
  InitDefaults;
end;

function TExtDdDragDrop.Lock : TExtFunction; begin
  JSCode(JSName + '.lock();', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.Unlock : TExtFunction; begin
  JSCode(JSName + '.unlock();', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.StartDrag(X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.startDrag(' + VarToJSON([X, Y]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnDrag(E : TEvent) : TExtFunction; begin
  JSCode(JSName + '.onDrag(' + VarToJSON([E, false]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnDragEnter(E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.onDragEnter(' + VarToJSON([E, false, Id]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnDragEnter(E : TEvent; Id : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.OnDragEnter(' + VarToJSON([E, false]) + ',' + VarToJSON(Id) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnDragOver(E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.onDragOver(' + VarToJSON([E, false, Id]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnDragOver(E : TEvent; Id : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.OnDragOver(' + VarToJSON([E, false]) + ',' + VarToJSON(Id) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnDragOut(E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.onDragOut(' + VarToJSON([E, false, Id]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnDragOut(E : TEvent; Id : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.OnDragOut(' + VarToJSON([E, false]) + ',' + VarToJSON(Id) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnDragDrop(E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.onDragDrop(' + VarToJSON([E, false, Id]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnDragDrop(E : TEvent; Id : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.OnDragDrop(' + VarToJSON([E, false]) + ',' + VarToJSON(Id) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnInvalidDrop(E : TEvent) : TExtFunction; begin
  JSCode(JSName + '.onInvalidDrop(' + VarToJSON([E, false]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.EndDrag(E : TEvent) : TExtFunction; begin
  JSCode(JSName + '.endDrag(' + VarToJSON([E, false]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnMouseDown(E : TEvent) : TExtFunction; begin
  JSCode(JSName + '.onMouseDown(' + VarToJSON([E, false]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnMouseUp(E : TEvent) : TExtFunction; begin
  JSCode(JSName + '.onMouseUp(' + VarToJSON([E, false]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.OnAvailable : TExtFunction; begin
  JSCode(JSName + '.onAvailable();', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.ConstrainTo(ConstrainTo : String; Pad : TExtObject = nil; InContent : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.constrainTo(' + VarToJSON([ConstrainTo, Pad, false, InContent]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.ConstrainTo(ConstrainTo : THTMLElement; Pad : TExtObject = nil; InContent : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.ConstrainTo(' + VarToJSON([ConstrainTo, false, Pad, false, InContent]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.ConstrainTo(ConstrainTo : THTMLElement; Pad : Integer; InContent : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.ConstrainTo(' + VarToJSON([ConstrainTo, false, Pad, InContent]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.ConstrainTo(ConstrainTo : TExtElement; Pad : TExtObject = nil; InContent : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.ConstrainTo(' + VarToJSON([ConstrainTo, false, Pad, false, InContent]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.ConstrainTo(ConstrainTo : TExtElement; Pad : Integer; InContent : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.ConstrainTo(' + VarToJSON([ConstrainTo, false, Pad, InContent]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.ConstrainTo(ConstrainTo : String; Pad : Integer; InContent : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.ConstrainTo(' + VarToJSON([ConstrainTo, Pad, InContent]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.GetEl : TExtFunction; begin
  JSCode(JSName + '.getEl();', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.GetDragEl : TExtFunction; begin
  JSCode(JSName + '.getDragEl();', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.Init(Id : String; SGroup : String; Config : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.init(' + VarToJSON([Id, SGroup, Config, false]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.InitTarget(Id : String; SGroup : String; Config : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.initTarget(' + VarToJSON([Id, SGroup, Config, false]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.ApplyConfig : TExtFunction; begin
  JSCode(JSName + '.applyConfig();', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.SetPadding(ITop : Integer; IRight : Integer; IBot : Integer; ILeft : Integer) : TExtFunction; begin
  JSCode(JSName + '.setPadding(' + VarToJSON([ITop, IRight, IBot, ILeft]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.SetInitPosition(DiffX : Integer; DiffY : Integer) : TExtFunction; begin
  JSCode(JSName + '.setInitPosition(' + VarToJSON([DiffX, DiffY]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.AddToGroup(SGroup : String) : TExtFunction; begin
  JSCode(JSName + '.addToGroup(' + VarToJSON([SGroup]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.RemoveFromGroup(SGroup : String) : TExtFunction; begin
  JSCode(JSName + '.removeFromGroup(' + VarToJSON([SGroup]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.SetDragElId(Id : String) : TExtFunction; begin
  JSCode(JSName + '.setDragElId(' + VarToJSON([Id]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.SetHandleElId(Id : String) : TExtFunction; begin
  JSCode(JSName + '.setHandleElId(' + VarToJSON([Id]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.SetOuterHandleElId(Id : String) : TExtFunction; begin
  JSCode(JSName + '.setOuterHandleElId(' + VarToJSON([Id]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.Unreg : TExtFunction; begin
  JSCode(JSName + '.unreg();', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.IsLocked : TExtFunction; begin
  JSCode(JSName + '.isLocked();', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.AddInvalidHandleType(TagName : String) : TExtFunction; begin
  JSCode(JSName + '.addInvalidHandleType(' + VarToJSON([TagName]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.AddInvalidHandleId(Id : String) : TExtFunction; begin
  JSCode(JSName + '.addInvalidHandleId(' + VarToJSON([Id]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.AddInvalidHandleClass(CssClass : String) : TExtFunction; begin
  JSCode(JSName + '.addInvalidHandleClass(' + VarToJSON([CssClass]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.RemoveInvalidHandleType(TagName : String) : TExtFunction; begin
  JSCode(JSName + '.removeInvalidHandleType(' + VarToJSON([TagName]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.RemoveInvalidHandleId(Id : String) : TExtFunction; begin
  JSCode(JSName + '.removeInvalidHandleId(' + VarToJSON([Id]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.RemoveInvalidHandleClass(CssClass : String) : TExtFunction; begin
  JSCode(JSName + '.removeInvalidHandleClass(' + VarToJSON([CssClass]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.IsValidHandleChild(Node : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.isValidHandleChild(' + VarToJSON([Node, false]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.SetXConstraint(ILeft : Integer; IRight : Integer; ITickSize : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.setXConstraint(' + VarToJSON([ILeft, IRight, ITickSize]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.ClearConstraints : TExtFunction; begin
  JSCode(JSName + '.clearConstraints();', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.ClearTicks : TExtFunction; begin
  JSCode(JSName + '.clearTicks();', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.SetYConstraint(IUp : Integer; IDown : Integer; ITickSize : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.setYConstraint(' + VarToJSON([IUp, IDown, ITickSize]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.ResetConstraints(MaintainOffset : Boolean; Val : Integer; TickArray : TArrayOfInteger) : TExtFunction; begin
  JSCode(JSName + '.resetConstraints(' + VarToJSON([MaintainOffset, Val, TickArray]) + ');', 'TExtDdDragDrop');
  Result := Self;
end;

function TExtDdDragDrop.ToString : TExtFunction; begin
  JSCode(JSName + '.toString();', 'TExtDdDragDrop');
  Result := Self;
end;

procedure TExtDataResultSet.SetFLoaded(Value : Boolean); begin
  FLoaded := Value;
  JSCode('loaded:' + VarToJSON([Value]));
end;

procedure TExtDataResultSet.SetFCount(Value : Integer); begin
  FCount := Value;
  JSCode('count:' + VarToJSON([Value]));
end;

procedure TExtDataResultSet.SetFTotal(Value : Integer); begin
  FTotal := Value;
  JSCode('total:' + VarToJSON([Value]));
end;

procedure TExtDataResultSet.SetFSuccess(Value : Boolean); begin
  FSuccess := Value;
  JSCode('success:' + VarToJSON([Value]));
end;

procedure TExtDataResultSet.SetFRecords(Value : TExtObjectList); begin
  FRecords := Value;
  Value.DeleteFromGarbage;
  JSCode('records:' + VarToJSON([Value, false]));
end;

function TExtDataResultSet.JSClassName : string; begin
  Result := 'Ext-data-ResultSet';
end;

procedure TExtDataResultSet.InitDefaults; begin
  inherited;
  FRecords := TExtObjectList.Create(Self, 'records');
end;

{$IFDEF FPC}constructor TExtDataResultSet.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataResultSet.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

constructor TExtDataResultSet.Create(Config : TExtObject = nil); begin
  if Config = nil then CreateVar(JSClassName + '({});') else
  CreateVar(JSClassName + '(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

destructor TExtDataResultSet.Destroy; begin
  try
    FRecords.Free;
  except end;
  inherited;
end;

procedure TExtDataWriterWriter.SetFWriteAllFields(Value : Boolean); begin
  FWriteAllFields := Value;
  JSCode('writeAllFields:' + VarToJSON([Value]));
end;

procedure TExtDataWriterWriter.SetFNameProperty(Value : String); begin
  FNameProperty := Value;
  JSCode('nameProperty:' + VarToJSON([Value]));
end;

function TExtDataWriterWriter.JSClassName : string; begin
  Result := 'Ext-data-writer-Writer';
end;

{$IFDEF FPC}constructor TExtDataWriterWriter.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataWriterWriter.Create(Config : TExtObject = nil); begin
  if Config = nil then CreateVar(JSClassName + '({});') else
  CreateVar(JSClassName + '(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

function TExtDataWriterWriter.Write(Request : TExtDataRequest) : TExtFunction; begin
  JSCode(JSName + '.write(' + VarToJSON([Request, false]) + ');', 'TExtDataWriterWriter');
  Result := Self;
end;

function TExtDataWriterWriter.GetRecordData(RecordJS : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getRecordData(' + VarToJSON([RecordJS, false]) + ');', 'TExtDataWriterWriter');
  Result := Self;
end;

procedure TExtClassManagerSingleton.SetFAlias(Value : TExtObjectList); begin
  FAlias := Value;
  Value.DeleteFromGarbage;
  JSCode('alias:' + VarToJSON([Value, false]));
end;

procedure TExtClassManagerSingleton.SetFSingleton(Value : Boolean); begin
  FSingleton := Value;
  JSCode('singleton:' + VarToJSON([Value]));
end;

procedure TExtClassManagerSingleton.SetFAlternateClassName(Value : String); begin
  FAlternateClassName := Value;
  JSCode('alternateClassName:' + VarToJSON([Value]));
end;

procedure TExtClassManagerSingleton.SetFAlternateClassNameTExtObjectList(Value : TExtObjectList); begin
  FAlternateClassNameTExtObjectList := Value;
  Value.DeleteFromGarbage;
  JSCode('alternateClassName:' + VarToJSON([Value, false]));
end;

procedure TExtClassManagerSingleton.SetFOverride(Value : String); begin
  FOverride := Value;
  JSCode('override:' + VarToJSON([Value]));
end;

function TExtClassManagerSingleton.JSClassName : string; begin
  Result := 'Ext-ClassManagerSingleton';
end;

procedure TExtClassManagerSingleton.InitDefaults; begin
  inherited;
  FAlias := TExtObjectList.Create(Self, 'alias');
  FAlternateClassNameTExtObjectList := TExtObjectList.Create(Self, 'alternateClassName');
end;

{$IFDEF FPC}constructor TExtClassManagerSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtClassManagerSingleton.Define : TExtFunction; begin
  JSCode(JSName + '.define();', 'TExtClassManagerSingleton');
  Result := Self;
end;

function TExtClassManagerSingleton.GetClassName : TExtFunction; begin
  JSCode(JSName + '.getClassName();', 'TExtClassManagerSingleton');
  Result := Self;
end;

function TExtClassManagerSingleton.GetDisplayName(ObjectJS : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getDisplayName(' + VarToJSON([ObjectJS, false]) + ');', 'TExtClassManagerSingleton');
  Result := Self;
end;

function TExtClassManagerSingleton.GetClass : TExtFunction; begin
  JSCode(JSName + '.getClass();', 'TExtClassManagerSingleton');
  Result := Self;
end;

function TExtClassManagerSingleton.Namespace(Namespace1 : String; Namespace2 : String; Etc : String) : TExtFunction; begin
  JSCode(JSName + '.namespace(' + VarToJSON([Namespace1, Namespace2, Etc]) + ');', 'TExtClassManagerSingleton');
  Result := Self;
end;

function TExtClassManagerSingleton.CreateWidget : TExtFunction; begin
  JSCode(JSName + '.createWidget();', 'TExtClassManagerSingleton');
  Result := Self;
end;

function TExtClassManagerSingleton.Ns : TExtFunction; begin
  JSCode(JSName + '.ns();', 'TExtClassManagerSingleton');
  Result := Self;
end;

destructor TExtClassManagerSingleton.Destroy; begin
  try
    FAlias.Free;
    FAlternateClassNameTExtObjectList.Free;
  except end;
  inherited;
end;

procedure TExtDataReaderJson.SetFRecordJS(Value : String); begin
  FRecordJS := Value;
  JSCode('recordJS:' + VarToJSON([Value]));
end;

procedure TExtDataReaderJson.SetFUseSimpleAccessors(Value : Boolean); begin
  FUseSimpleAccessors := Value;
  JSCode('useSimpleAccessors:' + VarToJSON([Value]));
end;

function TExtDataReaderJson.JSClassName : string; begin
  Result := 'Ext-data-reader-Json';
end;

{$IFDEF FPC}constructor TExtDataReaderJson.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataReaderJson.ReadRecords(Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.readRecords(' + VarToJSON([Data, false]) + ');', 'TExtDataReaderJson');
  Result := Self;
end;

procedure TExtDataBelongsToAssociation.SetFForeignKey(Value : String); begin
  FForeignKey := Value;
  JSCode('foreignKey:' + VarToJSON([Value]));
end;

procedure TExtDataBelongsToAssociation.SetFGetterName(Value : String); begin
  FGetterName := Value;
  JSCode('getterName:' + VarToJSON([Value]));
end;

procedure TExtDataBelongsToAssociation.SetFSetterName(Value : String); begin
  FSetterName := Value;
  JSCode('setterName:' + VarToJSON([Value]));
end;

procedure TExtDataBelongsToAssociation.SetFTypeJS(Value : String); begin
  FTypeJS := Value;
  JSCode('typeJS:' + VarToJSON([Value]));
end;

function TExtDataBelongsToAssociation.JSClassName : string; begin
  Result := 'Ext-data-BelongsToAssociation';
end;

{$IFDEF FPC}constructor TExtDataBelongsToAssociation.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtDrawColor.SetFLightnessFactor(Value : Integer); begin
  FLightnessFactor := Value;
  JSCode('lightnessFactor:' + VarToJSON([Value]));
end;

function TExtDrawColor.JSClassName : string; begin
  Result := 'Ext-draw-Color';
end;

{$IFDEF FPC}constructor TExtDrawColor.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDrawColor.Create(Red : Integer; Green : Integer; Blue : Integer); begin
  CreateVar(JSClassName + '(' + VarToJSON([Red, Green, Blue]) + ');');
  InitDefaults;
end;

function TExtDrawColor.GetRed : TExtFunction; begin
  JSCode(JSName + '.getRed();', 'TExtDrawColor');
  Result := Self;
end;

function TExtDrawColor.GetGreen : TExtFunction; begin
  JSCode(JSName + '.getGreen();', 'TExtDrawColor');
  Result := Self;
end;

function TExtDrawColor.GetBlue : TExtFunction; begin
  JSCode(JSName + '.getBlue();', 'TExtDrawColor');
  Result := Self;
end;

function TExtDrawColor.GetRGB : TExtFunction; begin
  JSCode(JSName + '.getRGB();', 'TExtDrawColor');
  Result := Self;
end;

function TExtDrawColor.GetHSL : TExtFunction; begin
  JSCode(JSName + '.getHSL();', 'TExtDrawColor');
  Result := Self;
end;

function TExtDrawColor.GetLighter(Factor : Integer) : TExtFunction; begin
  JSCode(JSName + '.getLighter(' + VarToJSON([Factor]) + ');', 'TExtDrawColor');
  Result := Self;
end;

function TExtDrawColor.GetDarker(Factor : Integer) : TExtFunction; begin
  JSCode(JSName + '.getDarker(' + VarToJSON([Factor]) + ');', 'TExtDrawColor');
  Result := Self;
end;

function TExtDrawColor.ToString : TExtFunction; begin
  JSCode(JSName + '.toString();', 'TExtDrawColor');
  Result := Self;
end;

class function TExtDrawColor.ToHex(Color : String) : TExtFunction; begin
  JSCode(JSClassName + '.toHex(' + VarToJSON([Color]) + ');', 'TExtDrawColor');
  Result := Self;
end;

function TExtDrawColor.ToHex(Color : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.ToHex(' + VarToJSON(Color) + ');', 'TExtDrawColor');
  Result := Self;
end;

class function TExtDrawColor.FromString(Str : String) : TExtFunction; begin
  JSCode(JSClassName + '.fromString(' + VarToJSON([Str]) + ');', 'TExtDrawColor');
  Result := Self;
end;

function TExtDrawColor.GetGrayscale : TExtFunction; begin
  JSCode(JSName + '.getGrayscale();', 'TExtDrawColor');
  Result := Self;
end;

class function TExtDrawColor.FromHSL(H : Integer; S : Integer; L : Integer) : TExtFunction; begin
  JSCode(JSClassName + '.fromHSL(' + VarToJSON([H, S, L]) + ');', 'TExtDrawColor');
  Result := Self;
end;

procedure TExtChartSeriesArea.SetFStyle(Value : TExtObject); begin
  FStyle := Value;
  Value.DeleteFromGarbage;
  JSCode('style:' + VarToJSON([Value, false]));
end;

procedure TExtChartSeriesArea.SetFStyle_(Value : TExtObject); begin
  FStyle_ := Value;
  Value.DeleteFromGarbage;
  JSCode('style:' + VarToJSON([Value, false]));
end;

function TExtChartSeriesArea.JSClassName : string; begin
  Result := 'Ext-chart-series-Area';
end;

procedure TExtChartSeriesArea.InitDefaults; begin
  inherited;
  FStyle := TExtObject.CreateInternal(Self, 'style');
  FStyle_ := TExtObject.CreateInternal(Self, 'style');
end;

{$IFDEF FPC}constructor TExtChartSeriesArea.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtChartSeriesArea.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtChartSeriesArea.DrawSeries : TExtFunction; begin
  JSCode(JSName + '.drawSeries();', 'TExtChartSeriesArea');
  Result := Self;
end;

function TExtChartSeriesArea.HighlightSeries(Item : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.highlightSeries(' + VarToJSON([Item, false]) + ');', 'TExtChartSeriesArea');
  Result := Self;
end;

function TExtChartSeriesArea.UnHighlightSeries(Item : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.unHighlightSeries(' + VarToJSON([Item, false]) + ');', 'TExtChartSeriesArea');
  Result := Self;
end;

function TExtChartSeriesArea.HighlightItem(Info : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.highlightItem(' + VarToJSON([Info, false]) + ');', 'TExtChartSeriesArea');
  Result := Self;
end;

function TExtChartSeriesArea.UnHighlightItem(Info : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.unHighlightItem(' + VarToJSON([Info, false]) + ');', 'TExtChartSeriesArea');
  Result := Self;
end;

function TExtChartSeriesArea.GetLegendColor(Info : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getLegendColor(' + VarToJSON([Info, false]) + ');', 'TExtChartSeriesArea');
  Result := Self;
end;

destructor TExtChartSeriesArea.Destroy; begin
  try
    FStyle.Free;
    FStyle_.Free;
  except end;
  inherited;
end;

function TExtUtilTextMetrics.JSClassName : string; begin
  Result := 'Ext-util-TextMetrics';
end;

{$IFDEF FPC}constructor TExtUtilTextMetrics.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilTextMetrics.Measure(El : String; Text : String; FixedWidth : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.measure(' + VarToJSON([El, Text, FixedWidth]) + ');', 'TExtUtilTextMetrics');
  Result := Self;
end;

function TExtUtilTextMetrics.Measure(El : THTMLElement; Text : String; FixedWidth : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.Measure(' + VarToJSON([El, false, Text, FixedWidth]) + ');', 'TExtUtilTextMetrics');
  Result := Self;
end;

function TExtUtilTextMetrics.DestroyJS : TExtFunction; begin
  JSCode(JSName + '.destroy();', 'TExtUtilTextMetrics');
  Result := Self;
end;

constructor TExtUtilTextMetrics.Create(BindTo : String; FixedWidth : Integer = 0); begin
  CreateVar(JSClassName + '(' + VarToJSON([BindTo, FixedWidth]) + ');');
  InitDefaults;
end;

constructor TExtUtilTextMetrics.Create(BindTo : THTMLElement; FixedWidth : Integer = 0); begin
  CreateVar(JSClassName + '(' + VarToJSON([BindTo, false, FixedWidth]) + ');');
  InitDefaults;
end;

constructor TExtUtilTextMetrics.Create(BindTo : TExtElement; FixedWidth : Integer = 0); begin
  CreateVar(JSClassName + '(' + VarToJSON([BindTo, false, FixedWidth]) + ');');
  InitDefaults;
end;

function TExtUtilTextMetrics.GetSize(Text : String) : TExtFunction; begin
  JSCode(JSName + '.getSize(' + VarToJSON([Text]) + ');', 'TExtUtilTextMetrics');
  Result := Self;
end;

function TExtUtilTextMetrics.Bind(El : String) : TExtFunction; begin
  JSCode(JSName + '.bind(' + VarToJSON([El]) + ');', 'TExtUtilTextMetrics');
  Result := Self;
end;

function TExtUtilTextMetrics.Bind(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.Bind(' + VarToJSON([El, false]) + ');', 'TExtUtilTextMetrics');
  Result := Self;
end;

function TExtUtilTextMetrics.Bind(El : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.Bind(' + VarToJSON([El, false]) + ');', 'TExtUtilTextMetrics');
  Result := Self;
end;

function TExtUtilTextMetrics.SetFixedWidth(Width : Integer) : TExtFunction; begin
  JSCode(JSName + '.setFixedWidth(' + VarToJSON([Width]) + ');', 'TExtUtilTextMetrics');
  Result := Self;
end;

function TExtUtilTextMetrics.GetWidth(Text : String) : TExtFunction; begin
  JSCode(JSName + '.getWidth(' + VarToJSON([Text]) + ');', 'TExtUtilTextMetrics');
  Result := Self;
end;

function TExtUtilTextMetrics.GetHeight(Text : String) : TExtFunction; begin
  JSCode(JSName + '.getHeight(' + VarToJSON([Text]) + ');', 'TExtUtilTextMetrics');
  Result := Self;
end;

function TExtUtilTextMetrics.DestroyJS_ : TExtFunction; begin
  JSCode(JSName + '.destroy();', 'TExtUtilTextMetrics');
  Result := Self;
end;

function TExtUtilTextMetrics.GetTextWidth(Text : String; Min : Integer = 0; Max : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.getTextWidth(' + VarToJSON([Text, Min, Max]) + ');', 'TExtUtilTextMetrics');
  Result := Self;
end;

procedure TExtFormActionAction.SetFForm(Value : TExtFormBasic); begin
  FForm := Value;
  Value.DeleteFromGarbage;
  JSCode('form:' + VarToJSON([Value, false]));
end;

procedure TExtFormActionAction.SetFUrl(Value : String); begin
  FUrl := Value;
  JSCode('url:' + VarToJSON([Value]));
end;

procedure TExtFormActionAction.SetFReset(Value : Boolean); begin
  FReset := Value;
  JSCode('reset:' + VarToJSON([Value]));
end;

procedure TExtFormActionAction.SetFMethod(Value : String); begin
  FMethod := Value;
  JSCode('method:' + VarToJSON([Value]));
end;

procedure TExtFormActionAction.SetFParams(Value : TExtObject); begin
  FParams := Value;
  Value.DeleteFromGarbage;
  JSCode('params:' + VarToJSON([Value, false]));
end;

procedure TExtFormActionAction.SetFParamsString(Value : String); begin
  FParamsString := Value;
  JSCode('params:' + VarToJSON([Value]));
end;

procedure TExtFormActionAction.SetFHeaders(Value : TExtObject); begin
  FHeaders := Value;
  Value.DeleteFromGarbage;
  JSCode('headers:' + VarToJSON([Value, false]));
end;

procedure TExtFormActionAction.SetFTimeout(Value : Integer); begin
  FTimeout := Value;
  JSCode('timeout:' + VarToJSON([Value]));
end;

procedure TExtFormActionAction.SetFSuccess(Value : TExtFunction); begin
  FSuccess := Value;
  JSCode('success:' + VarToJSON([Value, true]));
end;

procedure TExtFormActionAction.SetFFailure(Value : TExtFunction); begin
  FFailure := Value;
  JSCode('failure:' + VarToJSON([Value, true]));
end;

procedure TExtFormActionAction.SetFScope(Value : TExtObject); begin
  FScope := Value;
  Value.DeleteFromGarbage;
  JSCode('scope:' + VarToJSON([Value, false]));
end;

procedure TExtFormActionAction.SetFWaitMsg(Value : String); begin
  FWaitMsg := Value;
  JSCode('waitMsg:' + VarToJSON([Value]));
end;

procedure TExtFormActionAction.SetFWaitTitle(Value : String); begin
  FWaitTitle := Value;
  JSCode('waitTitle:' + VarToJSON([Value]));
end;

procedure TExtFormActionAction.SetFSubmitEmptyText(Value : Boolean); begin
  FSubmitEmptyText := Value;
  JSCode('submitEmptyText:' + VarToJSON([Value]));
end;

procedure TExtFormActionAction.SetFTypeJS(Value : String); begin
  FTypeJS := Value;
  JSCode(JSName + '.typeJS=' + VarToJSON([Value]) + ';');
end;

procedure TExtFormActionAction.SetFFailureType(Value : String); begin
  FFailureType := Value;
  JSCode(JSName + '.failureType=' + VarToJSON([Value]) + ';');
end;

procedure TExtFormActionAction.SetFResponse(Value : TExtObject); begin
  FResponse := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.response=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtFormActionAction.SetFResultJS(Value : TExtObject); begin
  FResultJS := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.resultJS=' + VarToJSON([Value, false]) + ';');
end;

function TExtFormActionAction.JSClassName : string; begin
  Result := 'Ext-form-action-Action';
end;

class function TExtFormActionAction.CLIENT_INVALID : String; begin
  Result := ''
end;

class function TExtFormActionAction.SERVER_INVALID : String; begin
  Result := ''
end;

class function TExtFormActionAction.CONNECT_FAILURE : String; begin
  Result := ''
end;

class function TExtFormActionAction.LOAD_FAILURE : String; begin
  Result := ''
end;

procedure TExtFormActionAction.InitDefaults; begin
  inherited;
  FForm := TExtFormBasic.CreateInternal(Self, 'form');
  FParams := TExtObject.CreateInternal(Self, 'params');
  FHeaders := TExtObject.CreateInternal(Self, 'headers');
  FScope := TExtObject.CreateInternal(Self, 'scope');
  FResponse := TExtObject.CreateInternal(Self, 'response');
  FResultJS := TExtObject.CreateInternal(Self, 'resultJS');
end;

{$IFDEF FPC}constructor TExtFormActionAction.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtFormActionAction.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

destructor TExtFormActionAction.Destroy; begin
  try
    FForm.Free;
    FParams.Free;
    FHeaders.Free;
    FScope.Free;
    FResponse.Free;
    FResultJS.Free;
  except end;
  inherited;
end;

procedure TExtGridPagingScroller.SetFPercentageFromEdge(Value : Integer); begin
  FPercentageFromEdge := Value;
  JSCode('percentageFromEdge:' + VarToJSON([Value]));
end;

procedure TExtGridPagingScroller.SetFScrollToLoadBuffer(Value : Integer); begin
  FScrollToLoadBuffer := Value;
  JSCode('scrollToLoadBuffer:' + VarToJSON([Value]));
end;

function TExtGridPagingScroller.JSClassName : string; begin
  Result := 'Ext-grid-PagingScroller';
end;

{$IFDEF FPC}constructor TExtGridPagingScroller.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtFormFieldTime.SetFTriggerCls(Value : String); begin
  FTriggerCls := Value;
  JSCode('triggerCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTime.SetFMinValue(Value : TDateTime); begin
  FMinValue := Value;
  if not ConfigAvailable(JSName) then
    SetMinValue(Value)
  else
    JSCode('minValue:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTime.SetFMinValueString(Value : String); begin
  FMinValueString := Value;
  JSCode('minValue:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTime.SetFMaxValue(Value : TDateTime); begin
  FMaxValue := Value;
  if not ConfigAvailable(JSName) then
    SetMaxValue(Value)
  else
    JSCode('maxValue:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTime.SetFMaxValueString(Value : String); begin
  FMaxValueString := Value;
  JSCode('maxValue:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTime.SetFMinText(Value : String); begin
  FMinText := Value;
  JSCode('minText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTime.SetFMaxText(Value : String); begin
  FMaxText := Value;
  JSCode('maxText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTime.SetFInvalidText(Value : String); begin
  FInvalidText := Value;
  JSCode('invalidText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTime.SetFFormat(Value : String); begin
  FFormat := Value;
  JSCode('format:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTime.SetFSubmitFormat(Value : String); begin
  FSubmitFormat := Value;
  JSCode('submitFormat:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTime.SetFAltFormats(Value : String); begin
  FAltFormats := Value;
  JSCode('altFormats:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTime.SetFIncrement(Value : Integer); begin
  FIncrement := Value;
  JSCode('increment:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTime.SetFPickerMaxHeight(Value : Integer); begin
  FPickerMaxHeight := Value;
  JSCode('pickerMaxHeight:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTime.SetFSelectOnTab(Value : Boolean); begin
  FSelectOnTab := Value;
  JSCode('selectOnTab:' + VarToJSON([Value]));
end;

function TExtFormFieldTime.JSClassName : string; begin
  Result := 'Ext-form-field-Time';
end;

{$IFDEF FPC}constructor TExtFormFieldTime.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtFormFieldTime.SetMinValue(Value : TDateTime) : TExtFunction; begin
  JSCode(JSName + '.setMinValue(' + VarToJSON([Value]) + ');', 'TExtFormFieldTime');
  Result := Self;
end;

function TExtFormFieldTime.SetMinValue(Value : String) : TExtFunction; begin
  JSCode(JSName + '.SetMinValue(' + VarToJSON([Value]) + ');', 'TExtFormFieldTime');
  Result := Self;
end;

function TExtFormFieldTime.SetMaxValue(Value : TDateTime) : TExtFunction; begin
  JSCode(JSName + '.setMaxValue(' + VarToJSON([Value]) + ');', 'TExtFormFieldTime');
  Result := Self;
end;

function TExtFormFieldTime.SetMaxValue(Value : String) : TExtFunction; begin
  JSCode(JSName + '.SetMaxValue(' + VarToJSON([Value]) + ');', 'TExtFormFieldTime');
  Result := Self;
end;

function TExtFormFieldTime.GetErrors(Value : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.getErrors(' + VarToJSON([Value, false]) + ');', 'TExtFormFieldTime');
  Result := Self;
end;

function TExtFxTargetCompositeElementCSS.JSClassName : string; begin
  Result := 'Ext-fx-target-CompositeElementCSS';
end;

{$IFDEF FPC}constructor TExtFxTargetCompositeElementCSS.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDdDragDropManagerSingleton.JSClassName : string; begin
  Result := 'Ext-dd-DragDropManagerSingleton';
end;

{$IFDEF FPC}constructor TExtDdDragDropManagerSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDdDragDropManagerSingleton.Lock : TExtFunction; begin
  JSCode(JSName + '.lock();', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.Unlock : TExtFunction; begin
  JSCode(JSName + '.unlock();', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.IsLocked : TExtFunction; begin
  JSCode(JSName + '.isLocked();', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.RegDragDrop(ODD : TExtDdDragDrop; SGroup : String) : TExtFunction; begin
  JSCode(JSName + '.regDragDrop(' + VarToJSON([ODD, false, SGroup]) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.RegHandle(SDDId : String; SHandleId : String) : TExtFunction; begin
  JSCode(JSName + '.regHandle(' + VarToJSON([SDDId, SHandleId]) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.IsDragDrop(Id : String) : TExtFunction; begin
  JSCode(JSName + '.isDragDrop(' + VarToJSON([Id]) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.GetRelated(P_oDD : TExtDdDragDrop; BTargetsOnly : Boolean) : TExtFunction; begin
  JSCode(JSName + '.getRelated(' + VarToJSON([P_oDD, false, BTargetsOnly]) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.IsLegalTarget(ODD : TExtDdDragDrop; OTargetDD : TExtDdDragDrop) : TExtFunction; begin
  JSCode(JSName + '.isLegalTarget(' + VarToJSON([ODD, false, OTargetDD, false]) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.IsTypeOfDD(The : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.isTypeOfDD(' + VarToJSON([The, false]) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.IsHandle(Id : String) : TExtFunction; begin
  JSCode(JSName + '.isHandle(' + VarToJSON([Id]) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.GetDDById(Id : String) : TExtFunction; begin
  JSCode(JSName + '.getDDById(' + VarToJSON([Id]) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.StartDrag(X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.startDrag(' + VarToJSON([X, Y]) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.StopEvent(E : TEvent) : TExtFunction; begin
  JSCode(JSName + '.stopEvent(' + VarToJSON([E, false]) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.GetBestMatch(Dds : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.getBestMatch(' + VarToJSON(Dds) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.RefreshCache(Groups : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.refreshCache(' + VarToJSON([Groups, false]) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.VerifyEl(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.verifyEl(' + VarToJSON([El, false]) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.GetLocation(ODD : TExtDdDragDrop) : TExtFunction; begin
  JSCode(JSName + '.getLocation(' + VarToJSON([ODD, false]) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.GetElement(Id : String) : TExtFunction; begin
  JSCode(JSName + '.getElement(' + VarToJSON([Id]) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.GetCss(Id : String) : TExtFunction; begin
  JSCode(JSName + '.getCss(' + VarToJSON([Id]) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.GetPosX(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.getPosX(' + VarToJSON([El, false]) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.GetPosY(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.getPosY(' + VarToJSON([El, false]) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.SwapNode(N1 : THTMLElement; N2 : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.swapNode(' + VarToJSON([N1, false, N2, false]) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.GetStyle(El : THTMLElement; Param : String) : TExtFunction; begin
  JSCode(JSName + '.getStyle(' + VarToJSON([El, false, Param]) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.GetScrollTop : TExtFunction; begin
  JSCode(JSName + '.getScrollTop();', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.GetScrollLeft : TExtFunction; begin
  JSCode(JSName + '.getScrollLeft();', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.MoveToEl(MoveEl : THTMLElement; TargetEl : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.moveToEl(' + VarToJSON([MoveEl, false, TargetEl, false]) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.NumericSort(A : Integer; B : Integer) : TExtFunction; begin
  JSCode(JSName + '.numericSort(' + VarToJSON([A, B]) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtDdDragDropManagerSingleton.HandleWasClicked(Node : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.handleWasClicked(' + VarToJSON([Node, false]) + ');', 'TExtDdDragDropManagerSingleton');
  Result := Self;
end;

function TExtToolbarSeparator.JSClassName : string; begin
  Result := 'Ext-toolbar-Separator';
end;

{$IFDEF FPC}constructor TExtToolbarSeparator.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDdDropZone.JSClassName : string; begin
  Result := 'Ext-dd-DropZone';
end;

{$IFDEF FPC}constructor TExtDdDropZone.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDdDropZone.GetTargetFromEvent(E : TEvent) : TExtFunction; begin
  JSCode(JSName + '.getTargetFromEvent(' + VarToJSON([E, false]) + ');', 'TExtDdDropZone');
  Result := Self;
end;

function TExtDdDropZone.OnNodeEnter(NodeData : TExtObject; Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.onNodeEnter(' + VarToJSON([NodeData, false, Source, false, E, false, Data, false]) + ');', 'TExtDdDropZone');
  Result := Self;
end;

function TExtDdDropZone.OnNodeOver(NodeData : TExtObject; Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.onNodeOver(' + VarToJSON([NodeData, false, Source, false, E, false, Data, false]) + ');', 'TExtDdDropZone');
  Result := Self;
end;

function TExtDdDropZone.OnNodeOut(NodeData : TExtObject; Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.onNodeOut(' + VarToJSON([NodeData, false, Source, false, E, false, Data, false]) + ');', 'TExtDdDropZone');
  Result := Self;
end;

function TExtDdDropZone.OnNodeDrop(NodeData : TExtObject; Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.onNodeDrop(' + VarToJSON([NodeData, false, Source, false, E, false, Data, false]) + ');', 'TExtDdDropZone');
  Result := Self;
end;

function TExtDdDropZone.OnContainerOver(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.onContainerOver(' + VarToJSON([Source, false, E, false, Data, false]) + ');', 'TExtDdDropZone');
  Result := Self;
end;

function TExtDdDropZone.OnContainerDrop(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.onContainerDrop(' + VarToJSON([Source, false, E, false, Data, false]) + ');', 'TExtDdDropZone');
  Result := Self;
end;

function TExtDdDropZone.NotifyEnter(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.notifyEnter(' + VarToJSON([Source, false, E, false, Data, false]) + ');', 'TExtDdDropZone');
  Result := Self;
end;

function TExtDdDropZone.NotifyOver(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.notifyOver(' + VarToJSON([Source, false, E, false, Data, false]) + ');', 'TExtDdDropZone');
  Result := Self;
end;

function TExtDdDropZone.NotifyOut(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.notifyOut(' + VarToJSON([Source, false, E, false, Data, false]) + ');', 'TExtDdDropZone');
  Result := Self;
end;

function TExtDdDropZone.NotifyDrop(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.notifyDrop(' + VarToJSON([Source, false, E, false, Data, false]) + ');', 'TExtDdDropZone');
  Result := Self;
end;

function TExtDirectExceptionEvent.JSClassName : string; begin
  Result := 'Ext-direct-ExceptionEvent';
end;

{$IFDEF FPC}constructor TExtDirectExceptionEvent.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilTaskRunner.JSClassName : string; begin
  Result := 'Ext-util-TaskRunner-method-constructor';
end;

{$IFDEF FPC}constructor TExtUtilTaskRunner.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilTaskRunner.Start(Task : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.start(' + VarToJSON([Task, false]) + ');', 'TExtUtilTaskRunner');
  Result := Self;
end;

function TExtUtilTaskRunner.Stop(Task : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.stop(' + VarToJSON([Task, false]) + ');', 'TExtUtilTaskRunner');
  Result := Self;
end;

function TExtUtilTaskRunner.StopAll : TExtFunction; begin
  JSCode(JSName + '.stopAll();', 'TExtUtilTaskRunner');
  Result := Self;
end;

procedure TExtFormFieldCheckbox.SetFFocusCls(Value : String); begin
  FFocusCls := Value;
  JSCode('focusCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldCheckbox.SetFFieldCls(Value : String); begin
  FFieldCls := Value;
  JSCode('fieldCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldCheckbox.SetFFieldBodyCls(Value : String); begin
  FFieldBodyCls := Value;
  JSCode('fieldBodyCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldCheckbox.SetFChecked(Value : Boolean); begin
  FChecked := Value;
  JSCode('checked:' + VarToJSON([Value]));
end;

procedure TExtFormFieldCheckbox.SetFCheckedCls(Value : String); begin
  FCheckedCls := Value;
  JSCode('checkedCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldCheckbox.SetFBoxLabel(Value : String); begin
  FBoxLabel := Value;
  JSCode('boxLabel:' + VarToJSON([Value]));
end;

procedure TExtFormFieldCheckbox.SetFBoxLabelCls(Value : String); begin
  FBoxLabelCls := Value;
  JSCode('boxLabelCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldCheckbox.SetFBoxLabelAlign(Value : String); begin
  FBoxLabelAlign := Value;
  JSCode('boxLabelAlign:' + VarToJSON([Value]));
end;

procedure TExtFormFieldCheckbox.SetFInputValue(Value : String); begin
  FInputValue := Value;
  JSCode('inputValue:' + VarToJSON([Value]));
end;

procedure TExtFormFieldCheckbox.SetFUncheckedValue(Value : String); begin
  FUncheckedValue := Value;
  JSCode('uncheckedValue:' + VarToJSON([Value]));
end;

procedure TExtFormFieldCheckbox.SetFHandler(Value : TExtFunction); begin
  FHandler := Value;
  JSCode('handler:' + VarToJSON([Value, true]));
end;

procedure TExtFormFieldCheckbox.SetFScope(Value : TExtObject); begin
  FScope := Value;
  Value.DeleteFromGarbage;
  JSCode('scope:' + VarToJSON([Value, false]));
end;

function TExtFormFieldCheckbox.JSClassName : string; begin
  Result := 'Ext-form-field-Checkbox';
end;

class function TExtFormFieldCheckbox.Checkbox : TExtFormFieldCheckbox;
const
  lCheckbox : TExtFormFieldCheckbox = nil;
begin
  if lCheckbox = nil then lCheckbox := TExtFormFieldCheckbox.CreateSingleton('Ext-form-field-Checkbox.Checkbox');
  Result := lCheckbox
end;

class function TExtFormFieldCheckbox.Checked_ : Boolean; begin
  Result := false
end;

procedure TExtFormFieldCheckbox.InitDefaults; begin
  inherited;
  FScope := TExtObject.CreateInternal(Self, 'scope');
end;

{$IFDEF FPC}constructor TExtFormFieldCheckbox.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtFormFieldCheckbox.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtFormFieldCheckbox.GetRawValue : TExtFunction; begin
  JSCode(JSName + '.getRawValue();', 'TExtFormFieldCheckbox');
  Result := Self;
end;

function TExtFormFieldCheckbox.GetValue : TExtFunction; begin
  JSCode(JSName + '.getValue();', 'TExtFormFieldCheckbox');
  Result := Self;
end;

function TExtFormFieldCheckbox.GetSubmitValue : TExtFunction; begin
  JSCode(JSName + '.getSubmitValue();', 'TExtFormFieldCheckbox');
  Result := Self;
end;

function TExtFormFieldCheckbox.SetRawValue(Value : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setRawValue(' + VarToJSON([Value]) + ');', 'TExtFormFieldCheckbox');
  Result := Self;
end;

function TExtFormFieldCheckbox.SetRawValue(Value : String) : TExtFunction; begin
  JSCode(JSName + '.SetRawValue(' + VarToJSON([Value]) + ');', 'TExtFormFieldCheckbox');
  Result := Self;
end;

function TExtFormFieldCheckbox.SetRawValue(Value : Integer) : TExtFunction; begin
  JSCode(JSName + '.SetRawValue(' + VarToJSON([Value]) + ');', 'TExtFormFieldCheckbox');
  Result := Self;
end;

function TExtFormFieldCheckbox.SetValue(Checked : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setValue(' + VarToJSON([Checked]) + ');', 'TExtFormFieldCheckbox');
  Result := Self;
end;

function TExtFormFieldCheckbox.SetValue(Checked : String) : TExtFunction; begin
  JSCode(JSName + '.SetValue(' + VarToJSON([Checked]) + ');', 'TExtFormFieldCheckbox');
  Result := Self;
end;

destructor TExtFormFieldCheckbox.Destroy; begin
  try
    FScope.Free;
  except end;
  inherited;
end;

procedure TExtFormFieldField.SetFValue(Value : TExtObject); begin
  FValue := Value;
  Value.DeleteFromGarbage;
  if not ConfigAvailable(JSName) then
    SetValue(Value)
  else
    JSCode('value:' + VarToJSON([Value, false]));
end;

procedure TExtFormFieldField.SetFName(Value : String); begin
  FName := Value;
  JSCode('name:' + VarToJSON([Value]));
end;

procedure TExtFormFieldField.SetFDisabled(Value : Boolean); begin
  FDisabled := Value;
  JSCode('disabled:' + VarToJSON([Value]));
end;

procedure TExtFormFieldField.SetFSubmitValue(Value : Boolean); begin
  FSubmitValue := Value;
  JSCode('submitValue:' + VarToJSON([Value]));
end;

procedure TExtFormFieldField.SetFValidateOnChange(Value : Boolean); begin
  FValidateOnChange := Value;
  JSCode('validateOnChange:' + VarToJSON([Value]));
end;

procedure TExtFormFieldField.SetFOnChange(Value : TExtFormFieldFieldOnChange); begin
  if Assigned(FOnChange) then
    JSCode(JSName+'.events ["change"].listeners=[];');
  if Assigned(Value) then
    On('change', Ajax('change', ['This', '%0.nm','NewValue', '%1.nm','OldValue', '%2.nm'], true));
  FOnChange := Value;
end;

procedure TExtFormFieldField.SetFOnValiditychange(Value : TExtFormFieldFieldOnValiditychange); begin
  if Assigned(FOnValiditychange) then
    JSCode(JSName+'.events ["validitychange"].listeners=[];');
  if Assigned(Value) then
    On('validitychange', Ajax('validitychange', ['This', '%0.nm','IsValid', '%1'], true));
  FOnValiditychange := Value;
end;

procedure TExtFormFieldField.SetFOnDirtychange(Value : TExtFormFieldFieldOnDirtychange); begin
  if Assigned(FOnDirtychange) then
    JSCode(JSName+'.events ["dirtychange"].listeners=[];');
  if Assigned(Value) then
    On('dirtychange', Ajax('dirtychange', ['This', '%0.nm','IsDirty', '%1'], true));
  FOnDirtychange := Value;
end;

function TExtFormFieldField.JSClassName : string; begin
  Result := 'Ext-form-field-Field';
end;

procedure TExtFormFieldField.InitDefaults; begin
  inherited;
  FValue := TExtObject.CreateInternal(Self, 'value');
end;

{$IFDEF FPC}constructor TExtFormFieldField.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtFormFieldField.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtFormFieldField.InitValue : TExtFunction; begin
  JSCode(JSName + '.initValue();', 'TExtFormFieldField');
  Result := Self;
end;

function TExtFormFieldField.GetName : TExtFunction; begin
  JSCode(JSName + '.getName();', 'TExtFormFieldField');
  Result := Self;
end;

function TExtFormFieldField.GetValue : TExtFunction; begin
  JSCode(JSName + '.getValue();', 'TExtFormFieldField');
  Result := Self;
end;

function TExtFormFieldField.SetValue(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setValue(' + VarToJSON([Value, false]) + ');', 'TExtFormFieldField');
  Result := Self;
end;

function TExtFormFieldField.IsEqual(Value1 : TExtObject; Value2 : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.isEqual(' + VarToJSON([Value1, false, Value2, false]) + ');', 'TExtFormFieldField');
  Result := Self;
end;

function TExtFormFieldField.GetSubmitData : TExtFunction; begin
  JSCode(JSName + '.getSubmitData();', 'TExtFormFieldField');
  Result := Self;
end;

function TExtFormFieldField.GetModelData : TExtFunction; begin
  JSCode(JSName + '.getModelData();', 'TExtFormFieldField');
  Result := Self;
end;

function TExtFormFieldField.Reset : TExtFunction; begin
  JSCode(JSName + '.reset();', 'TExtFormFieldField');
  Result := Self;
end;

function TExtFormFieldField.ResetOriginalValue : TExtFunction; begin
  JSCode(JSName + '.resetOriginalValue();', 'TExtFormFieldField');
  Result := Self;
end;

function TExtFormFieldField.CheckChange : TExtFunction; begin
  JSCode(JSName + '.checkChange();', 'TExtFormFieldField');
  Result := Self;
end;

function TExtFormFieldField.IsDirty : TExtFunction; begin
  JSCode(JSName + '.isDirty();', 'TExtFormFieldField');
  Result := Self;
end;

function TExtFormFieldField.CheckDirty : TExtFunction; begin
  JSCode(JSName + '.checkDirty();', 'TExtFormFieldField');
  Result := Self;
end;

function TExtFormFieldField.GetErrors(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getErrors(' + VarToJSON([Value, false]) + ');', 'TExtFormFieldField');
  Result := Self;
end;

function TExtFormFieldField.IsValid : TExtFunction; begin
  JSCode(JSName + '.isValid();', 'TExtFormFieldField');
  Result := Self;
end;

function TExtFormFieldField.Validate : TExtFunction; begin
  JSCode(JSName + '.validate();', 'TExtFormFieldField');
  Result := Self;
end;

function TExtFormFieldField.BatchChanges(Fn : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.batchChanges(' + VarToJSON([Fn, false]) + ');', 'TExtFormFieldField');
  Result := Self;
end;

function TExtFormFieldField.IsFileUpload : TExtFunction; begin
  JSCode(JSName + '.isFileUpload();', 'TExtFormFieldField');
  Result := Self;
end;

function TExtFormFieldField.ExtractFileInput : TExtFunction; begin
  JSCode(JSName + '.extractFileInput();', 'TExtFormFieldField');
  Result := Self;
end;

function TExtFormFieldField.MarkInvalid(Errors : String) : TExtFunction; begin
  JSCode(JSName + '.markInvalid(' + VarToJSON([Errors]) + ');', 'TExtFormFieldField');
  Result := Self;
end;

function TExtFormFieldField.MarkInvalid(Errors : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.MarkInvalid(' + VarToJSON(Errors) + ');', 'TExtFormFieldField');
  Result := Self;
end;

function TExtFormFieldField.ClearInvalid : TExtFunction; begin
  JSCode(JSName + '.clearInvalid();', 'TExtFormFieldField');
  Result := Self;
end;

destructor TExtFormFieldField.Destroy; begin
  try
    FValue.Free;
  except end;
  inherited;
end;

procedure TExtFormFieldField.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'change') and Assigned(FOnChange) then
    FOnChange(TExtFormFieldField(ParamAsObject('This')), TExtObject(ParamAsObject('NewValue')), TExtObject(ParamAsObject('OldValue')))
  else if (AEvtName = 'validitychange') and Assigned(FOnValiditychange) then
    FOnValiditychange(TExtFormFieldField(ParamAsObject('This')), ParamAsBoolean('IsValid'))
  else if (AEvtName = 'dirtychange') and Assigned(FOnDirtychange) then
    FOnDirtychange(TExtFormFieldField(ParamAsObject('This')), ParamAsBoolean('IsDirty'));
end;

function TExtDirectEvent.JSClassName : string; begin
  Result := 'Ext-direct-Event';
end;

{$IFDEF FPC}constructor TExtDirectEvent.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDirectEvent.Create(Config : TExtObject = nil); begin
  if Config = nil then CreateVar(JSClassName + '({});') else
  CreateVar(JSClassName + '(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

function TExtDirectEvent.GetData : TExtFunction; begin
  JSCode(JSName + '.getData();', 'TExtDirectEvent');
  Result := Self;
end;

procedure TExtMenuItem.SetFActiveCls(Value : String); begin
  FActiveCls := Value;
  JSCode('activeCls:' + VarToJSON([Value]));
end;

procedure TExtMenuItem.SetFAriaRole(Value : String); begin
  FAriaRole := Value;
  JSCode('ariaRole:' + VarToJSON([Value]));
end;

procedure TExtMenuItem.SetFCanActivate(Value : Boolean); begin
  FCanActivate := Value;
  JSCode('canActivate:' + VarToJSON([Value]));
end;

procedure TExtMenuItem.SetFClickHideDelay(Value : Integer); begin
  FClickHideDelay := Value;
  JSCode('clickHideDelay:' + VarToJSON([Value]));
end;

procedure TExtMenuItem.SetFDestroyMenu(Value : Boolean); begin
  FDestroyMenu := Value;
  JSCode('destroyMenu:' + VarToJSON([Value]));
end;

procedure TExtMenuItem.SetFDisabledCls(Value : String); begin
  FDisabledCls := Value;
  JSCode('disabledCls:' + VarToJSON([Value]));
end;

procedure TExtMenuItem.SetFHref(Value : String); begin
  FHref := Value;
  JSCode('href:' + VarToJSON([Value]));
end;

procedure TExtMenuItem.SetFHrefTarget(Value : String); begin
  FHrefTarget := Value;
  JSCode('hrefTarget:' + VarToJSON([Value]));
end;

procedure TExtMenuItem.SetFHideOnClick(Value : Boolean); begin
  FHideOnClick := Value;
  JSCode('hideOnClick:' + VarToJSON([Value]));
end;

procedure TExtMenuItem.SetFIcon(Value : String); begin
  FIcon := Value;
  JSCode('icon:' + VarToJSON([Value]));
end;

procedure TExtMenuItem.SetFIconCls(Value : String); begin
  FIconCls := Value;
  if not ConfigAvailable(JSName) then
    SetIconCls(Value)
  else
    JSCode('iconCls:' + VarToJSON([Value]));
end;

procedure TExtMenuItem.SetFMenu(Value : String); begin
  FMenu := Value;
  JSCode('menu:' + VarToJSON([Value]));
end;

procedure TExtMenuItem.SetFMenuAlign(Value : String); begin
  FMenuAlign := Value;
  JSCode('menuAlign:' + VarToJSON([Value]));
end;

procedure TExtMenuItem.SetFMenuExpandDelay(Value : Integer); begin
  FMenuExpandDelay := Value;
  JSCode('menuExpandDelay:' + VarToJSON([Value]));
end;

procedure TExtMenuItem.SetFMenuHideDelay(Value : Integer); begin
  FMenuHideDelay := Value;
  JSCode('menuHideDelay:' + VarToJSON([Value]));
end;

procedure TExtMenuItem.SetFPlain(Value : Boolean); begin
  FPlain := Value;
  JSCode('plain:' + VarToJSON([Value]));
end;

procedure TExtMenuItem.SetFText(Value : String); begin
  FText := Value;
  if not ConfigAvailable(JSName) then
    SetText(Value)
  else
    JSCode('text:' + VarToJSON([Value]));
end;

procedure TExtMenuItem.SetFOnActivate(Value : TExtMenuItemOnActivate); begin
  if Assigned(FOnActivate) then
    JSCode(JSName+'.events ["activate"].listeners=[];');
  if Assigned(Value) then
    On('activate', Ajax('activate', ['Item', '%0.nm'], true));
  FOnActivate := Value;
end;

procedure TExtMenuItem.SetFOnClick(Value : TExtMenuItemOnClick); begin
  if Assigned(FOnClick) then
    JSCode(JSName+'.events ["click"].listeners=[];');
  if Assigned(Value) then
    On('click', Ajax('click', ['Item', '%0.nm','E', '%1.nm'], true));
  FOnClick := Value;
end;

procedure TExtMenuItem.SetFOnDeactivate(Value : TExtMenuItemOnDeactivate); begin
  if Assigned(FOnDeactivate) then
    JSCode(JSName+'.events ["deactivate"].listeners=[];');
  if Assigned(Value) then
    On('deactivate', Ajax('deactivate', ['Item', '%0.nm'], true));
  FOnDeactivate := Value;
end;

function TExtMenuItem.JSClassName : string; begin
  Result := 'Ext-menu-Item';
end;

{$IFDEF FPC}constructor TExtMenuItem.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtMenuItem.SetHandler(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.setHandler(' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtMenuItem');
  Result := Self;
end;

function TExtMenuItem.SetIconCls(IconCls : String) : TExtFunction; begin
  JSCode(JSName + '.setIconCls(' + VarToJSON([IconCls]) + ');', 'TExtMenuItem');
  Result := Self;
end;

function TExtMenuItem.SetText(Text : String) : TExtFunction; begin
  JSCode(JSName + '.setText(' + VarToJSON([Text]) + ');', 'TExtMenuItem');
  Result := Self;
end;

procedure TExtMenuItem.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'activate') and Assigned(FOnActivate) then
    FOnActivate(TExtMenuItem(ParamAsObject('Item')))
  else if (AEvtName = 'click') and Assigned(FOnClick) then
    FOnClick(TExtMenuItem(ParamAsObject('Item')), ExtEventObject)
  else if (AEvtName = 'deactivate') and Assigned(FOnDeactivate) then
    FOnDeactivate(TExtMenuItem(ParamAsObject('Item')));
end;

function TFunction.JSClassName : string; begin
  Result := 'Function';
end;

{$IFDEF FPC}constructor TFunction.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TFunction.Create(Args : TString; FunctionBody : String); begin
  CreateVar(JSClassName + '(' + VarToJSON([Args, false, FunctionBody]) + ');');
  InitDefaults;
end;

function TFunction.Apply(ThisArg : TExtObject; ArgsArray : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.apply(' + VarToJSON([ThisArg, false]) + ',' + VarToJSON(ArgsArray) + ');', 'TFunction');
  Result := Self;
end;

function TFunction.Call(ThisArg : TExtObject; Args : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.call(' + VarToJSON([ThisArg, false]) + ',' + VarToJSON(Args) + ');', 'TFunction');
  Result := Self;
end;

function TFunction.ToString : TExtFunction; begin
  JSCode(JSName + '.toString();', 'TFunction');
  Result := Self;
end;

function TExtChartMask.JSClassName : string; begin
  Result := 'Ext-chart-Mask';
end;

{$IFDEF FPC}constructor TExtChartMask.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtChartMask.Create(Config : TExtObject = nil); begin
  if Config = nil then CreateVar(JSClassName + '({});') else
  CreateVar(JSClassName + '(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

function TExtDomHelperSingleton.JSClassName : string; begin
  Result := 'Ext-DomHelperSingleton';
end;

{$IFDEF FPC}constructor TExtDomHelperSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDomHelperSingleton.InsertIntoTable : TExtFunction; begin
  JSCode(JSName + '.insertIntoTable();', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.CreateContextualFragment : TExtFunction; begin
  JSCode(JSName + '.createContextualFragment();', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.Markup(O : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.markup(' + VarToJSON([O, false]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.ApplyStyles(El : String; Styles : String) : TExtFunction; begin
  JSCode(JSName + '.applyStyles(' + VarToJSON([El, Styles]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.ApplyStyles(El : THTMLElement; Styles : String) : TExtFunction; begin
  JSCode(JSName + '.ApplyStyles(' + VarToJSON([El, false, Styles]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.ApplyStyles(El : THTMLElement; Styles : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.ApplyStyles(' + VarToJSON([El, false, Styles, false]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.ApplyStyles(El : THTMLElement; Styles : TExtFunction) : TExtFunction; begin
  JSCode(JSName + '.ApplyStyles(' + VarToJSON([El, false, Styles, true]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.ApplyStyles(El : String; Styles : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.ApplyStyles(' + VarToJSON([El, Styles, false]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.ApplyStyles(El : String; Styles : TExtFunction) : TExtFunction; begin
  JSCode(JSName + '.ApplyStyles(' + VarToJSON([El, Styles, true]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.InsertHtml(Where : String; El : THTMLElement; Html : String) : TExtFunction; begin
  JSCode(JSName + '.insertHtml(' + VarToJSON([Where, El, false, Html]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.InsertHtml(Where : String; El : TTextNode; Html : String) : TExtFunction; begin
  JSCode(JSName + '.InsertHtml(' + VarToJSON([Where, El, false, Html]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.InsertBefore(El : String; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.insertBefore(' + VarToJSON([El, O, false, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.InsertBefore(El : THTMLElement; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertBefore(' + VarToJSON([El, false, O, false, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.InsertBefore(El : THTMLElement; O : String; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertBefore(' + VarToJSON([El, false, O, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.InsertBefore(El : TExtElement; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertBefore(' + VarToJSON([El, false, O, false, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.InsertBefore(El : TExtElement; O : String; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertBefore(' + VarToJSON([El, false, O, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.InsertBefore(El : String; O : String; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertBefore(' + VarToJSON([El, O, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.InsertAfter(El : String; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.insertAfter(' + VarToJSON([El, O, false, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.InsertAfter(El : THTMLElement; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertAfter(' + VarToJSON([El, false, O, false, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.InsertAfter(El : TExtElement; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertAfter(' + VarToJSON([El, false, O, false, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.InsertFirst(El : String; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.insertFirst(' + VarToJSON([El, O, false, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.InsertFirst(El : THTMLElement; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertFirst(' + VarToJSON([El, false, O, false, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.InsertFirst(El : THTMLElement; O : String; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertFirst(' + VarToJSON([El, false, O, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.InsertFirst(El : TExtElement; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertFirst(' + VarToJSON([El, false, O, false, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.InsertFirst(El : TExtElement; O : String; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertFirst(' + VarToJSON([El, false, O, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.InsertFirst(El : String; O : String; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertFirst(' + VarToJSON([El, O, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.Append(El : String; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.append(' + VarToJSON([El, O, false, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.Append(El : THTMLElement; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Append(' + VarToJSON([El, false, O, false, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.Append(El : THTMLElement; O : String; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Append(' + VarToJSON([El, false, O, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.Append(El : TExtElement; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Append(' + VarToJSON([El, false, O, false, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.Append(El : TExtElement; O : String; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Append(' + VarToJSON([El, false, O, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.Append(El : String; O : String; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Append(' + VarToJSON([El, O, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.Overwrite(El : String; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.overwrite(' + VarToJSON([El, O, false, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.Overwrite(El : THTMLElement; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Overwrite(' + VarToJSON([El, false, O, false, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.Overwrite(El : THTMLElement; O : String; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Overwrite(' + VarToJSON([El, false, O, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.Overwrite(El : TExtElement; O : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Overwrite(' + VarToJSON([El, false, O, false, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.Overwrite(El : TExtElement; O : String; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Overwrite(' + VarToJSON([El, false, O, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.Overwrite(El : String; O : String; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Overwrite(' + VarToJSON([El, O, ReturnElement]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.CreateDom(O : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.createDom(' + VarToJSON([O, false]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.CreateDom(O : String) : TExtFunction; begin
  JSCode(JSName + '.CreateDom(' + VarToJSON([O]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TExtDomHelperSingleton.CreateTemplate(O : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.createTemplate(' + VarToJSON([O, false]) + ');', 'TExtDomHelperSingleton');
  Result := Self;
end;

function TBoolean.JSClassName : string; begin
  Result := 'Boolean';
end;

{$IFDEF FPC}constructor TBoolean.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TBoolean.Create(Value : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Value, false]) + ');');
  InitDefaults;
end;

function TBoolean.ToString : TExtFunction; begin
  JSCode(JSName + '.toString();', 'TBoolean');
  Result := Self;
end;

function TBoolean.ValueOf : TExtFunction; begin
  JSCode(JSName + '.valueOf();', 'TBoolean');
  Result := Self;
end;

procedure TExtDataWriterXml.SetFDocumentRoot(Value : String); begin
  FDocumentRoot := Value;
  JSCode('documentRoot:' + VarToJSON([Value]));
end;

procedure TExtDataWriterXml.SetFDefaultDocumentRoot(Value : String); begin
  FDefaultDocumentRoot := Value;
  JSCode('defaultDocumentRoot:' + VarToJSON([Value]));
end;

procedure TExtDataWriterXml.SetFHeader(Value : String); begin
  FHeader := Value;
  JSCode('header:' + VarToJSON([Value]));
end;

procedure TExtDataWriterXml.SetFRecordJS(Value : String); begin
  FRecordJS := Value;
  JSCode('recordJS:' + VarToJSON([Value]));
end;

function TExtDataWriterXml.JSClassName : string; begin
  Result := 'Ext-data-writer-Xml';
end;

{$IFDEF FPC}constructor TExtDataWriterXml.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtGridView.SetFStripeRows(Value : Boolean); begin
  FStripeRows := Value;
  JSCode('stripeRows:' + VarToJSON([Value]));
end;

function TExtGridView.JSClassName : string; begin
  Result := 'Ext-grid-View';
end;

{$IFDEF FPC}constructor TExtGridView.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtMenuManagerSingleton.JSClassName : string; begin
  Result := 'Ext-menu-ManagerSingleton';
end;

{$IFDEF FPC}constructor TExtMenuManagerSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtMenuManagerSingleton.HideAll : TExtFunction; begin
  JSCode(JSName + '.hideAll();', 'TExtMenuManagerSingleton');
  Result := Self;
end;

function TExtMenuManagerSingleton.Get(Menu : String) : TExtFunction; begin
  JSCode(JSName + '.get(' + VarToJSON([Menu]) + ');', 'TExtMenuManagerSingleton');
  Result := Self;
end;

function TExtMenuManagerSingleton.Get(Menu : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.Get(' + VarToJSON([Menu, false]) + ');', 'TExtMenuManagerSingleton');
  Result := Self;
end;

function TExtCompositeElementLite.JSClassName : string; begin
  Result := 'Ext-CompositeElementLite';
end;

{$IFDEF FPC}constructor TExtCompositeElementLite.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtCompositeElementLite.First : TExtFunction; begin
  JSCode(JSName + '.first();', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.Last : TExtFunction; begin
  JSCode(JSName + '.last();', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.Contains(The : String) : TExtFunction; begin
  JSCode(JSName + '.contains(' + VarToJSON([The]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.Contains(The : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.Contains(' + VarToJSON([The, false]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.Contains(The : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.Contains(' + VarToJSON([The, false]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.Contains(The : Integer) : TExtFunction; begin
  JSCode(JSName + '.Contains(' + VarToJSON([The]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.RemoveElement(El : String; RemoveDom : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.removeElement(' + VarToJSON([El, RemoveDom]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.RemoveElement(El : THTMLElement; RemoveDom : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.RemoveElement(' + VarToJSON([El, false, RemoveDom]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.RemoveElement(El : TExtElement; RemoveDom : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.RemoveElement(' + VarToJSON([El, false, RemoveDom]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.RemoveElement(El : Integer; RemoveDom : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.RemoveElement(' + VarToJSON([El, RemoveDom]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.GetCount : TExtFunction; begin
  JSCode(JSName + '.getCount();', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.Add(Els : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.add(' + VarToJSON(Els) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.Add(Els : TExtCompositeElement) : TExtFunction; begin
  JSCode(JSName + '.Add(' + VarToJSON([Els, false]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.Item(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.item(' + VarToJSON([Index]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.Each(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.each(' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.Fill(Els : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.fill(' + VarToJSON(Els) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.Fill(Els : TExtCompositeElement) : TExtFunction; begin
  JSCode(JSName + '.Fill(' + VarToJSON([Els, false]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.Filter(Selector : String) : TExtFunction; begin
  JSCode(JSName + '.filter(' + VarToJSON([Selector]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.Filter(Selector : TExtFunction) : TExtFunction; begin
  JSCode(JSName + '.Filter(' + VarToJSON([Selector, true]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.IndexOf(The : String) : TExtFunction; begin
  JSCode(JSName + '.indexOf(' + VarToJSON([The]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.ReplaceElement(El : String; Replacement : String; DomReplace : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.replaceElement(' + VarToJSON([El, Replacement, DomReplace]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.ReplaceElement(El : THTMLElement; Replacement : String; DomReplace : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.ReplaceElement(' + VarToJSON([El, false, Replacement, DomReplace]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.ReplaceElement(El : THTMLElement; Replacement : TExtElement; DomReplace : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.ReplaceElement(' + VarToJSON([El, false, Replacement, false, DomReplace]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.ReplaceElement(El : TExtElement; Replacement : String; DomReplace : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.ReplaceElement(' + VarToJSON([El, false, Replacement, DomReplace]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.ReplaceElement(El : TExtElement; Replacement : TExtElement; DomReplace : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.ReplaceElement(' + VarToJSON([El, false, Replacement, false, DomReplace]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.ReplaceElement(El : Integer; Replacement : String; DomReplace : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.ReplaceElement(' + VarToJSON([El, Replacement, DomReplace]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.ReplaceElement(El : Integer; Replacement : TExtElement; DomReplace : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.ReplaceElement(' + VarToJSON([El, Replacement, false, DomReplace]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.ReplaceElement(El : String; Replacement : TExtElement; DomReplace : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.ReplaceElement(' + VarToJSON([El, Replacement, false, DomReplace]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.Clear : TExtFunction; begin
  JSCode(JSName + '.clear();', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.Select(Selector : String; Root : THTMLElement = nil) : TExtFunction; begin
  JSCode(JSName + '.select(' + VarToJSON([Selector, Root, false]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.Select(Selector : TExtObjectList; Root : THTMLElement = nil) : TExtFunction; begin
  JSCode(JSName + '.Select(' + VarToJSON(Selector) + ',' + VarToJSON([Root, false]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.Select(Selector : TExtObjectList; Root : String) : TExtFunction; begin
  JSCode(JSName + '.Select(' + VarToJSON(Selector) + ',' + VarToJSON([Root]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.Select(Selector : String; Root : String) : TExtFunction; begin
  JSCode(JSName + '.Select(' + VarToJSON([Selector, Root]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.Select_(Selector : String; Root : THTMLElement = nil) : TExtFunction; begin
  JSCode(JSName + '.select(' + VarToJSON([Selector, Root, false]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.Select_(Selector : TExtObjectList; Root : THTMLElement = nil) : TExtFunction; begin
  JSCode(JSName + '.Select(' + VarToJSON(Selector) + ',' + VarToJSON([Root, false]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.Select_(Selector : TExtObjectList; Root : String) : TExtFunction; begin
  JSCode(JSName + '.Select(' + VarToJSON(Selector) + ',' + VarToJSON([Root]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

function TExtCompositeElementLite.Select_(Selector : String; Root : String) : TExtFunction; begin
  JSCode(JSName + '.Select(' + VarToJSON([Selector, Root]) + ');', 'TExtCompositeElementLite');
  Result := Self;
end;

procedure TExtChartSeriesCartesian.SetFAxis(Value : String); begin
  FAxis := Value;
  JSCode('axis:' + VarToJSON([Value]));
end;

function TExtChartSeriesCartesian.JSClassName : string; begin
  Result := 'Ext-chart-series-Cartesian';
end;

{$IFDEF FPC}constructor TExtChartSeriesCartesian.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtChartSeriesCartesian.GetMinMaxXValues : TExtFunction; begin
  JSCode(JSName + '.getMinMaxXValues();', 'TExtChartSeriesCartesian');
  Result := Self;
end;

function TExtChartSeriesCartesian.GetMinMaxYValues : TExtFunction; begin
  JSCode(JSName + '.getMinMaxYValues();', 'TExtChartSeriesCartesian');
  Result := Self;
end;

function TRegExp.JSClassName : string; begin
  Result := 'RegExp';
end;

{$IFDEF FPC}constructor TRegExp.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TRegExp.Create(Pattern : String; Flags : String); begin
  CreateVar(JSClassName + '(' + VarToJSON([Pattern, Flags]) + ');');
  InitDefaults;
end;

function TRegExp.Exec(Str : String) : TExtFunction; begin
  JSCode(JSName + '.exec(' + VarToJSON([Str]) + ');', 'TRegExp');
  Result := Self;
end;

function TRegExp.Test(Str : String) : TExtFunction; begin
  JSCode(JSName + '.test(' + VarToJSON([Str]) + ');', 'TRegExp');
  Result := Self;
end;

function TRegExp.ToString : TExtFunction; begin
  JSCode(JSName + '.toString();', 'TRegExp');
  Result := Self;
end;

procedure TExtClass.SetFExtend(Value : String); begin
  FExtend := Value;
  JSCode('extend:' + VarToJSON([Value]));
end;

procedure TExtClass.SetFStatics(Value : TExtObject); begin
  FStatics := Value;
  Value.DeleteFromGarbage;
  JSCode('statics:' + VarToJSON([Value, false]));
end;

procedure TExtClass.SetFInheritableStatics(Value : TExtObject); begin
  FInheritableStatics := Value;
  Value.DeleteFromGarbage;
  JSCode('inheritableStatics:' + VarToJSON([Value, false]));
end;

procedure TExtClass.SetFConfig(Value : TExtObject); begin
  FConfig := Value;
  Value.DeleteFromGarbage;
  JSCode('config:' + VarToJSON([Value, false]));
end;

procedure TExtClass.SetFMixins(Value : TExtObject); begin
  FMixins := Value;
  Value.DeleteFromGarbage;
  JSCode('mixins:' + VarToJSON([Value, false]));
end;

function TExtClass.JSClassName : string; begin
  Result := 'Ext-Class';
end;

procedure TExtClass.InitDefaults; begin
  inherited;
  FStatics := TExtObject.CreateInternal(Self, 'statics');
  FInheritableStatics := TExtObject.CreateInternal(Self, 'inheritableStatics');
  FConfig := TExtObject.CreateInternal(Self, 'config');
  FMixins := TExtObject.CreateInternal(Self, 'mixins');
end;

{$IFDEF FPC}constructor TExtClass.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtClass.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

destructor TExtClass.Destroy; begin
  try
    FStatics.Free;
    FInheritableStatics.Free;
    FConfig.Free;
    FMixins.Free;
  except end;
  inherited;
end;

procedure TExtGridColumnColumn.SetFColumns(Value : TExtObjectList); begin
  FColumns := Value;
  Value.DeleteFromGarbage;
  JSCode('columns:' + VarToJSON([Value, false]));
end;

procedure TExtGridColumnColumn.SetFDataIndex(Value : String); begin
  FDataIndex := Value;
  JSCode('dataIndex:' + VarToJSON([Value]));
end;

procedure TExtGridColumnColumn.SetFText(Value : String); begin
  FText := Value;
  if not ConfigAvailable(JSName) then
    SetText(Value)
  else
    JSCode('text:' + VarToJSON([Value]));
end;

procedure TExtGridColumnColumn.SetFSortable(Value : Boolean); begin
  FSortable := Value;
  JSCode('sortable:' + VarToJSON([Value]));
end;

procedure TExtGridColumnColumn.SetFGroupable(Value : Boolean); begin
  FGroupable := Value;
  JSCode('groupable:' + VarToJSON([Value]));
end;

procedure TExtGridColumnColumn.SetFFixed(Value : Boolean); begin
  FFixed := Value;
  JSCode('fixed:' + VarToJSON([Value]));
end;

procedure TExtGridColumnColumn.SetFResizable(Value : Boolean); begin
  FResizable := Value;
  JSCode('resizable:' + VarToJSON([Value]));
end;

procedure TExtGridColumnColumn.SetFHideable(Value : Boolean); begin
  FHideable := Value;
  JSCode('hideable:' + VarToJSON([Value]));
end;

procedure TExtGridColumnColumn.SetFMenuDisabled(Value : Boolean); begin
  FMenuDisabled := Value;
  JSCode('menuDisabled:' + VarToJSON([Value]));
end;

procedure TExtGridColumnColumn.SetFRenderer(Value : TExtFunction); begin
  FRenderer := Value;
  JSCode('renderer:' + VarToJSON([Value, true]));
end;

procedure TExtGridColumnColumn.SetFAlign(Value : String); begin
  FAlign := Value;
  JSCode('align:' + VarToJSON([Value]));
end;

procedure TExtGridColumnColumn.SetFDraggable(Value : Boolean); begin
  FDraggable := Value;
  JSCode('draggable:' + VarToJSON([Value]));
end;

procedure TExtGridColumnColumn.SetFTdCls(Value : String); begin
  FTdCls := Value;
  JSCode('tdCls:' + VarToJSON([Value]));
end;

procedure TExtGridColumnColumn.SetFEditor(Value : TExtObject); begin
  FEditor := Value;
  Value.DeleteFromGarbage;
  if not ConfigAvailable(JSName) then
    SetEditor(Value)
  else
    JSCode('editor:' + VarToJSON([Value, false]));
end;

procedure TExtGridColumnColumn.SetFEditorString(Value : String); begin
  FEditorString := Value;
  JSCode('editor:' + VarToJSON([Value]));
end;

procedure TExtGridColumnColumn.SetFField(Value : TExtObject); begin
  FField := Value;
  Value.DeleteFromGarbage;
  JSCode('field:' + VarToJSON([Value, false]));
end;

procedure TExtGridColumnColumn.SetFFieldString(Value : String); begin
  FFieldString := Value;
  JSCode('field:' + VarToJSON([Value]));
end;

function TExtGridColumnColumn.JSClassName : string; begin
  Result := 'Ext-grid-column-Column';
end;

class function TExtGridColumnColumn.Value : TExtObject;
const
  lValue : TExtObject = nil;
begin
  if lValue = nil then lValue := TExtObject.CreateSingleton('Ext-grid-column-Column.Value');
  Result := lValue
end;

class function TExtGridColumnColumn.MetaData : TExtObject;
const
  lMetaData : TExtObject = nil;
begin
  if lMetaData = nil then lMetaData := TExtObject.CreateSingleton('Ext-grid-column-Column.MetaData');
  Result := lMetaData
end;

class function TExtGridColumnColumn.RecordJS : TExtDataModel;
const
  lRecordJS : TExtDataModel = nil;
begin
  if lRecordJS = nil then lRecordJS := TExtDataModel.CreateSingleton('Ext-grid-column-Column.RecordJS');
  Result := lRecordJS
end;

class function TExtGridColumnColumn.RowIndex : Integer; begin
  Result := 0
end;

class function TExtGridColumnColumn.ColIndex : Integer; begin
  Result := 0
end;

class function TExtGridColumnColumn.Store : TExtDataStore;
const
  lStore : TExtDataStore = nil;
begin
  if lStore = nil then lStore := TExtDataStore.CreateSingleton('Ext-grid-column-Column.Store');
  Result := lStore
end;

class function TExtGridColumnColumn.View : TExtViewView;
const
  lView : TExtViewView = nil;
begin
  if lView = nil then lView := TExtViewView.CreateSingleton('Ext-grid-column-Column.View');
  Result := lView
end;

class function TExtGridColumnColumn.Return : String; begin
  Result := ''
end;

procedure TExtGridColumnColumn.InitDefaults; begin
  inherited;
  FColumns := TExtObjectList.Create(Self, 'columns');
  FEditor := TExtObject.CreateInternal(Self, 'editor');
  FField := TExtObject.CreateInternal(Self, 'field');
end;

{$IFDEF FPC}constructor TExtGridColumnColumn.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridColumnColumn.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtGridColumnColumn.SetText(Text : String) : TExtFunction; begin
  JSCode(JSName + '.setText(' + VarToJSON([Text]) + ');', 'TExtGridColumnColumn');
  Result := Self;
end;

function TExtGridColumnColumn.GetIndex : TExtFunction; begin
  JSCode(JSName + '.getIndex();', 'TExtGridColumnColumn');
  Result := Self;
end;

function TExtGridColumnColumn.SetWidth(Width : Integer) : TExtFunction; begin
  JSCode(JSName + '.setWidth(' + VarToJSON([Width]) + ');', 'TExtGridColumnColumn');
  Result := Self;
end;

function TExtGridColumnColumn.GetSortParam : TExtFunction; begin
  JSCode(JSName + '.getSortParam();', 'TExtGridColumnColumn');
  Result := Self;
end;

function TExtGridColumnColumn.GetEditor(RecordJS : TExtObject; DefaultField : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getEditor(' + VarToJSON([RecordJS, false, DefaultField, false]) + ');', 'TExtGridColumnColumn');
  Result := Self;
end;

function TExtGridColumnColumn.SetEditor(Field : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setEditor(' + VarToJSON([Field, false]) + ');', 'TExtGridColumnColumn');
  Result := Self;
end;

destructor TExtGridColumnColumn.Destroy; begin
  try
    FColumns.Free;
    FEditor.Free;
    FField.Free;
  except end;
  inherited;
end;

function TExtDdRegistrySingleton.JSClassName : string; begin
  Result := 'Ext-dd-RegistrySingleton';
end;

{$IFDEF FPC}constructor TExtDdRegistrySingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDdRegistrySingleton.Register(Element : String; Data : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.register(' + VarToJSON([Element, Data, false]) + ');', 'TExtDdRegistrySingleton');
  Result := Self;
end;

function TExtDdRegistrySingleton.Register(Element : THTMLElement; Data : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.Register(' + VarToJSON([Element, false, Data, false]) + ');', 'TExtDdRegistrySingleton');
  Result := Self;
end;

function TExtDdRegistrySingleton.Unregister(Element : String) : TExtFunction; begin
  JSCode(JSName + '.unregister(' + VarToJSON([Element]) + ');', 'TExtDdRegistrySingleton');
  Result := Self;
end;

function TExtDdRegistrySingleton.Unregister(Element : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.Unregister(' + VarToJSON([Element, false]) + ');', 'TExtDdRegistrySingleton');
  Result := Self;
end;

function TExtDdRegistrySingleton.GetHandle(Id : String) : TExtFunction; begin
  JSCode(JSName + '.getHandle(' + VarToJSON([Id]) + ');', 'TExtDdRegistrySingleton');
  Result := Self;
end;

function TExtDdRegistrySingleton.GetHandle(Id : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.GetHandle(' + VarToJSON([Id, false]) + ');', 'TExtDdRegistrySingleton');
  Result := Self;
end;

function TExtDdRegistrySingleton.GetHandleFromEvent(E : TEvent) : TExtFunction; begin
  JSCode(JSName + '.getHandleFromEvent(' + VarToJSON([E, false]) + ');', 'TExtDdRegistrySingleton');
  Result := Self;
end;

function TExtDdRegistrySingleton.GetTarget(Id : String) : TExtFunction; begin
  JSCode(JSName + '.getTarget(' + VarToJSON([Id]) + ');', 'TExtDdRegistrySingleton');
  Result := Self;
end;

function TExtDdRegistrySingleton.GetTarget(Id : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.GetTarget(' + VarToJSON([Id, false]) + ');', 'TExtDdRegistrySingleton');
  Result := Self;
end;

function TExtDdRegistrySingleton.GetTargetFromEvent(E : TEvent) : TExtFunction; begin
  JSCode(JSName + '.getTargetFromEvent(' + VarToJSON([E, false]) + ');', 'TExtDdRegistrySingleton');
  Result := Self;
end;

procedure TExtMenuColorPicker.SetFHideOnClick(Value : Boolean); begin
  FHideOnClick := Value;
  JSCode('hideOnClick:' + VarToJSON([Value]));
end;

procedure TExtMenuColorPicker.SetFPickerId(Value : String); begin
  FPickerId := Value;
  JSCode('pickerId:' + VarToJSON([Value]));
end;

procedure TExtMenuColorPicker.SetFMaxHeight(Value : Integer); begin
  FMaxHeight := Value;
  JSCode('maxHeight:' + VarToJSON([Value]));
end;

procedure TExtMenuColorPicker.SetFOnClick(Value : TExtMenuColorPickerOnClick); begin
  if Assigned(FOnClick) then
    JSCode(JSName+'.events ["click"].listeners=[];');
  if Assigned(Value) then
    On('click', Ajax('click', [], true));
  FOnClick := Value;
end;

procedure TExtMenuColorPicker.SetFOnItemclick(Value : TExtMenuColorPickerOnItemclick); begin
  if Assigned(FOnItemclick) then
    JSCode(JSName+'.events ["itemclick"].listeners=[];');
  if Assigned(Value) then
    On('itemclick', Ajax('itemclick', [], true));
  FOnItemclick := Value;
end;

procedure TExtMenuColorPicker.SetFOnSelect(Value : TExtMenuColorPickerOnSelect); begin
  if Assigned(FOnSelect) then
    JSCode(JSName+'.events ["select"].listeners=[];');
  if Assigned(Value) then
    On('select', Ajax('select', [], true));
  FOnSelect := Value;
end;

function TExtMenuColorPicker.JSClassName : string; begin
  Result := 'Ext-menu-ColorPicker';
end;

{$IFDEF FPC}constructor TExtMenuColorPicker.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtMenuColorPicker.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'click') and Assigned(FOnClick) then
    FOnClick()
  else if (AEvtName = 'itemclick') and Assigned(FOnItemclick) then
    FOnItemclick()
  else if (AEvtName = 'select') and Assigned(FOnSelect) then
    FOnSelect();
end;

function TExtEventObjectSingleton.JSClassName : string; begin
  Result := 'Ext-EventObjectSingleton';
end;

{$IFDEF FPC}constructor TExtEventObjectSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtEventObjectSingleton.StopEvent : TExtFunction; begin
  JSCode(JSName + '.stopEvent();', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.PreventDefault : TExtFunction; begin
  JSCode(JSName + '.preventDefault();', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.StopPropagation : TExtFunction; begin
  JSCode(JSName + '.stopPropagation();', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.GetCharCode : TExtFunction; begin
  JSCode(JSName + '.getCharCode();', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.GetKey : TExtFunction; begin
  JSCode(JSName + '.getKey();', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.GetPageX : TExtFunction; begin
  JSCode(JSName + '.getPageX();', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.GetPageY : TExtFunction; begin
  JSCode(JSName + '.getPageY();', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.GetX : TExtFunction; begin
  JSCode(JSName + '.getX();', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.GetY : TExtFunction; begin
  JSCode(JSName + '.getY();', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.GetXY : TExtFunction; begin
  JSCode(JSName + '.getXY();', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.GetTarget(Selector : String = ''; MaxDepth : Integer = 0; ReturnEl : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.getTarget(' + VarToJSON([Selector, MaxDepth, ReturnEl]) + ');', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.GetTarget(Selector : String; MaxDepth : THTMLElement; ReturnEl : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.GetTarget(' + VarToJSON([Selector, MaxDepth, false, ReturnEl]) + ');', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.GetRelatedTarget(Selector : String = ''; MaxDepth : Integer = 0; ReturnEl : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.getRelatedTarget(' + VarToJSON([Selector, MaxDepth, ReturnEl]) + ');', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.GetRelatedTarget(Selector : String; MaxDepth : THTMLElement; ReturnEl : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.GetRelatedTarget(' + VarToJSON([Selector, MaxDepth, false, ReturnEl]) + ');', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.CorrectWheelDelta(Delta : Integer) : TExtFunction; begin
  JSCode(JSName + '.correctWheelDelta(' + VarToJSON([Delta]) + ');', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.GetWheelDeltas : TExtFunction; begin
  JSCode(JSName + '.getWheelDeltas();', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.GetWheelDelta : TExtFunction; begin
  JSCode(JSName + '.getWheelDelta();', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.Within(El : String; Related : Boolean = false; AllowEl : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.within(' + VarToJSON([El, Related, AllowEl]) + ');', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.Within(El : THTMLElement; Related : Boolean = false; AllowEl : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Within(' + VarToJSON([El, false, Related, AllowEl]) + ');', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.Within(El : TExtElement; Related : Boolean = false; AllowEl : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Within(' + VarToJSON([El, false, Related, AllowEl]) + ');', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.IsNavKeyPress : TExtFunction; begin
  JSCode(JSName + '.isNavKeyPress();', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.IsSpecialKey : TExtFunction; begin
  JSCode(JSName + '.isSpecialKey();', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.GetPoint : TExtFunction; begin
  JSCode(JSName + '.getPoint();', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.HasModifier : TExtFunction; begin
  JSCode(JSName + '.hasModifier();', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.InjectEvent(Target : TExtElement = nil) : TExtFunction; begin
  JSCode(JSName + '.injectEvent(' + VarToJSON([Target, false]) + ');', 'TExtEventObjectSingleton');
  Result := Self;
end;

function TExtEventObjectSingleton.InjectEvent(Target : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.InjectEvent(' + VarToJSON([Target, false]) + ');', 'TExtEventObjectSingleton');
  Result := Self;
end;

procedure TExtFormLabel.SetFText(Value : String); begin
  FText := Value;
  if not ConfigAvailable(JSName) then
    SetText(Value)
  else
    JSCode('text:' + VarToJSON([Value]));
end;

procedure TExtFormLabel.SetFForId(Value : String); begin
  FForId := Value;
  JSCode('forId:' + VarToJSON([Value]));
end;

procedure TExtFormLabel.SetFHtml(Value : String); begin
  FHtml := Value;
  JSCode('html:' + VarToJSON([Value]));
end;

function TExtFormLabel.JSClassName : string; begin
  Result := 'Ext-form-Label';
end;

{$IFDEF FPC}constructor TExtFormLabel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtFormLabel.SetText(Text : String; Encode : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.setText(' + VarToJSON([Text, Encode]) + ');', 'TExtFormLabel');
  Result := Self;
end;

procedure TExtTipTip.SetFClosable(Value : Boolean); begin
  FClosable := Value;
  JSCode('closable:' + VarToJSON([Value]));
end;

procedure TExtTipTip.SetFWidth(Value : Integer); begin
  FWidth := Value;
  JSCode('width:' + VarToJSON([Value]));
end;

procedure TExtTipTip.SetFMinWidth(Value : Integer); begin
  FMinWidth := Value;
  JSCode('minWidth:' + VarToJSON([Value]));
end;

procedure TExtTipTip.SetFMaxWidth(Value : Integer); begin
  FMaxWidth := Value;
  JSCode('maxWidth:' + VarToJSON([Value]));
end;

procedure TExtTipTip.SetFShadow(Value : Boolean); begin
  FShadow := Value;
  JSCode('shadow:' + VarToJSON([Value]));
end;

procedure TExtTipTip.SetFShadowString(Value : String); begin
  FShadowString := Value;
  JSCode('shadow:' + VarToJSON([Value]));
end;

procedure TExtTipTip.SetFDefaultAlign(Value : String); begin
  FDefaultAlign := Value;
  JSCode('defaultAlign:' + VarToJSON([Value]));
end;

procedure TExtTipTip.SetFConstrainPosition(Value : Boolean); begin
  FConstrainPosition := Value;
  JSCode('constrainPosition:' + VarToJSON([Value]));
end;

procedure TExtTipTip.SetFCloseAction(Value : String); begin
  FCloseAction := Value;
  JSCode('closeAction:' + VarToJSON([Value]));
end;

function TExtTipTip.JSClassName : string; begin
  Result := 'Ext-tip-Tip';
end;

{$IFDEF FPC}constructor TExtTipTip.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtTipTip.ShowAt(Xy : TArrayOfInteger) : TExtFunction; begin
  JSCode(JSName + '.showAt(' + VarToJSON([Xy]) + ');', 'TExtTipTip');
  Result := Self;
end;

function TExtTipTip.ShowBy(El : String; Position : String = '') : TExtFunction; begin
  JSCode(JSName + '.showBy(' + VarToJSON([El, Position]) + ');', 'TExtTipTip');
  Result := Self;
end;

function TExtTipTip.ShowBy(El : THTMLElement; Position : String = '') : TExtFunction; begin
  JSCode(JSName + '.ShowBy(' + VarToJSON([El, false, Position]) + ');', 'TExtTipTip');
  Result := Self;
end;

function TExtTipTip.ShowBy(El : TExtElement; Position : String = '') : TExtFunction; begin
  JSCode(JSName + '.ShowBy(' + VarToJSON([El, false, Position]) + ');', 'TExtTipTip');
  Result := Self;
end;

procedure TExtToolbarItem.SetFOverflowText(Value : String); begin
  FOverflowText := Value;
  JSCode('overflowText:' + VarToJSON([Value]));
end;

function TExtToolbarItem.JSClassName : string; begin
  Result := 'Ext-toolbar-Item';
end;

{$IFDEF FPC}constructor TExtToolbarItem.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TNumber.JSClassName : string; begin
  Result := 'Number';
end;

{$IFDEF FPC}constructor TNumber.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TNumber.Create(MAX_VALUE : Integer); begin
  CreateVar(JSClassName + '(' + VarToJSON([MAX_VALUE]) + ');');
  InitDefaults;
end;

function TNumber.ToExponential(FractionDigits : Integer) : TExtFunction; begin
  JSCode(JSName + '.toExponential(' + VarToJSON([FractionDigits]) + ');', 'TNumber');
  Result := Self;
end;

function TNumber.ToFixed(Digits : Integer) : TExtFunction; begin
  JSCode(JSName + '.toFixed(' + VarToJSON([Digits]) + ');', 'TNumber');
  Result := Self;
end;

function TNumber.ToLocaleString : TExtFunction; begin
  JSCode(JSName + '.toLocaleString();', 'TNumber');
  Result := Self;
end;

function TNumber.ToPrecision(Precision : Integer) : TExtFunction; begin
  JSCode(JSName + '.toPrecision(' + VarToJSON([Precision]) + ');', 'TNumber');
  Result := Self;
end;

function TNumber.ToString(Radix : Integer) : TExtFunction; begin
  JSCode(JSName + '.toString(' + VarToJSON([Radix]) + ');', 'TNumber');
  Result := Self;
end;

function TNumber.ValueOf : TExtFunction; begin
  JSCode(JSName + '.valueOf();', 'TNumber');
  Result := Self;
end;

procedure TExtPanelTool.SetFHandler(Value : TExtFunction); begin
  FHandler := Value;
  JSCode('handler:' + VarToJSON([Value, true]));
end;

procedure TExtPanelTool.SetFScope(Value : TExtObject); begin
  FScope := Value;
  Value.DeleteFromGarbage;
  JSCode('scope:' + VarToJSON([Value, false]));
end;

procedure TExtPanelTool.SetFTypeJS(Value : String); begin
  FTypeJS := Value;
  JSCode('typeJS:' + VarToJSON([Value]));
end;

procedure TExtPanelTool.SetFTooltip(Value : String); begin
  FTooltip := Value;
  JSCode('tooltip:' + VarToJSON([Value]));
end;

procedure TExtPanelTool.SetFTooltipTExtObject(Value : TExtObject); begin
  FTooltipTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('tooltip:' + VarToJSON([Value, false]));
end;

procedure TExtPanelTool.SetFTooltipType(Value : String); begin
  FTooltipType := Value;
  JSCode('tooltipType:' + VarToJSON([Value]));
end;

procedure TExtPanelTool.SetFStopEvent(Value : Boolean); begin
  FStopEvent := Value;
  JSCode('stopEvent:' + VarToJSON([Value]));
end;

procedure TExtPanelTool.SetFOnClick(Value : TExtPanelToolOnClick); begin
  if Assigned(FOnClick) then
    JSCode(JSName+'.events ["click"].listeners=[];');
  if Assigned(Value) then
    On('click', Ajax('click', ['This', '%0.nm','E', '%1.nm'], true));
  FOnClick := Value;
end;

function TExtPanelTool.JSClassName : string; begin
  Result := 'Ext-panel-Tool';
end;

procedure TExtPanelTool.InitDefaults; begin
  inherited;
  FScope := TExtObject.CreateInternal(Self, 'scope');
  FTooltipTExtObject := TExtObject.CreateInternal(Self, 'tooltip');
end;

{$IFDEF FPC}constructor TExtPanelTool.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtPanelTool.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtPanelTool.SetType(TypeJS : String) : TExtFunction; begin
  JSCode(JSName + '.setType(' + VarToJSON([TypeJS]) + ');', 'TExtPanelTool');
  Result := Self;
end;

destructor TExtPanelTool.Destroy; begin
  try
    FScope.Free;
    FTooltipTExtObject.Free;
  except end;
  inherited;
end;

procedure TExtPanelTool.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'click') and Assigned(FOnClick) then
    FOnClick(TExtPanelTool(ParamAsObject('This')), ExtEventObject);
end;

function TExtUtilRegion.JSClassName : string; begin
  Result := 'Ext-util-Region';
end;

{$IFDEF FPC}constructor TExtUtilRegion.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

class function TExtUtilRegion.GetRegion(El : String) : TExtFunction; begin
  JSCode(JSClassName + '.getRegion(' + VarToJSON([El]) + ');', 'TExtUtilRegion');
  Result := Self;
end;

function TExtUtilRegion.GetRegion(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.GetRegion(' + VarToJSON([El, false]) + ');', 'TExtUtilRegion');
  Result := Self;
end;

function TExtUtilRegion.GetRegion(El : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.GetRegion(' + VarToJSON([El, false]) + ');', 'TExtUtilRegion');
  Result := Self;
end;

class function TExtUtilRegion.From(O : TExtObject) : TExtFunction; begin
  JSCode(JSClassName + '.from(' + VarToJSON([O, false]) + ');', 'TExtUtilRegion');
  Result := Self;
end;

constructor TExtUtilRegion.Create(Top : Integer; Right : Integer; Bottom : Integer; Left : Integer); begin
  CreateVar(JSClassName + '(' + VarToJSON([Top, Right, Bottom, Left]) + ');');
  InitDefaults;
end;

function TExtUtilRegion.Contains(Region : TExtUtilRegion) : TExtFunction; begin
  JSCode(JSName + '.contains(' + VarToJSON([Region, false]) + ');', 'TExtUtilRegion');
  Result := Self;
end;

function TExtUtilRegion.Intersect(Region : TExtUtilRegion) : TExtFunction; begin
  JSCode(JSName + '.intersect(' + VarToJSON([Region, false]) + ');', 'TExtUtilRegion');
  Result := Self;
end;

function TExtUtilRegion.Union(Region : TExtUtilRegion) : TExtFunction; begin
  JSCode(JSName + '.union(' + VarToJSON([Region, false]) + ');', 'TExtUtilRegion');
  Result := Self;
end;

function TExtUtilRegion.ConstrainTo(TargetRegion : TExtUtilRegion) : TExtFunction; begin
  JSCode(JSName + '.constrainTo(' + VarToJSON([TargetRegion, false]) + ');', 'TExtUtilRegion');
  Result := Self;
end;

function TExtUtilRegion.Adjust(Top : Integer; Right : Integer; Bottom : Integer; Left : Integer) : TExtFunction; begin
  JSCode(JSName + '.adjust(' + VarToJSON([Top, Right, Bottom, Left]) + ');', 'TExtUtilRegion');
  Result := Self;
end;

function TExtUtilRegion.GetOutOfBoundOffset(Axis : String = ''; P : TExtUtilPoint = nil) : TExtFunction; begin
  JSCode(JSName + '.getOutOfBoundOffset(' + VarToJSON([Axis, P, false]) + ');', 'TExtUtilRegion');
  Result := Self;
end;

function TExtUtilRegion.GetOutOfBoundOffsetX(P : Integer) : TExtFunction; begin
  JSCode(JSName + '.getOutOfBoundOffsetX(' + VarToJSON([P]) + ');', 'TExtUtilRegion');
  Result := Self;
end;

function TExtUtilRegion.GetOutOfBoundOffsetY(P : Integer) : TExtFunction; begin
  JSCode(JSName + '.getOutOfBoundOffsetY(' + VarToJSON([P]) + ');', 'TExtUtilRegion');
  Result := Self;
end;

function TExtUtilRegion.IsOutOfBound(Axis : String = ''; P : TExtUtilPoint = nil) : TExtFunction; begin
  JSCode(JSName + '.isOutOfBound(' + VarToJSON([Axis, P, false]) + ');', 'TExtUtilRegion');
  Result := Self;
end;

function TExtUtilRegion.IsOutOfBound(Axis : String; P : Integer) : TExtFunction; begin
  JSCode(JSName + '.IsOutOfBound(' + VarToJSON([Axis, P]) + ');', 'TExtUtilRegion');
  Result := Self;
end;

function TExtUtilRegion.IsOutOfBoundX(P : Integer) : TExtFunction; begin
  JSCode(JSName + '.isOutOfBoundX(' + VarToJSON([P]) + ');', 'TExtUtilRegion');
  Result := Self;
end;

function TExtUtilRegion.IsOutOfBoundY(P : Integer) : TExtFunction; begin
  JSCode(JSName + '.isOutOfBoundY(' + VarToJSON([P]) + ');', 'TExtUtilRegion');
  Result := Self;
end;

function TExtUtilRegion.Copy : TExtFunction; begin
  JSCode(JSName + '.copy();', 'TExtUtilRegion');
  Result := Self;
end;

function TExtUtilRegion.CopyFrom(P : TExtUtilRegion) : TExtFunction; begin
  JSCode(JSName + '.copyFrom(' + VarToJSON([P, false]) + ');', 'TExtUtilRegion');
  Result := Self;
end;

function TExtUtilRegion.TranslateBy(X : TExtUtilOffset; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.translateBy(' + VarToJSON([X, false, Y]) + ');', 'TExtUtilRegion');
  Result := Self;
end;

function TExtUtilRegion.TranslateBy(X : TExtObject; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.TranslateBy(' + VarToJSON([X, false, Y]) + ');', 'TExtUtilRegion');
  Result := Self;
end;

function TExtUtilRegion.Round : TExtFunction; begin
  JSCode(JSName + '.round();', 'TExtUtilRegion');
  Result := Self;
end;

function TExtUtilRegion.Equals(Region : TExtUtilRegion) : TExtFunction; begin
  JSCode(JSName + '.equals(' + VarToJSON([Region, false]) + ');', 'TExtUtilRegion');
  Result := Self;
end;

procedure TExtLayoutContainerBox.SetFAnimate(Value : Boolean); begin
  FAnimate := Value;
  JSCode('animate:' + VarToJSON([Value]));
end;

procedure TExtLayoutContainerBox.SetFAnimateInteger(Value : Integer); begin
  FAnimateInteger := Value;
  JSCode('animate:' + VarToJSON([Value]));
end;

procedure TExtLayoutContainerBox.SetFAnimateTExtObject(Value : TExtObject); begin
  FAnimateTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('animate:' + VarToJSON([Value, false]));
end;

procedure TExtLayoutContainerBox.SetFDefaultMargins(Value : TExtObject); begin
  FDefaultMargins := Value;
  Value.DeleteFromGarbage;
  JSCode('defaultMargins:' + VarToJSON([Value, false]));
end;

procedure TExtLayoutContainerBox.SetFPadding(Value : String); begin
  FPadding := Value;
  JSCode('padding:' + VarToJSON([Value]));
end;

procedure TExtLayoutContainerBox.SetFPack(Value : String); begin
  FPack := Value;
  JSCode('pack:' + VarToJSON([Value]));
end;

procedure TExtLayoutContainerBox.SetFFlex(Value : Integer); begin
  FFlex := Value;
  JSCode('flex:' + VarToJSON([Value]));
end;

procedure TExtLayoutContainerBox.SetFShrinkToFit(Value : Boolean); begin
  FShrinkToFit := Value;
  JSCode('shrinkToFit:' + VarToJSON([Value]));
end;

procedure TExtLayoutContainerBox.SetFClearInnerCtOnLayout(Value : Boolean); begin
  FClearInnerCtOnLayout := Value;
  JSCode('clearInnerCtOnLayout:' + VarToJSON([Value]));
end;

function TExtLayoutContainerBox.JSClassName : string; begin
  Result := 'Ext-layout-container-Box';
end;

procedure TExtLayoutContainerBox.InitDefaults; begin
  inherited;
  FAnimateTExtObject := TExtObject.CreateInternal(Self, 'animate');
  FDefaultMargins := TExtObject.CreateInternal(Self, 'defaultMargins');
end;

{$IFDEF FPC}constructor TExtLayoutContainerBox.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtLayoutContainerBox.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtLayoutContainerBox.UpdateChildBoxes(Boxes : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.updateChildBoxes(' + VarToJSON(Boxes) + ');', 'TExtLayoutContainerBox');
  Result := Self;
end;

destructor TExtLayoutContainerBox.Destroy; begin
  try
    FAnimateTExtObject.Free;
    FDefaultMargins.Free;
  except end;
  inherited;
end;

procedure TExtDataNodeInterface.SetFParentId(Value : String); begin
  FParentId := Value;
  JSCode('parentId:' + VarToJSON([Value]));
end;

procedure TExtDataNodeInterface.SetFIndex(Value : Integer); begin
  FIndex := Value;
  JSCode('index:' + VarToJSON([Value]));
end;

procedure TExtDataNodeInterface.SetFDepth(Value : Integer); begin
  FDepth := Value;
  JSCode('depth:' + VarToJSON([Value]));
end;

procedure TExtDataNodeInterface.SetFExpanded(Value : Boolean); begin
  FExpanded := Value;
  JSCode('expanded:' + VarToJSON([Value]));
end;

procedure TExtDataNodeInterface.SetFExpandable(Value : Boolean); begin
  FExpandable := Value;
  JSCode('expandable:' + VarToJSON([Value]));
end;

procedure TExtDataNodeInterface.SetFChecked(Value : Boolean); begin
  FChecked := Value;
  JSCode('checked:' + VarToJSON([Value]));
end;

procedure TExtDataNodeInterface.SetFLeaf(Value : Boolean); begin
  FLeaf := Value;
  JSCode('leaf:' + VarToJSON([Value]));
end;

procedure TExtDataNodeInterface.SetFCls(Value : String); begin
  FCls := Value;
  JSCode('cls:' + VarToJSON([Value]));
end;

procedure TExtDataNodeInterface.SetFIconCls(Value : String); begin
  FIconCls := Value;
  JSCode('iconCls:' + VarToJSON([Value]));
end;

procedure TExtDataNodeInterface.SetFIcon(Value : String); begin
  FIcon := Value;
  JSCode('icon:' + VarToJSON([Value]));
end;

procedure TExtDataNodeInterface.SetFRoot(Value : Boolean); begin
  FRoot := Value;
  JSCode('root:' + VarToJSON([Value]));
end;

procedure TExtDataNodeInterface.SetFIsLast(Value : Boolean); begin
  FIsLast := Value;
  JSCode('isLast:' + VarToJSON([Value]));
end;

procedure TExtDataNodeInterface.SetFIsFirst(Value : Boolean); begin
  FIsFirst := Value;
  JSCode('isFirst:' + VarToJSON([Value]));
end;

procedure TExtDataNodeInterface.SetFAllowDrop(Value : Boolean); begin
  FAllowDrop := Value;
  JSCode('allowDrop:' + VarToJSON([Value]));
end;

procedure TExtDataNodeInterface.SetFAllowDrag(Value : Boolean); begin
  FAllowDrag := Value;
  JSCode('allowDrag:' + VarToJSON([Value]));
end;

procedure TExtDataNodeInterface.SetFLoaded(Value : Boolean); begin
  FLoaded := Value;
  JSCode('loaded:' + VarToJSON([Value]));
end;

procedure TExtDataNodeInterface.SetFLoading(Value : Boolean); begin
  FLoading := Value;
  JSCode('loading:' + VarToJSON([Value]));
end;

procedure TExtDataNodeInterface.SetFHref(Value : String); begin
  FHref := Value;
  JSCode('href:' + VarToJSON([Value]));
end;

procedure TExtDataNodeInterface.SetFHrefTarget(Value : String); begin
  FHrefTarget := Value;
  JSCode('hrefTarget:' + VarToJSON([Value]));
end;

procedure TExtDataNodeInterface.SetFQtip(Value : String); begin
  FQtip := Value;
  JSCode('qtip:' + VarToJSON([Value]));
end;

procedure TExtDataNodeInterface.SetFQtitle(Value : String); begin
  FQtitle := Value;
  JSCode('qtitle:' + VarToJSON([Value]));
end;

procedure TExtDataNodeInterface.SetFText(Value : String); begin
  FText := Value;
  JSCode('text:' + VarToJSON([Value]));
end;

procedure TExtDataNodeInterface.SetFChildren(Value : TExtObjectList); begin
  FChildren := Value;
  Value.DeleteFromGarbage;
  JSCode('children:' + VarToJSON([Value, false]));
end;

procedure TExtDataNodeInterface.SetFOnAppend(Value : TExtDataNodeInterfaceOnAppend); begin
  if Assigned(FOnAppend) then
    JSCode(JSName+'.events ["append"].listeners=[];');
  if Assigned(Value) then
    On('append', Ajax('append', ['This', '%0.nm','Node', '%1.nm','Index', '%2'], true));
  FOnAppend := Value;
end;

procedure TExtDataNodeInterface.SetFOnRemove(Value : TExtDataNodeInterfaceOnRemove); begin
  if Assigned(FOnRemove) then
    JSCode(JSName+'.events ["remove"].listeners=[];');
  if Assigned(Value) then
    On('remove', Ajax('remove', ['This', '%0.nm','Node', '%1.nm'], true));
  FOnRemove := Value;
end;

procedure TExtDataNodeInterface.SetFOnMove(Value : TExtDataNodeInterfaceOnMove); begin
  if Assigned(FOnMove) then
    JSCode(JSName+'.events ["move"].listeners=[];');
  if Assigned(Value) then
    On('move', Ajax('move', ['This', '%0.nm','OldParent', '%1.nm','NewParent', '%2.nm','Index', '%3'], true));
  FOnMove := Value;
end;

procedure TExtDataNodeInterface.SetFOnInsert(Value : TExtDataNodeInterfaceOnInsert); begin
  if Assigned(FOnInsert) then
    JSCode(JSName+'.events ["insert"].listeners=[];');
  if Assigned(Value) then
    On('insert', Ajax('insert', ['This', '%0.nm','Node', '%1.nm','RefNode', '%2.nm'], true));
  FOnInsert := Value;
end;

procedure TExtDataNodeInterface.SetFOnBeforeappend(Value : TExtDataNodeInterfaceOnBeforeappend); begin
  if Assigned(FOnBeforeappend) then
    JSCode(JSName+'.events ["beforeappend"].listeners=[];');
  if Assigned(Value) then
    On('beforeappend', Ajax('beforeappend', ['This', '%0.nm','Node', '%1.nm'], true));
  FOnBeforeappend := Value;
end;

procedure TExtDataNodeInterface.SetFOnBeforeremove(Value : TExtDataNodeInterfaceOnBeforeremove); begin
  if Assigned(FOnBeforeremove) then
    JSCode(JSName+'.events ["beforeremove"].listeners=[];');
  if Assigned(Value) then
    On('beforeremove', Ajax('beforeremove', ['This', '%0.nm','Node', '%1.nm'], true));
  FOnBeforeremove := Value;
end;

procedure TExtDataNodeInterface.SetFOnBeforemove(Value : TExtDataNodeInterfaceOnBeforemove); begin
  if Assigned(FOnBeforemove) then
    JSCode(JSName+'.events ["beforemove"].listeners=[];');
  if Assigned(Value) then
    On('beforemove', Ajax('beforemove', ['This', '%0.nm','OldParent', '%1.nm','NewParent', '%2.nm','Index', '%3'], true));
  FOnBeforemove := Value;
end;

procedure TExtDataNodeInterface.SetFOnBeforeinsert(Value : TExtDataNodeInterfaceOnBeforeinsert); begin
  if Assigned(FOnBeforeinsert) then
    JSCode(JSName+'.events ["beforeinsert"].listeners=[];');
  if Assigned(Value) then
    On('beforeinsert', Ajax('beforeinsert', ['This', '%0.nm','Node', '%1.nm','RefNode', '%2.nm'], true));
  FOnBeforeinsert := Value;
end;

procedure TExtDataNodeInterface.SetFOnExpand(Value : TExtDataNodeInterfaceOnExpand); begin
  if Assigned(FOnExpand) then
    JSCode(JSName+'.events ["expand"].listeners=[];');
  if Assigned(Value) then
    On('expand', Ajax('expand', ['This', '%0.nm'], true));
  FOnExpand := Value;
end;

procedure TExtDataNodeInterface.SetFOnCollapse(Value : TExtDataNodeInterfaceOnCollapse); begin
  if Assigned(FOnCollapse) then
    JSCode(JSName+'.events ["collapse"].listeners=[];');
  if Assigned(Value) then
    On('collapse', Ajax('collapse', ['This', '%0.nm'], true));
  FOnCollapse := Value;
end;

procedure TExtDataNodeInterface.SetFOnBeforeexpand(Value : TExtDataNodeInterfaceOnBeforeexpand); begin
  if Assigned(FOnBeforeexpand) then
    JSCode(JSName+'.events ["beforeexpand"].listeners=[];');
  if Assigned(Value) then
    On('beforeexpand', Ajax('beforeexpand', ['This', '%0.nm'], true));
  FOnBeforeexpand := Value;
end;

procedure TExtDataNodeInterface.SetFOnBeforecollapse(Value : TExtDataNodeInterfaceOnBeforecollapse); begin
  if Assigned(FOnBeforecollapse) then
    JSCode(JSName+'.events ["beforecollapse"].listeners=[];');
  if Assigned(Value) then
    On('beforecollapse', Ajax('beforecollapse', ['This', '%0.nm'], true));
  FOnBeforecollapse := Value;
end;

procedure TExtDataNodeInterface.SetFOnSort(Value : TExtDataNodeInterfaceOnSort); begin
  if Assigned(FOnSort) then
    JSCode(JSName+'.events ["sort"].listeners=[];');
  if Assigned(Value) then
    On('sort', Ajax('sort', ['This', '%0.nm','ChildNodes', '%1.nm'], true));
  FOnSort := Value;
end;

function TExtDataNodeInterface.JSClassName : string; begin
  Result := 'Ext-data-NodeInterface';
end;

procedure TExtDataNodeInterface.InitDefaults; begin
  inherited;
  FChildren := TExtObjectList.Create(Self, 'children');
end;

{$IFDEF FPC}constructor TExtDataNodeInterface.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataNodeInterface.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDataNodeInterface.CreateNode : TExtFunction; begin
  JSCode(JSName + '.createNode();', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.IsLeaf : TExtFunction; begin
  JSCode(JSName + '.isLeaf();', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.UpdateInfo : TExtFunction; begin
  JSCode(JSName + '.updateInfo();', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.IsLast_ : TExtFunction; begin
  JSCode(JSName + '.isLast();', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.IsFirst_ : TExtFunction; begin
  JSCode(JSName + '.isFirst();', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.HasChildNodes : TExtFunction; begin
  JSCode(JSName + '.hasChildNodes();', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.IsExpandable : TExtFunction; begin
  JSCode(JSName + '.isExpandable();', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.AppendChild(Node : TExtDataNodeInterface) : TExtFunction; begin
  JSCode(JSName + '.appendChild(' + VarToJSON([Node, false]) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.AppendChild(Node : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.AppendChild(' + VarToJSON(Node) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.RemoveChild(Node : TExtDataNodeInterface; DestroyJS : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.removeChild(' + VarToJSON([Node, false, DestroyJS]) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.Copy(Id : String = ''; Deep : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.copy(' + VarToJSON([Id, Deep]) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.DestroyJS : TExtFunction; begin
  JSCode(JSName + '.destroy();', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.InsertBefore(Node : TExtDataNodeInterface; RefNode : TExtDataNodeInterface) : TExtFunction; begin
  JSCode(JSName + '.insertBefore(' + VarToJSON([Node, false, RefNode, false]) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.InsertChild(Index : Integer; Node : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.insertChild(' + VarToJSON([Index, Node, false]) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.Remove(DestroyJS : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.remove(' + VarToJSON([DestroyJS]) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.RemoveAll(DestroyJS : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.removeAll(' + VarToJSON([DestroyJS]) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.GetChildAt(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.getChildAt(' + VarToJSON([Index]) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.ReplaceChild(NewChild : TExtDataNodeInterface; OldChild : TExtDataNodeInterface) : TExtFunction; begin
  JSCode(JSName + '.replaceChild(' + VarToJSON([NewChild, false, OldChild, false]) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.IndexOf(Node : TExtDataNodeInterface) : TExtFunction; begin
  JSCode(JSName + '.indexOf(' + VarToJSON([Node, false]) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.GetPath(Field : String = ''; Separator : String = '') : TExtFunction; begin
  JSCode(JSName + '.getPath(' + VarToJSON([Field, Separator]) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.GetDepth : TExtFunction; begin
  JSCode(JSName + '.getDepth();', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.Bubble(Fn : TExtFunction; Scope : TExtObject = nil; Args : TExtObjectList = nil) : TExtFunction; begin
  JSCode(JSName + '.bubble(' + VarToJSON([Fn, true, Scope, false]) + ',' + VarToJSON(Args) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.CascadeBy(Fn : TExtFunction; Scope : TExtObject = nil; Args : TExtObjectList = nil) : TExtFunction; begin
  JSCode(JSName + '.cascadeBy(' + VarToJSON([Fn, true, Scope, false]) + ',' + VarToJSON(Args) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.EachChild(Fn : TExtFunction; Scope : TExtObject = nil; Args : TExtObjectList = nil) : TExtFunction; begin
  JSCode(JSName + '.eachChild(' + VarToJSON([Fn, true, Scope, false]) + ',' + VarToJSON(Args) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.FindChild(Attribute : String; Value : TExtObject; Deep : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.findChild(' + VarToJSON([Attribute, Value, false, Deep]) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.FindChildBy(Fn : TExtFunction; Scope : TExtObject = nil; Deep : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.findChildBy(' + VarToJSON([Fn, true, Scope, false, Deep]) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.Contains(Node : TExtDataNodeInterface) : TExtFunction; begin
  JSCode(JSName + '.contains(' + VarToJSON([Node, false]) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.IsAncestor(Node : TExtDataNodeInterface) : TExtFunction; begin
  JSCode(JSName + '.isAncestor(' + VarToJSON([Node, false]) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.Sort(Fn : TExtFunction; Recursive : Boolean = false; SuppressEvent : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.sort(' + VarToJSON([Fn, true, Recursive, SuppressEvent]) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.IsExpanded : TExtFunction; begin
  JSCode(JSName + '.isExpanded();', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.IsLoaded : TExtFunction; begin
  JSCode(JSName + '.isLoaded();', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.IsLoading : TExtFunction; begin
  JSCode(JSName + '.isLoading();', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.IsRoot : TExtFunction; begin
  JSCode(JSName + '.isRoot();', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.IsVisible : TExtFunction; begin
  JSCode(JSName + '.isVisible();', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.Expand(Recursive : Boolean = false; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.expand(' + VarToJSON([Recursive, Callback, true, Scope, false]) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.ExpandChildren(Recursive : Boolean = false; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.expandChildren(' + VarToJSON([Recursive, Callback, true, Scope, false]) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.Collapse(Recursive : Boolean = false; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.collapse(' + VarToJSON([Recursive, Callback, true, Scope, false]) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

function TExtDataNodeInterface.CollapseChildren(Recursive : TExtFunction = nil; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.collapseChildren(' + VarToJSON([Recursive, true, Callback, true, Scope, false]) + ');', 'TExtDataNodeInterface');
  Result := Self;
end;

destructor TExtDataNodeInterface.Destroy; begin
  try
    FChildren.Free;
  except end;
  inherited;
end;

procedure TExtDataNodeInterface.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'append') and Assigned(FOnAppend) then
    FOnAppend(TExtDataNodeInterface(ParamAsObject('This')), TExtDataNodeInterface(ParamAsObject('Node')), ParamAsInteger('Index'))
  else if (AEvtName = 'remove') and Assigned(FOnRemove) then
    FOnRemove(TExtDataNodeInterface(ParamAsObject('This')), TExtDataNodeInterface(ParamAsObject('Node')))
  else if (AEvtName = 'move') and Assigned(FOnMove) then
    FOnMove(TExtDataNodeInterface(ParamAsObject('This')), TExtDataNodeInterface(ParamAsObject('OldParent')), TExtDataNodeInterface(ParamAsObject('NewParent')), ParamAsInteger('Index'))
  else if (AEvtName = 'insert') and Assigned(FOnInsert) then
    FOnInsert(TExtDataNodeInterface(ParamAsObject('This')), TExtDataNodeInterface(ParamAsObject('Node')), TExtDataNodeInterface(ParamAsObject('RefNode')))
  else if (AEvtName = 'beforeappend') and Assigned(FOnBeforeappend) then
    FOnBeforeappend(TExtDataNodeInterface(ParamAsObject('This')), TExtDataNodeInterface(ParamAsObject('Node')))
  else if (AEvtName = 'beforeremove') and Assigned(FOnBeforeremove) then
    FOnBeforeremove(TExtDataNodeInterface(ParamAsObject('This')), TExtDataNodeInterface(ParamAsObject('Node')))
  else if (AEvtName = 'beforemove') and Assigned(FOnBeforemove) then
    FOnBeforemove(TExtDataNodeInterface(ParamAsObject('This')), TExtDataNodeInterface(ParamAsObject('OldParent')), TExtDataNodeInterface(ParamAsObject('NewParent')), ParamAsInteger('Index'))
  else if (AEvtName = 'beforeinsert') and Assigned(FOnBeforeinsert) then
    FOnBeforeinsert(TExtDataNodeInterface(ParamAsObject('This')), TExtDataNodeInterface(ParamAsObject('Node')), TExtDataNodeInterface(ParamAsObject('RefNode')))
  else if (AEvtName = 'expand') and Assigned(FOnExpand) then
    FOnExpand(TExtDataNodeInterface(ParamAsObject('This')))
  else if (AEvtName = 'collapse') and Assigned(FOnCollapse) then
    FOnCollapse(TExtDataNodeInterface(ParamAsObject('This')))
  else if (AEvtName = 'beforeexpand') and Assigned(FOnBeforeexpand) then
    FOnBeforeexpand(TExtDataNodeInterface(ParamAsObject('This')))
  else if (AEvtName = 'beforecollapse') and Assigned(FOnBeforecollapse) then
    FOnBeforecollapse(TExtDataNodeInterface(ParamAsObject('This')))
  else if (AEvtName = 'sort') and Assigned(FOnSort) then
    FOnSort(TExtDataNodeInterface(ParamAsObject('This')), TExtObjectList(ParamAsObject('ChildNodes')));
end;

procedure TExtFormFieldContainer.SetFCombineLabels(Value : Boolean); begin
  FCombineLabels := Value;
  JSCode('combineLabels:' + VarToJSON([Value]));
end;

procedure TExtFormFieldContainer.SetFLabelConnector(Value : String); begin
  FLabelConnector := Value;
  JSCode('labelConnector:' + VarToJSON([Value]));
end;

procedure TExtFormFieldContainer.SetFCombineErrors(Value : Boolean); begin
  FCombineErrors := Value;
  JSCode('combineErrors:' + VarToJSON([Value]));
end;

function TExtFormFieldContainer.JSClassName : string; begin
  Result := 'Ext-form-FieldContainer';
end;

{$IFDEF FPC}constructor TExtFormFieldContainer.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtFormFieldContainer.GetFieldLabel : TExtFunction; begin
  JSCode(JSName + '.getFieldLabel();', 'TExtFormFieldContainer');
  Result := Self;
end;

function TExtFormFieldContainer.GetCombinedErrors(InvalidFields : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.getCombinedErrors(' + VarToJSON(InvalidFields) + ');', 'TExtFormFieldContainer');
  Result := Self;
end;

procedure TExtLayoutContainerTable.SetFColumns(Value : Integer); begin
  FColumns := Value;
  JSCode('columns:' + VarToJSON([Value]));
end;

procedure TExtLayoutContainerTable.SetFTableAttrs(Value : TExtObject); begin
  FTableAttrs := Value;
  Value.DeleteFromGarbage;
  JSCode('tableAttrs:' + VarToJSON([Value, false]));
end;

procedure TExtLayoutContainerTable.SetFTrAttrs(Value : TExtObject); begin
  FTrAttrs := Value;
  Value.DeleteFromGarbage;
  JSCode('trAttrs:' + VarToJSON([Value, false]));
end;

procedure TExtLayoutContainerTable.SetFTdAttrs(Value : TExtObject); begin
  FTdAttrs := Value;
  Value.DeleteFromGarbage;
  JSCode('tdAttrs:' + VarToJSON([Value, false]));
end;

function TExtLayoutContainerTable.JSClassName : string; begin
  Result := 'Ext-layout-container-Table';
end;

procedure TExtLayoutContainerTable.InitDefaults; begin
  inherited;
  FTableAttrs := TExtObject.CreateInternal(Self, 'tableAttrs');
  FTrAttrs := TExtObject.CreateInternal(Self, 'trAttrs');
  FTdAttrs := TExtObject.CreateInternal(Self, 'tdAttrs');
end;

{$IFDEF FPC}constructor TExtLayoutContainerTable.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtLayoutContainerTable.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

destructor TExtLayoutContainerTable.Destroy; begin
  try
    FTableAttrs.Free;
    FTrAttrs.Free;
    FTdAttrs.Free;
  except end;
  inherited;
end;

procedure TExtElement.SetFOnClick(Value : TExtElementOnClick); begin
  if Assigned(FOnClick) then
    JSCode(JSName+'.events ["click"].listeners=[];');
  if Assigned(Value) then
    On('click', Ajax('click', ['E', '%0.nm','T', '%1.nm'], true));
  FOnClick := Value;
end;

procedure TExtElement.SetFOnContextmenu(Value : TExtElementOnContextmenu); begin
  if Assigned(FOnContextmenu) then
    JSCode(JSName+'.events ["contextmenu"].listeners=[];');
  if Assigned(Value) then
    On('contextmenu', Ajax('contextmenu', ['E', '%0.nm','T', '%1.nm'], true));
  FOnContextmenu := Value;
end;

procedure TExtElement.SetFOnDblclick(Value : TExtElementOnDblclick); begin
  if Assigned(FOnDblclick) then
    JSCode(JSName+'.events ["dblclick"].listeners=[];');
  if Assigned(Value) then
    On('dblclick', Ajax('dblclick', ['E', '%0.nm','T', '%1.nm'], true));
  FOnDblclick := Value;
end;

procedure TExtElement.SetFOnMousedown(Value : TExtElementOnMousedown); begin
  if Assigned(FOnMousedown) then
    JSCode(JSName+'.events ["mousedown"].listeners=[];');
  if Assigned(Value) then
    On('mousedown', Ajax('mousedown', ['E', '%0.nm','T', '%1.nm'], true));
  FOnMousedown := Value;
end;

procedure TExtElement.SetFOnMouseup(Value : TExtElementOnMouseup); begin
  if Assigned(FOnMouseup) then
    JSCode(JSName+'.events ["mouseup"].listeners=[];');
  if Assigned(Value) then
    On('mouseup', Ajax('mouseup', ['E', '%0.nm','T', '%1.nm'], true));
  FOnMouseup := Value;
end;

procedure TExtElement.SetFOnMouseover(Value : TExtElementOnMouseover); begin
  if Assigned(FOnMouseover) then
    JSCode(JSName+'.events ["mouseover"].listeners=[];');
  if Assigned(Value) then
    On('mouseover', Ajax('mouseover', ['E', '%0.nm','T', '%1.nm'], true));
  FOnMouseover := Value;
end;

procedure TExtElement.SetFOnMousemove(Value : TExtElementOnMousemove); begin
  if Assigned(FOnMousemove) then
    JSCode(JSName+'.events ["mousemove"].listeners=[];');
  if Assigned(Value) then
    On('mousemove', Ajax('mousemove', ['E', '%0.nm','T', '%1.nm'], true));
  FOnMousemove := Value;
end;

procedure TExtElement.SetFOnMouseout(Value : TExtElementOnMouseout); begin
  if Assigned(FOnMouseout) then
    JSCode(JSName+'.events ["mouseout"].listeners=[];');
  if Assigned(Value) then
    On('mouseout', Ajax('mouseout', ['E', '%0.nm','T', '%1.nm'], true));
  FOnMouseout := Value;
end;

procedure TExtElement.SetFOnMouseenter(Value : TExtElementOnMouseenter); begin
  if Assigned(FOnMouseenter) then
    JSCode(JSName+'.events ["mouseenter"].listeners=[];');
  if Assigned(Value) then
    On('mouseenter', Ajax('mouseenter', ['E', '%0.nm','T', '%1.nm'], true));
  FOnMouseenter := Value;
end;

procedure TExtElement.SetFOnMouseleave(Value : TExtElementOnMouseleave); begin
  if Assigned(FOnMouseleave) then
    JSCode(JSName+'.events ["mouseleave"].listeners=[];');
  if Assigned(Value) then
    On('mouseleave', Ajax('mouseleave', ['E', '%0.nm','T', '%1.nm'], true));
  FOnMouseleave := Value;
end;

procedure TExtElement.SetFOnKeypress(Value : TExtElementOnKeypress); begin
  if Assigned(FOnKeypress) then
    JSCode(JSName+'.events ["keypress"].listeners=[];');
  if Assigned(Value) then
    On('keypress', Ajax('keypress', ['E', '%0.nm','T', '%1.nm'], true));
  FOnKeypress := Value;
end;

procedure TExtElement.SetFOnKeydown(Value : TExtElementOnKeydown); begin
  if Assigned(FOnKeydown) then
    JSCode(JSName+'.events ["keydown"].listeners=[];');
  if Assigned(Value) then
    On('keydown', Ajax('keydown', ['E', '%0.nm','T', '%1.nm'], true));
  FOnKeydown := Value;
end;

procedure TExtElement.SetFOnKeyup(Value : TExtElementOnKeyup); begin
  if Assigned(FOnKeyup) then
    JSCode(JSName+'.events ["keyup"].listeners=[];');
  if Assigned(Value) then
    On('keyup', Ajax('keyup', ['E', '%0.nm','T', '%1.nm'], true));
  FOnKeyup := Value;
end;

procedure TExtElement.SetFOnLoad(Value : TExtElementOnLoad); begin
  if Assigned(FOnLoad) then
    JSCode(JSName+'.events ["load"].listeners=[];');
  if Assigned(Value) then
    On('load', Ajax('load', ['E', '%0.nm','T', '%1.nm'], true));
  FOnLoad := Value;
end;

procedure TExtElement.SetFOnUnload(Value : TExtElementOnUnload); begin
  if Assigned(FOnUnload) then
    JSCode(JSName+'.events ["unload"].listeners=[];');
  if Assigned(Value) then
    On('unload', Ajax('unload', ['E', '%0.nm','T', '%1.nm'], true));
  FOnUnload := Value;
end;

procedure TExtElement.SetFOnAbort(Value : TExtElementOnAbort); begin
  if Assigned(FOnAbort) then
    JSCode(JSName+'.events ["abort"].listeners=[];');
  if Assigned(Value) then
    On('abort', Ajax('abort', ['E', '%0.nm','T', '%1.nm'], true));
  FOnAbort := Value;
end;

procedure TExtElement.SetFOnError(Value : TExtElementOnError); begin
  if Assigned(FOnError) then
    JSCode(JSName+'.events ["error"].listeners=[];');
  if Assigned(Value) then
    On('error', Ajax('error', ['E', '%0.nm','T', '%1.nm'], true));
  FOnError := Value;
end;

procedure TExtElement.SetFOnResize(Value : TExtElementOnResize); begin
  if Assigned(FOnResize) then
    JSCode(JSName+'.events ["resize"].listeners=[];');
  if Assigned(Value) then
    On('resize', Ajax('resize', ['E', '%0.nm','T', '%1.nm'], true));
  FOnResize := Value;
end;

procedure TExtElement.SetFOnScroll(Value : TExtElementOnScroll); begin
  if Assigned(FOnScroll) then
    JSCode(JSName+'.events ["scroll"].listeners=[];');
  if Assigned(Value) then
    On('scroll', Ajax('scroll', ['E', '%0.nm','T', '%1.nm'], true));
  FOnScroll := Value;
end;

procedure TExtElement.SetFOnSelect(Value : TExtElementOnSelect); begin
  if Assigned(FOnSelect) then
    JSCode(JSName+'.events ["select"].listeners=[];');
  if Assigned(Value) then
    On('select', Ajax('select', ['E', '%0.nm','T', '%1.nm'], true));
  FOnSelect := Value;
end;

procedure TExtElement.SetFOnChange(Value : TExtElementOnChange); begin
  if Assigned(FOnChange) then
    JSCode(JSName+'.events ["change"].listeners=[];');
  if Assigned(Value) then
    On('change', Ajax('change', ['E', '%0.nm','T', '%1.nm'], true));
  FOnChange := Value;
end;

procedure TExtElement.SetFOnSubmit(Value : TExtElementOnSubmit); begin
  if Assigned(FOnSubmit) then
    JSCode(JSName+'.events ["submit"].listeners=[];');
  if Assigned(Value) then
    On('submit', Ajax('submit', ['E', '%0.nm','T', '%1.nm'], true));
  FOnSubmit := Value;
end;

procedure TExtElement.SetFOnReset(Value : TExtElementOnReset); begin
  if Assigned(FOnReset) then
    JSCode(JSName+'.events ["reset"].listeners=[];');
  if Assigned(Value) then
    On('reset', Ajax('reset', ['E', '%0.nm','T', '%1.nm'], true));
  FOnReset := Value;
end;

procedure TExtElement.SetFOnFocus(Value : TExtElementOnFocus); begin
  if Assigned(FOnFocus) then
    JSCode(JSName+'.events ["focus"].listeners=[];');
  if Assigned(Value) then
    On('focus', Ajax('focus', ['E', '%0.nm','T', '%1.nm'], true));
  FOnFocus := Value;
end;

procedure TExtElement.SetFOnBlur(Value : TExtElementOnBlur); begin
  if Assigned(FOnBlur) then
    JSCode(JSName+'.events ["blur"].listeners=[];');
  if Assigned(Value) then
    On('blur', Ajax('blur', ['E', '%0.nm','T', '%1.nm'], true));
  FOnBlur := Value;
end;

procedure TExtElement.SetFOnDOMFocusIn(Value : TExtElementOnDOMFocusIn); begin
  if Assigned(FOnDOMFocusIn) then
    JSCode(JSName+'.events ["DOMFocusIn"].listeners=[];');
  if Assigned(Value) then
    On('DOMFocusIn', Ajax('DOMFocusIn', ['E', '%0.nm','T', '%1.nm'], true));
  FOnDOMFocusIn := Value;
end;

procedure TExtElement.SetFOnDOMFocusOut(Value : TExtElementOnDOMFocusOut); begin
  if Assigned(FOnDOMFocusOut) then
    JSCode(JSName+'.events ["DOMFocusOut"].listeners=[];');
  if Assigned(Value) then
    On('DOMFocusOut', Ajax('DOMFocusOut', ['E', '%0.nm','T', '%1.nm'], true));
  FOnDOMFocusOut := Value;
end;

procedure TExtElement.SetFOnDOMActivate(Value : TExtElementOnDOMActivate); begin
  if Assigned(FOnDOMActivate) then
    JSCode(JSName+'.events ["DOMActivate"].listeners=[];');
  if Assigned(Value) then
    On('DOMActivate', Ajax('DOMActivate', ['E', '%0.nm','T', '%1.nm'], true));
  FOnDOMActivate := Value;
end;

procedure TExtElement.SetFOnDOMSubtreeModified(Value : TExtElementOnDOMSubtreeModified); begin
  if Assigned(FOnDOMSubtreeModified) then
    JSCode(JSName+'.events ["DOMSubtreeModified"].listeners=[];');
  if Assigned(Value) then
    On('DOMSubtreeModified', Ajax('DOMSubtreeModified', ['E', '%0.nm','T', '%1.nm'], true));
  FOnDOMSubtreeModified := Value;
end;

procedure TExtElement.SetFOnDOMNodeInserted(Value : TExtElementOnDOMNodeInserted); begin
  if Assigned(FOnDOMNodeInserted) then
    JSCode(JSName+'.events ["DOMNodeInserted"].listeners=[];');
  if Assigned(Value) then
    On('DOMNodeInserted', Ajax('DOMNodeInserted', ['E', '%0.nm','T', '%1.nm'], true));
  FOnDOMNodeInserted := Value;
end;

procedure TExtElement.SetFOnDOMNodeRemoved(Value : TExtElementOnDOMNodeRemoved); begin
  if Assigned(FOnDOMNodeRemoved) then
    JSCode(JSName+'.events ["DOMNodeRemoved"].listeners=[];');
  if Assigned(Value) then
    On('DOMNodeRemoved', Ajax('DOMNodeRemoved', ['E', '%0.nm','T', '%1.nm'], true));
  FOnDOMNodeRemoved := Value;
end;

procedure TExtElement.SetFOnDOMNodeRemovedFromDocument(Value : TExtElementOnDOMNodeRemovedFromDocument); begin
  if Assigned(FOnDOMNodeRemovedFromDocument) then
    JSCode(JSName+'.events ["DOMNodeRemovedFromDocument"].listeners=[];');
  if Assigned(Value) then
    On('DOMNodeRemovedFromDocument', Ajax('DOMNodeRemovedFromDocument', ['E', '%0.nm','T', '%1.nm'], true));
  FOnDOMNodeRemovedFromDocument := Value;
end;

procedure TExtElement.SetFOnDOMNodeInsertedIntoDocument(Value : TExtElementOnDOMNodeInsertedIntoDocument); begin
  if Assigned(FOnDOMNodeInsertedIntoDocument) then
    JSCode(JSName+'.events ["DOMNodeInsertedIntoDocument"].listeners=[];');
  if Assigned(Value) then
    On('DOMNodeInsertedIntoDocument', Ajax('DOMNodeInsertedIntoDocument', ['E', '%0.nm','T', '%1.nm'], true));
  FOnDOMNodeInsertedIntoDocument := Value;
end;

procedure TExtElement.SetFOnDOMAttrModified(Value : TExtElementOnDOMAttrModified); begin
  if Assigned(FOnDOMAttrModified) then
    JSCode(JSName+'.events ["DOMAttrModified"].listeners=[];');
  if Assigned(Value) then
    On('DOMAttrModified', Ajax('DOMAttrModified', ['E', '%0.nm','T', '%1.nm'], true));
  FOnDOMAttrModified := Value;
end;

procedure TExtElement.SetFOnDOMCharacterDataModified(Value : TExtElementOnDOMCharacterDataModified); begin
  if Assigned(FOnDOMCharacterDataModified) then
    JSCode(JSName+'.events ["DOMCharacterDataModified"].listeners=[];');
  if Assigned(Value) then
    On('DOMCharacterDataModified', Ajax('DOMCharacterDataModified', ['E', '%0.nm','T', '%1.nm'], true));
  FOnDOMCharacterDataModified := Value;
end;

function TExtElement.JSClassName : string; begin
  Result := 'Ext-Element';
end;

{$IFDEF FPC}constructor TExtElement.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtElement.MonitorMouseLeave(Delay : Integer; Handler : TExtFunction; Scope : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.monitorMouseLeave(' + VarToJSON([Delay, Handler, true, Scope, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SwallowEvent(EventName : String; PreventDefault : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.swallowEvent(' + VarToJSON([EventName, PreventDefault]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SwallowEvent(EventName : TExtObjectList; PreventDefault : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.SwallowEvent(' + VarToJSON(EventName) + ',' + VarToJSON([PreventDefault]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.RelayEvent(EventName : String; ObjectJS : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.relayEvent(' + VarToJSON([EventName, ObjectJS, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Clean(ForceReclean : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.clean(' + VarToJSON([ForceReclean]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Load : TExtFunction; begin
  JSCode(JSName + '.load();', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetLoader : TExtFunction; begin
  JSCode(JSName + '.getLoader();', 'TExtElement');
  Result := Self;
end;

function TExtElement.Update(Html : String; LoadScripts : Boolean = false; Callback : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.update(' + VarToJSON([Html, LoadScripts, Callback, true]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.CreateProxy(Config : String; RenderTo : String = ''; MatchBox : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.createProxy(' + VarToJSON([Config, RenderTo, MatchBox]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.CreateProxy(Config : TExtObject; RenderTo : String = ''; MatchBox : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.CreateProxy(' + VarToJSON([Config, false, RenderTo, MatchBox]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.CreateProxy(Config : TExtObject; RenderTo : THTMLElement; MatchBox : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.CreateProxy(' + VarToJSON([Config, false, RenderTo, false, MatchBox]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.CreateProxy(Config : String; RenderTo : THTMLElement; MatchBox : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.CreateProxy(' + VarToJSON([Config, RenderTo, false, MatchBox]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Focusable : TExtFunction; begin
  JSCode(JSName + '.focusable();', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetAnchorXY(Anchor : String = ''; Local : Boolean = false; Size : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.getAnchorXY(' + VarToJSON([Anchor, Local, Size, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AnchorTo(Element : String; Position : String; Offsets : TArrayOfInteger = nil; Animate : Boolean = false; MonitorScroll : Boolean = false; Callback : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.anchorTo(' + VarToJSON([Element, Position, Offsets, Animate, MonitorScroll, Callback, true]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AnchorTo(Element : THTMLElement; Position : String; Offsets : TArrayOfInteger = nil; Animate : Boolean = false; MonitorScroll : Boolean = false; Callback : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.AnchorTo(' + VarToJSON([Element, false, Position, Offsets, Animate, MonitorScroll, Callback, true]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AnchorTo(Element : THTMLElement; Position : String; Offsets : TArrayOfInteger; Animate : TExtObject; MonitorScroll : Boolean = false; Callback : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.AnchorTo(' + VarToJSON([Element, false, Position, Offsets, Animate, false, MonitorScroll, Callback, true]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AnchorTo(Element : THTMLElement; Position : String; Offsets : TArrayOfInteger; Animate : TExtObject; MonitorScroll : Integer; Callback : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.AnchorTo(' + VarToJSON([Element, false, Position, Offsets, Animate, false, MonitorScroll, Callback, true]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AnchorTo(Element : THTMLElement; Position : String; Offsets : TArrayOfInteger; Animate : Boolean; MonitorScroll : Integer; Callback : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.AnchorTo(' + VarToJSON([Element, false, Position, Offsets, Animate, MonitorScroll, Callback, true]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AnchorTo(Element : TExtElement; Position : String; Offsets : TArrayOfInteger = nil; Animate : Boolean = false; MonitorScroll : Boolean = false; Callback : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.AnchorTo(' + VarToJSON([Element, false, Position, Offsets, Animate, MonitorScroll, Callback, true]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AnchorTo(Element : TExtElement; Position : String; Offsets : TArrayOfInteger; Animate : TExtObject; MonitorScroll : Boolean = false; Callback : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.AnchorTo(' + VarToJSON([Element, false, Position, Offsets, Animate, false, MonitorScroll, Callback, true]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AnchorTo(Element : TExtElement; Position : String; Offsets : TArrayOfInteger; Animate : TExtObject; MonitorScroll : Integer; Callback : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.AnchorTo(' + VarToJSON([Element, false, Position, Offsets, Animate, false, MonitorScroll, Callback, true]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AnchorTo(Element : TExtElement; Position : String; Offsets : TArrayOfInteger; Animate : Boolean; MonitorScroll : Integer; Callback : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.AnchorTo(' + VarToJSON([Element, false, Position, Offsets, Animate, MonitorScroll, Callback, true]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AnchorTo(Element : String; Position : String; Offsets : TArrayOfInteger; Animate : TExtObject; MonitorScroll : Boolean = false; Callback : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.AnchorTo(' + VarToJSON([Element, Position, Offsets, Animate, false, MonitorScroll, Callback, true]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AnchorTo(Element : String; Position : String; Offsets : TArrayOfInteger; Animate : TExtObject; MonitorScroll : Integer; Callback : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.AnchorTo(' + VarToJSON([Element, Position, Offsets, Animate, false, MonitorScroll, Callback, true]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AnchorTo(Element : String; Position : String; Offsets : TArrayOfInteger; Animate : Boolean; MonitorScroll : Integer; Callback : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.AnchorTo(' + VarToJSON([Element, Position, Offsets, Animate, MonitorScroll, Callback, true]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.RemoveAnchor : TExtFunction; begin
  JSCode(JSName + '.removeAnchor();', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetAlignToXY(Element : String; Position : String = ''; Offsets : TArrayOfInteger = nil) : TExtFunction; begin
  JSCode(JSName + '.getAlignToXY(' + VarToJSON([Element, Position, Offsets]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetAlignToXY(Element : THTMLElement; Position : String = ''; Offsets : TArrayOfInteger = nil) : TExtFunction; begin
  JSCode(JSName + '.GetAlignToXY(' + VarToJSON([Element, false, Position, Offsets]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetAlignToXY(Element : TExtElement; Position : String = ''; Offsets : TArrayOfInteger = nil) : TExtFunction; begin
  JSCode(JSName + '.GetAlignToXY(' + VarToJSON([Element, false, Position, Offsets]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AlignTo(Element : String; Position : String = ''; Offsets : TArrayOfInteger = nil; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.alignTo(' + VarToJSON([Element, Position, Offsets, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AlignTo(Element : THTMLElement; Position : String = ''; Offsets : TArrayOfInteger = nil; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.AlignTo(' + VarToJSON([Element, false, Position, Offsets, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AlignTo(Element : THTMLElement; Position : String; Offsets : TArrayOfInteger; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.AlignTo(' + VarToJSON([Element, false, Position, Offsets, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AlignTo(Element : TExtElement; Position : String = ''; Offsets : TArrayOfInteger = nil; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.AlignTo(' + VarToJSON([Element, false, Position, Offsets, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AlignTo(Element : TExtElement; Position : String; Offsets : TArrayOfInteger; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.AlignTo(' + VarToJSON([Element, false, Position, Offsets, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AlignTo(Element : String; Position : String; Offsets : TArrayOfInteger; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.AlignTo(' + VarToJSON([Element, Position, Offsets, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetConstrainVector(The : String; A : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.getConstrainVector(' + VarToJSON([The]) + ',' + VarToJSON(A) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetCenterXY : TExtFunction; begin
  JSCode(JSName + '.getCenterXY();', 'TExtElement');
  Result := Self;
end;

function TExtElement.Center(CenterIn : String = '') : TExtFunction; begin
  JSCode(JSName + '.center(' + VarToJSON([CenterIn]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Center(CenterIn : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.Center(' + VarToJSON([CenterIn, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Center(CenterIn : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.Center(' + VarToJSON([CenterIn, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SlideIn(Anchor : String = ''; Options : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.slideIn(' + VarToJSON([Anchor, Options, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SlideOut(Anchor : String = ''; Options : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.slideOut(' + VarToJSON([Anchor, Options, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Puff(Options : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.puff(' + VarToJSON([Options, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SwitchOff(Options : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.switchOff(' + VarToJSON([Options, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Frame(Color : String = ''; Count : Integer = 0; Options : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.frame(' + VarToJSON([Color, Count, Options, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Ghost(Anchor : String = ''; Options : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.ghost(' + VarToJSON([Anchor, Options, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Highlight(Color : String = ''; Options : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.highlight(' + VarToJSON([Color, Options, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Pause(Seconds : Integer) : TExtFunction; begin
  JSCode(JSName + '.pause(' + VarToJSON([Seconds]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.FadeIn(Options : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.fadeIn(' + VarToJSON([Options, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.FadeOut(Options : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.fadeOut(' + VarToJSON([Options, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Scale(Width : Integer; Height : Integer; Options : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.scale(' + VarToJSON([Width, Height, Options, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Shift(Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.shift(' + VarToJSON([Options, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.InitDD(Group : String; Config : TExtObject; Overrides : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.initDD(' + VarToJSON([Group, Config, false, Overrides, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.InitDDProxy(Group : String; Config : TExtObject; Overrides : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.initDDProxy(' + VarToJSON([Group, Config, false, Overrides, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.InitDDTarget(Group : String; Config : TExtObject; Overrides : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.initDDTarget(' + VarToJSON([Group, Config, false, Overrides, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.IsVisible(Deep : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.isVisible(' + VarToJSON([Deep]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.IsDisplayed : TExtFunction; begin
  JSCode(JSName + '.isDisplayed();', 'TExtElement');
  Result := Self;
end;

function TExtElement.EnableDisplayMode(Display : String = '') : TExtFunction; begin
  JSCode(JSName + '.enableDisplayMode(' + VarToJSON([Display]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Mask(Msg : String = ''; MsgCls : String = '') : TExtFunction; begin
  JSCode(JSName + '.mask(' + VarToJSON([Msg, MsgCls]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Unmask : TExtFunction; begin
  JSCode(JSName + '.unmask();', 'TExtElement');
  Result := Self;
end;

function TExtElement.IsMasked : TExtFunction; begin
  JSCode(JSName + '.isMasked();', 'TExtElement');
  Result := Self;
end;

function TExtElement.CreateShim : TExtFunction; begin
  JSCode(JSName + '.createShim();', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetVisibilityMode(VisMode : Integer) : TExtFunction; begin
  JSCode(JSName + '.setVisibilityMode(' + VarToJSON([VisMode]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.IsVisible_ : TExtFunction; begin
  JSCode(JSName + '.isVisible();', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetVisible(Visible : Boolean; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.setVisible(' + VarToJSON([Visible, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetVisible(Visible : Boolean; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetVisible(' + VarToJSON([Visible, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Toggle(Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.toggle(' + VarToJSON([Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Toggle(Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.Toggle(' + VarToJSON([Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetDisplayed(Value : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setDisplayed(' + VarToJSON([Value]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetDisplayed(Value : String) : TExtFunction; begin
  JSCode(JSName + '.SetDisplayed(' + VarToJSON([Value]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Hide(Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.hide(' + VarToJSON([Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Hide(Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.Hide(' + VarToJSON([Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Show(Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.show(' + VarToJSON([Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Show(Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.Show(' + VarToJSON([Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AppendChild(El : String) : TExtFunction; begin
  JSCode(JSName + '.appendChild(' + VarToJSON([El]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AppendChild(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.AppendChild(' + VarToJSON([El, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AppendChild(El : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.AppendChild(' + VarToJSON([El, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AppendTo(El : String) : TExtFunction; begin
  JSCode(JSName + '.appendTo(' + VarToJSON([El]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AppendTo(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.AppendTo(' + VarToJSON([El, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AppendTo(El : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.AppendTo(' + VarToJSON([El, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.InsertBefore(El : String) : TExtFunction; begin
  JSCode(JSName + '.insertBefore(' + VarToJSON([El]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.InsertBefore(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.InsertBefore(' + VarToJSON([El, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.InsertBefore(El : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.InsertBefore(' + VarToJSON([El, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.InsertAfter(El : String) : TExtFunction; begin
  JSCode(JSName + '.insertAfter(' + VarToJSON([El]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.InsertAfter(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.InsertAfter(' + VarToJSON([El, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.InsertAfter(El : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.InsertAfter(' + VarToJSON([El, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.InsertFirst(El : String) : TExtFunction; begin
  JSCode(JSName + '.insertFirst(' + VarToJSON([El]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.InsertFirst(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.InsertFirst(' + VarToJSON([El, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.InsertFirst(El : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.InsertFirst(' + VarToJSON([El, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.InsertFirst(El : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.InsertFirst(' + VarToJSON([El, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.InsertSibling(El : String; Where : String = ''; ReturnDom : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.insertSibling(' + VarToJSON([El, Where, ReturnDom]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.InsertSibling(El : THTMLElement; Where : String = ''; ReturnDom : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertSibling(' + VarToJSON([El, false, Where, ReturnDom]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.InsertSibling(El : TExtElement; Where : String = ''; ReturnDom : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertSibling(' + VarToJSON([El, false, Where, ReturnDom]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.InsertSibling(El : TExtObject; Where : String = ''; ReturnDom : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertSibling(' + VarToJSON([El, false, Where, ReturnDom]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.InsertSibling(El : TExtObjectList; Where : String = ''; ReturnDom : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertSibling(' + VarToJSON(El) + ',' + VarToJSON([Where, ReturnDom]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Replace(El : String) : TExtFunction; begin
  JSCode(JSName + '.replace(' + VarToJSON([El]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Replace(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.Replace(' + VarToJSON([El, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Replace(El : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.Replace(' + VarToJSON([El, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.ReplaceWith(El : String) : TExtFunction; begin
  JSCode(JSName + '.replaceWith(' + VarToJSON([El]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.ReplaceWith(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.ReplaceWith(' + VarToJSON([El, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.ReplaceWith(El : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.ReplaceWith(' + VarToJSON([El, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.ReplaceWith(El : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.ReplaceWith(' + VarToJSON([El, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.CreateChild(Config : TExtObject; InsertBefore : THTMLElement = nil; ReturnDom : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.createChild(' + VarToJSON([Config, false, InsertBefore, false, ReturnDom]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Wrap(Config : TExtObject = nil; ReturnDom : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.wrap(' + VarToJSON([Config, false, ReturnDom]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.InsertHtml(Where : String; Html : String; ReturnEl : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.insertHtml(' + VarToJSON([Where, Html, ReturnEl]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AddKeyListener(Key : String; Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.addKeyListener(' + VarToJSON([Key, Fn, true, Scope, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AddKeyListener(Key : Integer; Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.AddKeyListener(' + VarToJSON([Key, Fn, true, Scope, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AddKeyListener(Key : TArrayOfInteger; Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.AddKeyListener(' + VarToJSON([Key, Fn, true, Scope, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AddKeyListener(Key : TExtObject; Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.AddKeyListener(' + VarToJSON([Key, false, Fn, true, Scope, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AddKeyMap(Config : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.addKeyMap(' + VarToJSON([Config, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetX : TExtFunction; begin
  JSCode(JSName + '.getX();', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetY : TExtFunction; begin
  JSCode(JSName + '.getY();', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetXY : TExtFunction; begin
  JSCode(JSName + '.getXY();', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetOffsetsTo(Element : String) : TExtFunction; begin
  JSCode(JSName + '.getOffsetsTo(' + VarToJSON([Element]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetOffsetsTo(Element : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.GetOffsetsTo(' + VarToJSON([Element, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetOffsetsTo(Element : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.GetOffsetsTo(' + VarToJSON([Element, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetX(The : Integer; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.setX(' + VarToJSON([The, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetX(The : Integer; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetX(' + VarToJSON([The, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetY(The : Integer; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.setY(' + VarToJSON([The, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetY(The : Integer; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetY(' + VarToJSON([The, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetLeft(Left : String) : TExtFunction; begin
  JSCode(JSName + '.setLeft(' + VarToJSON([Left]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetTop(Top : String) : TExtFunction; begin
  JSCode(JSName + '.setTop(' + VarToJSON([Top]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetRight(Right : String) : TExtFunction; begin
  JSCode(JSName + '.setRight(' + VarToJSON([Right]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetBottom(Bottom : String) : TExtFunction; begin
  JSCode(JSName + '.setBottom(' + VarToJSON([Bottom]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetXY(Pos : TArrayOfInteger; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.setXY(' + VarToJSON([Pos, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetXY(Pos : TArrayOfInteger; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetXY(' + VarToJSON([Pos, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetLocation(X : Integer; Y : Integer; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.setLocation(' + VarToJSON([X, Y, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetLocation(X : Integer; Y : Integer; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetLocation(' + VarToJSON([X, Y, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.MoveTo(X : Integer; Y : Integer; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.moveTo(' + VarToJSON([X, Y, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.MoveTo(X : Integer; Y : Integer; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.MoveTo(' + VarToJSON([X, Y, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetLeft(Local : Boolean) : TExtFunction; begin
  JSCode(JSName + '.getLeft(' + VarToJSON([Local]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetRight(Local : Boolean) : TExtFunction; begin
  JSCode(JSName + '.getRight(' + VarToJSON([Local]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetTop(Local : Boolean) : TExtFunction; begin
  JSCode(JSName + '.getTop(' + VarToJSON([Local]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetBottom(Local : Boolean) : TExtFunction; begin
  JSCode(JSName + '.getBottom(' + VarToJSON([Local]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Position(Pos : String = ''; ZIndex : Integer = 0; X : Integer = 0; Y : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.position(' + VarToJSON([Pos, ZIndex, X, Y]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.ClearPositioning(Value : String = '') : TExtFunction; begin
  JSCode(JSName + '.clearPositioning(' + VarToJSON([Value]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetPositioning : TExtFunction; begin
  JSCode(JSName + '.getPositioning();', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetPositioning(PosCfg : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setPositioning(' + VarToJSON([PosCfg, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.TranslatePoints(X : Integer; Y : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.translatePoints(' + VarToJSON([X, Y]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.TranslatePoints(X : TArrayOfInteger; Y : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.TranslatePoints(' + VarToJSON([X, Y]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetBox(Box : TExtObject; Adjust : Boolean = false; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.setBox(' + VarToJSON([Box, false, Adjust, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetBox(Box : TExtObject; Adjust : Boolean; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetBox(' + VarToJSON([Box, false, Adjust, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetBox(ContentBox : Boolean = false; Local : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.getBox(' + VarToJSON([ContentBox, Local]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Move(Direction : String; Distance : Integer; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.move(' + VarToJSON([Direction, Distance, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Move(Direction : String; Distance : Integer; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.Move(' + VarToJSON([Direction, Distance, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetLeftTop(Left : String; Top : String) : TExtFunction; begin
  JSCode(JSName + '.setLeftTop(' + VarToJSON([Left, Top]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetRegion : TExtFunction; begin
  JSCode(JSName + '.getRegion();', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetViewRegion : TExtFunction; begin
  JSCode(JSName + '.getViewRegion();', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetPageBox(AsRegion : Boolean) : TExtFunction; begin
  JSCode(JSName + '.getPageBox(' + VarToJSON([AsRegion]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetBounds(X : Integer; Y : Integer; Width : Integer; Height : Integer; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.setBounds(' + VarToJSON([X, Y, Width, Height, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetBounds(X : Integer; Y : Integer; Width : String; Height : Integer; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.SetBounds(' + VarToJSON([X, Y, Width, Height, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetBounds(X : Integer; Y : Integer; Width : String; Height : String; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.SetBounds(' + VarToJSON([X, Y, Width, Height, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetBounds(X : Integer; Y : Integer; Width : String; Height : String; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetBounds(' + VarToJSON([X, Y, Width, Height, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetBounds(X : Integer; Y : Integer; Width : String; Height : Integer; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetBounds(' + VarToJSON([X, Y, Width, Height, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetBounds(X : Integer; Y : Integer; Width : Integer; Height : String; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.SetBounds(' + VarToJSON([X, Y, Width, Height, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetBounds(X : Integer; Y : Integer; Width : Integer; Height : String; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetBounds(' + VarToJSON([X, Y, Width, Height, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetBounds(X : Integer; Y : Integer; Width : Integer; Height : Integer; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetBounds(' + VarToJSON([X, Y, Width, Height, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetRegion(Region : TExtUtilRegion; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.setRegion(' + VarToJSON([Region, false, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetRegion(Region : TExtUtilRegion; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetRegion(' + VarToJSON([Region, false, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.IsScrollable : TExtFunction; begin
  JSCode(JSName + '.isScrollable();', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetScroll : TExtFunction; begin
  JSCode(JSName + '.getScroll();', 'TExtElement');
  Result := Self;
end;

function TExtElement.ScrollTo(Side : String; Value : Integer; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.scrollTo(' + VarToJSON([Side, Value, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.ScrollTo(Side : String; Value : Integer; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.ScrollTo(' + VarToJSON([Side, Value, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.ScrollIntoView(Container : String = ''; Hscroll : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.scrollIntoView(' + VarToJSON([Container, Hscroll]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.ScrollIntoView(Container : THTMLElement; Hscroll : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.ScrollIntoView(' + VarToJSON([Container, false, Hscroll]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.ScrollIntoView(Container : TExtElement; Hscroll : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.ScrollIntoView(' + VarToJSON([Container, false, Hscroll]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Scroll(Direction : String; Distance : Integer; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.scroll(' + VarToJSON([Direction, Distance, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Scroll(Direction : String; Distance : Integer; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.Scroll(' + VarToJSON([Direction, Distance, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetActiveElement : TExtFunction; begin
  JSCode(JSName + '.getActiveElement();', 'TExtElement');
  Result := Self;
end;

function TExtElement.SerializeForm(Form : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.serializeForm(' + VarToJSON([Form, false]) + ');', 'TExtElement');
  Result := Self;
end;

class function TExtElement.ParseBox(Box : Integer) : TExtFunction; begin
  JSCode(JSClassName + '.parseBox(' + VarToJSON([Box]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.ParseBox(Box : String) : TExtFunction; begin
  JSCode(JSName + '.ParseBox(' + VarToJSON([Box]) + ');', 'TExtElement');
  Result := Self;
end;

class function TExtElement.UnitizeBox(Box : Integer; Units : String) : TExtFunction; begin
  JSCode(JSClassName + '.unitizeBox(' + VarToJSON([Box, Units]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.UnitizeBox(Box : String; Units : String) : TExtFunction; begin
  JSCode(JSName + '.UnitizeBox(' + VarToJSON([Box, Units]) + ');', 'TExtElement');
  Result := Self;
end;

class function TExtElement.Normalize(Prop : String) : TExtFunction; begin
  JSCode(JSClassName + '.normalize(' + VarToJSON([Prop]) + ');', 'TExtElement');
  Result := Self;
end;

class function TExtElement.GetDocumentHeight : TExtFunction; begin
  JSCode(JSClassName + '.getDocumentHeight();', 'TExtElement');
  Result := Self;
end;

class function TExtElement.GetDocumentWidth : TExtFunction; begin
  JSCode(JSClassName + '.getDocumentWidth();', 'TExtElement');
  Result := Self;
end;

class function TExtElement.GetViewportHeight : TExtFunction; begin
  JSCode(JSClassName + '.getViewportHeight();', 'TExtElement');
  Result := Self;
end;

class function TExtElement.GetViewportWidth : TExtFunction; begin
  JSCode(JSClassName + '.getViewportWidth();', 'TExtElement');
  Result := Self;
end;

class function TExtElement.GetViewSize : TExtFunction; begin
  JSCode(JSClassName + '.getViewSize();', 'TExtElement');
  Result := Self;
end;

class function TExtElement.GetOrientation : TExtFunction; begin
  JSCode(JSClassName + '.getOrientation();', 'TExtElement');
  Result := Self;
end;

class function TExtElement.FromPoint(X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSClassName + '.fromPoint(' + VarToJSON([X, Y]) + ');', 'TExtElement');
  Result := Self;
end;

class function TExtElement.ParseStyles(Styles : String) : TExtFunction; begin
  JSCode(JSClassName + '.parseStyles(' + VarToJSON([Styles]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AdjustWidth : TExtFunction; begin
  JSCode(JSName + '.adjustWidth();', 'TExtElement');
  Result := Self;
end;

function TExtElement.AddCls(ClassName : String) : TExtFunction; begin
  JSCode(JSName + '.addCls(' + VarToJSON([ClassName]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AddCls(ClassName : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.AddCls(' + VarToJSON(ClassName) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.RemoveCls(ClassName : String) : TExtFunction; begin
  JSCode(JSName + '.removeCls(' + VarToJSON([ClassName]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.RemoveCls(ClassName : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.RemoveCls(' + VarToJSON(ClassName) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.RadioCls(ClassName : String) : TExtFunction; begin
  JSCode(JSName + '.radioCls(' + VarToJSON([ClassName]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.RadioCls(ClassName : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.RadioCls(' + VarToJSON(ClassName) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.ToggleCls(ClassName : String) : TExtFunction; begin
  JSCode(JSName + '.toggleCls(' + VarToJSON([ClassName]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.HasCls(ClassName : String) : TExtFunction; begin
  JSCode(JSName + '.hasCls(' + VarToJSON([ClassName]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.ReplaceCls(OldClassName : String; NewClassName : String) : TExtFunction; begin
  JSCode(JSName + '.replaceCls(' + VarToJSON([OldClassName, NewClassName]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetStyle(PropertyJS : String) : TExtFunction; begin
  JSCode(JSName + '.getStyle(' + VarToJSON([PropertyJS]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetColor(Attr : String; DefaultValue : String; Prefix : String = '') : TExtFunction; begin
  JSCode(JSName + '.getColor(' + VarToJSON([Attr, DefaultValue, Prefix]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetStyle(PropertyJS : String; Value : String = '') : TExtFunction; begin
  JSCode(JSName + '.setStyle(' + VarToJSON([PropertyJS, Value]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetStyle(PropertyJS : TExtObject; Value : String = '') : TExtFunction; begin
  JSCode(JSName + '.SetStyle(' + VarToJSON([PropertyJS, false, Value]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetOpacity(Opacity : Integer; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.setOpacity(' + VarToJSON([Opacity, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetOpacity(Opacity : Integer; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetOpacity(' + VarToJSON([Opacity, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.ClearOpacity : TExtFunction; begin
  JSCode(JSName + '.clearOpacity();', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetHeight(ContentHeight : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.getHeight(' + VarToJSON([ContentHeight]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetWidth(ContentWidth : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.getWidth(' + VarToJSON([ContentWidth]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetWidth(Width : Integer; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.setWidth(' + VarToJSON([Width, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetWidth(Width : String; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.SetWidth(' + VarToJSON([Width, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetWidth(Width : String; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetWidth(' + VarToJSON([Width, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetWidth(Width : Integer; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetWidth(' + VarToJSON([Width, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetHeight(Height : Integer; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.setHeight(' + VarToJSON([Height, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetHeight(Height : String; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.SetHeight(' + VarToJSON([Height, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetHeight(Height : String; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetHeight(' + VarToJSON([Height, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetHeight(Height : Integer; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetHeight(' + VarToJSON([Height, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetBorderWidth(Side : String) : TExtFunction; begin
  JSCode(JSName + '.getBorderWidth(' + VarToJSON([Side]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetPadding(Side : String) : TExtFunction; begin
  JSCode(JSName + '.getPadding(' + VarToJSON([Side]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Clip : TExtFunction; begin
  JSCode(JSName + '.clip();', 'TExtElement');
  Result := Self;
end;

function TExtElement.Unclip : TExtFunction; begin
  JSCode(JSName + '.unclip();', 'TExtElement');
  Result := Self;
end;

function TExtElement.ApplyStyles(Styles : String) : TExtFunction; begin
  JSCode(JSName + '.applyStyles(' + VarToJSON([Styles]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.ApplyStyles(Styles : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.ApplyStyles(' + VarToJSON([Styles, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.ApplyStyles(Styles : TExtFunction) : TExtFunction; begin
  JSCode(JSName + '.ApplyStyles(' + VarToJSON([Styles, true]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetStyles(Style1 : String; Style2 : String; Etc : String) : TExtFunction; begin
  JSCode(JSName + '.getStyles(' + VarToJSON([Style1, Style2, Etc]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.BoxWrap(ClassJS : String = '') : TExtFunction; begin
  JSCode(JSName + '.boxWrap(' + VarToJSON([ClassJS]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetSize(Width : Integer; Height : Integer; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.setSize(' + VarToJSON([Width, Height, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetSize(Width : String; Height : Integer; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.SetSize(' + VarToJSON([Width, Height, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetSize(Width : String; Height : String; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.SetSize(' + VarToJSON([Width, Height, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetSize(Width : String; Height : String; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetSize(' + VarToJSON([Width, Height, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetSize(Width : String; Height : Integer; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetSize(' + VarToJSON([Width, Height, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetSize(Width : Integer; Height : String; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.SetSize(' + VarToJSON([Width, Height, Animate]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetSize(Width : Integer; Height : String; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetSize(' + VarToJSON([Width, Height, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.SetSize(Width : Integer; Height : Integer; Animate : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetSize(' + VarToJSON([Width, Height, Animate, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetComputedHeight : TExtFunction; begin
  JSCode(JSName + '.getComputedHeight();', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetComputedWidth : TExtFunction; begin
  JSCode(JSName + '.getComputedWidth();', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetFrameWidth(Sides : String) : TExtFunction; begin
  JSCode(JSName + '.getFrameWidth(' + VarToJSON([Sides]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AddClsOnOver(ClassName : String) : TExtFunction; begin
  JSCode(JSName + '.addClsOnOver(' + VarToJSON([ClassName]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AddClsOnFocus(ClassName : String) : TExtFunction; begin
  JSCode(JSName + '.addClsOnFocus(' + VarToJSON([ClassName]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AddClsOnClick(ClassName : String) : TExtFunction; begin
  JSCode(JSName + '.addClsOnClick(' + VarToJSON([ClassName]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetViewSize_ : TExtFunction; begin
  JSCode(JSName + '.getViewSize();', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetStyleSize : TExtFunction; begin
  JSCode(JSName + '.getStyleSize();', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetSize(ContentSize : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.getSize(' + VarToJSON([ContentSize]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Repaint : TExtFunction; begin
  JSCode(JSName + '.repaint();', 'TExtElement');
  Result := Self;
end;

function TExtElement.Selectable : TExtFunction; begin
  JSCode(JSName + '.selectable();', 'TExtElement');
  Result := Self;
end;

function TExtElement.Unselectable : TExtFunction; begin
  JSCode(JSName + '.unselectable();', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetMargin(Sides : String = '') : TExtFunction; begin
  JSCode(JSName + '.getMargin(' + VarToJSON([Sides]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.FindParent(Selector : String; MaxDepth : Integer = 0; ReturnEl : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.findParent(' + VarToJSON([Selector, MaxDepth, ReturnEl]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.FindParent(Selector : String; MaxDepth : String; ReturnEl : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.FindParent(' + VarToJSON([Selector, MaxDepth, ReturnEl]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.FindParent(Selector : String; MaxDepth : THTMLElement; ReturnEl : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.FindParent(' + VarToJSON([Selector, MaxDepth, false, ReturnEl]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.FindParent(Selector : String; MaxDepth : TExtElement; ReturnEl : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.FindParent(' + VarToJSON([Selector, MaxDepth, false, ReturnEl]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.FindParentNode(Selector : String; MaxDepth : Integer = 0; ReturnEl : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.findParentNode(' + VarToJSON([Selector, MaxDepth, ReturnEl]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.FindParentNode(Selector : String; MaxDepth : String; ReturnEl : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.FindParentNode(' + VarToJSON([Selector, MaxDepth, ReturnEl]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.FindParentNode(Selector : String; MaxDepth : THTMLElement; ReturnEl : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.FindParentNode(' + VarToJSON([Selector, MaxDepth, false, ReturnEl]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.FindParentNode(Selector : String; MaxDepth : TExtElement; ReturnEl : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.FindParentNode(' + VarToJSON([Selector, MaxDepth, false, ReturnEl]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Up(Selector : String; MaxDepth : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.up(' + VarToJSON([Selector, MaxDepth]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Up(Selector : String; MaxDepth : String) : TExtFunction; begin
  JSCode(JSName + '.Up(' + VarToJSON([Selector, MaxDepth]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Up(Selector : String; MaxDepth : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.Up(' + VarToJSON([Selector, MaxDepth, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Up(Selector : String; MaxDepth : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.Up(' + VarToJSON([Selector, MaxDepth, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Select(Selector : String) : TExtFunction; begin
  JSCode(JSName + '.select(' + VarToJSON([Selector]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Query(Selector : String) : TExtFunction; begin
  JSCode(JSName + '.query(' + VarToJSON([Selector]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Down(Selector : String; ReturnDom : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.down(' + VarToJSON([Selector, ReturnDom]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Child(Selector : String; ReturnDom : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.child(' + VarToJSON([Selector, ReturnDom]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Parent(Selector : String = ''; ReturnDom : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.parent(' + VarToJSON([Selector, ReturnDom]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Next(Selector : String = ''; ReturnDom : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.next(' + VarToJSON([Selector, ReturnDom]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Prev(Selector : String = ''; ReturnDom : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.prev(' + VarToJSON([Selector, ReturnDom]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.First(Selector : String = ''; ReturnDom : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.first(' + VarToJSON([Selector, ReturnDom]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Last(Selector : String = ''; ReturnDom : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.last(' + VarToJSON([Selector, ReturnDom]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.IsJS(Selector : String) : TExtFunction; begin
  JSCode(JSName + '.is(' + VarToJSON([Selector]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Focus(Defer : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.focus(' + VarToJSON([Defer]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Blur : TExtFunction; begin
  JSCode(JSName + '.blur();', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetValue(AsNumber : Boolean) : TExtFunction; begin
  JSCode(JSName + '.getValue(' + VarToJSON([AsNumber]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.AddListener(EventName : String; Fn : TExtFunction; Scope : TExtObject = nil; Options : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.addListener(' + VarToJSON([EventName, Fn, true, Scope, false, Options, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.RemoveListener(EventName : String; Fn : TExtFunction; Scope : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.removeListener(' + VarToJSON([EventName, Fn, true, Scope, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.RemoveAllListeners : TExtFunction; begin
  JSCode(JSName + '.removeAllListeners();', 'TExtElement');
  Result := Self;
end;

function TExtElement.PurgeAllListeners : TExtFunction; begin
  JSCode(JSName + '.purgeAllListeners();', 'TExtElement');
  Result := Self;
end;

function TExtElement.IsBorderBox : TExtFunction; begin
  JSCode(JSName + '.isBorderBox();', 'TExtElement');
  Result := Self;
end;

function TExtElement.Remove : TExtFunction; begin
  JSCode(JSName + '.remove();', 'TExtElement');
  Result := Self;
end;

function TExtElement.Hover(OverFn : TExtFunction; OutFn : TExtFunction; Scope : TExtObject = nil; Options : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.hover(' + VarToJSON([OverFn, true, OutFn, true, Scope, false, Options, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Contains(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.contains(' + VarToJSON([El, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Contains(El : String) : TExtFunction; begin
  JSCode(JSName + '.Contains(' + VarToJSON([El]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetAttributeNS(Namespace : String; Name : String) : TExtFunction; begin
  JSCode(JSName + '.getAttributeNS(' + VarToJSON([Namespace, Name]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetAttribute(Name : String; Namespace : String = '') : TExtFunction; begin
  JSCode(JSName + '.getAttribute(' + VarToJSON([Name, Namespace]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Update_(Html : String) : TExtFunction; begin
  JSCode(JSName + '.update(' + VarToJSON([Html]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.On : TExtFunction; begin
  JSCode(JSName + '.on();', 'TExtElement');
  Result := Self;
end;

function TExtElement.Un : TExtFunction; begin
  JSCode(JSName + '.un();', 'TExtElement');
  Result := Self;
end;

function TExtElement.ClearListeners : TExtFunction; begin
  JSCode(JSName + '.clearListeners();', 'TExtElement');
  Result := Self;
end;

function TExtElement.DestroyJS : TExtFunction; begin
  JSCode(JSName + '.destroy();', 'TExtElement');
  Result := Self;
end;

class function TExtElement.Get(El : String) : TExtFunction; begin
  JSCode(JSClassName + '.get(' + VarToJSON([El]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Get(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.Get(' + VarToJSON([El, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Get(El : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.Get(' + VarToJSON([El, false]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.GetById(Id : String) : TExtFunction; begin
  JSCode(JSName + '.getById(' + VarToJSON([Id]) + ');', 'TExtElement');
  Result := Self;
end;

class function TExtElement.Fly(El : String; Named : String = '') : TExtFunction; begin
  JSCode(JSClassName + '.fly(' + VarToJSON([El, Named]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Fly(El : THTMLElement; Named : String = '') : TExtFunction; begin
  JSCode(JSName + '.Fly(' + VarToJSON([El, false, Named]) + ');', 'TExtElement');
  Result := Self;
end;

function TExtElement.Get_ : TExtFunction; begin
  JSCode(JSName + '.get();', 'TExtElement');
  Result := Self;
end;

function TExtElement.Fly_ : TExtFunction; begin
  JSCode(JSName + '.fly();', 'TExtElement');
  Result := Self;
end;

procedure TExtElement.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'click') and Assigned(FOnClick) then
    FOnClick(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'contextmenu') and Assigned(FOnContextmenu) then
    FOnContextmenu(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'dblclick') and Assigned(FOnDblclick) then
    FOnDblclick(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'mousedown') and Assigned(FOnMousedown) then
    FOnMousedown(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'mouseup') and Assigned(FOnMouseup) then
    FOnMouseup(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'mouseover') and Assigned(FOnMouseover) then
    FOnMouseover(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'mousemove') and Assigned(FOnMousemove) then
    FOnMousemove(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'mouseout') and Assigned(FOnMouseout) then
    FOnMouseout(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'mouseenter') and Assigned(FOnMouseenter) then
    FOnMouseenter(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'mouseleave') and Assigned(FOnMouseleave) then
    FOnMouseleave(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'keypress') and Assigned(FOnKeypress) then
    FOnKeypress(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'keydown') and Assigned(FOnKeydown) then
    FOnKeydown(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'keyup') and Assigned(FOnKeyup) then
    FOnKeyup(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'load') and Assigned(FOnLoad) then
    FOnLoad(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'unload') and Assigned(FOnUnload) then
    FOnUnload(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'abort') and Assigned(FOnAbort) then
    FOnAbort(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'error') and Assigned(FOnError) then
    FOnError(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'resize') and Assigned(FOnResize) then
    FOnResize(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'scroll') and Assigned(FOnScroll) then
    FOnScroll(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'select') and Assigned(FOnSelect) then
    FOnSelect(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'change') and Assigned(FOnChange) then
    FOnChange(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'submit') and Assigned(FOnSubmit) then
    FOnSubmit(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'reset') and Assigned(FOnReset) then
    FOnReset(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'focus') and Assigned(FOnFocus) then
    FOnFocus(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'blur') and Assigned(FOnBlur) then
    FOnBlur(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'DOMFocusIn') and Assigned(FOnDOMFocusIn) then
    FOnDOMFocusIn(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'DOMFocusOut') and Assigned(FOnDOMFocusOut) then
    FOnDOMFocusOut(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'DOMActivate') and Assigned(FOnDOMActivate) then
    FOnDOMActivate(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'DOMSubtreeModified') and Assigned(FOnDOMSubtreeModified) then
    FOnDOMSubtreeModified(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'DOMNodeInserted') and Assigned(FOnDOMNodeInserted) then
    FOnDOMNodeInserted(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'DOMNodeRemoved') and Assigned(FOnDOMNodeRemoved) then
    FOnDOMNodeRemoved(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'DOMNodeRemovedFromDocument') and Assigned(FOnDOMNodeRemovedFromDocument) then
    FOnDOMNodeRemovedFromDocument(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'DOMNodeInsertedIntoDocument') and Assigned(FOnDOMNodeInsertedIntoDocument) then
    FOnDOMNodeInsertedIntoDocument(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'DOMAttrModified') and Assigned(FOnDOMAttrModified) then
    FOnDOMAttrModified(ExtEventObject, THTMLElement(ParamAsObject('T')))
  else if (AEvtName = 'DOMCharacterDataModified') and Assigned(FOnDOMCharacterDataModified) then
    FOnDOMCharacterDataModified(ExtEventObject, THTMLElement(ParamAsObject('T')));
end;

procedure TExtLayoutContainerAnchor.SetFAnchor(Value : String); begin
  FAnchor := Value;
  JSCode('anchor:' + VarToJSON([Value]));
end;

procedure TExtLayoutContainerAnchor.SetFDefaultAnchor(Value : String); begin
  FDefaultAnchor := Value;
  JSCode('defaultAnchor:' + VarToJSON([Value]));
end;

function TExtLayoutContainerAnchor.JSClassName : string; begin
  Result := 'Ext-layout-container-Anchor';
end;

{$IFDEF FPC}constructor TExtLayoutContainerAnchor.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtDdDragTracker.SetFTrackOver(Value : Boolean); begin
  FTrackOver := Value;
  JSCode('trackOver:' + VarToJSON([Value]));
end;

procedure TExtDdDragTracker.SetFOverCls(Value : String); begin
  FOverCls := Value;
  JSCode('overCls:' + VarToJSON([Value]));
end;

procedure TExtDdDragTracker.SetFConstrainTo(Value : TExtUtilRegion); begin
  FConstrainTo := Value;
  Value.DeleteFromGarbage;
  JSCode('constrainTo:' + VarToJSON([Value, false]));
end;

procedure TExtDdDragTracker.SetFConstrainToTExtElement(Value : TExtElement); begin
  FConstrainToTExtElement := Value;
  Value.DeleteFromGarbage;
  JSCode('constrainTo:' + VarToJSON([Value, false]));
end;

procedure TExtDdDragTracker.SetFTolerance(Value : Integer); begin
  FTolerance := Value;
  JSCode('tolerance:' + VarToJSON([Value]));
end;

procedure TExtDdDragTracker.SetFAutoStart(Value : Boolean); begin
  FAutoStart := Value;
  JSCode('autoStart:' + VarToJSON([Value]));
end;

procedure TExtDdDragTracker.SetFAutoStartInteger(Value : Integer); begin
  FAutoStartInteger := Value;
  JSCode('autoStart:' + VarToJSON([Value]));
end;

procedure TExtDdDragTracker.SetFDelegate(Value : String); begin
  FDelegate := Value;
  JSCode('delegate:' + VarToJSON([Value]));
end;

procedure TExtDdDragTracker.SetFPreventDefault(Value : Boolean); begin
  FPreventDefault := Value;
  JSCode('preventDefault:' + VarToJSON([Value]));
end;

procedure TExtDdDragTracker.SetFStopEvent(Value : Boolean); begin
  FStopEvent := Value;
  JSCode('stopEvent:' + VarToJSON([Value]));
end;

procedure TExtDdDragTracker.SetFOnMouseover(Value : TExtDdDragTrackerOnMouseover); begin
  if Assigned(FOnMouseover) then
    JSCode(JSName+'.events ["mouseover"].listeners=[];');
  if Assigned(Value) then
    On('mouseover', Ajax('mouseover', ['This', '%0.nm','E', '%1.nm','Target', '%2.nm'], true));
  FOnMouseover := Value;
end;

procedure TExtDdDragTracker.SetFOnMouseout(Value : TExtDdDragTrackerOnMouseout); begin
  if Assigned(FOnMouseout) then
    JSCode(JSName+'.events ["mouseout"].listeners=[];');
  if Assigned(Value) then
    On('mouseout', Ajax('mouseout', ['This', '%0.nm','E', '%1.nm'], true));
  FOnMouseout := Value;
end;

procedure TExtDdDragTracker.SetFOnMousedown(Value : TExtDdDragTrackerOnMousedown); begin
  if Assigned(FOnMousedown) then
    JSCode(JSName+'.events ["mousedown"].listeners=[];');
  if Assigned(Value) then
    On('mousedown', Ajax('mousedown', ['This', '%0.nm','E', '%1.nm'], true));
  FOnMousedown := Value;
end;

procedure TExtDdDragTracker.SetFOnMouseup(Value : TExtDdDragTrackerOnMouseup); begin
  if Assigned(FOnMouseup) then
    JSCode(JSName+'.events ["mouseup"].listeners=[];');
  if Assigned(Value) then
    On('mouseup', Ajax('mouseup', ['This', '%0.nm','E', '%1.nm'], true));
  FOnMouseup := Value;
end;

procedure TExtDdDragTracker.SetFOnMousemove(Value : TExtDdDragTrackerOnMousemove); begin
  if Assigned(FOnMousemove) then
    JSCode(JSName+'.events ["mousemove"].listeners=[];');
  if Assigned(Value) then
    On('mousemove', Ajax('mousemove', ['This', '%0.nm','E', '%1.nm'], true));
  FOnMousemove := Value;
end;

procedure TExtDdDragTracker.SetFOnBeforestart(Value : TExtDdDragTrackerOnBeforestart); begin
  if Assigned(FOnBeforestart) then
    JSCode(JSName+'.events ["beforestart"].listeners=[];');
  if Assigned(Value) then
    On('beforestart', Ajax('beforestart', ['This', '%0.nm','E', '%1.nm'], true));
  FOnBeforestart := Value;
end;

procedure TExtDdDragTracker.SetFOnDragstart(Value : TExtDdDragTrackerOnDragstart); begin
  if Assigned(FOnDragstart) then
    JSCode(JSName+'.events ["dragstart"].listeners=[];');
  if Assigned(Value) then
    On('dragstart', Ajax('dragstart', ['This', '%0.nm','E', '%1.nm'], true));
  FOnDragstart := Value;
end;

procedure TExtDdDragTracker.SetFOnDragend(Value : TExtDdDragTrackerOnDragend); begin
  if Assigned(FOnDragend) then
    JSCode(JSName+'.events ["dragend"].listeners=[];');
  if Assigned(Value) then
    On('dragend', Ajax('dragend', ['This', '%0.nm','E', '%1.nm'], true));
  FOnDragend := Value;
end;

procedure TExtDdDragTracker.SetFOnDrag(Value : TExtDdDragTrackerOnDrag); begin
  if Assigned(FOnDrag) then
    JSCode(JSName+'.events ["drag"].listeners=[];');
  if Assigned(Value) then
    On('drag', Ajax('drag', ['This', '%0.nm','E', '%1.nm'], true));
  FOnDrag := Value;
end;

function TExtDdDragTracker.JSClassName : string; begin
  Result := 'Ext-dd-DragTracker';
end;

procedure TExtDdDragTracker.InitDefaults; begin
  inherited;
  FConstrainTo := TExtUtilRegion.CreateInternal(Self, 'constrainTo');
  FConstrainToTExtElement := TExtElement.CreateInternal(Self, 'constrainTo');
end;

{$IFDEF FPC}constructor TExtDdDragTracker.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDdDragTracker.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDdDragTracker.InitEl(El : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.initEl(' + VarToJSON([El, false]) + ');', 'TExtDdDragTracker');
  Result := Self;
end;

function TExtDdDragTracker.InitEl(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.InitEl(' + VarToJSON([El, false]) + ');', 'TExtDdDragTracker');
  Result := Self;
end;

function TExtDdDragTracker.OnBeforeStart(E : TExtEventObjectSingleton) : TExtFunction; begin
  JSCode(JSName + '.onBeforeStart(' + VarToJSON([E, false]) + ');', 'TExtDdDragTracker');
  Result := Self;
end;

function TExtDdDragTracker.OnStart(E : TExtEventObjectSingleton) : TExtFunction; begin
  JSCode(JSName + '.onStart(' + VarToJSON([E, false]) + ');', 'TExtDdDragTracker');
  Result := Self;
end;

function TExtDdDragTracker.OnDrag(E : TExtEventObjectSingleton) : TExtFunction; begin
  JSCode(JSName + '.onDrag(' + VarToJSON([E, false]) + ');', 'TExtDdDragTracker');
  Result := Self;
end;

function TExtDdDragTracker.OnEnd(E : TExtEventObjectSingleton) : TExtFunction; begin
  JSCode(JSName + '.onEnd(' + VarToJSON([E, false]) + ');', 'TExtDdDragTracker');
  Result := Self;
end;

function TExtDdDragTracker.GetDragTarget : TExtFunction; begin
  JSCode(JSName + '.getDragTarget();', 'TExtDdDragTracker');
  Result := Self;
end;

function TExtDdDragTracker.GetOffset(Optional : String) : TExtFunction; begin
  JSCode(JSName + '.getOffset(' + VarToJSON([Optional]) + ');', 'TExtDdDragTracker');
  Result := Self;
end;

destructor TExtDdDragTracker.Destroy; begin
  try
    FConstrainTo.Free;
    FConstrainToTExtElement.Free;
  except end;
  inherited;
end;

procedure TExtDdDragTracker.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'mouseover') and Assigned(FOnMouseover) then
    FOnMouseover(TExtDdDragTracker(ParamAsObject('This')), TExtObject(ParamAsObject('E')), THTMLElement(ParamAsObject('Target')))
  else if (AEvtName = 'mouseout') and Assigned(FOnMouseout) then
    FOnMouseout(TExtDdDragTracker(ParamAsObject('This')), TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'mousedown') and Assigned(FOnMousedown) then
    FOnMousedown(TExtDdDragTracker(ParamAsObject('This')), TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'mouseup') and Assigned(FOnMouseup) then
    FOnMouseup(TExtDdDragTracker(ParamAsObject('This')), TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'mousemove') and Assigned(FOnMousemove) then
    FOnMousemove(TExtDdDragTracker(ParamAsObject('This')), TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'beforestart') and Assigned(FOnBeforestart) then
    FOnBeforestart(TExtDdDragTracker(ParamAsObject('This')), TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'dragstart') and Assigned(FOnDragstart) then
    FOnDragstart(TExtDdDragTracker(ParamAsObject('This')), TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'dragend') and Assigned(FOnDragend) then
    FOnDragend(TExtDdDragTracker(ParamAsObject('This')), TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'drag') and Assigned(FOnDrag) then
    FOnDrag(TExtDdDragTracker(ParamAsObject('This')), TExtObject(ParamAsObject('E')));
end;

function TExtObjectSingleton.JSClassName : string; begin
  Result := 'Ext-ObjectSingleton';
end;

{$IFDEF FPC}constructor TExtObjectSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtObjectSingleton.ToQueryObjects(Name : String; Value : TExtObject; Recursive : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.toQueryObjects(' + VarToJSON([Name, Value, false, Recursive]) + ');', 'TExtObjectSingleton');
  Result := Self;
end;

function TExtObjectSingleton.ToQueryObjects(Name : String; Value : TExtObjectList; Recursive : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.ToQueryObjects(' + VarToJSON([Name]) + ',' + VarToJSON(Value) + ',' + VarToJSON([Recursive]) + ');', 'TExtObjectSingleton');
  Result := Self;
end;

function TExtObjectSingleton.ToQueryString(ObjectJS : TExtObject; Recursive : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.toQueryString(' + VarToJSON([ObjectJS, false, Recursive]) + ');', 'TExtObjectSingleton');
  Result := Self;
end;

function TExtObjectSingleton.FromQueryString(QueryString : String; Recursive : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.fromQueryString(' + VarToJSON([QueryString, Recursive]) + ');', 'TExtObjectSingleton');
  Result := Self;
end;

function TExtObjectSingleton.Each(ObjectJS : TExtObject; Fn : TExtFunction; FnKey : String; FnValue : TExtObject; FnObject : TExtObject; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.each(' + VarToJSON([ObjectJS, false, Fn, true, FnKey, FnValue, false, FnObject, false, Scope, false]) + ');', 'TExtObjectSingleton');
  Result := Self;
end;

function TExtObjectSingleton.Merge(ObjectJS : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.merge(' + VarToJSON(ObjectJS) + ');', 'TExtObjectSingleton');
  Result := Self;
end;

function TExtObjectSingleton.GetKey(ObjectJS : TExtObject; Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getKey(' + VarToJSON([ObjectJS, false, Value, false]) + ');', 'TExtObjectSingleton');
  Result := Self;
end;

function TExtObjectSingleton.GetValues(ObjectJS : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getValues(' + VarToJSON([ObjectJS, false]) + ');', 'TExtObjectSingleton');
  Result := Self;
end;

function TExtObjectSingleton.GetKeys(ObjectJS : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getKeys(' + VarToJSON([ObjectJS, false]) + ');', 'TExtObjectSingleton');
  Result := Self;
end;

function TExtObjectSingleton.GetSize(ObjectJS : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getSize(' + VarToJSON([ObjectJS, false]) + ');', 'TExtObjectSingleton');
  Result := Self;
end;

function TExtObjectSingleton.Merge_ : TExtFunction; begin
  JSCode(JSName + '.merge();', 'TExtObjectSingleton');
  Result := Self;
end;

function TExtObjectSingleton.UrlEncode : TExtFunction; begin
  JSCode(JSName + '.urlEncode();', 'TExtObjectSingleton');
  Result := Self;
end;

function TExtObjectSingleton.UrlDecode : TExtFunction; begin
  JSCode(JSName + '.urlDecode();', 'TExtObjectSingleton');
  Result := Self;
end;

procedure TExtGridFeatureGroupingSummary.SetFRemoteRoot(Value : String); begin
  FRemoteRoot := Value;
  JSCode('remoteRoot:' + VarToJSON([Value]));
end;

function TExtGridFeatureGroupingSummary.JSClassName : string; begin
  Result := 'Ext-grid-feature-GroupingSummary';
end;

{$IFDEF FPC}constructor TExtGridFeatureGroupingSummary.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDomQuerySingleton.JSClassName : string; begin
  Result := 'Ext-DomQuerySingleton';
end;

{$IFDEF FPC}constructor TExtDomQuerySingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDomQuerySingleton.Compile(Selector : String; TypeJS : String = '') : TExtFunction; begin
  JSCode(JSName + '.compile(' + VarToJSON([Selector, TypeJS]) + ');', 'TExtDomQuerySingleton');
  Result := Self;
end;

function TExtDomQuerySingleton.JsSelect(Selector : String; Root : THTMLElement = nil) : TExtFunction; begin
  JSCode(JSName + '.jsSelect(' + VarToJSON([Selector, Root, false]) + ');', 'TExtDomQuerySingleton');
  Result := Self;
end;

function TExtDomQuerySingleton.JsSelect(Selector : String; Root : String) : TExtFunction; begin
  JSCode(JSName + '.JsSelect(' + VarToJSON([Selector, Root]) + ');', 'TExtDomQuerySingleton');
  Result := Self;
end;

function TExtDomQuerySingleton.Select(Path : String; Root : THTMLElement = nil) : TExtFunction; begin
  JSCode(JSName + '.select(' + VarToJSON([Path, Root, false]) + ');', 'TExtDomQuerySingleton');
  Result := Self;
end;

function TExtDomQuerySingleton.SelectNode(Selector : String; Root : THTMLElement = nil) : TExtFunction; begin
  JSCode(JSName + '.selectNode(' + VarToJSON([Selector, Root, false]) + ');', 'TExtDomQuerySingleton');
  Result := Self;
end;

function TExtDomQuerySingleton.SelectValue(Selector : String; Root : THTMLElement = nil; DefaultValue : String = '') : TExtFunction; begin
  JSCode(JSName + '.selectValue(' + VarToJSON([Selector, Root, false, DefaultValue]) + ');', 'TExtDomQuerySingleton');
  Result := Self;
end;

function TExtDomQuerySingleton.SelectNumber(Selector : String; Root : THTMLElement = nil; DefaultValue : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.selectNumber(' + VarToJSON([Selector, Root, false, DefaultValue]) + ');', 'TExtDomQuerySingleton');
  Result := Self;
end;

function TExtDomQuerySingleton.IsJS(El : String; Selector : String) : TExtFunction; begin
  JSCode(JSName + '.is(' + VarToJSON([El, Selector]) + ');', 'TExtDomQuerySingleton');
  Result := Self;
end;

function TExtDomQuerySingleton.IsJS(El : THTMLElement; Selector : String) : TExtFunction; begin
  JSCode(JSName + '.IsJS(' + VarToJSON([El, false, Selector]) + ');', 'TExtDomQuerySingleton');
  Result := Self;
end;

function TExtDomQuerySingleton.IsJS(El : TExtObjectList; Selector : String) : TExtFunction; begin
  JSCode(JSName + '.IsJS(' + VarToJSON(El) + ',' + VarToJSON([Selector]) + ');', 'TExtDomQuerySingleton');
  Result := Self;
end;

function TExtDomQuerySingleton.Filter(El : TExtObjectList; Selector : String; NonMatches : Boolean) : TExtFunction; begin
  JSCode(JSName + '.filter(' + VarToJSON(El) + ',' + VarToJSON([Selector, NonMatches]) + ');', 'TExtDomQuerySingleton');
  Result := Self;
end;

function TExtDomQuerySingleton.Query : TExtFunction; begin
  JSCode(JSName + '.query();', 'TExtDomQuerySingleton');
  Result := Self;
end;

procedure TExtChartSeriesGauge.SetFHighlightDuration(Value : Integer); begin
  FHighlightDuration := Value;
  JSCode('highlightDuration:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesGauge.SetFAngleField(Value : String); begin
  FAngleField := Value;
  JSCode('angleField:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesGauge.SetFNeedle(Value : Boolean); begin
  FNeedle := Value;
  JSCode('needle:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesGauge.SetFDonut(Value : Boolean); begin
  FDonut := Value;
  JSCode('donut:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesGauge.SetFDonutInteger(Value : Integer); begin
  FDonutInteger := Value;
  JSCode('donut:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesGauge.SetFShowInLegend(Value : Boolean); begin
  FShowInLegend := Value;
  JSCode('showInLegend:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesGauge.SetFStyle(Value : TExtObject); begin
  FStyle := Value;
  Value.DeleteFromGarbage;
  JSCode('style:' + VarToJSON([Value, false]));
end;

function TExtChartSeriesGauge.JSClassName : string; begin
  Result := 'Ext-chart-series-Gauge';
end;

procedure TExtChartSeriesGauge.InitDefaults; begin
  inherited;
  FStyle := TExtObject.CreateInternal(Self, 'style');
end;

{$IFDEF FPC}constructor TExtChartSeriesGauge.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtChartSeriesGauge.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtChartSeriesGauge.DrawSeries : TExtFunction; begin
  JSCode(JSName + '.drawSeries();', 'TExtChartSeriesGauge');
  Result := Self;
end;

function TExtChartSeriesGauge.SetValue : TExtFunction; begin
  JSCode(JSName + '.setValue();', 'TExtChartSeriesGauge');
  Result := Self;
end;

function TExtChartSeriesGauge.GetLegendColor(Info : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getLegendColor(' + VarToJSON([Info, false]) + ');', 'TExtChartSeriesGauge');
  Result := Self;
end;

destructor TExtChartSeriesGauge.Destroy; begin
  try
    FStyle.Free;
  except end;
  inherited;
end;

function TExtUtilMixedCollection.JSClassName : string; begin
  Result := 'Ext-util-MixedCollection';
end;

{$IFDEF FPC}constructor TExtUtilMixedCollection.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtUtilMixedCollection.Create(AllowFunctions : Boolean; KeyFn : TExtFunction); begin
  CreateVar(JSClassName + '(' + VarToJSON([AllowFunctions, KeyFn, true]) + ');');
  InitDefaults;
end;

function TExtUtilMixedCollection.SortBy(SorterFn : TExtFunction) : TExtFunction; begin
  JSCode(JSName + '.sortBy(' + VarToJSON([SorterFn, true]) + ');', 'TExtUtilMixedCollection');
  Result := Self;
end;

function TExtUtilMixedCollection.Reorder(Mapping : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.reorder(' + VarToJSON([Mapping, false]) + ');', 'TExtUtilMixedCollection');
  Result := Self;
end;

function TExtUtilMixedCollection.SortByKey(Direction : String = ''; Fn : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.sortByKey(' + VarToJSON([Direction, Fn, true]) + ');', 'TExtUtilMixedCollection');
  Result := Self;
end;

function TExtFormActionDirectSubmit.JSClassName : string; begin
  Result := 'Ext-form-action-DirectSubmit';
end;

{$IFDEF FPC}constructor TExtFormActionDirectSubmit.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtChartSeriesPie.SetFHighlightDuration(Value : Integer); begin
  FHighlightDuration := Value;
  JSCode('highlightDuration:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesPie.SetFAngleField(Value : String); begin
  FAngleField := Value;
  JSCode('angleField:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesPie.SetFLengthField(Value : String); begin
  FLengthField := Value;
  JSCode('lengthField:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesPie.SetFDonut(Value : Boolean); begin
  FDonut := Value;
  JSCode('donut:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesPie.SetFDonutInteger(Value : Integer); begin
  FDonutInteger := Value;
  JSCode('donut:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesPie.SetFShowInLegend(Value : Boolean); begin
  FShowInLegend := Value;
  JSCode('showInLegend:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesPie.SetFColorSet(Value : TExtObjectList); begin
  FColorSet := Value;
  Value.DeleteFromGarbage;
  JSCode('colorSet:' + VarToJSON([Value, false]));
end;

procedure TExtChartSeriesPie.SetFStyle(Value : TExtObject); begin
  FStyle := Value;
  Value.DeleteFromGarbage;
  JSCode('style:' + VarToJSON([Value, false]));
end;

function TExtChartSeriesPie.JSClassName : string; begin
  Result := 'Ext-chart-series-Pie';
end;

procedure TExtChartSeriesPie.InitDefaults; begin
  inherited;
  FColorSet := TExtObjectList.Create(Self, 'colorSet');
  FStyle := TExtObject.CreateInternal(Self, 'style');
end;

{$IFDEF FPC}constructor TExtChartSeriesPie.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtChartSeriesPie.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtChartSeriesPie.DrawSeries : TExtFunction; begin
  JSCode(JSName + '.drawSeries();', 'TExtChartSeriesPie');
  Result := Self;
end;

function TExtChartSeriesPie.HighlightItem(Info : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.highlightItem(' + VarToJSON([Info, false]) + ');', 'TExtChartSeriesPie');
  Result := Self;
end;

function TExtChartSeriesPie.UnHighlightItem(Info : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.unHighlightItem(' + VarToJSON([Info, false]) + ');', 'TExtChartSeriesPie');
  Result := Self;
end;

function TExtChartSeriesPie.GetLegendColor(Info : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getLegendColor(' + VarToJSON([Info, false]) + ');', 'TExtChartSeriesPie');
  Result := Self;
end;

destructor TExtChartSeriesPie.Destroy; begin
  try
    FColorSet.Free;
    FStyle.Free;
  except end;
  inherited;
end;

procedure TExtDirectRemotingProvider.SetFActions(Value : TExtObject); begin
  FActions := Value;
  Value.DeleteFromGarbage;
  JSCode('actions:' + VarToJSON([Value, false]));
end;

procedure TExtDirectRemotingProvider.SetFNamespace(Value : String); begin
  FNamespace := Value;
  JSCode('namespace:' + VarToJSON([Value]));
end;

procedure TExtDirectRemotingProvider.SetFNamespaceTExtObject(Value : TExtObject); begin
  FNamespaceTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('namespace:' + VarToJSON([Value, false]));
end;

procedure TExtDirectRemotingProvider.SetFUrl(Value : String); begin
  FUrl := Value;
  JSCode('url:' + VarToJSON([Value]));
end;

procedure TExtDirectRemotingProvider.SetFEnableUrlEncode(Value : String); begin
  FEnableUrlEncode := Value;
  JSCode('enableUrlEncode:' + VarToJSON([Value]));
end;

procedure TExtDirectRemotingProvider.SetFEnableBuffer(Value : Integer); begin
  FEnableBuffer := Value;
  JSCode('enableBuffer:' + VarToJSON([Value]));
end;

procedure TExtDirectRemotingProvider.SetFEnableBufferBoolean(Value : Boolean); begin
  FEnableBufferBoolean := Value;
  JSCode('enableBuffer:' + VarToJSON([Value]));
end;

procedure TExtDirectRemotingProvider.SetFMaxRetries(Value : Integer); begin
  FMaxRetries := Value;
  JSCode('maxRetries:' + VarToJSON([Value]));
end;

procedure TExtDirectRemotingProvider.SetFTimeout(Value : Integer); begin
  FTimeout := Value;
  JSCode('timeout:' + VarToJSON([Value]));
end;

procedure TExtDirectRemotingProvider.SetFOnBeforecall(Value : TExtDirectRemotingProviderOnBeforecall); begin
  if Assigned(FOnBeforecall) then
    JSCode(JSName+'.events ["beforecall"].listeners=[];');
  if Assigned(Value) then
    On('beforecall', Ajax('beforecall', ['Provider', '%0.nm','Transaction', '%1.nm','Meta', '%2.nm'], true));
  FOnBeforecall := Value;
end;

procedure TExtDirectRemotingProvider.SetFOnCall(Value : TExtDirectRemotingProviderOnCall); begin
  if Assigned(FOnCall) then
    JSCode(JSName+'.events ["call"].listeners=[];');
  if Assigned(Value) then
    On('call', Ajax('call', ['Provider', '%0.nm','Transaction', '%1.nm','Meta', '%2.nm'], true));
  FOnCall := Value;
end;

function TExtDirectRemotingProvider.JSClassName : string; begin
  Result := 'Ext-direct-RemotingProvider';
end;

procedure TExtDirectRemotingProvider.InitDefaults; begin
  inherited;
  FActions := TExtObject.CreateInternal(Self, 'actions');
  FNamespaceTExtObject := TExtObject.CreateInternal(Self, 'namespace');
end;

{$IFDEF FPC}constructor TExtDirectRemotingProvider.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDirectRemotingProvider.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

destructor TExtDirectRemotingProvider.Destroy; begin
  try
    FActions.Free;
    FNamespaceTExtObject.Free;
  except end;
  inherited;
end;

procedure TExtDirectRemotingProvider.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforecall') and Assigned(FOnBeforecall) then
    FOnBeforecall(TExtDirectRemotingProvider(ParamAsObject('Provider')), TExtDirectTransaction(ParamAsObject('Transaction')), TExtObject(ParamAsObject('Meta')))
  else if (AEvtName = 'call') and Assigned(FOnCall) then
    FOnCall(TExtDirectRemotingProvider(ParamAsObject('Provider')), TExtDirectTransaction(ParamAsObject('Transaction')), TExtObject(ParamAsObject('Meta')));
end;

function TExtEnvOS.JSClassName : string; begin
  Result := 'Ext-env-OS';
end;

{$IFDEF FPC}constructor TExtEnvOS.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtEnvOS.IsJS(Value : String) : TExtFunction; begin
  JSCode(JSName + '.is(' + VarToJSON([Value]) + ');', 'TExtEnvOS');
  Result := Self;
end;

procedure TExtChartSeriesColumn.SetFXPadding(Value : Integer); begin
  FXPadding := Value;
  JSCode('xPadding:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesColumn.SetFYPadding(Value : Integer); begin
  FYPadding := Value;
  JSCode('yPadding:' + VarToJSON([Value]));
end;

function TExtChartSeriesColumn.JSClassName : string; begin
  Result := 'Ext-chart-series-Column';
end;

{$IFDEF FPC}constructor TExtChartSeriesColumn.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtDataHasManyAssociation.SetFForeignKey(Value : String); begin
  FForeignKey := Value;
  JSCode('foreignKey:' + VarToJSON([Value]));
end;

procedure TExtDataHasManyAssociation.SetFName(Value : String); begin
  FName := Value;
  JSCode('name:' + VarToJSON([Value]));
end;

procedure TExtDataHasManyAssociation.SetFStoreConfig(Value : TExtObject); begin
  FStoreConfig := Value;
  Value.DeleteFromGarbage;
  JSCode('storeConfig:' + VarToJSON([Value, false]));
end;

procedure TExtDataHasManyAssociation.SetFFilterProperty(Value : String); begin
  FFilterProperty := Value;
  JSCode('filterProperty:' + VarToJSON([Value]));
end;

procedure TExtDataHasManyAssociation.SetFAutoLoad(Value : Boolean); begin
  FAutoLoad := Value;
  JSCode('autoLoad:' + VarToJSON([Value]));
end;

procedure TExtDataHasManyAssociation.SetFTypeJS(Value : String); begin
  FTypeJS := Value;
  JSCode('typeJS:' + VarToJSON([Value]));
end;

function TExtDataHasManyAssociation.JSClassName : string; begin
  Result := 'Ext-data-HasManyAssociation';
end;

procedure TExtDataHasManyAssociation.InitDefaults; begin
  inherited;
  FStoreConfig := TExtObject.CreateInternal(Self, 'storeConfig');
end;

{$IFDEF FPC}constructor TExtDataHasManyAssociation.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataHasManyAssociation.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

destructor TExtDataHasManyAssociation.Destroy; begin
  try
    FStoreConfig.Free;
  except end;
  inherited;
end;

procedure TExtDrawComponent.SetFEnginePriority(Value : TExtObjectList); begin
  FEnginePriority := Value;
  Value.DeleteFromGarbage;
  JSCode('enginePriority:' + VarToJSON([Value, false]));
end;

procedure TExtDrawComponent.SetFViewBox(Value : Boolean); begin
  FViewBox := Value;
  JSCode('viewBox:' + VarToJSON([Value]));
end;

procedure TExtDrawComponent.SetFAutoSize(Value : Boolean); begin
  FAutoSize := Value;
  JSCode('autoSize:' + VarToJSON([Value]));
end;

procedure TExtDrawComponent.SetFGradients(Value : TExtObjectList); begin
  FGradients := Value;
  Value.DeleteFromGarbage;
  JSCode('gradients:' + VarToJSON([Value, false]));
end;

function TExtDrawComponent.JSClassName : string; begin
  Result := 'Ext-draw-Component';
end;

procedure TExtDrawComponent.InitDefaults; begin
  inherited;
  FEnginePriority := TExtObjectList.Create(Self, 'enginePriority');
  FGradients := TExtObjectList.Create(Self, 'gradients');
end;

{$IFDEF FPC}constructor TExtDrawComponent.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDrawComponent.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDrawComponent.CreateSurface : TExtFunction; begin
  JSCode(JSName + '.createSurface();', 'TExtDrawComponent');
  Result := Self;
end;

destructor TExtDrawComponent.Destroy; begin
  try
    FEnginePriority.Free;
    FGradients.Free;
  except end;
  inherited;
end;

function TExtChartAxisCategory.JSClassName : string; begin
  Result := 'Ext-chart-axis-Category';
end;

{$IFDEF FPC}constructor TExtChartAxisCategory.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtFlashComponent.SetFFlashVersion(Value : String); begin
  FFlashVersion := Value;
  JSCode('flashVersion:' + VarToJSON([Value]));
end;

procedure TExtFlashComponent.SetFBackgroundColor(Value : String); begin
  FBackgroundColor := Value;
  JSCode('backgroundColor:' + VarToJSON([Value]));
end;

procedure TExtFlashComponent.SetFWmode(Value : String); begin
  FWmode := Value;
  JSCode('wmode:' + VarToJSON([Value]));
end;

procedure TExtFlashComponent.SetFFlashVars(Value : TExtObject); begin
  FFlashVars := Value;
  Value.DeleteFromGarbage;
  JSCode('flashVars:' + VarToJSON([Value, false]));
end;

procedure TExtFlashComponent.SetFFlashParams(Value : TExtObject); begin
  FFlashParams := Value;
  Value.DeleteFromGarbage;
  JSCode('flashParams:' + VarToJSON([Value, false]));
end;

procedure TExtFlashComponent.SetFFlashAttributes(Value : TExtObject); begin
  FFlashAttributes := Value;
  Value.DeleteFromGarbage;
  JSCode('flashAttributes:' + VarToJSON([Value, false]));
end;

procedure TExtFlashComponent.SetFUrl(Value : String); begin
  FUrl := Value;
  JSCode('url:' + VarToJSON([Value]));
end;

procedure TExtFlashComponent.SetFSwfWidth(Value : String); begin
  FSwfWidth := Value;
  JSCode('swfWidth:' + VarToJSON([Value]));
end;

procedure TExtFlashComponent.SetFSwfWidthInteger(Value : Integer); begin
  FSwfWidthInteger := Value;
  JSCode('swfWidth:' + VarToJSON([Value]));
end;

procedure TExtFlashComponent.SetFSwfHeight(Value : String); begin
  FSwfHeight := Value;
  JSCode('swfHeight:' + VarToJSON([Value]));
end;

procedure TExtFlashComponent.SetFSwfHeightInteger(Value : Integer); begin
  FSwfHeightInteger := Value;
  JSCode('swfHeight:' + VarToJSON([Value]));
end;

procedure TExtFlashComponent.SetFExpressInstall(Value : Boolean); begin
  FExpressInstall := Value;
  JSCode('expressInstall:' + VarToJSON([Value]));
end;

procedure TExtFlashComponent.SetFSwf(Value : TExtElement); begin
  FSwf := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.swf=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtFlashComponent.SetFOnSuccess(Value : TExtFlashComponentOnSuccess); begin
  if Assigned(FOnSuccess) then
    JSCode(JSName+'.events ["success"].listeners=[];');
  if Assigned(Value) then
    On('success', Ajax('success', ['This', '%0.nm','This_', '%1.nm','E', '%2.nm'], true));
  FOnSuccess := Value;
end;

function TExtFlashComponent.JSClassName : string; begin
  Result := 'Ext-flash-Component';
end;

procedure TExtFlashComponent.InitDefaults; begin
  inherited;
  FFlashVars := TExtObject.CreateInternal(Self, 'flashVars');
  FFlashParams := TExtObject.CreateInternal(Self, 'flashParams');
  FFlashAttributes := TExtObject.CreateInternal(Self, 'flashAttributes');
  FSwf := TExtElement.CreateInternal(Self, 'swf');
end;

{$IFDEF FPC}constructor TExtFlashComponent.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtFlashComponent.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtFlashComponent.GetSwfId : TExtFunction; begin
  JSCode(JSName + '.getSwfId();', 'TExtFlashComponent');
  Result := Self;
end;

destructor TExtFlashComponent.Destroy; begin
  try
    FFlashVars.Free;
    FFlashParams.Free;
    FFlashAttributes.Free;
    FSwf.Free;
  except end;
  inherited;
end;

procedure TExtFlashComponent.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'success') and Assigned(FOnSuccess) then
    FOnSuccess(TExtFlashComponent(ParamAsObject('This')), TExtFlashComponent(ParamAsObject('This_')), TExtObject(ParamAsObject('E')));
end;

procedure TExtUtilObservable.SetFListeners(Value : TExtObject); begin
  FListeners := Value;
  Value.DeleteFromGarbage;
  JSCode('listeners:' + VarToJSON([Value, false]));
end;

function TExtUtilObservable.JSClassName : string; begin
  Result := 'Ext-util-Observable';
end;

procedure TExtUtilObservable.InitDefaults; begin
  inherited;
  FListeners := TExtObject.CreateInternal(Self, 'listeners');
end;

{$IFDEF FPC}constructor TExtUtilObservable.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtUtilObservable.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtUtilObservable.AddManagedListener(Item : TExtUtilObservable; Ename : TExtObject; Fn : TExtFunction = nil; Scope : TExtObject = nil; Opt : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.addManagedListener(' + VarToJSON([Item, false, Ename, false, Fn, true, Scope, false, Opt, false]) + ');', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.AddManagedListener(Item : TExtElement; Ename : TExtObject; Fn : TExtFunction = nil; Scope : TExtObject = nil; Opt : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.AddManagedListener(' + VarToJSON([Item, false, Ename, false, Fn, true, Scope, false, Opt, false]) + ');', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.AddManagedListener(Item : TExtElement; Ename : String; Fn : TExtFunction = nil; Scope : TExtObject = nil; Opt : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.AddManagedListener(' + VarToJSON([Item, false, Ename, Fn, true, Scope, false, Opt, false]) + ');', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.AddManagedListener(Item : TExtUtilObservable; Ename : String; Fn : TExtFunction = nil; Scope : TExtObject = nil; Opt : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.AddManagedListener(' + VarToJSON([Item, false, Ename, Fn, true, Scope, false, Opt, false]) + ');', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.RemoveManagedListener(Item : TExtUtilObservable; Ename : TExtObject; Fn : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.removeManagedListener(' + VarToJSON([Item, false, Ename, false, Fn, true, Scope, false]) + ');', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.RemoveManagedListener(Item : TExtElement; Ename : TExtObject; Fn : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.RemoveManagedListener(' + VarToJSON([Item, false, Ename, false, Fn, true, Scope, false]) + ');', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.RemoveManagedListener(Item : TExtElement; Ename : String; Fn : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.RemoveManagedListener(' + VarToJSON([Item, false, Ename, Fn, true, Scope, false]) + ');', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.RemoveManagedListener(Item : TExtUtilObservable; Ename : String; Fn : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.RemoveManagedListener(' + VarToJSON([Item, false, Ename, Fn, true, Scope, false]) + ');', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.FireEvent(EventName : String; Args : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.fireEvent(' + VarToJSON([EventName]) + ',' + VarToJSON(Args) + ');', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.AddListener(EventName : String; Fn : TExtFunction; Scope : TExtObject = nil; Options : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.addListener(' + VarToJSON([EventName, Fn, true, Scope, false, Options, false]) + ');', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.RemoveListener(EventName : String; Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.removeListener(' + VarToJSON([EventName, Fn, true, Scope, false]) + ');', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.ClearListeners : TExtFunction; begin
  JSCode(JSName + '.clearListeners();', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.ClearManagedListeners : TExtFunction; begin
  JSCode(JSName + '.clearManagedListeners();', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.AddEvents(O : TExtObject; More : TString = nil) : TExtFunction; begin
  JSCode(JSName + '.addEvents(' + VarToJSON([O, false, More, false]) + ');', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.AddEvents(O : String; More : TString = nil) : TExtFunction; begin
  JSCode(JSName + '.AddEvents(' + VarToJSON([O, More, false]) + ');', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.HasListener(EventName : String) : TExtFunction; begin
  JSCode(JSName + '.hasListener(' + VarToJSON([EventName]) + ');', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.SuspendEvents(QueueSuspended : Boolean) : TExtFunction; begin
  JSCode(JSName + '.suspendEvents(' + VarToJSON([QueueSuspended]) + ');', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.ResumeEvents : TExtFunction; begin
  JSCode(JSName + '.resumeEvents();', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.RelayEvents(Origin : TExtObject; Events : TExtObjectList; Prefix : String; Param : TExtFunction; Events_ : String) : TExtFunction; begin
  JSCode(JSName + '.relayEvents(' + VarToJSON([Origin, false]) + ',' + VarToJSON(Events) + ',' + VarToJSON([Prefix, Param, true, Events_]) + ');', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.RelayEvents(Origin : TExtObject; Events : TExtObjectList; Prefix : String; Param : TExtFunction; Events_ : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.RelayEvents(' + VarToJSON([Origin, false]) + ',' + VarToJSON(Events) + ',' + VarToJSON([Prefix, Param, true]) + ',' + VarToJSON(Events_) + ');', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.On : TExtFunction; begin
  JSCode(JSName + '.on();', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.Un : TExtFunction; begin
  JSCode(JSName + '.un();', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.Mon : TExtFunction; begin
  JSCode(JSName + '.mon();', 'TExtUtilObservable');
  Result := Self;
end;

function TExtUtilObservable.Mun : TExtFunction; begin
  JSCode(JSName + '.mun();', 'TExtUtilObservable');
  Result := Self;
end;

destructor TExtUtilObservable.Destroy; begin
  try
    FListeners.Free;
  except end;
  inherited;
end;

procedure TExtFormActionStandardSubmit.SetFTarget(Value : String); begin
  FTarget := Value;
  JSCode('target:' + VarToJSON([Value]));
end;

function TExtFormActionStandardSubmit.JSClassName : string; begin
  Result := 'Ext-form-action-StandardSubmit';
end;

{$IFDEF FPC}constructor TExtFormActionStandardSubmit.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtDataRequest.SetFAction(Value : String); begin
  FAction := Value;
  JSCode('action:' + VarToJSON([Value]));
end;

procedure TExtDataRequest.SetFParams(Value : TExtObject); begin
  FParams := Value;
  Value.DeleteFromGarbage;
  JSCode('params:' + VarToJSON([Value, false]));
end;

procedure TExtDataRequest.SetFMethod(Value : String); begin
  FMethod := Value;
  JSCode('method:' + VarToJSON([Value]));
end;

procedure TExtDataRequest.SetFUrl(Value : String); begin
  FUrl := Value;
  JSCode('url:' + VarToJSON([Value]));
end;

function TExtDataRequest.JSClassName : string; begin
  Result := 'Ext-data-Request';
end;

procedure TExtDataRequest.InitDefaults; begin
  inherited;
  FParams := TExtObject.CreateInternal(Self, 'params');
end;

{$IFDEF FPC}constructor TExtDataRequest.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataRequest.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

constructor TExtDataRequest.Create(Config : TExtObject = nil); begin
  if Config = nil then CreateVar(JSClassName + '({});') else
  CreateVar(JSClassName + '(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

destructor TExtDataRequest.Destroy; begin
  try
    FParams.Free;
  except end;
  inherited;
end;

function TExtFxEasingSingleton.JSClassName : string; begin
  Result := 'Ext-fx-EasingSingleton';
end;

{$IFDEF FPC}constructor TExtFxEasingSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtLayoutContainerBorder.JSClassName : string; begin
  Result := 'Ext-layout-container-Border';
end;

{$IFDEF FPC}constructor TExtLayoutContainerBorder.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtLayoutContainerBorder.GetPlaceholder(Panel : TExtPanelPanel) : TExtFunction; begin
  JSCode(JSName + '.getPlaceholder(' + VarToJSON([Panel, false]) + ');', 'TExtLayoutContainerBorder');
  Result := Self;
end;

function TDate.JSClassName : string; begin
  Result := 'Date';
end;

{$IFDEF FPC}constructor TDate.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TDate.Create(Year : Integer = 0; Month : Integer = 0; Day : Integer = 0; Hour : Integer = 0; Minute : Integer = 0; Second : Integer = 0; Millisecond : Integer = 0); begin
  CreateVar(JSClassName + '(' + VarToJSON([Year, Month, Day, Hour, Minute, Second, Millisecond]) + ');');
  InitDefaults;
end;

constructor TDate.Create(Year : String; Month : Integer = 0; Day : Integer = 0; Hour : Integer = 0; Minute : Integer = 0; Second : Integer = 0; Millisecond : Integer = 0); begin
  CreateVar(JSClassName + '(' + VarToJSON([Year, Month, Day, Hour, Minute, Second, Millisecond]) + ');');
  InitDefaults;
end;

class function TDate.Now : TExtFunction; begin
  JSCode(JSClassName + '.now();', 'TDate');
  Result := Self;
end;

class function TDate.Parse(DateString : String) : TExtFunction; begin
  JSCode(JSClassName + '.parse(' + VarToJSON([DateString]) + ');', 'TDate');
  Result := Self;
end;

class function TDate.UTC(Year : Integer; Month : Integer; Date : Integer; Hrs : Integer; Min : Integer; Sec : Integer; Ms : Integer) : TExtFunction; begin
  JSCode(JSClassName + '.UTC(' + VarToJSON([Year, Month, Date, Hrs, Min, Sec, Ms]) + ');', 'TDate');
  Result := Self;
end;

function TDate.GetDate : TExtFunction; begin
  JSCode(JSName + '.getDate();', 'TDate');
  Result := Self;
end;

function TDate.GetDay : TExtFunction; begin
  JSCode(JSName + '.getDay();', 'TDate');
  Result := Self;
end;

function TDate.GetFullYear : TExtFunction; begin
  JSCode(JSName + '.getFullYear();', 'TDate');
  Result := Self;
end;

function TDate.GetHours : TExtFunction; begin
  JSCode(JSName + '.getHours();', 'TDate');
  Result := Self;
end;

function TDate.GetMilliseconds : TExtFunction; begin
  JSCode(JSName + '.getMilliseconds();', 'TDate');
  Result := Self;
end;

function TDate.GetMinutes : TExtFunction; begin
  JSCode(JSName + '.getMinutes();', 'TDate');
  Result := Self;
end;

function TDate.GetMonth : TExtFunction; begin
  JSCode(JSName + '.getMonth();', 'TDate');
  Result := Self;
end;

function TDate.GetSeconds : TExtFunction; begin
  JSCode(JSName + '.getSeconds();', 'TDate');
  Result := Self;
end;

function TDate.GetTime : TExtFunction; begin
  JSCode(JSName + '.getTime();', 'TDate');
  Result := Self;
end;

function TDate.GetTimezoneOffset : TExtFunction; begin
  JSCode(JSName + '.getTimezoneOffset();', 'TDate');
  Result := Self;
end;

function TDate.GetUTCDate : TExtFunction; begin
  JSCode(JSName + '.getUTCDate();', 'TDate');
  Result := Self;
end;

function TDate.GetUTCDay : TExtFunction; begin
  JSCode(JSName + '.getUTCDay();', 'TDate');
  Result := Self;
end;

function TDate.GetUTCFullYear : TExtFunction; begin
  JSCode(JSName + '.getUTCFullYear();', 'TDate');
  Result := Self;
end;

function TDate.GetUTCHours : TExtFunction; begin
  JSCode(JSName + '.getUTCHours();', 'TDate');
  Result := Self;
end;

function TDate.GetUTCMilliseconds : TExtFunction; begin
  JSCode(JSName + '.getUTCMilliseconds();', 'TDate');
  Result := Self;
end;

function TDate.GetUTCMinutes : TExtFunction; begin
  JSCode(JSName + '.getUTCMinutes();', 'TDate');
  Result := Self;
end;

function TDate.GetUTCMonth : TExtFunction; begin
  JSCode(JSName + '.getUTCMonth();', 'TDate');
  Result := Self;
end;

function TDate.GetUTCSeconds : TExtFunction; begin
  JSCode(JSName + '.getUTCSeconds();', 'TDate');
  Result := Self;
end;

function TDate.SetDate(DayValue : Integer) : TExtFunction; begin
  JSCode(JSName + '.setDate(' + VarToJSON([DayValue]) + ');', 'TDate');
  Result := Self;
end;

function TDate.SetFullYear(YearValue : Integer; MonthValue : Integer; DayValue : Integer) : TExtFunction; begin
  JSCode(JSName + '.setFullYear(' + VarToJSON([YearValue, MonthValue, DayValue]) + ');', 'TDate');
  Result := Self;
end;

function TDate.SetHours(HoursValue : Integer; MinutesValue : Integer; SecondsValue : Integer; MsValue : Integer) : TExtFunction; begin
  JSCode(JSName + '.setHours(' + VarToJSON([HoursValue, MinutesValue, SecondsValue, MsValue]) + ');', 'TDate');
  Result := Self;
end;

function TDate.SetMilliseconds(MillisecondsValue : Integer) : TExtFunction; begin
  JSCode(JSName + '.setMilliseconds(' + VarToJSON([MillisecondsValue]) + ');', 'TDate');
  Result := Self;
end;

function TDate.SetMinutes(MinutesValue : Integer; SecondsValue : Integer; MsValue : Integer) : TExtFunction; begin
  JSCode(JSName + '.setMinutes(' + VarToJSON([MinutesValue, SecondsValue, MsValue]) + ');', 'TDate');
  Result := Self;
end;

function TDate.SetMonth(MonthValue : Integer; DayValue : Integer) : TExtFunction; begin
  JSCode(JSName + '.setMonth(' + VarToJSON([MonthValue, DayValue]) + ');', 'TDate');
  Result := Self;
end;

function TDate.SetSeconds(SecondsValue : Integer; MsValue : Integer) : TExtFunction; begin
  JSCode(JSName + '.setSeconds(' + VarToJSON([SecondsValue, MsValue]) + ');', 'TDate');
  Result := Self;
end;

function TDate.SetTime(TimeValue : Integer) : TExtFunction; begin
  JSCode(JSName + '.setTime(' + VarToJSON([TimeValue]) + ');', 'TDate');
  Result := Self;
end;

function TDate.SetUTCDate(DayValue : Integer) : TExtFunction; begin
  JSCode(JSName + '.setUTCDate(' + VarToJSON([DayValue]) + ');', 'TDate');
  Result := Self;
end;

function TDate.SetUTCFullYear(YearValue : Integer; MonthValue : Integer; DayValue : Integer) : TExtFunction; begin
  JSCode(JSName + '.setUTCFullYear(' + VarToJSON([YearValue, MonthValue, DayValue]) + ');', 'TDate');
  Result := Self;
end;

function TDate.SetUTCHours(HoursValue : Integer; MinutesValue : Integer; SecondsValue : Integer; MsValue : Integer) : TExtFunction; begin
  JSCode(JSName + '.setUTCHours(' + VarToJSON([HoursValue, MinutesValue, SecondsValue, MsValue]) + ');', 'TDate');
  Result := Self;
end;

function TDate.SetUTCMilliseconds(MillisecondsValue : Integer) : TExtFunction; begin
  JSCode(JSName + '.setUTCMilliseconds(' + VarToJSON([MillisecondsValue]) + ');', 'TDate');
  Result := Self;
end;

function TDate.SetUTCMinutes(MinutesValue : Integer; SecondsValue : Integer; MsValue : Integer) : TExtFunction; begin
  JSCode(JSName + '.setUTCMinutes(' + VarToJSON([MinutesValue, SecondsValue, MsValue]) + ');', 'TDate');
  Result := Self;
end;

function TDate.SetUTCMonth(MonthValue : Integer; DayValue : Integer) : TExtFunction; begin
  JSCode(JSName + '.setUTCMonth(' + VarToJSON([MonthValue, DayValue]) + ');', 'TDate');
  Result := Self;
end;

function TDate.SetUTCSeconds(SecondsValue : Integer; MsValue : Integer) : TExtFunction; begin
  JSCode(JSName + '.setUTCSeconds(' + VarToJSON([SecondsValue, MsValue]) + ');', 'TDate');
  Result := Self;
end;

function TDate.ToDateString : TExtFunction; begin
  JSCode(JSName + '.toDateString();', 'TDate');
  Result := Self;
end;

function TDate.ToLocaleDateString : TExtFunction; begin
  JSCode(JSName + '.toLocaleDateString();', 'TDate');
  Result := Self;
end;

function TDate.ToLocaleString : TExtFunction; begin
  JSCode(JSName + '.toLocaleString();', 'TDate');
  Result := Self;
end;

function TDate.ToLocaleTimeString : TExtFunction; begin
  JSCode(JSName + '.toLocaleTimeString();', 'TDate');
  Result := Self;
end;

function TDate.ToString : TExtFunction; begin
  JSCode(JSName + '.toString();', 'TDate');
  Result := Self;
end;

function TDate.ToTimeString : TExtFunction; begin
  JSCode(JSName + '.toTimeString();', 'TDate');
  Result := Self;
end;

function TDate.ToUTCString : TExtFunction; begin
  JSCode(JSName + '.toUTCString();', 'TDate');
  Result := Self;
end;

function TDate.ValueOf : TExtFunction; begin
  JSCode(JSName + '.valueOf();', 'TDate');
  Result := Self;
end;

procedure TExtFormFieldTrigger.SetFTriggerCls(Value : String); begin
  FTriggerCls := Value;
  JSCode('triggerCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTrigger.SetFTriggerBaseCls(Value : String); begin
  FTriggerBaseCls := Value;
  JSCode('triggerBaseCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTrigger.SetFTriggerWrapCls(Value : String); begin
  FTriggerWrapCls := Value;
  JSCode('triggerWrapCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTrigger.SetFHideTrigger(Value : Boolean); begin
  FHideTrigger := Value;
  JSCode('hideTrigger:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTrigger.SetFEditable(Value : Boolean); begin
  FEditable := Value;
  JSCode('editable:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTrigger.SetFReadOnly(Value : Boolean); begin
  FReadOnly := Value;
  JSCode('readOnly:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTrigger.SetFSelectOnFocus(Value : Boolean); begin
  FSelectOnFocus := Value;
  JSCode('selectOnFocus:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTrigger.SetFRepeatTriggerClick(Value : Boolean); begin
  FRepeatTriggerClick := Value;
  JSCode('repeatTriggerClick:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTrigger.SetFGrow(Value : Boolean); begin
  FGrow := Value;
  JSCode('grow:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTrigger.SetFGrowMin(Value : Integer); begin
  FGrowMin := Value;
  JSCode('growMin:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTrigger.SetFGrowMax(Value : Integer); begin
  FGrowMax := Value;
  JSCode('growMax:' + VarToJSON([Value]));
end;

function TExtFormFieldTrigger.JSClassName : string; begin
  Result := 'Ext-form-field-Trigger';
end;

{$IFDEF FPC}constructor TExtFormFieldTrigger.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtDdStatusProxy.SetFDropAllowed(Value : String); begin
  FDropAllowed := Value;
  JSCode('dropAllowed:' + VarToJSON([Value]));
end;

procedure TExtDdStatusProxy.SetFDropNotAllowed(Value : String); begin
  FDropNotAllowed := Value;
  JSCode('dropNotAllowed:' + VarToJSON([Value]));
end;

function TExtDdStatusProxy.JSClassName : string; begin
  Result := 'Ext-dd-StatusProxy';
end;

{$IFDEF FPC}constructor TExtDdStatusProxy.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDdStatusProxy.SetStatus(CssClass : String) : TExtFunction; begin
  JSCode(JSName + '.setStatus(' + VarToJSON([CssClass]) + ');', 'TExtDdStatusProxy');
  Result := Self;
end;

function TExtDdStatusProxy.Reset(ClearGhost : Boolean) : TExtFunction; begin
  JSCode(JSName + '.reset(' + VarToJSON([ClearGhost]) + ');', 'TExtDdStatusProxy');
  Result := Self;
end;

function TExtDdStatusProxy.Update(Html : String) : TExtFunction; begin
  JSCode(JSName + '.update(' + VarToJSON([Html]) + ');', 'TExtDdStatusProxy');
  Result := Self;
end;

function TExtDdStatusProxy.Update(Html : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.Update(' + VarToJSON([Html, false]) + ');', 'TExtDdStatusProxy');
  Result := Self;
end;

function TExtDdStatusProxy.GetEl : TExtFunction; begin
  JSCode(JSName + '.getEl();', 'TExtDdStatusProxy');
  Result := Self;
end;

function TExtDdStatusProxy.GetGhost : TExtFunction; begin
  JSCode(JSName + '.getGhost();', 'TExtDdStatusProxy');
  Result := Self;
end;

function TExtDdStatusProxy.Hide(Clear : Boolean) : TExtFunction; begin
  JSCode(JSName + '.hide(' + VarToJSON([Clear]) + ');', 'TExtDdStatusProxy');
  Result := Self;
end;

function TExtDdStatusProxy.Stop : TExtFunction; begin
  JSCode(JSName + '.stop();', 'TExtDdStatusProxy');
  Result := Self;
end;

function TExtDdStatusProxy.Show : TExtFunction; begin
  JSCode(JSName + '.show();', 'TExtDdStatusProxy');
  Result := Self;
end;

function TExtDdStatusProxy.Sync : TExtFunction; begin
  JSCode(JSName + '.sync();', 'TExtDdStatusProxy');
  Result := Self;
end;

function TExtDdStatusProxy.Repair(Xy : TArrayOfInteger; Callback : TExtFunction; Scope : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.repair(' + VarToJSON([Xy, Callback, true, Scope, false]) + ');', 'TExtDdStatusProxy');
  Result := Self;
end;

procedure TExtComponentLoader.SetFTarget(Value : TExtComponent); begin
  FTarget := Value;
  Value.DeleteFromGarbage;
  JSCode('target:' + VarToJSON([Value, false]));
end;

procedure TExtComponentLoader.SetFTargetString(Value : String); begin
  FTargetString := Value;
  JSCode('target:' + VarToJSON([Value]));
end;

procedure TExtComponentLoader.SetFLoadMask(Value : Boolean); begin
  FLoadMask := Value;
  JSCode('loadMask:' + VarToJSON([Value]));
end;

procedure TExtComponentLoader.SetFLoadMaskTExtObject(Value : TExtObject); begin
  FLoadMaskTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('loadMask:' + VarToJSON([Value, false]));
end;

procedure TExtComponentLoader.SetFScripts(Value : Boolean); begin
  FScripts := Value;
  JSCode('scripts:' + VarToJSON([Value]));
end;

procedure TExtComponentLoader.SetFRenderer(Value : String); begin
  FRenderer := Value;
  JSCode('renderer:' + VarToJSON([Value]));
end;

procedure TExtComponentLoader.SetFRendererTExtFunction(Value : TExtFunction); begin
  FRendererTExtFunction := Value;
  JSCode('renderer:' + VarToJSON([Value, true]));
end;

function TExtComponentLoader.JSClassName : string; begin
  Result := 'Ext-ComponentLoader';
end;

procedure TExtComponentLoader.InitDefaults; begin
  inherited;
  FTarget := TExtComponent.CreateInternal(Self, 'target');
  FLoadMaskTExtObject := TExtObject.CreateInternal(Self, 'loadMask');
end;

{$IFDEF FPC}constructor TExtComponentLoader.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtComponentLoader.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtComponentLoader.SetTarget(Target : String) : TExtFunction; begin
  JSCode(JSName + '.setTarget(' + VarToJSON([Target]) + ');', 'TExtComponentLoader');
  Result := Self;
end;

function TExtComponentLoader.SetTarget(Target : TExtComponent) : TExtFunction; begin
  JSCode(JSName + '.SetTarget(' + VarToJSON([Target, false]) + ');', 'TExtComponentLoader');
  Result := Self;
end;

function TExtComponentLoader.SetOptions : TExtFunction; begin
  JSCode(JSName + '.setOptions();', 'TExtComponentLoader');
  Result := Self;
end;

destructor TExtComponentLoader.Destroy; begin
  try
    FTarget.Free;
    FLoadMaskTExtObject.Free;
  except end;
  inherited;
end;

procedure TExtChartSeriesRadar.SetFStyle(Value : TExtObject); begin
  FStyle := Value;
  Value.DeleteFromGarbage;
  JSCode('style:' + VarToJSON([Value, false]));
end;

function TExtChartSeriesRadar.JSClassName : string; begin
  Result := 'Ext-chart-series-Radar';
end;

procedure TExtChartSeriesRadar.InitDefaults; begin
  inherited;
  FStyle := TExtObject.CreateInternal(Self, 'style');
end;

{$IFDEF FPC}constructor TExtChartSeriesRadar.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtChartSeriesRadar.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtChartSeriesRadar.DrawSeries : TExtFunction; begin
  JSCode(JSName + '.drawSeries();', 'TExtChartSeriesRadar');
  Result := Self;
end;

destructor TExtChartSeriesRadar.Destroy; begin
  try
    FStyle.Free;
  except end;
  inherited;
end;

function TExtPluginManagerSingleton.JSClassName : string; begin
  Result := 'Ext-PluginManagerSingleton';
end;

{$IFDEF FPC}constructor TExtPluginManagerSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtPluginManagerSingleton.FindByType(TypeJS : String; DefaultsOnly : Boolean) : TExtFunction; begin
  JSCode(JSName + '.findByType(' + VarToJSON([TypeJS, DefaultsOnly]) + ');', 'TExtPluginManagerSingleton');
  Result := Self;
end;

function TExtPluginManagerSingleton.Preg(Ptype : String; Cls : TExtFunction) : TExtFunction; begin
  JSCode(JSName + '.preg(' + VarToJSON([Ptype, Cls, true]) + ');', 'TExtPluginManagerSingleton');
  Result := Self;
end;

function TExtLayoutContainerAbsolute.JSClassName : string; begin
  Result := 'Ext-layout-container-Absolute';
end;

{$IFDEF FPC}constructor TExtLayoutContainerAbsolute.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtChartChart.SetFTheme(Value : String); begin
  FTheme := Value;
  JSCode('theme:' + VarToJSON([Value]));
end;

procedure TExtChartChart.SetFAnimate(Value : Boolean); begin
  FAnimate := Value;
  JSCode('animate:' + VarToJSON([Value]));
end;

procedure TExtChartChart.SetFAnimateTExtObject(Value : TExtObject); begin
  FAnimateTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('animate:' + VarToJSON([Value, false]));
end;

procedure TExtChartChart.SetFLegend(Value : Boolean); begin
  FLegend := Value;
  JSCode('legend:' + VarToJSON([Value]));
end;

procedure TExtChartChart.SetFLegendTExtObject(Value : TExtObject); begin
  FLegendTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('legend:' + VarToJSON([Value, false]));
end;

procedure TExtChartChart.SetFInsetPadding(Value : Integer); begin
  FInsetPadding := Value;
  JSCode('insetPadding:' + VarToJSON([Value]));
end;

procedure TExtChartChart.SetFEnginePriority(Value : TExtObjectList); begin
  FEnginePriority := Value;
  Value.DeleteFromGarbage;
  JSCode('enginePriority:' + VarToJSON([Value, false]));
end;

procedure TExtChartChart.SetFBackground(Value : TExtObject); begin
  FBackground := Value;
  Value.DeleteFromGarbage;
  JSCode('background:' + VarToJSON([Value, false]));
end;

procedure TExtChartChart.SetFBackgroundBoolean(Value : Boolean); begin
  FBackgroundBoolean := Value;
  JSCode('background:' + VarToJSON([Value]));
end;

procedure TExtChartChart.SetFGradients(Value : TExtObjectList); begin
  FGradients := Value;
  Value.DeleteFromGarbage;
  JSCode('gradients:' + VarToJSON([Value, false]));
end;

procedure TExtChartChart.SetFStore(Value : TExtDataStore); begin
  FStore := Value;
  Value.DeleteFromGarbage;
  JSCode('store:' + VarToJSON([Value, false]));
end;

procedure TExtChartChart.SetFSeries(Value : TExtObjectList); begin
  FSeries := Value;
  Value.DeleteFromGarbage;
  JSCode('series:' + VarToJSON([Value, false]));
end;

procedure TExtChartChart.SetFAxes(Value : TExtObjectList); begin
  FAxes := Value;
  Value.DeleteFromGarbage;
  JSCode('axes:' + VarToJSON([Value, false]));
end;

procedure TExtChartChart.SetFOnBeforerefresh(Value : TExtChartChartOnBeforerefresh); begin
  if Assigned(FOnBeforerefresh) then
    JSCode(JSName+'.events ["beforerefresh"].listeners=[];');
  if Assigned(Value) then
    On('beforerefresh', Ajax('beforerefresh', ['This', '%0.nm','This_', '%1.nm','Resize', '%2'], true));
  FOnBeforerefresh := Value;
end;

function TExtChartChart.JSClassName : string; begin
  Result := 'Ext-chart-Chart';
end;

procedure TExtChartChart.InitDefaults; begin
  inherited;
  FAnimateTExtObject := TExtObject.CreateInternal(Self, 'animate');
  FLegendTExtObject := TExtObject.CreateInternal(Self, 'legend');
  FEnginePriority := TExtObjectList.Create(Self, 'enginePriority');
  FBackground := TExtObject.CreateInternal(Self, 'background');
  FGradients := TExtObjectList.Create(Self, 'gradients');
  FStore := TExtDataStore.CreateInternal(Self, 'store');
  FSeries := TExtObjectList.Create(Self, 'series');
  FAxes := TExtObjectList.Create(Self, 'axes');
end;

{$IFDEF FPC}constructor TExtChartChart.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtChartChart.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtChartChart.BindStore(Store : TExtDataStore) : TExtFunction; begin
  JSCode(JSName + '.bindStore(' + VarToJSON([Store, false]) + ');', 'TExtChartChart');
  Result := Self;
end;

destructor TExtChartChart.Destroy; begin
  try
    FAnimateTExtObject.Free;
    FLegendTExtObject.Free;
    FEnginePriority.Free;
    FBackground.Free;
    FGradients.Free;
    FStore.Free;
    FSeries.Free;
    FAxes.Free;
  except end;
  inherited;
end;

procedure TExtChartChart.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforerefresh') and Assigned(FOnBeforerefresh) then
    FOnBeforerefresh(TExtChartChart(ParamAsObject('This')), TExtChartChart(ParamAsObject('This_')), ParamAsBoolean('Resize'));
end;

procedure TExtDataProxyRest.SetFAppendId(Value : Boolean); begin
  FAppendId := Value;
  JSCode('appendId:' + VarToJSON([Value]));
end;

procedure TExtDataProxyRest.SetFFormat(Value : String); begin
  FFormat := Value;
  JSCode('format:' + VarToJSON([Value]));
end;

procedure TExtDataProxyRest.SetFBatchActions(Value : Boolean); begin
  FBatchActions := Value;
  JSCode('batchActions:' + VarToJSON([Value]));
end;

function TExtDataProxyRest.JSClassName : string; begin
  Result := 'Ext-data-proxy-Rest';
end;

{$IFDEF FPC}constructor TExtDataProxyRest.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataProxyRest.BuildUrl(Request : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.buildUrl(' + VarToJSON([Request, false]) + ');', 'TExtDataProxyRest');
  Result := Self;
end;

function TExtDirectJsonProvider.JSClassName : string; begin
  Result := 'Ext-direct-JsonProvider';
end;

{$IFDEF FPC}constructor TExtDirectJsonProvider.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDirectJsonProvider.CreateEvent(Response : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.createEvent(' + VarToJSON([Response, false]) + ');', 'TExtDirectJsonProvider');
  Result := Self;
end;

procedure TExtDataProxyMemory.SetFData(Value : TExtObjectList); begin
  FData := Value;
  Value.DeleteFromGarbage;
  JSCode('data:' + VarToJSON([Value, false]));
end;

function TExtDataProxyMemory.JSClassName : string; begin
  Result := 'Ext-data-proxy-Memory';
end;

procedure TExtDataProxyMemory.InitDefaults; begin
  inherited;
  FData := TExtObjectList.Create(Self, 'data');
end;

{$IFDEF FPC}constructor TExtDataProxyMemory.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataProxyMemory.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDataProxyMemory.Read(Operation : TExtDataOperation; Callback : TExtFunction; Scope : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.read(' + VarToJSON([Operation, false, Callback, true, Scope, false]) + ');', 'TExtDataProxyMemory');
  Result := Self;
end;

destructor TExtDataProxyMemory.Destroy; begin
  try
    FData.Free;
  except end;
  inherited;
end;

procedure TExtDataProxyProxy.SetFBatchOrder(Value : String); begin
  FBatchOrder := Value;
  JSCode('batchOrder:' + VarToJSON([Value]));
end;

procedure TExtDataProxyProxy.SetFBatchActions(Value : Boolean); begin
  FBatchActions := Value;
  JSCode('batchActions:' + VarToJSON([Value]));
end;

procedure TExtDataProxyProxy.SetFDefaultReaderType(Value : String); begin
  FDefaultReaderType := Value;
  JSCode('defaultReaderType:' + VarToJSON([Value]));
end;

procedure TExtDataProxyProxy.SetFDefaultWriterType(Value : String); begin
  FDefaultWriterType := Value;
  JSCode('defaultWriterType:' + VarToJSON([Value]));
end;

procedure TExtDataProxyProxy.SetFModel(Value : String); begin
  FModel := Value;
  if not ConfigAvailable(JSName) then
    SetModel(Value, false)
  else
    JSCode('model:' + VarToJSON([Value]));
end;

procedure TExtDataProxyProxy.SetFModelTExtDataModel(Value : TExtDataModel); begin
  FModelTExtDataModel := Value;
  Value.DeleteFromGarbage;
  JSCode('model:' + VarToJSON([Value, false]));
end;

procedure TExtDataProxyProxy.SetFReader(Value : TExtObject); begin
  FReader := Value;
  Value.DeleteFromGarbage;
  JSCode('reader:' + VarToJSON([Value, false]));
end;

procedure TExtDataProxyProxy.SetFReaderString(Value : String); begin
  FReaderString := Value;
  JSCode('reader:' + VarToJSON([Value]));
end;

procedure TExtDataProxyProxy.SetFReaderTExtDataReaderReader(Value : TExtDataReaderReader); begin
  FReaderTExtDataReaderReader := Value;
  Value.DeleteFromGarbage;
  JSCode('reader:' + VarToJSON([Value, false]));
end;

procedure TExtDataProxyProxy.SetFWriter(Value : TExtObject); begin
  FWriter := Value;
  Value.DeleteFromGarbage;
  JSCode('writer:' + VarToJSON([Value, false]));
end;

procedure TExtDataProxyProxy.SetFWriterString(Value : String); begin
  FWriterString := Value;
  JSCode('writer:' + VarToJSON([Value]));
end;

procedure TExtDataProxyProxy.SetFWriterTExtDataWriterWriter(Value : TExtDataWriterWriter); begin
  FWriterTExtDataWriterWriter := Value;
  Value.DeleteFromGarbage;
  JSCode('writer:' + VarToJSON([Value, false]));
end;

function TExtDataProxyProxy.JSClassName : string; begin
  Result := 'Ext-data-proxy-Proxy';
end;

procedure TExtDataProxyProxy.InitDefaults; begin
  inherited;
  FModelTExtDataModel := TExtDataModel.CreateInternal(Self, 'model');
  FReader := TExtObject.CreateInternal(Self, 'reader');
  FReaderTExtDataReaderReader := TExtDataReaderReader.CreateInternal(Self, 'reader');
  FWriter := TExtObject.CreateInternal(Self, 'writer');
  FWriterTExtDataWriterWriter := TExtDataWriterWriter.CreateInternal(Self, 'writer');
end;

{$IFDEF FPC}constructor TExtDataProxyProxy.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataProxyProxy.Create; begin
  CreateVarAlt(JSClassName + '.create({});');
  InitDefaults;
end;

constructor TExtDataProxyProxy.Create(Config : TExtObject = nil); begin
  CreateVarAlt(JSClassName + '.create(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

function TExtDataProxyProxy.SetModel(Model : String; SetOnStore : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setModel(' + VarToJSON([Model, SetOnStore]) + ');', 'TExtDataProxyProxy');
  Result := Self;
end;

function TExtDataProxyProxy.SetModel(Model : TExtDataModel; SetOnStore : Boolean) : TExtFunction; begin
  JSCode(JSName + '.SetModel(' + VarToJSON([Model, false, SetOnStore]) + ');', 'TExtDataProxyProxy');
  Result := Self;
end;

function TExtDataProxyProxy.GetModel : TExtFunction; begin
  JSCode(JSName + '.getModel();', 'TExtDataProxyProxy');
  Result := Self;
end;

function TExtDataProxyProxy.SetReader(Reader : String) : TExtFunction; begin
  JSCode(JSName + '.setReader(' + VarToJSON([Reader]) + ');', 'TExtDataProxyProxy');
  Result := Self;
end;

function TExtDataProxyProxy.SetReader(Reader : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetReader(' + VarToJSON([Reader, false]) + ');', 'TExtDataProxyProxy');
  Result := Self;
end;

function TExtDataProxyProxy.SetReader(Reader : TExtDataReaderReader) : TExtFunction; begin
  JSCode(JSName + '.SetReader(' + VarToJSON([Reader, false]) + ');', 'TExtDataProxyProxy');
  Result := Self;
end;

function TExtDataProxyProxy.GetReader : TExtFunction; begin
  JSCode(JSName + '.getReader();', 'TExtDataProxyProxy');
  Result := Self;
end;

function TExtDataProxyProxy.SetWriter(Writer : String) : TExtFunction; begin
  JSCode(JSName + '.setWriter(' + VarToJSON([Writer]) + ');', 'TExtDataProxyProxy');
  Result := Self;
end;

function TExtDataProxyProxy.SetWriter(Writer : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetWriter(' + VarToJSON([Writer, false]) + ');', 'TExtDataProxyProxy');
  Result := Self;
end;

function TExtDataProxyProxy.SetWriter(Writer : TExtDataWriterWriter) : TExtFunction; begin
  JSCode(JSName + '.SetWriter(' + VarToJSON([Writer, false]) + ');', 'TExtDataProxyProxy');
  Result := Self;
end;

function TExtDataProxyProxy.GetWriter : TExtFunction; begin
  JSCode(JSName + '.getWriter();', 'TExtDataProxyProxy');
  Result := Self;
end;

function TExtDataProxyProxy.Read(Operation : TExtDataOperation; Callback : TExtFunction; Scope : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.read(' + VarToJSON([Operation, false, Callback, true, Scope, false]) + ');', 'TExtDataProxyProxy');
  Result := Self;
end;

function TExtDataProxyProxy.Update(Operation : TExtDataOperation; Callback : TExtFunction; Scope : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.update(' + VarToJSON([Operation, false, Callback, true, Scope, false]) + ');', 'TExtDataProxyProxy');
  Result := Self;
end;

function TExtDataProxyProxy.DestroyJS(Operation : TExtDataOperation; Callback : TExtFunction; Scope : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.destroy(' + VarToJSON([Operation, false, Callback, true, Scope, false]) + ');', 'TExtDataProxyProxy');
  Result := Self;
end;

function TExtDataProxyProxy.Batch(Operations : TExtObject; Listeners : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.batch(' + VarToJSON([Operations, false, Listeners, false]) + ');', 'TExtDataProxyProxy');
  Result := Self;
end;

destructor TExtDataProxyProxy.Destroy; begin
  try
    FModelTExtDataModel.Free;
    FReader.Free;
    FReaderTExtDataReaderReader.Free;
    FWriter.Free;
    FWriterTExtDataWriterWriter.Free;
  except end;
  inherited;
end;

procedure TExtViewView.SetFOnBeforeitemmousedown(Value : TExtViewViewOnBeforeitemmousedown); begin
  if Assigned(FOnBeforeitemmousedown) then
    JSCode(JSName+'.events ["beforeitemmousedown"].listeners=[];');
  if Assigned(Value) then
    On('beforeitemmousedown', Ajax('beforeitemmousedown', ['This', '%0.nm','RecordJS', '%1.nm','Item', '%2.nm','Index', '%3','E', '%4.nm'], true));
  FOnBeforeitemmousedown := Value;
end;

procedure TExtViewView.SetFOnBeforeitemmouseup(Value : TExtViewViewOnBeforeitemmouseup); begin
  if Assigned(FOnBeforeitemmouseup) then
    JSCode(JSName+'.events ["beforeitemmouseup"].listeners=[];');
  if Assigned(Value) then
    On('beforeitemmouseup', Ajax('beforeitemmouseup', ['This', '%0.nm','RecordJS', '%1.nm','Item', '%2.nm','Index', '%3','E', '%4.nm'], true));
  FOnBeforeitemmouseup := Value;
end;

procedure TExtViewView.SetFOnBeforeitemmouseenter(Value : TExtViewViewOnBeforeitemmouseenter); begin
  if Assigned(FOnBeforeitemmouseenter) then
    JSCode(JSName+'.events ["beforeitemmouseenter"].listeners=[];');
  if Assigned(Value) then
    On('beforeitemmouseenter', Ajax('beforeitemmouseenter', ['This', '%0.nm','RecordJS', '%1.nm','Item', '%2.nm','Index', '%3','E', '%4.nm'], true));
  FOnBeforeitemmouseenter := Value;
end;

procedure TExtViewView.SetFOnBeforeitemmouseleave(Value : TExtViewViewOnBeforeitemmouseleave); begin
  if Assigned(FOnBeforeitemmouseleave) then
    JSCode(JSName+'.events ["beforeitemmouseleave"].listeners=[];');
  if Assigned(Value) then
    On('beforeitemmouseleave', Ajax('beforeitemmouseleave', ['This', '%0.nm','RecordJS', '%1.nm','Item', '%2.nm','Index', '%3','E', '%4.nm'], true));
  FOnBeforeitemmouseleave := Value;
end;

procedure TExtViewView.SetFOnBeforeitemclick(Value : TExtViewViewOnBeforeitemclick); begin
  if Assigned(FOnBeforeitemclick) then
    JSCode(JSName+'.events ["beforeitemclick"].listeners=[];');
  if Assigned(Value) then
    On('beforeitemclick', Ajax('beforeitemclick', ['This', '%0.nm','RecordJS', '%1.nm','Item', '%2.nm','Index', '%3','E', '%4.nm'], true));
  FOnBeforeitemclick := Value;
end;

procedure TExtViewView.SetFOnBeforeitemdblclick(Value : TExtViewViewOnBeforeitemdblclick); begin
  if Assigned(FOnBeforeitemdblclick) then
    JSCode(JSName+'.events ["beforeitemdblclick"].listeners=[];');
  if Assigned(Value) then
    On('beforeitemdblclick', Ajax('beforeitemdblclick', ['This', '%0.nm','RecordJS', '%1.nm','Item', '%2.nm','Index', '%3','E', '%4.nm'], true));
  FOnBeforeitemdblclick := Value;
end;

procedure TExtViewView.SetFOnBeforeitemcontextmenu(Value : TExtViewViewOnBeforeitemcontextmenu); begin
  if Assigned(FOnBeforeitemcontextmenu) then
    JSCode(JSName+'.events ["beforeitemcontextmenu"].listeners=[];');
  if Assigned(Value) then
    On('beforeitemcontextmenu', Ajax('beforeitemcontextmenu', ['This', '%0.nm','RecordJS', '%1.nm','Item', '%2.nm','Index', '%3','E', '%4.nm'], true));
  FOnBeforeitemcontextmenu := Value;
end;

procedure TExtViewView.SetFOnBeforeitemkeydown(Value : TExtViewViewOnBeforeitemkeydown); begin
  if Assigned(FOnBeforeitemkeydown) then
    JSCode(JSName+'.events ["beforeitemkeydown"].listeners=[];');
  if Assigned(Value) then
    On('beforeitemkeydown', Ajax('beforeitemkeydown', ['This', '%0.nm','RecordJS', '%1.nm','Item', '%2.nm','Index', '%3','E', '%4.nm'], true));
  FOnBeforeitemkeydown := Value;
end;

procedure TExtViewView.SetFOnItemmousedown(Value : TExtViewViewOnItemmousedown); begin
  if Assigned(FOnItemmousedown) then
    JSCode(JSName+'.events ["itemmousedown"].listeners=[];');
  if Assigned(Value) then
    On('itemmousedown', Ajax('itemmousedown', ['This', '%0.nm','RecordJS', '%1.nm','Item', '%2.nm','Index', '%3','E', '%4.nm'], true));
  FOnItemmousedown := Value;
end;

procedure TExtViewView.SetFOnItemmouseup(Value : TExtViewViewOnItemmouseup); begin
  if Assigned(FOnItemmouseup) then
    JSCode(JSName+'.events ["itemmouseup"].listeners=[];');
  if Assigned(Value) then
    On('itemmouseup', Ajax('itemmouseup', ['This', '%0.nm','RecordJS', '%1.nm','Item', '%2.nm','Index', '%3','E', '%4.nm'], true));
  FOnItemmouseup := Value;
end;

procedure TExtViewView.SetFOnItemmouseenter(Value : TExtViewViewOnItemmouseenter); begin
  if Assigned(FOnItemmouseenter) then
    JSCode(JSName+'.events ["itemmouseenter"].listeners=[];');
  if Assigned(Value) then
    On('itemmouseenter', Ajax('itemmouseenter', ['This', '%0.nm','RecordJS', '%1.nm','Item', '%2.nm','Index', '%3','E', '%4.nm'], true));
  FOnItemmouseenter := Value;
end;

procedure TExtViewView.SetFOnItemmouseleave(Value : TExtViewViewOnItemmouseleave); begin
  if Assigned(FOnItemmouseleave) then
    JSCode(JSName+'.events ["itemmouseleave"].listeners=[];');
  if Assigned(Value) then
    On('itemmouseleave', Ajax('itemmouseleave', ['This', '%0.nm','RecordJS', '%1.nm','Item', '%2.nm','Index', '%3','E', '%4.nm'], true));
  FOnItemmouseleave := Value;
end;

procedure TExtViewView.SetFOnItemclick(Value : TExtViewViewOnItemclick); begin
  if Assigned(FOnItemclick) then
    JSCode(JSName+'.events ["itemclick"].listeners=[];');
  if Assigned(Value) then
    On('itemclick', Ajax('itemclick', ['This', '%0.nm','RecordJS', '%1.nm','Item', '%2.nm','Index', '%3','E', '%4.nm'], true));
  FOnItemclick := Value;
end;

procedure TExtViewView.SetFOnItemdblclick(Value : TExtViewViewOnItemdblclick); begin
  if Assigned(FOnItemdblclick) then
    JSCode(JSName+'.events ["itemdblclick"].listeners=[];');
  if Assigned(Value) then
    On('itemdblclick', Ajax('itemdblclick', ['This', '%0.nm','RecordJS', '%1.nm','Item', '%2.nm','Index', '%3','E', '%4.nm'], true));
  FOnItemdblclick := Value;
end;

procedure TExtViewView.SetFOnItemcontextmenu(Value : TExtViewViewOnItemcontextmenu); begin
  if Assigned(FOnItemcontextmenu) then
    JSCode(JSName+'.events ["itemcontextmenu"].listeners=[];');
  if Assigned(Value) then
    On('itemcontextmenu', Ajax('itemcontextmenu', ['This', '%0.nm','RecordJS', '%1.nm','Item', '%2.nm','Index', '%3','E', '%4.nm'], true));
  FOnItemcontextmenu := Value;
end;

procedure TExtViewView.SetFOnItemkeydown(Value : TExtViewViewOnItemkeydown); begin
  if Assigned(FOnItemkeydown) then
    JSCode(JSName+'.events ["itemkeydown"].listeners=[];');
  if Assigned(Value) then
    On('itemkeydown', Ajax('itemkeydown', ['This', '%0.nm','RecordJS', '%1.nm','Item', '%2.nm','Index', '%3','E', '%4.nm'], true));
  FOnItemkeydown := Value;
end;

procedure TExtViewView.SetFOnBeforecontainermousedown(Value : TExtViewViewOnBeforecontainermousedown); begin
  if Assigned(FOnBeforecontainermousedown) then
    JSCode(JSName+'.events ["beforecontainermousedown"].listeners=[];');
  if Assigned(Value) then
    On('beforecontainermousedown', Ajax('beforecontainermousedown', ['This', '%0.nm','E', '%1.nm'], true));
  FOnBeforecontainermousedown := Value;
end;

procedure TExtViewView.SetFOnBeforecontainermouseup(Value : TExtViewViewOnBeforecontainermouseup); begin
  if Assigned(FOnBeforecontainermouseup) then
    JSCode(JSName+'.events ["beforecontainermouseup"].listeners=[];');
  if Assigned(Value) then
    On('beforecontainermouseup', Ajax('beforecontainermouseup', ['This', '%0.nm','E', '%1.nm'], true));
  FOnBeforecontainermouseup := Value;
end;

procedure TExtViewView.SetFOnBeforecontainermouseover(Value : TExtViewViewOnBeforecontainermouseover); begin
  if Assigned(FOnBeforecontainermouseover) then
    JSCode(JSName+'.events ["beforecontainermouseover"].listeners=[];');
  if Assigned(Value) then
    On('beforecontainermouseover', Ajax('beforecontainermouseover', ['This', '%0.nm','E', '%1.nm'], true));
  FOnBeforecontainermouseover := Value;
end;

procedure TExtViewView.SetFOnBeforecontainermouseout(Value : TExtViewViewOnBeforecontainermouseout); begin
  if Assigned(FOnBeforecontainermouseout) then
    JSCode(JSName+'.events ["beforecontainermouseout"].listeners=[];');
  if Assigned(Value) then
    On('beforecontainermouseout', Ajax('beforecontainermouseout', ['This', '%0.nm','E', '%1.nm'], true));
  FOnBeforecontainermouseout := Value;
end;

procedure TExtViewView.SetFOnBeforecontainerclick(Value : TExtViewViewOnBeforecontainerclick); begin
  if Assigned(FOnBeforecontainerclick) then
    JSCode(JSName+'.events ["beforecontainerclick"].listeners=[];');
  if Assigned(Value) then
    On('beforecontainerclick', Ajax('beforecontainerclick', ['This', '%0.nm','E', '%1.nm'], true));
  FOnBeforecontainerclick := Value;
end;

procedure TExtViewView.SetFOnBeforecontainerdblclick(Value : TExtViewViewOnBeforecontainerdblclick); begin
  if Assigned(FOnBeforecontainerdblclick) then
    JSCode(JSName+'.events ["beforecontainerdblclick"].listeners=[];');
  if Assigned(Value) then
    On('beforecontainerdblclick', Ajax('beforecontainerdblclick', ['This', '%0.nm','E', '%1.nm'], true));
  FOnBeforecontainerdblclick := Value;
end;

procedure TExtViewView.SetFOnBeforecontainercontextmenu(Value : TExtViewViewOnBeforecontainercontextmenu); begin
  if Assigned(FOnBeforecontainercontextmenu) then
    JSCode(JSName+'.events ["beforecontainercontextmenu"].listeners=[];');
  if Assigned(Value) then
    On('beforecontainercontextmenu', Ajax('beforecontainercontextmenu', ['This', '%0.nm','E', '%1.nm'], true));
  FOnBeforecontainercontextmenu := Value;
end;

procedure TExtViewView.SetFOnBeforecontainerkeydown(Value : TExtViewViewOnBeforecontainerkeydown); begin
  if Assigned(FOnBeforecontainerkeydown) then
    JSCode(JSName+'.events ["beforecontainerkeydown"].listeners=[];');
  if Assigned(Value) then
    On('beforecontainerkeydown', Ajax('beforecontainerkeydown', ['This', '%0.nm','E', '%1.nm'], true));
  FOnBeforecontainerkeydown := Value;
end;

procedure TExtViewView.SetFOnContainermouseup(Value : TExtViewViewOnContainermouseup); begin
  if Assigned(FOnContainermouseup) then
    JSCode(JSName+'.events ["containermouseup"].listeners=[];');
  if Assigned(Value) then
    On('containermouseup', Ajax('containermouseup', ['This', '%0.nm','E', '%1.nm'], true));
  FOnContainermouseup := Value;
end;

procedure TExtViewView.SetFOnContainermouseover(Value : TExtViewViewOnContainermouseover); begin
  if Assigned(FOnContainermouseover) then
    JSCode(JSName+'.events ["containermouseover"].listeners=[];');
  if Assigned(Value) then
    On('containermouseover', Ajax('containermouseover', ['This', '%0.nm','E', '%1.nm'], true));
  FOnContainermouseover := Value;
end;

procedure TExtViewView.SetFOnContainermouseout(Value : TExtViewViewOnContainermouseout); begin
  if Assigned(FOnContainermouseout) then
    JSCode(JSName+'.events ["containermouseout"].listeners=[];');
  if Assigned(Value) then
    On('containermouseout', Ajax('containermouseout', ['This', '%0.nm','E', '%1.nm'], true));
  FOnContainermouseout := Value;
end;

procedure TExtViewView.SetFOnContainerclick(Value : TExtViewViewOnContainerclick); begin
  if Assigned(FOnContainerclick) then
    JSCode(JSName+'.events ["containerclick"].listeners=[];');
  if Assigned(Value) then
    On('containerclick', Ajax('containerclick', ['This', '%0.nm','E', '%1.nm'], true));
  FOnContainerclick := Value;
end;

procedure TExtViewView.SetFOnContainerdblclick(Value : TExtViewViewOnContainerdblclick); begin
  if Assigned(FOnContainerdblclick) then
    JSCode(JSName+'.events ["containerdblclick"].listeners=[];');
  if Assigned(Value) then
    On('containerdblclick', Ajax('containerdblclick', ['This', '%0.nm','E', '%1.nm'], true));
  FOnContainerdblclick := Value;
end;

procedure TExtViewView.SetFOnContainercontextmenu(Value : TExtViewViewOnContainercontextmenu); begin
  if Assigned(FOnContainercontextmenu) then
    JSCode(JSName+'.events ["containercontextmenu"].listeners=[];');
  if Assigned(Value) then
    On('containercontextmenu', Ajax('containercontextmenu', ['This', '%0.nm','E', '%1.nm'], true));
  FOnContainercontextmenu := Value;
end;

procedure TExtViewView.SetFOnContainerkeydown(Value : TExtViewViewOnContainerkeydown); begin
  if Assigned(FOnContainerkeydown) then
    JSCode(JSName+'.events ["containerkeydown"].listeners=[];');
  if Assigned(Value) then
    On('containerkeydown', Ajax('containerkeydown', ['This', '%0.nm','E', '%1.nm'], true));
  FOnContainerkeydown := Value;
end;

procedure TExtViewView.SetFOnSelectionchange(Value : TExtViewViewOnSelectionchange); begin
  if Assigned(FOnSelectionchange) then
    JSCode(JSName+'.events ["selectionchange"].listeners=[];');
  if Assigned(Value) then
    On('selectionchange', Ajax('selectionchange', ['This', '%0.nm','Selections', '%1.nm'], true));
  FOnSelectionchange := Value;
end;

procedure TExtViewView.SetFOnBeforeselect(Value : TExtViewViewOnBeforeselect); begin
  if Assigned(FOnBeforeselect) then
    JSCode(JSName+'.events ["beforeselect"].listeners=[];');
  if Assigned(Value) then
    On('beforeselect', Ajax('beforeselect', ['This', '%0.nm','Node', '%1.nm','Selections', '%2.nm'], true));
  FOnBeforeselect := Value;
end;

function TExtViewView.JSClassName : string; begin
  Result := 'Ext-view-View';
end;

{$IFDEF FPC}constructor TExtViewView.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtViewView.HighlightItem(Item : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.highlightItem(' + VarToJSON([Item, false]) + ');', 'TExtViewView');
  Result := Self;
end;

function TExtViewView.ClearHighlight : TExtFunction; begin
  JSCode(JSName + '.clearHighlight();', 'TExtViewView');
  Result := Self;
end;

procedure TExtViewView.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforeitemmousedown') and Assigned(FOnBeforeitemmousedown) then
    FOnBeforeitemmousedown(TExtViewView(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), THTMLElement(ParamAsObject('Item')), ParamAsInteger('Index'), ExtEventObject)
  else if (AEvtName = 'beforeitemmouseup') and Assigned(FOnBeforeitemmouseup) then
    FOnBeforeitemmouseup(TExtViewView(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), THTMLElement(ParamAsObject('Item')), ParamAsInteger('Index'), ExtEventObject)
  else if (AEvtName = 'beforeitemmouseenter') and Assigned(FOnBeforeitemmouseenter) then
    FOnBeforeitemmouseenter(TExtViewView(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), THTMLElement(ParamAsObject('Item')), ParamAsInteger('Index'), ExtEventObject)
  else if (AEvtName = 'beforeitemmouseleave') and Assigned(FOnBeforeitemmouseleave) then
    FOnBeforeitemmouseleave(TExtViewView(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), THTMLElement(ParamAsObject('Item')), ParamAsInteger('Index'), ExtEventObject)
  else if (AEvtName = 'beforeitemclick') and Assigned(FOnBeforeitemclick) then
    FOnBeforeitemclick(TExtViewView(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), THTMLElement(ParamAsObject('Item')), ParamAsInteger('Index'), ExtEventObject)
  else if (AEvtName = 'beforeitemdblclick') and Assigned(FOnBeforeitemdblclick) then
    FOnBeforeitemdblclick(TExtViewView(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), THTMLElement(ParamAsObject('Item')), ParamAsInteger('Index'), ExtEventObject)
  else if (AEvtName = 'beforeitemcontextmenu') and Assigned(FOnBeforeitemcontextmenu) then
    FOnBeforeitemcontextmenu(TExtViewView(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), THTMLElement(ParamAsObject('Item')), ParamAsInteger('Index'), ExtEventObject)
  else if (AEvtName = 'beforeitemkeydown') and Assigned(FOnBeforeitemkeydown) then
    FOnBeforeitemkeydown(TExtViewView(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), THTMLElement(ParamAsObject('Item')), ParamAsInteger('Index'), ExtEventObject)
  else if (AEvtName = 'itemmousedown') and Assigned(FOnItemmousedown) then
    FOnItemmousedown(TExtViewView(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), THTMLElement(ParamAsObject('Item')), ParamAsInteger('Index'), ExtEventObject)
  else if (AEvtName = 'itemmouseup') and Assigned(FOnItemmouseup) then
    FOnItemmouseup(TExtViewView(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), THTMLElement(ParamAsObject('Item')), ParamAsInteger('Index'), ExtEventObject)
  else if (AEvtName = 'itemmouseenter') and Assigned(FOnItemmouseenter) then
    FOnItemmouseenter(TExtViewView(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), THTMLElement(ParamAsObject('Item')), ParamAsInteger('Index'), ExtEventObject)
  else if (AEvtName = 'itemmouseleave') and Assigned(FOnItemmouseleave) then
    FOnItemmouseleave(TExtViewView(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), THTMLElement(ParamAsObject('Item')), ParamAsInteger('Index'), ExtEventObject)
  else if (AEvtName = 'itemclick') and Assigned(FOnItemclick) then
    FOnItemclick(TExtViewView(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), THTMLElement(ParamAsObject('Item')), ParamAsInteger('Index'), ExtEventObject)
  else if (AEvtName = 'itemdblclick') and Assigned(FOnItemdblclick) then
    FOnItemdblclick(TExtViewView(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), THTMLElement(ParamAsObject('Item')), ParamAsInteger('Index'), ExtEventObject)
  else if (AEvtName = 'itemcontextmenu') and Assigned(FOnItemcontextmenu) then
    FOnItemcontextmenu(TExtViewView(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), THTMLElement(ParamAsObject('Item')), ParamAsInteger('Index'), ExtEventObject)
  else if (AEvtName = 'itemkeydown') and Assigned(FOnItemkeydown) then
    FOnItemkeydown(TExtViewView(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), THTMLElement(ParamAsObject('Item')), ParamAsInteger('Index'), ExtEventObject)
  else if (AEvtName = 'beforecontainermousedown') and Assigned(FOnBeforecontainermousedown) then
    FOnBeforecontainermousedown(TExtViewView(ParamAsObject('This')), ExtEventObject)
  else if (AEvtName = 'beforecontainermouseup') and Assigned(FOnBeforecontainermouseup) then
    FOnBeforecontainermouseup(TExtViewView(ParamAsObject('This')), ExtEventObject)
  else if (AEvtName = 'beforecontainermouseover') and Assigned(FOnBeforecontainermouseover) then
    FOnBeforecontainermouseover(TExtViewView(ParamAsObject('This')), ExtEventObject)
  else if (AEvtName = 'beforecontainermouseout') and Assigned(FOnBeforecontainermouseout) then
    FOnBeforecontainermouseout(TExtViewView(ParamAsObject('This')), ExtEventObject)
  else if (AEvtName = 'beforecontainerclick') and Assigned(FOnBeforecontainerclick) then
    FOnBeforecontainerclick(TExtViewView(ParamAsObject('This')), ExtEventObject)
  else if (AEvtName = 'beforecontainerdblclick') and Assigned(FOnBeforecontainerdblclick) then
    FOnBeforecontainerdblclick(TExtViewView(ParamAsObject('This')), ExtEventObject)
  else if (AEvtName = 'beforecontainercontextmenu') and Assigned(FOnBeforecontainercontextmenu) then
    FOnBeforecontainercontextmenu(TExtViewView(ParamAsObject('This')), ExtEventObject)
  else if (AEvtName = 'beforecontainerkeydown') and Assigned(FOnBeforecontainerkeydown) then
    FOnBeforecontainerkeydown(TExtViewView(ParamAsObject('This')), ExtEventObject)
  else if (AEvtName = 'containermouseup') and Assigned(FOnContainermouseup) then
    FOnContainermouseup(TExtViewView(ParamAsObject('This')), ExtEventObject)
  else if (AEvtName = 'containermouseover') and Assigned(FOnContainermouseover) then
    FOnContainermouseover(TExtViewView(ParamAsObject('This')), ExtEventObject)
  else if (AEvtName = 'containermouseout') and Assigned(FOnContainermouseout) then
    FOnContainermouseout(TExtViewView(ParamAsObject('This')), ExtEventObject)
  else if (AEvtName = 'containerclick') and Assigned(FOnContainerclick) then
    FOnContainerclick(TExtViewView(ParamAsObject('This')), ExtEventObject)
  else if (AEvtName = 'containerdblclick') and Assigned(FOnContainerdblclick) then
    FOnContainerdblclick(TExtViewView(ParamAsObject('This')), ExtEventObject)
  else if (AEvtName = 'containercontextmenu') and Assigned(FOnContainercontextmenu) then
    FOnContainercontextmenu(TExtViewView(ParamAsObject('This')), ExtEventObject)
  else if (AEvtName = 'containerkeydown') and Assigned(FOnContainerkeydown) then
    FOnContainerkeydown(TExtViewView(ParamAsObject('This')), ExtEventObject)
  else if (AEvtName = 'selectionchange') and Assigned(FOnSelectionchange) then
    FOnSelectionchange(TExtViewView(ParamAsObject('This')), TExtObjectList(ParamAsObject('Selections')))
  else if (AEvtName = 'beforeselect') and Assigned(FOnBeforeselect) then
    FOnBeforeselect(TExtViewView(ParamAsObject('This')), THTMLElement(ParamAsObject('Node')), TExtObjectList(ParamAsObject('Selections')));
end;

procedure TExtFormFieldPicker.SetFMatchFieldWidth(Value : Boolean); begin
  FMatchFieldWidth := Value;
  JSCode('matchFieldWidth:' + VarToJSON([Value]));
end;

procedure TExtFormFieldPicker.SetFPickerAlign(Value : String); begin
  FPickerAlign := Value;
  JSCode('pickerAlign:' + VarToJSON([Value]));
end;

procedure TExtFormFieldPicker.SetFPickerOffset(Value : TArrayOfInteger); begin
  FPickerOffset := Value;
  JSCode('pickerOffset:' + ArrayToJSON(Value));
end;

procedure TExtFormFieldPicker.SetFOpenCls(Value : String); begin
  FOpenCls := Value;
  JSCode('openCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldPicker.SetFEditable(Value : Boolean); begin
  FEditable := Value;
  JSCode('editable:' + VarToJSON([Value]));
end;

procedure TExtFormFieldPicker.SetFOnExpand(Value : TExtFormFieldPickerOnExpand); begin
  if Assigned(FOnExpand) then
    JSCode(JSName+'.events ["expand"].listeners=[];');
  if Assigned(Value) then
    On('expand', Ajax('expand', ['Field', '%0.nm'], true));
  FOnExpand := Value;
end;

procedure TExtFormFieldPicker.SetFOnCollapse(Value : TExtFormFieldPickerOnCollapse); begin
  if Assigned(FOnCollapse) then
    JSCode(JSName+'.events ["collapse"].listeners=[];');
  if Assigned(Value) then
    On('collapse', Ajax('collapse', ['Field', '%0.nm'], true));
  FOnCollapse := Value;
end;

procedure TExtFormFieldPicker.SetFOnSelect(Value : TExtFormFieldPickerOnSelect); begin
  if Assigned(FOnSelect) then
    JSCode(JSName+'.events ["select"].listeners=[];');
  if Assigned(Value) then
    On('select', Ajax('select', ['Field', '%0.nm','Value', '%1.nm'], true));
  FOnSelect := Value;
end;

function TExtFormFieldPicker.JSClassName : string; begin
  Result := 'Ext-form-field-Picker';
end;

{$IFDEF FPC}constructor TExtFormFieldPicker.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtFormFieldPicker.Expand : TExtFunction; begin
  JSCode(JSName + '.expand();', 'TExtFormFieldPicker');
  Result := Self;
end;

function TExtFormFieldPicker.Collapse : TExtFunction; begin
  JSCode(JSName + '.collapse();', 'TExtFormFieldPicker');
  Result := Self;
end;

function TExtFormFieldPicker.GetPicker : TExtFunction; begin
  JSCode(JSName + '.getPicker();', 'TExtFormFieldPicker');
  Result := Self;
end;

function TExtFormFieldPicker.CreatePicker : TExtFunction; begin
  JSCode(JSName + '.createPicker();', 'TExtFormFieldPicker');
  Result := Self;
end;

procedure TExtFormFieldPicker.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'expand') and Assigned(FOnExpand) then
    FOnExpand(TExtFormFieldPicker(ParamAsObject('Field')))
  else if (AEvtName = 'collapse') and Assigned(FOnCollapse) then
    FOnCollapse(TExtFormFieldPicker(ParamAsObject('Field')))
  else if (AEvtName = 'select') and Assigned(FOnSelect) then
    FOnSelect(TExtFormFieldPicker(ParamAsObject('Field')), TExtObject(ParamAsObject('Value')));
end;

procedure TExtTabBar.SetFTitle(Value : String); begin
  FTitle := Value;
  JSCode('title:' + VarToJSON([Value]));
end;

procedure TExtTabBar.SetFIconCls(Value : String); begin
  FIconCls := Value;
  JSCode('iconCls:' + VarToJSON([Value]));
end;

procedure TExtTabBar.SetFPlain(Value : Boolean); begin
  FPlain := Value;
  JSCode('plain:' + VarToJSON([Value]));
end;

procedure TExtTabBar.SetFMinTabWidth(Value : Integer); begin
  FMinTabWidth := Value;
  JSCode('minTabWidth:' + VarToJSON([Value]));
end;

procedure TExtTabBar.SetFMaxTabWidth(Value : Integer); begin
  FMaxTabWidth := Value;
  JSCode('maxTabWidth:' + VarToJSON([Value]));
end;

procedure TExtTabBar.SetFOnChange(Value : TExtTabBarOnChange); begin
  if Assigned(FOnChange) then
    JSCode(JSName+'.events ["change"].listeners=[];');
  if Assigned(Value) then
    On('change', Ajax('change', ['TabBar', '%0.nm','Tab', '%1.nm','Card', '%2.nm'], true));
  FOnChange := Value;
end;

function TExtTabBar.JSClassName : string; begin
  Result := 'Ext-tab-Bar';
end;

{$IFDEF FPC}constructor TExtTabBar.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtTabBar.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'change') and Assigned(FOnChange) then
    FOnChange(TExtTabBar(ParamAsObject('TabBar')), TExtTabTab(ParamAsObject('Tab')), TExtComponent(ParamAsObject('Card')));
end;

procedure TExtViewBoundListKeyNav.SetFBoundList(Value : TExtViewBoundList); begin
  FBoundList := Value;
  Value.DeleteFromGarbage;
  JSCode('boundList:' + VarToJSON([Value, false]));
end;

function TExtViewBoundListKeyNav.JSClassName : string; begin
  Result := 'Ext-view-BoundListKeyNav';
end;

procedure TExtViewBoundListKeyNav.InitDefaults; begin
  inherited;
  FBoundList := TExtViewBoundList.CreateInternal(Self, 'boundList');
end;

{$IFDEF FPC}constructor TExtViewBoundListKeyNav.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtViewBoundListKeyNav.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtViewBoundListKeyNav.HighlightAt(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.highlightAt(' + VarToJSON([Index]) + ');', 'TExtViewBoundListKeyNav');
  Result := Self;
end;

function TExtViewBoundListKeyNav.SelectHighlighted : TExtFunction; begin
  JSCode(JSName + '.selectHighlighted();', 'TExtViewBoundListKeyNav');
  Result := Self;
end;

destructor TExtViewBoundListKeyNav.Destroy; begin
  try
    FBoundList.Free;
  except end;
  inherited;
end;

procedure TExtSelectionModel.SetFMode(Value : String); begin
  FMode := Value;
  JSCode('mode:' + VarToJSON([Value]));
end;

procedure TExtSelectionModel.SetFAllowDeselect(Value : Boolean); begin
  FAllowDeselect := Value;
  JSCode('allowDeselect:' + VarToJSON([Value]));
end;

procedure TExtSelectionModel.SetFOnSelectionchange(Value : TExtSelectionModelOnSelectionchange); begin
  if Assigned(FOnSelectionchange) then
    JSCode(JSName+'.events ["selectionchange"].listeners=[];');
  if Assigned(Value) then
    On('selectionchange', Ajax('selectionchange', ['This', '%0.nm','Selected', '%1.nm'], true));
  FOnSelectionchange := Value;
end;

function TExtSelectionModel.JSClassName : string; begin
  Result := 'Ext-selection-Model';
end;

{$IFDEF FPC}constructor TExtSelectionModel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtSelectionModel.SelectAll(SuppressEvent : Boolean) : TExtFunction; begin
  JSCode(JSName + '.selectAll(' + VarToJSON([SuppressEvent]) + ');', 'TExtSelectionModel');
  Result := Self;
end;

function TExtSelectionModel.DeselectAll(SuppressEvent : Boolean) : TExtFunction; begin
  JSCode(JSName + '.deselectAll(' + VarToJSON([SuppressEvent]) + ');', 'TExtSelectionModel');
  Result := Self;
end;

function TExtSelectionModel.SelectRange(StartRow : TExtDataModel; EndRow : TExtDataModel; KeepExisting : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.selectRange(' + VarToJSON([StartRow, false, EndRow, false, KeepExisting]) + ');', 'TExtSelectionModel');
  Result := Self;
end;

function TExtSelectionModel.SelectRange(StartRow : Integer; EndRow : TExtDataModel; KeepExisting : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.SelectRange(' + VarToJSON([StartRow, EndRow, false, KeepExisting]) + ');', 'TExtSelectionModel');
  Result := Self;
end;

function TExtSelectionModel.SelectRange(StartRow : Integer; EndRow : Integer; KeepExisting : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.SelectRange(' + VarToJSON([StartRow, EndRow, KeepExisting]) + ');', 'TExtSelectionModel');
  Result := Self;
end;

function TExtSelectionModel.SelectRange(StartRow : TExtDataModel; EndRow : Integer; KeepExisting : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.SelectRange(' + VarToJSON([StartRow, false, EndRow, KeepExisting]) + ');', 'TExtSelectionModel');
  Result := Self;
end;

function TExtSelectionModel.Select(Records : TExtObjectList; KeepExisting : Boolean = false; SuppressEvent : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.select(' + VarToJSON(Records) + ',' + VarToJSON([KeepExisting, SuppressEvent]) + ');', 'TExtSelectionModel');
  Result := Self;
end;

function TExtSelectionModel.Select(Records : Integer; KeepExisting : Boolean = false; SuppressEvent : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Select(' + VarToJSON([Records, KeepExisting, SuppressEvent]) + ');', 'TExtSelectionModel');
  Result := Self;
end;

function TExtSelectionModel.Deselect(Records : TExtObjectList; SuppressEvent : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.deselect(' + VarToJSON(Records) + ',' + VarToJSON([SuppressEvent]) + ');', 'TExtSelectionModel');
  Result := Self;
end;

function TExtSelectionModel.Deselect(Records : Integer; SuppressEvent : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Deselect(' + VarToJSON([Records, SuppressEvent]) + ');', 'TExtSelectionModel');
  Result := Self;
end;

function TExtSelectionModel.SetLastFocused(RecordJS : TExtDataModel; RecordJS_ : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.setLastFocused(' + VarToJSON([RecordJS, false, RecordJS_, false]) + ');', 'TExtSelectionModel');
  Result := Self;
end;

function TExtSelectionModel.GetLastSelected : TExtFunction; begin
  JSCode(JSName + '.getLastSelected();', 'TExtSelectionModel');
  Result := Self;
end;

function TExtSelectionModel.GetSelection : TExtFunction; begin
  JSCode(JSName + '.getSelection();', 'TExtSelectionModel');
  Result := Self;
end;

function TExtSelectionModel.GetSelectionMode : TExtFunction; begin
  JSCode(JSName + '.getSelectionMode();', 'TExtSelectionModel');
  Result := Self;
end;

function TExtSelectionModel.SetSelectionMode(SelModel : String) : TExtFunction; begin
  JSCode(JSName + '.setSelectionMode(' + VarToJSON([SelModel]) + ');', 'TExtSelectionModel');
  Result := Self;
end;

function TExtSelectionModel.IsLocked : TExtFunction; begin
  JSCode(JSName + '.isLocked();', 'TExtSelectionModel');
  Result := Self;
end;

function TExtSelectionModel.SetLocked(Locked : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setLocked(' + VarToJSON([Locked]) + ');', 'TExtSelectionModel');
  Result := Self;
end;

function TExtSelectionModel.IsSelected(RecordJS : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.isSelected(' + VarToJSON([RecordJS, false]) + ');', 'TExtSelectionModel');
  Result := Self;
end;

function TExtSelectionModel.IsSelected(RecordJS : Integer) : TExtFunction; begin
  JSCode(JSName + '.IsSelected(' + VarToJSON([RecordJS]) + ');', 'TExtSelectionModel');
  Result := Self;
end;

function TExtSelectionModel.HasSelection : TExtFunction; begin
  JSCode(JSName + '.hasSelection();', 'TExtSelectionModel');
  Result := Self;
end;

function TExtSelectionModel.GetCount : TExtFunction; begin
  JSCode(JSName + '.getCount();', 'TExtSelectionModel');
  Result := Self;
end;

procedure TExtSelectionModel.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'selectionchange') and Assigned(FOnSelectionchange) then
    FOnSelectionchange(TExtSelectionModel(ParamAsObject('This')), TExtObjectList(ParamAsObject('Selected')));
end;

procedure TExtEditor.SetFField(Value : TExtFormFieldField); begin
  FField := Value;
  Value.DeleteFromGarbage;
  JSCode('field:' + VarToJSON([Value, false]));
end;

procedure TExtEditor.SetFAllowBlur(Value : Boolean); begin
  FAllowBlur := Value;
  JSCode('allowBlur:' + VarToJSON([Value]));
end;

procedure TExtEditor.SetFAutoSize(Value : Boolean); begin
  FAutoSize := Value;
  JSCode('autoSize:' + VarToJSON([Value]));
end;

procedure TExtEditor.SetFAutoSizeTExtObject(Value : TExtObject); begin
  FAutoSizeTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('autoSize:' + VarToJSON([Value, false]));
end;

procedure TExtEditor.SetFRevertInvalid(Value : Boolean); begin
  FRevertInvalid := Value;
  JSCode('revertInvalid:' + VarToJSON([Value]));
end;

procedure TExtEditor.SetFIgnoreNoChange(Value : Boolean); begin
  FIgnoreNoChange := Value;
  JSCode('ignoreNoChange:' + VarToJSON([Value]));
end;

procedure TExtEditor.SetFHideEl(Value : Boolean); begin
  FHideEl := Value;
  JSCode('hideEl:' + VarToJSON([Value]));
end;

procedure TExtEditor.SetFValue(Value : TExtObject); begin
  FValue := Value;
  Value.DeleteFromGarbage;
  if not ConfigAvailable(JSName) then
    SetValue(Value)
  else
    JSCode('value:' + VarToJSON([Value, false]));
end;

procedure TExtEditor.SetFAlignment(Value : String); begin
  FAlignment := Value;
  JSCode('alignment:' + VarToJSON([Value]));
end;

procedure TExtEditor.SetFOffsets(Value : TArrayOfInteger); begin
  FOffsets := Value;
  JSCode('offsets:' + ArrayToJSON(Value));
end;

procedure TExtEditor.SetFShadow(Value : Boolean); begin
  FShadow := Value;
  JSCode('shadow:' + VarToJSON([Value]));
end;

procedure TExtEditor.SetFShadowString(Value : String); begin
  FShadowString := Value;
  JSCode('shadow:' + VarToJSON([Value]));
end;

procedure TExtEditor.SetFConstrain(Value : Boolean); begin
  FConstrain := Value;
  JSCode('constrain:' + VarToJSON([Value]));
end;

procedure TExtEditor.SetFSwallowKeys(Value : Boolean); begin
  FSwallowKeys := Value;
  JSCode('swallowKeys:' + VarToJSON([Value]));
end;

procedure TExtEditor.SetFCompleteOnEnter(Value : Boolean); begin
  FCompleteOnEnter := Value;
  JSCode('completeOnEnter:' + VarToJSON([Value]));
end;

procedure TExtEditor.SetFCancelOnEsc(Value : Boolean); begin
  FCancelOnEsc := Value;
  JSCode('cancelOnEsc:' + VarToJSON([Value]));
end;

procedure TExtEditor.SetFUpdateEl(Value : Boolean); begin
  FUpdateEl := Value;
  JSCode('updateEl:' + VarToJSON([Value]));
end;

procedure TExtEditor.SetFParentEl(Value : String); begin
  FParentEl := Value;
  JSCode('parentEl:' + VarToJSON([Value]));
end;

procedure TExtEditor.SetFParentElTHTMLElement(Value : THTMLElement); begin
  FParentElTHTMLElement := Value;
  Value.DeleteFromGarbage;
  JSCode('parentEl:' + VarToJSON([Value, false]));
end;

procedure TExtEditor.SetFParentElTExtElement(Value : TExtElement); begin
  FParentElTExtElement := Value;
  Value.DeleteFromGarbage;
  JSCode('parentEl:' + VarToJSON([Value, false]));
end;

procedure TExtEditor.SetFOnBeforestartedit(Value : TExtEditorOnBeforestartedit); begin
  if Assigned(FOnBeforestartedit) then
    JSCode(JSName+'.events ["beforestartedit"].listeners=[];');
  if Assigned(Value) then
    On('beforestartedit', Ajax('beforestartedit', ['This', '%0.nm','BoundEl', '%1.nm','Value', '%2.nm'], true));
  FOnBeforestartedit := Value;
end;

procedure TExtEditor.SetFOnStartedit(Value : TExtEditorOnStartedit); begin
  if Assigned(FOnStartedit) then
    JSCode(JSName+'.events ["startedit"].listeners=[];');
  if Assigned(Value) then
    On('startedit', Ajax('startedit', ['This', '%0.nm','BoundEl', '%1.nm','Value', '%2.nm'], true));
  FOnStartedit := Value;
end;

procedure TExtEditor.SetFOnBeforecomplete(Value : TExtEditorOnBeforecomplete); begin
  if Assigned(FOnBeforecomplete) then
    JSCode(JSName+'.events ["beforecomplete"].listeners=[];');
  if Assigned(Value) then
    On('beforecomplete', Ajax('beforecomplete', ['This', '%0.nm','Value', '%1.nm','StartValue', '%2.nm'], true));
  FOnBeforecomplete := Value;
end;

procedure TExtEditor.SetFOnComplete(Value : TExtEditorOnComplete); begin
  if Assigned(FOnComplete) then
    JSCode(JSName+'.events ["complete"].listeners=[];');
  if Assigned(Value) then
    On('complete', Ajax('complete', ['This', '%0.nm','Value', '%1.nm','StartValue', '%2.nm'], true));
  FOnComplete := Value;
end;

procedure TExtEditor.SetFOnCanceledit(Value : TExtEditorOnCanceledit); begin
  if Assigned(FOnCanceledit) then
    JSCode(JSName+'.events ["canceledit"].listeners=[];');
  if Assigned(Value) then
    On('canceledit', Ajax('canceledit', ['This', '%0.nm','Value', '%1.nm','StartValue', '%2.nm'], true));
  FOnCanceledit := Value;
end;

procedure TExtEditor.SetFOnSpecialkey(Value : TExtEditorOnSpecialkey); begin
  if Assigned(FOnSpecialkey) then
    JSCode(JSName+'.events ["specialkey"].listeners=[];');
  if Assigned(Value) then
    On('specialkey', Ajax('specialkey', ['This', '%0.nm','The', '%1.nm','Event', '%2.nm'], true));
  FOnSpecialkey := Value;
end;

function TExtEditor.JSClassName : string; begin
  Result := 'Ext-Editor';
end;

procedure TExtEditor.InitDefaults; begin
  inherited;
  FField := TExtFormFieldField.CreateInternal(Self, 'field');
  FAutoSizeTExtObject := TExtObject.CreateInternal(Self, 'autoSize');
  FValue := TExtObject.CreateInternal(Self, 'value');
  FParentElTExtElement := TExtElement.CreateInternal(Self, 'parentEl');
end;

{$IFDEF FPC}constructor TExtEditor.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtEditor.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtEditor.StartEdit(El : String; Value : String = '') : TExtFunction; begin
  JSCode(JSName + '.startEdit(' + VarToJSON([El, Value]) + ');', 'TExtEditor');
  Result := Self;
end;

function TExtEditor.StartEdit(El : THTMLElement; Value : String = '') : TExtFunction; begin
  JSCode(JSName + '.StartEdit(' + VarToJSON([El, false, Value]) + ');', 'TExtEditor');
  Result := Self;
end;

function TExtEditor.StartEdit(El : TExtElement; Value : String = '') : TExtFunction; begin
  JSCode(JSName + '.StartEdit(' + VarToJSON([El, false, Value]) + ');', 'TExtEditor');
  Result := Self;
end;

function TExtEditor.Realign(AutoSize : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.realign(' + VarToJSON([AutoSize]) + ');', 'TExtEditor');
  Result := Self;
end;

function TExtEditor.CompleteEdit(RemainVisible : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.completeEdit(' + VarToJSON([RemainVisible]) + ');', 'TExtEditor');
  Result := Self;
end;

function TExtEditor.CancelEdit(RemainVisible : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.cancelEdit(' + VarToJSON([RemainVisible]) + ');', 'TExtEditor');
  Result := Self;
end;

function TExtEditor.SetValue(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setValue(' + VarToJSON([Value, false]) + ');', 'TExtEditor');
  Result := Self;
end;

function TExtEditor.GetValue : TExtFunction; begin
  JSCode(JSName + '.getValue();', 'TExtEditor');
  Result := Self;
end;

destructor TExtEditor.Destroy; begin
  try
    FField.Free;
    FAutoSizeTExtObject.Free;
    FValue.Free;
    FParentElTExtElement.Free;
  except end;
  inherited;
end;

procedure TExtEditor.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforestartedit') and Assigned(FOnBeforestartedit) then
    FOnBeforestartedit(TExtEditor(ParamAsObject('This')), TExtElement(ParamAsObject('BoundEl')), TExtObject(ParamAsObject('Value')))
  else if (AEvtName = 'startedit') and Assigned(FOnStartedit) then
    FOnStartedit(TExtEditor(ParamAsObject('This')), TExtElement(ParamAsObject('BoundEl')), TExtObject(ParamAsObject('Value')))
  else if (AEvtName = 'beforecomplete') and Assigned(FOnBeforecomplete) then
    FOnBeforecomplete(TExtEditor(ParamAsObject('This')), TExtObject(ParamAsObject('Value')), TExtObject(ParamAsObject('StartValue')))
  else if (AEvtName = 'complete') and Assigned(FOnComplete) then
    FOnComplete(TExtEditor(ParamAsObject('This')), TExtObject(ParamAsObject('Value')), TExtObject(ParamAsObject('StartValue')))
  else if (AEvtName = 'canceledit') and Assigned(FOnCanceledit) then
    FOnCanceledit(TExtEditor(ParamAsObject('This')), TExtObject(ParamAsObject('Value')), TExtObject(ParamAsObject('StartValue')))
  else if (AEvtName = 'specialkey') and Assigned(FOnSpecialkey) then
    FOnSpecialkey(TExtEditor(ParamAsObject('This')), TExtFormFieldField(ParamAsObject('The')), ExtEventObject);
end;

function TObject.JSClassName : string; begin
  Result := 'Object';
end;

{$IFDEF FPC}constructor TObject.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TObject.Create(Value : TExtObject = nil); begin
  CreateVar(JSClassName + '(' + VarToJSON([Value, false]) + ');');
  InitDefaults;
end;

function TObject.HasOwnProperty(Prop : String) : TExtFunction; begin
  JSCode(JSName + '.hasOwnProperty(' + VarToJSON([Prop]) + ');', 'TObject');
  Result := Self;
end;

function TObject.IsPrototypeOf(Prototype : TExtObject; ObjectJS : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.isPrototypeOf(' + VarToJSON([Prototype, false, ObjectJS, false]) + ');', 'TObject');
  Result := Self;
end;

function TObject.PropertyIsEnumerable(Prop : String) : TExtFunction; begin
  JSCode(JSName + '.propertyIsEnumerable(' + VarToJSON([Prop]) + ');', 'TObject');
  Result := Self;
end;

function TObject.ToLocaleString : TExtFunction; begin
  JSCode(JSName + '.toLocaleString();', 'TObject');
  Result := Self;
end;

function TObject.ToString : TExtFunction; begin
  JSCode(JSName + '.toString();', 'TObject');
  Result := Self;
end;

function TObject.ValueOf : TExtFunction; begin
  JSCode(JSName + '.valueOf();', 'TObject');
  Result := Self;
end;

procedure TExtGridColumnDate.SetFFormat(Value : String); begin
  FFormat := Value;
  JSCode('format:' + VarToJSON([Value]));
end;

function TExtGridColumnDate.JSClassName : string; begin
  Result := 'Ext-grid-column-Date';
end;

{$IFDEF FPC}constructor TExtGridColumnDate.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtChartThemeTheme.JSClassName : string; begin
  Result := 'Ext-chart-theme-Theme';
end;

{$IFDEF FPC}constructor TExtChartThemeTheme.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataSortTypesSingleton.JSClassName : string; begin
  Result := 'Ext-data-SortTypesSingleton';
end;

{$IFDEF FPC}constructor TExtDataSortTypesSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataSortTypesSingleton.None(S : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.none(' + VarToJSON([S, false]) + ');', 'TExtDataSortTypesSingleton');
  Result := Self;
end;

function TExtDataSortTypesSingleton.AsText(S : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.asText(' + VarToJSON([S, false]) + ');', 'TExtDataSortTypesSingleton');
  Result := Self;
end;

function TExtDataSortTypesSingleton.AsUCText(S : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.asUCText(' + VarToJSON([S, false]) + ');', 'TExtDataSortTypesSingleton');
  Result := Self;
end;

function TExtDataSortTypesSingleton.AsUCString(S : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.asUCString(' + VarToJSON([S, false]) + ');', 'TExtDataSortTypesSingleton');
  Result := Self;
end;

function TExtDataSortTypesSingleton.AsDate(S : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.asDate(' + VarToJSON([S, false]) + ');', 'TExtDataSortTypesSingleton');
  Result := Self;
end;

function TExtDataSortTypesSingleton.AsFloat(S : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.asFloat(' + VarToJSON([S, false]) + ');', 'TExtDataSortTypesSingleton');
  Result := Self;
end;

function TExtDataSortTypesSingleton.AsInt(S : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.asInt(' + VarToJSON([S, false]) + ');', 'TExtDataSortTypesSingleton');
  Result := Self;
end;

function TExtDdDDProxy.JSClassName : string; begin
  Result := 'Ext-dd-DDProxy';
end;

{$IFDEF FPC}constructor TExtDdDDProxy.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDdDDProxy.Create(Id : String; SGroup : String; Config : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Id, SGroup, Config, false]) + ');');
  InitDefaults;
end;

function TExtDdDDProxy.CreateFrame : TExtFunction; begin
  JSCode(JSName + '.createFrame();', 'TExtDdDDProxy');
  Result := Self;
end;

function TExtDdDDProxy.InitFrame : TExtFunction; begin
  JSCode(JSName + '.initFrame();', 'TExtDdDDProxy');
  Result := Self;
end;

function TExtAbstractManager.JSClassName : string; begin
  Result := 'Ext-AbstractManager';
end;

{$IFDEF FPC}constructor TExtAbstractManager.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtAbstractManager.Get(Id : String) : TExtFunction; begin
  JSCode(JSName + '.get(' + VarToJSON([Id]) + ');', 'TExtAbstractManager');
  Result := Self;
end;

function TExtAbstractManager.Register(Item : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.register(' + VarToJSON([Item, false]) + ');', 'TExtAbstractManager');
  Result := Self;
end;

function TExtAbstractManager.Unregister(Item : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.unregister(' + VarToJSON([Item, false]) + ');', 'TExtAbstractManager');
  Result := Self;
end;

function TExtAbstractManager.RegisterType(TypeJS : String; Cls : TExtFunction) : TExtFunction; begin
  JSCode(JSName + '.registerType(' + VarToJSON([TypeJS, Cls, true]) + ');', 'TExtAbstractManager');
  Result := Self;
end;

function TExtAbstractManager.IsRegistered(TypeJS : String) : TExtFunction; begin
  JSCode(JSName + '.isRegistered(' + VarToJSON([TypeJS]) + ');', 'TExtAbstractManager');
  Result := Self;
end;

function TExtAbstractManager.OnAvailable(Id : String; Fn : TExtFunction; Scope : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.onAvailable(' + VarToJSON([Id, Fn, true, Scope, false]) + ');', 'TExtAbstractManager');
  Result := Self;
end;

function TExtAbstractManager.Each(Fn : TExtFunction; FnKey : String; FnValue : Integer; FnLength : Integer; FnReturn : Boolean; Scope : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.each(' + VarToJSON([Fn, true, FnKey, FnValue, FnLength, FnReturn, Scope, false]) + ');', 'TExtAbstractManager');
  Result := Self;
end;

function TExtAbstractManager.GetCount : TExtFunction; begin
  JSCode(JSName + '.getCount();', 'TExtAbstractManager');
  Result := Self;
end;

procedure TExtSelectionCellModel.SetFEnableKeyNav(Value : Boolean); begin
  FEnableKeyNav := Value;
  JSCode('enableKeyNav:' + VarToJSON([Value]));
end;

procedure TExtSelectionCellModel.SetFPreventWrap(Value : Boolean); begin
  FPreventWrap := Value;
  JSCode('preventWrap:' + VarToJSON([Value]));
end;

procedure TExtSelectionCellModel.SetFOnDeselect(Value : TExtSelectionCellModelOnDeselect); begin
  if Assigned(FOnDeselect) then
    JSCode(JSName+'.events ["deselect"].listeners=[];');
  if Assigned(Value) then
    On('deselect', Ajax('deselect', ['This', '%0.nm','RecordJS', '%1.nm','Row', '%2','Column', '%3'], true));
  FOnDeselect := Value;
end;

procedure TExtSelectionCellModel.SetFOnSelect(Value : TExtSelectionCellModelOnSelect); begin
  if Assigned(FOnSelect) then
    JSCode(JSName+'.events ["select"].listeners=[];');
  if Assigned(Value) then
    On('select', Ajax('select', ['This', '%0.nm','RecordJS', '%1.nm','Row', '%2','Column', '%3'], true));
  FOnSelect := Value;
end;

function TExtSelectionCellModel.JSClassName : string; begin
  Result := 'Ext-selection-CellModel';
end;

{$IFDEF FPC}constructor TExtSelectionCellModel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtSelectionCellModel.GetCurrentPosition : TExtFunction; begin
  JSCode(JSName + '.getCurrentPosition();', 'TExtSelectionCellModel');
  Result := Self;
end;

function TExtSelectionCellModel.SetCurrentPosition(Position : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setCurrentPosition(' + VarToJSON([Position, false]) + ');', 'TExtSelectionCellModel');
  Result := Self;
end;

procedure TExtSelectionCellModel.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'deselect') and Assigned(FOnDeselect) then
    FOnDeselect(TExtSelectionCellModel(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), ParamAsInteger('Row'), ParamAsInteger('Column'))
  else if (AEvtName = 'select') and Assigned(FOnSelect) then
    FOnSelect(TExtSelectionCellModel(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), ParamAsInteger('Row'), ParamAsInteger('Column'));
end;

procedure TExtFormRadioGroup.SetFItems(Value : TExtObjectList); begin
  FItems := Value;
  Value.DeleteFromGarbage;
  JSCode('items:' + VarToJSON([Value, false]));
end;

procedure TExtFormRadioGroup.SetFItemsTExtObjectList(Value : TExtObjectList); begin
  FItemsTExtObjectList := Value;
  Value.DeleteFromGarbage;
  JSCode('items:' + VarToJSON([Value, false]));
end;

procedure TExtFormRadioGroup.SetFAllowBlank(Value : Boolean); begin
  FAllowBlank := Value;
  JSCode('allowBlank:' + VarToJSON([Value]));
end;

procedure TExtFormRadioGroup.SetFBlankText(Value : String); begin
  FBlankText := Value;
  JSCode('blankText:' + VarToJSON([Value]));
end;

function TExtFormRadioGroup.JSClassName : string; begin
  Result := 'Ext-form-RadioGroup';
end;

procedure TExtFormRadioGroup.InitDefaults; begin
  inherited;
  FItems := TExtObjectList.Create(Self, 'items');
  FItemsTExtObjectList := TExtObjectList.Create(Self, 'items');
end;

{$IFDEF FPC}constructor TExtFormRadioGroup.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtFormRadioGroup.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtFormRadioGroup.SetValue(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setValue(' + VarToJSON([Value, false]) + ');', 'TExtFormRadioGroup');
  Result := Self;
end;

destructor TExtFormRadioGroup.Destroy; begin
  try
    FItems.Free;
    FItemsTExtObjectList.Free;
  except end;
  inherited;
end;

function TExtViewTable.JSClassName : string; begin
  Result := 'Ext-view-Table';
end;

{$IFDEF FPC}constructor TExtViewTable.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtViewTable.GetRowClass(RecordJS : TExtDataModel; Index : Integer; RowParams : TExtObject; Store : TExtDataStore) : TExtFunction; begin
  JSCode(JSName + '.getRowClass(' + VarToJSON([RecordJS, false, Index, RowParams, false, Store, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.GetFeature(Id : String) : TExtFunction; begin
  JSCode(JSName + '.getFeature(' + VarToJSON([Id]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.GetTableChunker : TExtFunction; begin
  JSCode(JSName + '.getTableChunker();', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.addRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, false, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : String; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, false, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : String; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : String; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : String) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : String; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : Integer) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : String; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : String; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : String; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : String) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : String; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : Integer) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : String; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : String; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, false, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : String; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : String) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, false, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : String; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : Integer) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, false, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : String; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, false, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : String; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : String) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, false, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : String; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : Integer) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, false, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : String; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, false, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, false, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : String) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : Integer) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : String) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : Integer) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, false, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : String) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, false, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : Integer) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, false, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, false, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : String) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, false, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : Integer) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, false, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : Integer; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, Cls, RowInfo_, false, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, false, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : String) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : Integer) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : String) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : Integer) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, false, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : String) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, false, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : Integer) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, false, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, false, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : String) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, false, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : Integer) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, false, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : TExtDataModel; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, false, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : String) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : Integer) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : String; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : String) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : Integer) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : Integer; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, false, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : String) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, false, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : Integer) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, false, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : TExtDataModel; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, false, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : String) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, false, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : Integer) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, false, Cls_, RowIdx]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.AddRowCls(RowInfo : THTMLElement; Cls : String; RowInfo_ : THTMLElement; Cls_ : String; RowIdx : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.AddRowCls(' + VarToJSON([RowInfo, false, Cls, RowInfo_, false, Cls_, RowIdx, false]) + ');', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.SaveScrollState : TExtFunction; begin
  JSCode(JSName + '.saveScrollState();', 'TExtViewTable');
  Result := Self;
end;

function TExtViewTable.Refresh : TExtFunction; begin
  JSCode(JSName + '.refresh();', 'TExtViewTable');
  Result := Self;
end;

procedure TExtFxAnim.SetFCallback(Value : TExtFunction); begin
  FCallback := Value;
  JSCode('callback:' + VarToJSON([Value, true]));
end;

procedure TExtFxAnim.SetFScope(Value : TExtFunction); begin
  FScope := Value;
  JSCode('scope:' + VarToJSON([Value, true]));
end;

procedure TExtFxAnim.SetFDuration(Value : Integer); begin
  FDuration := Value;
  JSCode('duration:' + VarToJSON([Value]));
end;

procedure TExtFxAnim.SetFDelay(Value : Integer); begin
  FDelay := Value;
  JSCode('delay:' + VarToJSON([Value]));
end;

procedure TExtFxAnim.SetFDynamic(Value : Boolean); begin
  FDynamic := Value;
  JSCode('dynamic:' + VarToJSON([Value]));
end;

procedure TExtFxAnim.SetFEasing(Value : String); begin
  FEasing := Value;
  JSCode('easing:' + VarToJSON([Value]));
end;

procedure TExtFxAnim.SetFKeyframes(Value : TExtObject); begin
  FKeyframes := Value;
  Value.DeleteFromGarbage;
  JSCode('keyframes:' + VarToJSON([Value, false]));
end;

procedure TExtFxAnim.SetFReverse(Value : Boolean); begin
  FReverse := Value;
  JSCode('reverse:' + VarToJSON([Value]));
end;

procedure TExtFxAnim.SetFIterations(Value : Integer); begin
  FIterations := Value;
  JSCode('iterations:' + VarToJSON([Value]));
end;

procedure TExtFxAnim.SetFAlternate(Value : Boolean); begin
  FAlternate := Value;
  JSCode('alternate:' + VarToJSON([Value]));
end;

procedure TExtFxAnim.SetFTarget(Value : String); begin
  FTarget := Value;
  JSCode('target:' + VarToJSON([Value]));
end;

procedure TExtFxAnim.SetFTargetTExtObject(Value : TExtObject); begin
  FTargetTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('target:' + VarToJSON([Value, false]));
end;

procedure TExtFxAnim.SetFFrom(Value : TExtObject); begin
  FFrom := Value;
  Value.DeleteFromGarbage;
  JSCode('from:' + VarToJSON([Value, false]));
end;

procedure TExtFxAnim.SetFToJS(Value : TExtObject); begin
  FToJS := Value;
  Value.DeleteFromGarbage;
  JSCode('toJS:' + VarToJSON([Value, false]));
end;

procedure TExtFxAnim.SetFOnBeforeanimate(Value : TExtFxAnimOnBeforeanimate); begin
  if Assigned(FOnBeforeanimate) then
    JSCode(JSName+'.events ["beforeanimate"].listeners=[];');
  if Assigned(Value) then
    On('beforeanimate', Ajax('beforeanimate', ['This', '%0.nm','This_', '%1.nm','StartTime', '%2','This__', '%3.nm','StartTime_', '%4'], true));
  FOnBeforeanimate := Value;
end;

function TExtFxAnim.JSClassName : string; begin
  Result := 'Ext-fx-Anim';
end;

procedure TExtFxAnim.InitDefaults; begin
  inherited;
  FKeyframes := TExtObject.CreateInternal(Self, 'keyframes');
  FTargetTExtObject := TExtObject.CreateInternal(Self, 'target');
  FFrom := TExtObject.CreateInternal(Self, 'from');
  FToJS := TExtObject.CreateInternal(Self, 'toJS');
end;

{$IFDEF FPC}constructor TExtFxAnim.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtFxAnim.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtFxAnim.EndJS : TExtFunction; begin
  JSCode(JSName + '.end();', 'TExtFxAnim');
  Result := Self;
end;

destructor TExtFxAnim.Destroy; begin
  try
    FKeyframes.Free;
    FTargetTExtObject.Free;
    FFrom.Free;
    FToJS.Free;
  except end;
  inherited;
end;

procedure TExtFxAnim.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforeanimate') and Assigned(FOnBeforeanimate) then
    FOnBeforeanimate(TExtFxAnim(ParamAsObject('This')), TExtFxAnim(ParamAsObject('This_')), ParamAsTDateTime('StartTime'), TExtFxAnim(ParamAsObject('This__')), ParamAsTDateTime('StartTime_'));
end;

procedure TExtLoaderSingleton.SetFEnabled(Value : Boolean); begin
  FEnabled := Value;
  JSCode('enabled:' + VarToJSON([Value]));
end;

procedure TExtLoaderSingleton.SetFDisableCaching(Value : Boolean); begin
  FDisableCaching := Value;
  JSCode('disableCaching:' + VarToJSON([Value]));
end;

procedure TExtLoaderSingleton.SetFDisableCachingParam(Value : String); begin
  FDisableCachingParam := Value;
  JSCode('disableCachingParam:' + VarToJSON([Value]));
end;

procedure TExtLoaderSingleton.SetFPaths(Value : TExtObject); begin
  FPaths := Value;
  Value.DeleteFromGarbage;
  JSCode('paths:' + VarToJSON([Value, false]));
end;

procedure TExtLoaderSingleton.SetFRequires(Value : TExtObjectList); begin
  FRequires := Value;
  Value.DeleteFromGarbage;
  JSCode('requires:' + VarToJSON([Value, false]));
end;

procedure TExtLoaderSingleton.SetFUsesJS(Value : TExtObjectList); begin
  FUsesJS := Value;
  Value.DeleteFromGarbage;
  JSCode('usesJS:' + VarToJSON([Value, false]));
end;

function TExtLoaderSingleton.JSClassName : string; begin
  Result := 'Ext-LoaderSingleton';
end;

procedure TExtLoaderSingleton.InitDefaults; begin
  inherited;
  FPaths := TExtObject.CreateInternal(Self, 'paths');
  FRequires := TExtObjectList.Create(Self, 'requires');
  FUsesJS := TExtObjectList.Create(Self, 'usesJS');
end;

{$IFDEF FPC}constructor TExtLoaderSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

destructor TExtLoaderSingleton.Destroy; begin
  try
    FPaths.Free;
    FRequires.Free;
    FUsesJS.Free;
  except end;
  inherited;
end;

procedure TExtGridPanel.SetFColumnLines(Value : Boolean); begin
  FColumnLines := Value;
  JSCode('columnLines:' + VarToJSON([Value]));
end;

function TExtGridPanel.JSClassName : string; begin
  Result := 'Ext-grid-Panel';
end;

{$IFDEF FPC}constructor TExtGridPanel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilAnimate.JSClassName : string; begin
  Result := 'Ext-util-Animate';
end;

{$IFDEF FPC}constructor TExtUtilAnimate.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilAnimate.Animate(Config : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.animate(' + VarToJSON([Config, false]) + ');', 'TExtUtilAnimate');
  Result := Self;
end;

function TExtUtilAnimate.StopFx : TExtFunction; begin
  JSCode(JSName + '.stopFx();', 'TExtUtilAnimate');
  Result := Self;
end;

function TExtUtilAnimate.StopAnimation : TExtFunction; begin
  JSCode(JSName + '.stopAnimation();', 'TExtUtilAnimate');
  Result := Self;
end;

function TExtUtilAnimate.SyncFx : TExtFunction; begin
  JSCode(JSName + '.syncFx();', 'TExtUtilAnimate');
  Result := Self;
end;

function TExtUtilAnimate.SequenceFx : TExtFunction; begin
  JSCode(JSName + '.sequenceFx();', 'TExtUtilAnimate');
  Result := Self;
end;

function TExtUtilAnimate.HasActiveFx : TExtFunction; begin
  JSCode(JSName + '.hasActiveFx();', 'TExtUtilAnimate');
  Result := Self;
end;

function TExtUtilAnimate.GetActiveAnimation : TExtFunction; begin
  JSCode(JSName + '.getActiveAnimation();', 'TExtUtilAnimate');
  Result := Self;
end;

procedure TExtStateProvider.SetFPrefix(Value : String); begin
  FPrefix := Value;
  JSCode('prefix:' + VarToJSON([Value]));
end;

procedure TExtStateProvider.SetFOnStatechange(Value : TExtStateProviderOnStatechange); begin
  if Assigned(FOnStatechange) then
    JSCode(JSName+'.events ["statechange"].listeners=[];');
  if Assigned(Value) then
    On('statechange', Ajax('statechange', ['This', '%0.nm','Key', '%1','Value', '%2'], true));
  FOnStatechange := Value;
end;

function TExtStateProvider.JSClassName : string; begin
  Result := 'Ext-state-Provider';
end;

{$IFDEF FPC}constructor TExtStateProvider.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtStateProvider.Get(Name : String; DefaultValue : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.get(' + VarToJSON([Name, DefaultValue, false]) + ');', 'TExtStateProvider');
  Result := Self;
end;

function TExtStateProvider.Clear(Name : String) : TExtFunction; begin
  JSCode(JSName + '.clear(' + VarToJSON([Name]) + ');', 'TExtStateProvider');
  Result := Self;
end;

function TExtStateProvider.SetJS(Name : String; Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.set(' + VarToJSON([Name, Value, false]) + ');', 'TExtStateProvider');
  Result := Self;
end;

function TExtStateProvider.DecodeValue(Value : String) : TExtFunction; begin
  JSCode(JSName + '.decodeValue(' + VarToJSON([Value]) + ');', 'TExtStateProvider');
  Result := Self;
end;

function TExtStateProvider.EncodeValue(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.encodeValue(' + VarToJSON([Value, false]) + ');', 'TExtStateProvider');
  Result := Self;
end;

procedure TExtStateProvider.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'statechange') and Assigned(FOnStatechange) then
    FOnStatechange(TExtStateProvider(ParamAsObject('This')), ParamAsString('Key'), ParamAsString('Value'));
end;

function TExtLayoutLayout.JSClassName : string; begin
  Result := 'Ext-layout-Layout';
end;

{$IFDEF FPC}constructor TExtLayoutLayout.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtLayoutLayout.DestroyJS : TExtFunction; begin
  JSCode(JSName + '.destroy();', 'TExtLayoutLayout');
  Result := Self;
end;

function TExtFxTargetCompositeSprite.JSClassName : string; begin
  Result := 'Ext-fx-target-CompositeSprite';
end;

{$IFDEF FPC}constructor TExtFxTargetCompositeSprite.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtChartCallout.JSClassName : string; begin
  Result := 'Ext-chart-Callout';
end;

{$IFDEF FPC}constructor TExtChartCallout.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtFormFieldFile.SetFButtonText(Value : String); begin
  FButtonText := Value;
  JSCode('buttonText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldFile.SetFButtonOnly(Value : Boolean); begin
  FButtonOnly := Value;
  JSCode('buttonOnly:' + VarToJSON([Value]));
end;

procedure TExtFormFieldFile.SetFButtonMargin(Value : Integer); begin
  FButtonMargin := Value;
  JSCode('buttonMargin:' + VarToJSON([Value]));
end;

procedure TExtFormFieldFile.SetFButtonConfig(Value : TExtObject); begin
  FButtonConfig := Value;
  Value.DeleteFromGarbage;
  JSCode('buttonConfig:' + VarToJSON([Value, false]));
end;

procedure TExtFormFieldFile.SetFFieldBodyCls(Value : String); begin
  FFieldBodyCls := Value;
  JSCode('fieldBodyCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldFile.SetFReadOnly(Value : Boolean); begin
  FReadOnly := Value;
  JSCode('readOnly:' + VarToJSON([Value]));
end;

function TExtFormFieldFile.JSClassName : string; begin
  Result := 'Ext-form-field-File';
end;

procedure TExtFormFieldFile.InitDefaults; begin
  inherited;
  FButtonConfig := TExtObject.CreateInternal(Self, 'buttonConfig');
end;

{$IFDEF FPC}constructor TExtFormFieldFile.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtFormFieldFile.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

destructor TExtFormFieldFile.Destroy; begin
  try
    FButtonConfig.Free;
  except end;
  inherited;
end;

function TExtViewTableChunkerSingleton.JSClassName : string; begin
  Result := 'Ext-view-TableChunkerSingleton';
end;

{$IFDEF FPC}constructor TExtViewTableChunkerSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtGridFeatureRowBody.JSClassName : string; begin
  Result := 'Ext-grid-feature-RowBody';
end;

{$IFDEF FPC}constructor TExtGridFeatureRowBody.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtGridFeatureRowBody.GetAdditionalData(Data : TExtObject; Idx : Integer; RecordJS : TExtDataModel; Orig : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getAdditionalData(' + VarToJSON([Data, false, Idx, RecordJS, false, Orig, false]) + ');', 'TExtGridFeatureRowBody');
  Result := Self;
end;

procedure TExtDdDragZone.SetFContainerScroll(Value : Boolean); begin
  FContainerScroll := Value;
  JSCode('containerScroll:' + VarToJSON([Value]));
end;

function TExtDdDragZone.JSClassName : string; begin
  Result := 'Ext-dd-DragZone';
end;

{$IFDEF FPC}constructor TExtDdDragZone.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDdDragZone.GetDragData(E : TEvent) : TExtFunction; begin
  JSCode(JSName + '.getDragData(' + VarToJSON([E, false]) + ');', 'TExtDdDragZone');
  Result := Self;
end;

function TExtDdDragZone.OnInitDrag(X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.onInitDrag(' + VarToJSON([X, Y]) + ');', 'TExtDdDragZone');
  Result := Self;
end;

function TExtDdDragZone.AfterRepair : TExtFunction; begin
  JSCode(JSName + '.afterRepair();', 'TExtDdDragZone');
  Result := Self;
end;

function TExtDdDragZone.GetRepairXY(E : TEvent) : TExtFunction; begin
  JSCode(JSName + '.getRepairXY(' + VarToJSON([E, false]) + ');', 'TExtDdDragZone');
  Result := Self;
end;

procedure TExtFormPanel.SetFPollForChanges(Value : Boolean); begin
  FPollForChanges := Value;
  JSCode('pollForChanges:' + VarToJSON([Value]));
end;

procedure TExtFormPanel.SetFPollInterval(Value : Integer); begin
  FPollInterval := Value;
  JSCode('pollInterval:' + VarToJSON([Value]));
end;

procedure TExtFormPanel.SetFLayout(Value : String); begin
  FLayout := Value;
  JSCode('layout:' + VarToJSON([Value]));
end;

function TExtFormPanel.JSClassName : string; begin
  Result := 'Ext-form-Panel';
end;

{$IFDEF FPC}constructor TExtFormPanel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtFormPanel.GetForm : TExtFunction; begin
  JSCode(JSName + '.getForm();', 'TExtFormPanel');
  Result := Self;
end;

function TExtFormPanel.LoadRecord(RecordJS : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.loadRecord(' + VarToJSON([RecordJS, false]) + ');', 'TExtFormPanel');
  Result := Self;
end;

function TExtFormPanel.GetRecord : TExtFunction; begin
  JSCode(JSName + '.getRecord();', 'TExtFormPanel');
  Result := Self;
end;

function TExtFormPanel.GetValues : TExtFunction; begin
  JSCode(JSName + '.getValues();', 'TExtFormPanel');
  Result := Self;
end;

function TExtFormPanel.Load(Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.load(' + VarToJSON([Options, false]) + ');', 'TExtFormPanel');
  Result := Self;
end;

function TExtFormPanel.Submit(Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.submit(' + VarToJSON([Options, false]) + ');', 'TExtFormPanel');
  Result := Self;
end;

function TExtFormPanel.StartPolling(Interval : Integer) : TExtFunction; begin
  JSCode(JSName + '.startPolling(' + VarToJSON([Interval]) + ');', 'TExtFormPanel');
  Result := Self;
end;

function TExtFormPanel.StopPolling : TExtFunction; begin
  JSCode(JSName + '.stopPolling();', 'TExtFormPanel');
  Result := Self;
end;

function TExtFormPanel.CheckChange : TExtFunction; begin
  JSCode(JSName + '.checkChange();', 'TExtFormPanel');
  Result := Self;
end;

procedure TExtDataProxyAjax.SetFHeaders(Value : TExtObject); begin
  FHeaders := Value;
  Value.DeleteFromGarbage;
  JSCode('headers:' + VarToJSON([Value, false]));
end;

function TExtDataProxyAjax.JSClassName : string; begin
  Result := 'Ext-data-proxy-Ajax-method-constructor';
end;

procedure TExtDataProxyAjax.InitDefaults; begin
  inherited;
  FHeaders := TExtObject.CreateInternal(Self, 'headers');
end;

{$IFDEF FPC}constructor TExtDataProxyAjax.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataProxyAjax.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDataProxyAjax.DoRequest : TExtFunction; begin
  JSCode(JSName + '.doRequest();', 'TExtDataProxyAjax');
  Result := Self;
end;

function TExtDataProxyAjax.GetMethod(Request : TExtDataRequest) : TExtFunction; begin
  JSCode(JSName + '.getMethod(' + VarToJSON([Request, false]) + ');', 'TExtDataProxyAjax');
  Result := Self;
end;

destructor TExtDataProxyAjax.Destroy; begin
  try
    FHeaders.Free;
  except end;
  inherited;
end;

function TExtUtilSortable.JSClassName : string; begin
  Result := 'Ext-util-Sortable';
end;

{$IFDEF FPC}constructor TExtUtilSortable.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilSortable.InitSortable : TExtFunction; begin
  JSCode(JSName + '.initSortable();', 'TExtUtilSortable');
  Result := Self;
end;

function TExtUtilSortable.Sort(Sorters : String; Direction : String) : TExtFunction; begin
  JSCode(JSName + '.sort(' + VarToJSON([Sorters, Direction]) + ');', 'TExtUtilSortable');
  Result := Self;
end;

function TExtUtilSortable.Sort(Sorters : TExtObjectList; Direction : String) : TExtFunction; begin
  JSCode(JSName + '.Sort(' + VarToJSON(Sorters) + ',' + VarToJSON([Direction]) + ');', 'TExtUtilSortable');
  Result := Self;
end;

function TExtFxTargetComponent.JSClassName : string; begin
  Result := 'Ext-fx-target-Component';
end;

{$IFDEF FPC}constructor TExtFxTargetComponent.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtChartAxisGauge.SetFMinimum(Value : Integer); begin
  FMinimum := Value;
  JSCode('minimum:' + VarToJSON([Value]));
end;

procedure TExtChartAxisGauge.SetFMaximum(Value : Integer); begin
  FMaximum := Value;
  JSCode('maximum:' + VarToJSON([Value]));
end;

procedure TExtChartAxisGauge.SetFSteps(Value : Integer); begin
  FSteps := Value;
  JSCode('steps:' + VarToJSON([Value]));
end;

procedure TExtChartAxisGauge.SetFMargin(Value : Integer); begin
  FMargin := Value;
  JSCode('margin:' + VarToJSON([Value]));
end;

procedure TExtChartAxisGauge.SetFTitle(Value : String); begin
  FTitle := Value;
  if not ConfigAvailable(JSName) then
    SetTitle(Value)
  else
    JSCode('title:' + VarToJSON([Value]));
end;

function TExtChartAxisGauge.JSClassName : string; begin
  Result := 'Ext-chart-axis-Gauge';
end;

{$IFDEF FPC}constructor TExtChartAxisGauge.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtChartAxisGauge.SetTitle(Title : String) : TExtFunction; begin
  JSCode(JSName + '.setTitle(' + VarToJSON([Title]) + ');', 'TExtChartAxisGauge');
  Result := Self;
end;

procedure TExtMenuCheckItem.SetFCheckedCls(Value : String); begin
  FCheckedCls := Value;
  JSCode('checkedCls:' + VarToJSON([Value]));
end;

procedure TExtMenuCheckItem.SetFUncheckedCls(Value : String); begin
  FUncheckedCls := Value;
  JSCode('uncheckedCls:' + VarToJSON([Value]));
end;

procedure TExtMenuCheckItem.SetFGroupCls(Value : String); begin
  FGroupCls := Value;
  JSCode('groupCls:' + VarToJSON([Value]));
end;

procedure TExtMenuCheckItem.SetFHideOnClick(Value : Boolean); begin
  FHideOnClick := Value;
  JSCode('hideOnClick:' + VarToJSON([Value]));
end;

procedure TExtMenuCheckItem.SetFOnBeforecheckchange(Value : TExtMenuCheckItemOnBeforecheckchange); begin
  if Assigned(FOnBeforecheckchange) then
    JSCode(JSName+'.events ["beforecheckchange"].listeners=[];');
  if Assigned(Value) then
    On('beforecheckchange', Ajax('beforecheckchange', ['This', '%0.nm','Checked', '%1','This_', '%2.nm','Checked_', '%3'], true));
  FOnBeforecheckchange := Value;
end;

function TExtMenuCheckItem.JSClassName : string; begin
  Result := 'Ext-menu-CheckItem';
end;

{$IFDEF FPC}constructor TExtMenuCheckItem.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtMenuCheckItem.DisableCheckChange : TExtFunction; begin
  JSCode(JSName + '.disableCheckChange();', 'TExtMenuCheckItem');
  Result := Self;
end;

function TExtMenuCheckItem.EnableCheckChange : TExtFunction; begin
  JSCode(JSName + '.enableCheckChange();', 'TExtMenuCheckItem');
  Result := Self;
end;

function TExtMenuCheckItem.SetChecked(Checked : Boolean; SuppressEvents : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.setChecked(' + VarToJSON([Checked, SuppressEvents]) + ');', 'TExtMenuCheckItem');
  Result := Self;
end;

procedure TExtMenuCheckItem.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforecheckchange') and Assigned(FOnBeforecheckchange) then
    FOnBeforecheckchange(TExtMenuCheckItem(ParamAsObject('This')), ParamAsBoolean('Checked'), TExtMenuCheckItem(ParamAsObject('This_')), ParamAsBoolean('Checked_'));
end;

procedure TExtGridPluginEditing.SetFClicksToEdit(Value : Integer); begin
  FClicksToEdit := Value;
  JSCode('clicksToEdit:' + VarToJSON([Value]));
end;

function TExtGridPluginEditing.JSClassName : string; begin
  Result := 'Ext-grid-plugin-Editing';
end;

{$IFDEF FPC}constructor TExtGridPluginEditing.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtGridPluginEditing.StartEdit(RecordJS : TExtDataModel; ColumnHeader : TExtGridColumnColumn) : TExtFunction; begin
  JSCode(JSName + '.startEdit(' + VarToJSON([RecordJS, false, ColumnHeader, false]) + ');', 'TExtGridPluginEditing');
  Result := Self;
end;

function TExtGridPluginEditing.StartEdit(RecordJS : Integer; ColumnHeader : TExtGridColumnColumn) : TExtFunction; begin
  JSCode(JSName + '.StartEdit(' + VarToJSON([RecordJS, ColumnHeader, false]) + ');', 'TExtGridPluginEditing');
  Result := Self;
end;

function TExtGridPluginEditing.StartEdit(RecordJS : Integer; ColumnHeader : Integer) : TExtFunction; begin
  JSCode(JSName + '.StartEdit(' + VarToJSON([RecordJS, ColumnHeader]) + ');', 'TExtGridPluginEditing');
  Result := Self;
end;

function TExtGridPluginEditing.StartEdit(RecordJS : TExtDataModel; ColumnHeader : Integer) : TExtFunction; begin
  JSCode(JSName + '.StartEdit(' + VarToJSON([RecordJS, false, ColumnHeader]) + ');', 'TExtGridPluginEditing');
  Result := Self;
end;

function TExtGridPluginEditing.CancelEdit : TExtFunction; begin
  JSCode(JSName + '.cancelEdit();', 'TExtGridPluginEditing');
  Result := Self;
end;

function TExtGridPluginEditing.CompleteEdit : TExtFunction; begin
  JSCode(JSName + '.completeEdit();', 'TExtGridPluginEditing');
  Result := Self;
end;

function TExtArraySingleton.JSClassName : string; begin
  Result := 'Ext-ArraySingleton';
end;

{$IFDEF FPC}constructor TExtArraySingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtArraySingleton.Each(Iterable : TExtObjectList; Fn : TExtFunction; FnItem : TExtObject; FnIndex : Integer; FnAllItems : TExtObjectList; FnReturn : Boolean; Scope : TExtObject = nil; Reverse : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.each(' + VarToJSON(Iterable) + ',' + VarToJSON([Fn, true, FnItem, false, FnIndex]) + ',' + VarToJSON(FnAllItems) + ',' + VarToJSON([FnReturn, Scope, false, Reverse]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Each(Iterable : TNodeList; Fn : TExtFunction; FnItem : TExtObject; FnIndex : Integer; FnAllItems : TExtObjectList; FnReturn : Boolean; Scope : TExtObject = nil; Reverse : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Each(' + VarToJSON([Iterable, false, Fn, true, FnItem, false, FnIndex]) + ',' + VarToJSON(FnAllItems) + ',' + VarToJSON([FnReturn, Scope, false, Reverse]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Each(Iterable : TExtObject; Fn : TExtFunction; FnItem : TExtObject; FnIndex : Integer; FnAllItems : TExtObjectList; FnReturn : Boolean; Scope : TExtObject = nil; Reverse : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Each(' + VarToJSON([Iterable, false, Fn, true, FnItem, false, FnIndex]) + ',' + VarToJSON(FnAllItems) + ',' + VarToJSON([FnReturn, Scope, false, Reverse]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.ForEach(ArrayJS : TExtObjectList; Fn : TExtFunction; FnItem : TExtObject; FnIndex : Integer; Param : TExtObjectList; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.forEach(' + VarToJSON(ArrayJS) + ',' + VarToJSON([Fn, true, FnItem, false, FnIndex]) + ',' + VarToJSON(Param) + ',' + VarToJSON([Scope, false]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.IndexOf(ArrayJS : TExtObjectList; Item : TExtObject; From : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.indexOf(' + VarToJSON(ArrayJS) + ',' + VarToJSON([Item, false, From]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Contains(ArrayJS : TExtObjectList; Item : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.contains(' + VarToJSON(ArrayJS) + ',' + VarToJSON([Item, false]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.ToArray(Iterable : TExtObject; Start : Integer = 0; EndJS : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.toArray(' + VarToJSON([Iterable, false, Start, EndJS]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Pluck(ArrayJS : TExtObjectList; PropertyName : String) : TExtFunction; begin
  JSCode(JSName + '.pluck(' + VarToJSON(ArrayJS) + ',' + VarToJSON([PropertyName]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Pluck(ArrayJS : TNodeList; PropertyName : String) : TExtFunction; begin
  JSCode(JSName + '.Pluck(' + VarToJSON([ArrayJS, false, PropertyName]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Map(ArrayJS : TExtObjectList; Fn : TExtFunction; Scope : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.map(' + VarToJSON(ArrayJS) + ',' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Every(ArrayJS : TExtObjectList; Fn : TExtFunction; Scope : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.every(' + VarToJSON(ArrayJS) + ',' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Some(ArrayJS : TExtObjectList; Fn : TExtFunction; Scope : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.some(' + VarToJSON(ArrayJS) + ',' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Clean(ArrayJS : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.clean(' + VarToJSON(ArrayJS) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Unique(ArrayJS : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.unique(' + VarToJSON(ArrayJS) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Filter(ArrayJS : TExtObjectList; Fn : TExtFunction; Scope : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.filter(' + VarToJSON(ArrayJS) + ',' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.From(Value : TExtObject; NewReference : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.from(' + VarToJSON([Value, false, NewReference]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Remove(ArrayJS : TExtObjectList; Item : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.remove(' + VarToJSON(ArrayJS) + ',' + VarToJSON([Item, false]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Include(ArrayJS : TExtObjectList; Item : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.include(' + VarToJSON(ArrayJS) + ',' + VarToJSON([Item, false]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Clone(ArrayJS : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.clone(' + VarToJSON(ArrayJS) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Merge(Array1 : TExtObjectList; Array2 : TExtObjectList; Etc : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.merge(' + VarToJSON(Array1) + ',' + VarToJSON(Array2) + ',' + VarToJSON(Etc) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Intersect(Array1 : TExtObjectList; Array2 : TExtObjectList; Etc : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.intersect(' + VarToJSON(Array1) + ',' + VarToJSON(Array2) + ',' + VarToJSON(Etc) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Difference(ArrayA : TExtObjectList; ArrayB : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.difference(' + VarToJSON(ArrayA) + ',' + VarToJSON(ArrayB) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Sort(ArrayJS : TExtObjectList; SortFn : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.sort(' + VarToJSON(ArrayJS) + ',' + VarToJSON([SortFn, true]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Flatten(ArrayJS : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.flatten(' + VarToJSON(ArrayJS) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Min(ArrayJS : TExtObjectList; ComparisonFn : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.min(' + VarToJSON(ArrayJS) + ',' + VarToJSON([ComparisonFn, true]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Min(ArrayJS : TNodeList; ComparisonFn : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.Min(' + VarToJSON([ArrayJS, false, ComparisonFn, true]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Max(ArrayJS : TExtObjectList; ComparisonFn : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.max(' + VarToJSON(ArrayJS) + ',' + VarToJSON([ComparisonFn, true]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Max(ArrayJS : TNodeList; ComparisonFn : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.Max(' + VarToJSON([ArrayJS, false, ComparisonFn, true]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Mean(ArrayJS : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.mean(' + VarToJSON(ArrayJS) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Sum(ArrayJS : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.sum(' + VarToJSON(ArrayJS) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Erase(ArrayJS : TExtObjectList; Index : Integer; RemoveCount : Integer) : TExtFunction; begin
  JSCode(JSName + '.erase(' + VarToJSON(ArrayJS) + ',' + VarToJSON([Index, RemoveCount]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Insert(ArrayJS : TExtObjectList; Index : Integer; Items : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.insert(' + VarToJSON(ArrayJS) + ',' + VarToJSON([Index]) + ',' + VarToJSON(Items) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Replace(ArrayJS : TExtObjectList; Index : Integer; RemoveCount : Integer; Insert : TExtObjectList = nil) : TExtFunction; begin
  JSCode(JSName + '.replace(' + VarToJSON(ArrayJS) + ',' + VarToJSON([Index, RemoveCount]) + ',' + VarToJSON(Insert) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Splice(ArrayJS : TExtObjectList; Index : Integer; RemoveCount : Integer) : TExtFunction; begin
  JSCode(JSName + '.splice(' + VarToJSON(ArrayJS) + ',' + VarToJSON([Index, RemoveCount]) + ');', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Each_ : TExtFunction; begin
  JSCode(JSName + '.each();', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Union : TExtFunction; begin
  JSCode(JSName + '.union();', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Min_ : TExtFunction; begin
  JSCode(JSName + '.min();', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Max_ : TExtFunction; begin
  JSCode(JSName + '.max();', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Sum_ : TExtFunction; begin
  JSCode(JSName + '.sum();', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Mean_ : TExtFunction; begin
  JSCode(JSName + '.mean();', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Flatten_ : TExtFunction; begin
  JSCode(JSName + '.flatten();', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Clean_ : TExtFunction; begin
  JSCode(JSName + '.clean();', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Unique_ : TExtFunction; begin
  JSCode(JSName + '.unique();', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.Pluck_ : TExtFunction; begin
  JSCode(JSName + '.pluck();', 'TExtArraySingleton');
  Result := Self;
end;

function TExtArraySingleton.ToArray_ : TExtFunction; begin
  JSCode(JSName + '.toArray();', 'TExtArraySingleton');
  Result := Self;
end;

procedure TExtGridHeaderContainer.SetFWeight(Value : Integer); begin
  FWeight := Value;
  JSCode('weight:' + VarToJSON([Value]));
end;

procedure TExtGridHeaderContainer.SetFDefaultWidth(Value : Integer); begin
  FDefaultWidth := Value;
  JSCode('defaultWidth:' + VarToJSON([Value]));
end;

procedure TExtGridHeaderContainer.SetFSortable(Value : Boolean); begin
  FSortable := Value;
  JSCode('sortable:' + VarToJSON([Value]));
end;

procedure TExtGridHeaderContainer.SetFOnColumnresize(Value : TExtGridHeaderContainerOnColumnresize); begin
  if Assigned(FOnColumnresize) then
    JSCode(JSName+'.events ["columnresize"].listeners=[];');
  if Assigned(Value) then
    On('columnresize', Ajax('columnresize', ['Ct', '%0.nm','Column', '%1.nm','Width', '%2','Ct_', '%3.nm','Column_', '%4.nm','E', '%5.nm','T', '%6.nm','Ct__', '%7.nm','Column__', '%8.nm','E_', '%9.nm','T_', '%10.nm','Ct___', '%11.nm','Column___', '%12.nm','FromIdx', '%13','ToIdx', '%14','Ct____', '%15.nm','Column____', '%16.nm'], true));
  FOnColumnresize := Value;
end;

procedure TExtGridHeaderContainer.SetFOnColumnshow(Value : TExtGridHeaderContainerOnColumnshow); begin
  if Assigned(FOnColumnshow) then
    JSCode(JSName+'.events ["columnshow"].listeners=[];');
  if Assigned(Value) then
    On('columnshow', Ajax('columnshow', ['Ct', '%0.nm','Column', '%1.nm'], true));
  FOnColumnshow := Value;
end;

procedure TExtGridHeaderContainer.SetFOnSortchange(Value : TExtGridHeaderContainerOnSortchange); begin
  if Assigned(FOnSortchange) then
    JSCode(JSName+'.events ["sortchange"].listeners=[];');
  if Assigned(Value) then
    On('sortchange', Ajax('sortchange', ['Ct', '%0.nm','Column', '%1.nm','Direction', '%2','Ct_', '%3.nm','Menu', '%4.nm'], true));
  FOnSortchange := Value;
end;

function TExtGridHeaderContainer.JSClassName : string; begin
  Result := 'Ext-grid-header-Container';
end;

{$IFDEF FPC}constructor TExtGridHeaderContainer.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtGridHeaderContainer.GetMenuItems : TExtFunction; begin
  JSCode(JSName + '.getMenuItems();', 'TExtGridHeaderContainer');
  Result := Self;
end;

function TExtGridHeaderContainer.GetColumnMenu : TExtFunction; begin
  JSCode(JSName + '.getColumnMenu();', 'TExtGridHeaderContainer');
  Result := Self;
end;

function TExtGridHeaderContainer.GetColumnCount : TExtFunction; begin
  JSCode(JSName + '.getColumnCount();', 'TExtGridHeaderContainer');
  Result := Self;
end;

function TExtGridHeaderContainer.GetFullWidth : TExtFunction; begin
  JSCode(JSName + '.getFullWidth();', 'TExtGridHeaderContainer');
  Result := Self;
end;

function TExtGridHeaderContainer.GetVisibleGridColumns(RefreshCache : Boolean) : TExtFunction; begin
  JSCode(JSName + '.getVisibleGridColumns(' + VarToJSON([RefreshCache]) + ');', 'TExtGridHeaderContainer');
  Result := Self;
end;

function TExtGridHeaderContainer.GetGridColumns(RefreshCache : Boolean) : TExtFunction; begin
  JSCode(JSName + '.getGridColumns(' + VarToJSON([RefreshCache]) + ');', 'TExtGridHeaderContainer');
  Result := Self;
end;

function TExtGridHeaderContainer.GetHeaderIndex : TExtFunction; begin
  JSCode(JSName + '.getHeaderIndex();', 'TExtGridHeaderContainer');
  Result := Self;
end;

function TExtGridHeaderContainer.GetHeaderAtIndex : TExtFunction; begin
  JSCode(JSName + '.getHeaderAtIndex();', 'TExtGridHeaderContainer');
  Result := Self;
end;

function TExtGridHeaderContainer.PrepareData : TExtFunction; begin
  JSCode(JSName + '.prepareData();', 'TExtGridHeaderContainer');
  Result := Self;
end;

procedure TExtGridHeaderContainer.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'columnresize') and Assigned(FOnColumnresize) then
    FOnColumnresize(TExtGridHeaderContainer(ParamAsObject('Ct')), TExtGridColumnColumn(ParamAsObject('Column')), ParamAsInteger('Width'), TExtGridHeaderContainer(ParamAsObject('Ct_')), TExtGridColumnColumn(ParamAsObject('Column_')), ExtEventObject, THTMLElement(ParamAsObject('T')), TExtGridHeaderContainer(ParamAsObject('Ct__')), TExtGridColumnColumn(ParamAsObject('Column__')), ExtEventObject, THTMLElement(ParamAsObject('T_')), TExtGridHeaderContainer(ParamAsObject('Ct___')), TExtGridColumnColumn(ParamAsObject('Column___')), ParamAsInteger('FromIdx'), ParamAsInteger('ToIdx'), TExtGridHeaderContainer(ParamAsObject('Ct____')), TExtGridColumnColumn(ParamAsObject('Column____')))
  else if (AEvtName = 'columnshow') and Assigned(FOnColumnshow) then
    FOnColumnshow(TExtGridHeaderContainer(ParamAsObject('Ct')), TExtGridColumnColumn(ParamAsObject('Column')))
  else if (AEvtName = 'sortchange') and Assigned(FOnSortchange) then
    FOnSortchange(TExtGridHeaderContainer(ParamAsObject('Ct')), TExtGridColumnColumn(ParamAsObject('Column')), ParamAsString('Direction'), TExtGridHeaderContainer(ParamAsObject('Ct_')), TExtMenuMenu(ParamAsObject('Menu')));
end;

function TExtChartAxisNumeric.JSClassName : string; begin
  Result := 'Ext-chart-axis-Numeric';
end;

{$IFDEF FPC}constructor TExtChartAxisNumeric.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtLayoutContainerColumn.JSClassName : string; begin
  Result := 'Ext-layout-container-Column';
end;

{$IFDEF FPC}constructor TExtLayoutContainerColumn.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataTypesSingleton.JSClassName : string; begin
  Result := 'Ext-data-TypesSingleton';
end;

{$IFDEF FPC}constructor TExtDataTypesSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtJSONSingleton.JSClassName : string; begin
  Result := 'Ext-JSONSingleton';
end;

{$IFDEF FPC}constructor TExtJSONSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtJSONSingleton.EncodeDate(D : TDateTime) : TExtFunction; begin
  JSCode(JSName + '.encodeDate(' + VarToJSON([D]) + ');', 'TExtJSONSingleton');
  Result := Self;
end;

function TExtJSONSingleton.Encode(O : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.encode(' + VarToJSON([O, false]) + ');', 'TExtJSONSingleton');
  Result := Self;
end;

function TExtJSONSingleton.Decode(Json : String; Safe : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.decode(' + VarToJSON([Json, Safe]) + ');', 'TExtJSONSingleton');
  Result := Self;
end;

function TExtJSONSingleton.Encode_ : TExtFunction; begin
  JSCode(JSName + '.encode();', 'TExtJSONSingleton');
  Result := Self;
end;

function TExtJSONSingleton.Decode_ : TExtFunction; begin
  JSCode(JSName + '.decode();', 'TExtJSONSingleton');
  Result := Self;
end;

procedure TExtFormFieldRadio.SetFUncheckedValue(Value : String); begin
  FUncheckedValue := Value;
  JSCode('uncheckedValue:' + VarToJSON([Value]));
end;

function TExtFormFieldRadio.JSClassName : string; begin
  Result := 'Ext-form-field-Radio';
end;

{$IFDEF FPC}constructor TExtFormFieldRadio.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtFormFieldRadio.GetGroupValue : TExtFunction; begin
  JSCode(JSName + '.getGroupValue();', 'TExtFormFieldRadio');
  Result := Self;
end;

function TExtFormFieldRadio.SetValue(Value : String) : TExtFunction; begin
  JSCode(JSName + '.setValue(' + VarToJSON([Value]) + ');', 'TExtFormFieldRadio');
  Result := Self;
end;

function TExtFormFieldRadio.SetValue(Value : Boolean) : TExtFunction; begin
  JSCode(JSName + '.SetValue(' + VarToJSON([Value]) + ');', 'TExtFormFieldRadio');
  Result := Self;
end;

function TExtFormFieldRadio.GetSubmitValue : TExtFunction; begin
  JSCode(JSName + '.getSubmitValue();', 'TExtFormFieldRadio');
  Result := Self;
end;

function TExtDrawCompositeSprite.JSClassName : string; begin
  Result := 'Ext-draw-CompositeSprite';
end;

{$IFDEF FPC}constructor TExtDrawCompositeSprite.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDrawCompositeSprite.GetBBox : TExtFunction; begin
  JSCode(JSName + '.getBBox();', 'TExtDrawCompositeSprite');
  Result := Self;
end;

function TExtDrawCompositeSprite.SetAttributes(Attrs : TExtObject; Redraw : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setAttributes(' + VarToJSON([Attrs, false, Redraw]) + ');', 'TExtDrawCompositeSprite');
  Result := Self;
end;

function TExtDrawCompositeSprite.Hide(Redraw : Boolean) : TExtFunction; begin
  JSCode(JSName + '.hide(' + VarToJSON([Redraw]) + ');', 'TExtDrawCompositeSprite');
  Result := Self;
end;

function TExtDrawCompositeSprite.Show(Redraw : Boolean) : TExtFunction; begin
  JSCode(JSName + '.show(' + VarToJSON([Redraw]) + ');', 'TExtDrawCompositeSprite');
  Result := Self;
end;

function TExtDrawCompositeSprite.DestroyJS : TExtFunction; begin
  JSCode(JSName + '.destroy();', 'TExtDrawCompositeSprite');
  Result := Self;
end;

procedure TExtAction.SetFText(Value : String); begin
  FText := Value;
  if not ConfigAvailable(JSName) then
    SetText(Value)
  else
    JSCode('text:' + VarToJSON([Value]));
end;

procedure TExtAction.SetFIconCls(Value : String); begin
  FIconCls := Value;
  if not ConfigAvailable(JSName) then
    SetIconCls(Value)
  else
    JSCode('iconCls:' + VarToJSON([Value]));
end;

procedure TExtAction.SetFDisabled(Value : Boolean); begin
  FDisabled := Value;
  if not ConfigAvailable(JSName) then
    SetDisabled(Value)
  else
    JSCode('disabled:' + VarToJSON([Value]));
end;

procedure TExtAction.SetFHidden(Value : Boolean); begin
  FHidden := Value;
  if not ConfigAvailable(JSName) then
    SetHidden(Value)
  else
    JSCode('hidden:' + VarToJSON([Value]));
end;

procedure TExtAction.SetFHandler(Value : TExtFunction); begin
  FHandler := Value;
  if not ConfigAvailable(JSName) then
    SetHandler(Value, nil)
  else
    JSCode('handler:' + VarToJSON([Value, true]));
end;

procedure TExtAction.SetFItemId(Value : String); begin
  FItemId := Value;
  JSCode('itemId:' + VarToJSON([Value]));
end;

procedure TExtAction.SetFScope(Value : TExtObject); begin
  FScope := Value;
  Value.DeleteFromGarbage;
  JSCode('scope:' + VarToJSON([Value, false]));
end;

function TExtAction.JSClassName : string; begin
  Result := 'Ext-Action';
end;

procedure TExtAction.InitDefaults; begin
  inherited;
  FScope := TExtObject.CreateInternal(Self, 'scope');
end;

{$IFDEF FPC}constructor TExtAction.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtAction.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

constructor TExtAction.Create(Config : TExtObject); begin
  if Config = nil then CreateVar(JSClassName + '({});') else
  CreateVar(JSClassName + '(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

function TExtAction.SetText(Text : String) : TExtFunction; begin
  JSCode(JSName + '.setText(' + VarToJSON([Text]) + ');', 'TExtAction');
  Result := Self;
end;

function TExtAction.GetText : TExtFunction; begin
  JSCode(JSName + '.getText();', 'TExtAction');
  Result := Self;
end;

function TExtAction.SetIconCls(Cls : String) : TExtFunction; begin
  JSCode(JSName + '.setIconCls(' + VarToJSON([Cls]) + ');', 'TExtAction');
  Result := Self;
end;

function TExtAction.GetIconCls : TExtFunction; begin
  JSCode(JSName + '.getIconCls();', 'TExtAction');
  Result := Self;
end;

function TExtAction.SetDisabled(Disabled : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setDisabled(' + VarToJSON([Disabled]) + ');', 'TExtAction');
  Result := Self;
end;

function TExtAction.Enable : TExtFunction; begin
  JSCode(JSName + '.enable();', 'TExtAction');
  Result := Self;
end;

function TExtAction.Disable : TExtFunction; begin
  JSCode(JSName + '.disable();', 'TExtAction');
  Result := Self;
end;

function TExtAction.IsDisabled : TExtFunction; begin
  JSCode(JSName + '.isDisabled();', 'TExtAction');
  Result := Self;
end;

function TExtAction.SetHidden(Hidden : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setHidden(' + VarToJSON([Hidden]) + ');', 'TExtAction');
  Result := Self;
end;

function TExtAction.Show : TExtFunction; begin
  JSCode(JSName + '.show();', 'TExtAction');
  Result := Self;
end;

function TExtAction.Hide : TExtFunction; begin
  JSCode(JSName + '.hide();', 'TExtAction');
  Result := Self;
end;

function TExtAction.IsHidden : TExtFunction; begin
  JSCode(JSName + '.isHidden();', 'TExtAction');
  Result := Self;
end;

function TExtAction.SetHandler(Fn : TExtFunction; Scope : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setHandler(' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtAction');
  Result := Self;
end;

function TExtAction.Each(Fn : TExtFunction; Scope : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.each(' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtAction');
  Result := Self;
end;

function TExtAction.Execute(Args : TExtObjectList = nil) : TExtFunction; begin
  JSCode(JSName + '.execute(' + VarToJSON(Args) + ');', 'TExtAction');
  Result := Self;
end;

destructor TExtAction.Destroy; begin
  try
    FScope.Free;
  except end;
  inherited;
end;

procedure TExtDataAbstractStore.SetFProxy(Value : String); begin
  FProxy := Value;
  if not ConfigAvailable(JSName) then
    SetProxy(Value)
  else
    JSCode('proxy:' + VarToJSON([Value]));
end;

procedure TExtDataAbstractStore.SetFProxyTExtDataProxyProxy(Value : TExtDataProxyProxy); begin
  FProxyTExtDataProxyProxy := Value;
  Value.DeleteFromGarbage;
  JSCode('proxy:' + VarToJSON([Value, false]));
end;

procedure TExtDataAbstractStore.SetFProxyTExtObject(Value : TExtObject); begin
  FProxyTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('proxy:' + VarToJSON([Value, false]));
end;

procedure TExtDataAbstractStore.SetFAutoLoad(Value : Boolean); begin
  FAutoLoad := Value;
  JSCode('autoLoad:' + VarToJSON([Value]));
end;

procedure TExtDataAbstractStore.SetFAutoLoadTExtObject(Value : TExtObject); begin
  FAutoLoadTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('autoLoad:' + VarToJSON([Value, false]));
end;

procedure TExtDataAbstractStore.SetFAutoSync(Value : Boolean); begin
  FAutoSync := Value;
  JSCode('autoSync:' + VarToJSON([Value]));
end;

procedure TExtDataAbstractStore.SetFStoreId(Value : String); begin
  FStoreId := Value;
  JSCode('storeId:' + VarToJSON([Value]));
end;

procedure TExtDataAbstractStore.SetFFields(Value : TExtObjectList); begin
  FFields := Value;
  Value.DeleteFromGarbage;
  JSCode('fields:' + VarToJSON([Value, false]));
end;

procedure TExtDataAbstractStore.SetFModel(Value : String); begin
  FModel := Value;
  JSCode('model:' + VarToJSON([Value]));
end;

procedure TExtDataAbstractStore.SetFOnAdd(Value : TExtDataAbstractStoreOnAdd); begin
  if Assigned(FOnAdd) then
    JSCode(JSName+'.events ["add"].listeners=[];');
  if Assigned(Value) then
    On('add', Ajax('add', ['Store', '%0.nm','Records', '%1.nm','Index', '%2'], true));
  FOnAdd := Value;
end;

procedure TExtDataAbstractStore.SetFOnRemove(Value : TExtDataAbstractStoreOnRemove); begin
  if Assigned(FOnRemove) then
    JSCode(JSName+'.events ["remove"].listeners=[];');
  if Assigned(Value) then
    On('remove', Ajax('remove', ['Store', '%0.nm','RecordJS', '%1.nm','Index', '%2'], true));
  FOnRemove := Value;
end;

procedure TExtDataAbstractStore.SetFOnUpdate(Value : TExtDataAbstractStoreOnUpdate); begin
  if Assigned(FOnUpdate) then
    JSCode(JSName+'.events ["update"].listeners=[];');
  if Assigned(Value) then
    On('update', Ajax('update', ['This', '%0.nm','RecordJS', '%1.nm','Operation', '%2'], true));
  FOnUpdate := Value;
end;

procedure TExtDataAbstractStore.SetFOnDatachanged(Value : TExtDataAbstractStoreOnDatachanged); begin
  if Assigned(FOnDatachanged) then
    JSCode(JSName+'.events ["datachanged"].listeners=[];');
  if Assigned(Value) then
    On('datachanged', Ajax('datachanged', ['This', '%0.nm'], true));
  FOnDatachanged := Value;
end;

procedure TExtDataAbstractStore.SetFOnBeforeload(Value : TExtDataAbstractStoreOnBeforeload); begin
  if Assigned(FOnBeforeload) then
    JSCode(JSName+'.events ["beforeload"].listeners=[];');
  if Assigned(Value) then
    On('beforeload', Ajax('beforeload', ['Store', '%0.nm','Operation', '%1.nm'], true));
  FOnBeforeload := Value;
end;

procedure TExtDataAbstractStore.SetFOnLoad(Value : TExtDataAbstractStoreOnLoad); begin
  if Assigned(FOnLoad) then
    JSCode(JSName+'.events ["load"].listeners=[];');
  if Assigned(Value) then
    On('load', Ajax('load', ['This', '%0.nm','Records', '%1.nm','Successful', '%2'], true));
  FOnLoad := Value;
end;

procedure TExtDataAbstractStore.SetFOnWrite(Value : TExtDataAbstractStoreOnWrite); begin
  if Assigned(FOnWrite) then
    JSCode(JSName+'.events ["write"].listeners=[];');
  if Assigned(Value) then
    On('write', Ajax('write', ['Store', '%0.nm','Operation', '%1.nm'], true));
  FOnWrite := Value;
end;

procedure TExtDataAbstractStore.SetFOnBeforesync(Value : TExtDataAbstractStoreOnBeforesync); begin
  if Assigned(FOnBeforesync) then
    JSCode(JSName+'.events ["beforesync"].listeners=[];');
  if Assigned(Value) then
    On('beforesync', Ajax('beforesync', ['Options', '%0.nm'], true));
  FOnBeforesync := Value;
end;

procedure TExtDataAbstractStore.SetFOnClear(Value : TExtDataAbstractStoreOnClear); begin
  if Assigned(FOnClear) then
    JSCode(JSName+'.events ["clear"].listeners=[];');
  if Assigned(Value) then
    On('clear', Ajax('clear', ['This', '%0.nm'], true));
  FOnClear := Value;
end;

function TExtDataAbstractStore.JSClassName : string; begin
  Result := 'Ext-data-AbstractStore';
end;

procedure TExtDataAbstractStore.InitDefaults; begin
  inherited;
  FProxyTExtDataProxyProxy := TExtDataProxyProxy.CreateInternal(Self, 'proxy');
  FProxyTExtObject := TExtObject.CreateInternal(Self, 'proxy');
  FAutoLoadTExtObject := TExtObject.CreateInternal(Self, 'autoLoad');
  FFields := TExtObjectList.Create(Self, 'fields');
end;

{$IFDEF FPC}constructor TExtDataAbstractStore.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataAbstractStore.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDataAbstractStore.SetProxy(Proxy : String) : TExtFunction; begin
  JSCode(JSName + '.setProxy(' + VarToJSON([Proxy]) + ');', 'TExtDataAbstractStore');
  Result := Self;
end;

function TExtDataAbstractStore.SetProxy(Proxy : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetProxy(' + VarToJSON([Proxy, false]) + ');', 'TExtDataAbstractStore');
  Result := Self;
end;

function TExtDataAbstractStore.SetProxy(Proxy : TExtDataProxyProxy) : TExtFunction; begin
  JSCode(JSName + '.SetProxy(' + VarToJSON([Proxy, false]) + ');', 'TExtDataAbstractStore');
  Result := Self;
end;

function TExtDataAbstractStore.GetProxy : TExtFunction; begin
  JSCode(JSName + '.getProxy();', 'TExtDataAbstractStore');
  Result := Self;
end;

function TExtDataAbstractStore.GetNewRecords : TExtFunction; begin
  JSCode(JSName + '.getNewRecords();', 'TExtDataAbstractStore');
  Result := Self;
end;

function TExtDataAbstractStore.GetUpdatedRecords : TExtFunction; begin
  JSCode(JSName + '.getUpdatedRecords();', 'TExtDataAbstractStore');
  Result := Self;
end;

function TExtDataAbstractStore.GetRemovedRecords : TExtFunction; begin
  JSCode(JSName + '.getRemovedRecords();', 'TExtDataAbstractStore');
  Result := Self;
end;

function TExtDataAbstractStore.Sync : TExtFunction; begin
  JSCode(JSName + '.sync();', 'TExtDataAbstractStore');
  Result := Self;
end;

function TExtDataAbstractStore.Load(Options : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.load(' + VarToJSON([Options, false]) + ');', 'TExtDataAbstractStore');
  Result := Self;
end;

function TExtDataAbstractStore.RemoveAll : TExtFunction; begin
  JSCode(JSName + '.removeAll();', 'TExtDataAbstractStore');
  Result := Self;
end;

function TExtDataAbstractStore.IsLoading : TExtFunction; begin
  JSCode(JSName + '.isLoading();', 'TExtDataAbstractStore');
  Result := Self;
end;

destructor TExtDataAbstractStore.Destroy; begin
  try
    FProxyTExtDataProxyProxy.Free;
    FProxyTExtObject.Free;
    FAutoLoadTExtObject.Free;
    FFields.Free;
  except end;
  inherited;
end;

procedure TExtDataAbstractStore.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'add') and Assigned(FOnAdd) then
    FOnAdd(TExtDataStore(ParamAsObject('Store')), TExtObjectList(ParamAsObject('Records')), ParamAsInteger('Index'))
  else if (AEvtName = 'remove') and Assigned(FOnRemove) then
    FOnRemove(TExtDataStore(ParamAsObject('Store')), TExtDataModel(ParamAsObject('RecordJS')), ParamAsInteger('Index'))
  else if (AEvtName = 'update') and Assigned(FOnUpdate) then
    FOnUpdate(TExtDataAbstractStore(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), ParamAsString('Operation'))
  else if (AEvtName = 'datachanged') and Assigned(FOnDatachanged) then
    FOnDatachanged(TExtDataAbstractStore(ParamAsObject('This')))
  else if (AEvtName = 'beforeload') and Assigned(FOnBeforeload) then
    FOnBeforeload(TExtDataStore(ParamAsObject('Store')), TExtDataOperation(ParamAsObject('Operation')))
  else if (AEvtName = 'load') and Assigned(FOnLoad) then
    FOnLoad(TExtDataAbstractStore(ParamAsObject('This')), TExtObjectList(ParamAsObject('Records')), ParamAsBoolean('Successful'))
  else if (AEvtName = 'write') and Assigned(FOnWrite) then
    FOnWrite(TExtDataStore(ParamAsObject('Store')), TExtDataOperation(ParamAsObject('Operation')))
  else if (AEvtName = 'beforesync') and Assigned(FOnBeforesync) then
    FOnBeforesync(TExtObject(ParamAsObject('Options')))
  else if (AEvtName = 'clear') and Assigned(FOnClear) then
    FOnClear(TExtDataAbstractStore(ParamAsObject('This')));
end;

procedure TExtTabTab.SetFActiveCls(Value : String); begin
  FActiveCls := Value;
  JSCode('activeCls:' + VarToJSON([Value]));
end;

procedure TExtTabTab.SetFDisabledCls(Value : String); begin
  FDisabledCls := Value;
  JSCode('disabledCls:' + VarToJSON([Value]));
end;

procedure TExtTabTab.SetFClosableCls(Value : String); begin
  FClosableCls := Value;
  JSCode('closableCls:' + VarToJSON([Value]));
end;

procedure TExtTabTab.SetFClosable(Value : Boolean); begin
  FClosable := Value;
  if not ConfigAvailable(JSName) then
    SetClosable(Value)
  else
    JSCode('closable:' + VarToJSON([Value]));
end;

procedure TExtTabTab.SetFCloseText(Value : String); begin
  FCloseText := Value;
  JSCode('closeText:' + VarToJSON([Value]));
end;

procedure TExtTabTab.SetFOnActivate(Value : TExtTabTabOnActivate); begin
  if Assigned(FOnActivate) then
    JSCode(JSName+'.events ["activate"].listeners=[];');
  if Assigned(Value) then
    On('activate', Ajax('activate', ['This', '%0.nm','This_', '%1.nm','Tab', '%2.nm'], true));
  FOnActivate := Value;
end;

procedure TExtTabTab.SetFOnClose(Value : TExtTabTabOnClose); begin
  if Assigned(FOnClose) then
    JSCode(JSName+'.events ["close"].listeners=[];');
  if Assigned(Value) then
    On('close', Ajax('close', ['Tab', '%0.nm'], true));
  FOnClose := Value;
end;

function TExtTabTab.JSClassName : string; begin
  Result := 'Ext-tab-Tab';
end;

{$IFDEF FPC}constructor TExtTabTab.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtTabTab.OnRender : TExtFunction; begin
  JSCode(JSName + '.onRender();', 'TExtTabTab');
  Result := Self;
end;

function TExtTabTab.OnDestroy : TExtFunction; begin
  JSCode(JSName + '.onDestroy();', 'TExtTabTab');
  Result := Self;
end;

function TExtTabTab.SetClosable(Closable : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setClosable(' + VarToJSON([Closable]) + ');', 'TExtTabTab');
  Result := Self;
end;

function TExtTabTab.SetCard(Card : TExtComponent) : TExtFunction; begin
  JSCode(JSName + '.setCard(' + VarToJSON([Card, false]) + ');', 'TExtTabTab');
  Result := Self;
end;

procedure TExtTabTab.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'activate') and Assigned(FOnActivate) then
    FOnActivate(TExtTabTab(ParamAsObject('This')), TExtTabTab(ParamAsObject('This_')), TExtTabTab(ParamAsObject('Tab')))
  else if (AEvtName = 'close') and Assigned(FOnClose) then
    FOnClose(TExtTabTab(ParamAsObject('Tab')));
end;

function TExtContainerContainer.JSClassName : string; begin
  Result := 'Ext-container-Container';
end;

{$IFDEF FPC}constructor TExtContainerContainer.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtContainerContainer.GetChildByElement(El : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.getChildByElement(' + VarToJSON([El, false]) + ');', 'TExtContainerContainer');
  Result := Self;
end;

function TExtContainerContainer.GetChildByElement(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.GetChildByElement(' + VarToJSON([El, false]) + ');', 'TExtContainerContainer');
  Result := Self;
end;

function TExtContainerContainer.GetChildByElement(El : String) : TExtFunction; begin
  JSCode(JSName + '.GetChildByElement(' + VarToJSON([El]) + ');', 'TExtContainerContainer');
  Result := Self;
end;

procedure TExtToolbarTextItem.SetFText(Value : String); begin
  FText := Value;
  if not ConfigAvailable(JSName) then
    SetText(Value)
  else
    JSCode('text:' + VarToJSON([Value]));
end;

function TExtToolbarTextItem.JSClassName : string; begin
  Result := 'Ext-toolbar-TextItem-method-constructor';
end;

{$IFDEF FPC}constructor TExtToolbarTextItem.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtToolbarTextItem.SetText(T : String) : TExtFunction; begin
  JSCode(JSName + '.setText(' + VarToJSON([T]) + ');', 'TExtToolbarTextItem');
  Result := Self;
end;

procedure TExtAjaxSingleton.SetFUrl(Value : String); begin
  FUrl := Value;
  JSCode('url:' + VarToJSON([Value]));
end;

procedure TExtAjaxSingleton.SetFExtraParams(Value : TExtObject); begin
  FExtraParams := Value;
  Value.DeleteFromGarbage;
  JSCode('extraParams:' + VarToJSON([Value, false]));
end;

procedure TExtAjaxSingleton.SetFDefaultHeaders(Value : TExtObject); begin
  FDefaultHeaders := Value;
  Value.DeleteFromGarbage;
  JSCode('defaultHeaders:' + VarToJSON([Value, false]));
end;

procedure TExtAjaxSingleton.SetFMethod(Value : String); begin
  FMethod := Value;
  JSCode('method:' + VarToJSON([Value]));
end;

procedure TExtAjaxSingleton.SetFTimeout(Value : Integer); begin
  FTimeout := Value;
  JSCode('timeout:' + VarToJSON([Value]));
end;

procedure TExtAjaxSingleton.SetFAutoAbort(Value : Boolean); begin
  FAutoAbort := Value;
  JSCode('autoAbort:' + VarToJSON([Value]));
end;

procedure TExtAjaxSingleton.SetFDisableCaching(Value : Boolean); begin
  FDisableCaching := Value;
  JSCode('disableCaching:' + VarToJSON([Value]));
end;

function TExtAjaxSingleton.JSClassName : string; begin
  Result := 'Ext-AjaxSingleton';
end;

procedure TExtAjaxSingleton.InitDefaults; begin
  inherited;
  FExtraParams := TExtObject.CreateInternal(Self, 'extraParams');
  FDefaultHeaders := TExtObject.CreateInternal(Self, 'defaultHeaders');
end;

{$IFDEF FPC}constructor TExtAjaxSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

destructor TExtAjaxSingleton.Destroy; begin
  try
    FExtraParams.Free;
    FDefaultHeaders.Free;
  except end;
  inherited;
end;

procedure TExtFormLabelable.SetFLabelableRenderTpl(Value : String); begin
  FLabelableRenderTpl := Value;
  JSCode('labelableRenderTpl:' + VarToJSON([Value]));
end;

procedure TExtFormLabelable.SetFLabelableRenderTplTExtObjectList(Value : TExtObjectList); begin
  FLabelableRenderTplTExtObjectList := Value;
  Value.DeleteFromGarbage;
  JSCode('labelableRenderTpl:' + VarToJSON([Value, false]));
end;

procedure TExtFormLabelable.SetFLabelableRenderTplTExtXTemplate(Value : TExtXTemplate); begin
  FLabelableRenderTplTExtXTemplate := Value;
  Value.DeleteFromGarbage;
  JSCode('labelableRenderTpl:' + VarToJSON([Value, false]));
end;

procedure TExtFormLabelable.SetFActiveErrorsTpl(Value : TExtXTemplate); begin
  FActiveErrorsTpl := Value;
  Value.DeleteFromGarbage;
  JSCode('activeErrorsTpl:' + VarToJSON([Value, false]));
end;

procedure TExtFormLabelable.SetFFormItemCls(Value : String); begin
  FFormItemCls := Value;
  JSCode('formItemCls:' + VarToJSON([Value]));
end;

procedure TExtFormLabelable.SetFLabelCls(Value : String); begin
  FLabelCls := Value;
  JSCode('labelCls:' + VarToJSON([Value]));
end;

procedure TExtFormLabelable.SetFLabelClsExtra(Value : String); begin
  FLabelClsExtra := Value;
  JSCode('labelClsExtra:' + VarToJSON([Value]));
end;

procedure TExtFormLabelable.SetFErrorMsgCls(Value : String); begin
  FErrorMsgCls := Value;
  JSCode('errorMsgCls:' + VarToJSON([Value]));
end;

procedure TExtFormLabelable.SetFBaseBodyCls(Value : String); begin
  FBaseBodyCls := Value;
  JSCode('baseBodyCls:' + VarToJSON([Value]));
end;

procedure TExtFormLabelable.SetFFieldBodyCls(Value : String); begin
  FFieldBodyCls := Value;
  JSCode('fieldBodyCls:' + VarToJSON([Value]));
end;

procedure TExtFormLabelable.SetFClearCls(Value : String); begin
  FClearCls := Value;
  JSCode('clearCls:' + VarToJSON([Value]));
end;

procedure TExtFormLabelable.SetFInvalidCls(Value : String); begin
  FInvalidCls := Value;
  JSCode('invalidCls:' + VarToJSON([Value]));
end;

procedure TExtFormLabelable.SetFFieldLabel(Value : String); begin
  FFieldLabel := Value;
  JSCode('fieldLabel:' + VarToJSON([Value]));
end;

procedure TExtFormLabelable.SetFLabelAlign(Value : String); begin
  FLabelAlign := Value;
  JSCode('labelAlign:' + VarToJSON([Value]));
end;

procedure TExtFormLabelable.SetFLabelWidth(Value : Integer); begin
  FLabelWidth := Value;
  JSCode('labelWidth:' + VarToJSON([Value]));
end;

procedure TExtFormLabelable.SetFLabelPad(Value : Integer); begin
  FLabelPad := Value;
  JSCode('labelPad:' + VarToJSON([Value]));
end;

procedure TExtFormLabelable.SetFLabelSeparator(Value : String); begin
  FLabelSeparator := Value;
  JSCode('labelSeparator:' + VarToJSON([Value]));
end;

procedure TExtFormLabelable.SetFLabelStyle(Value : String); begin
  FLabelStyle := Value;
  JSCode('labelStyle:' + VarToJSON([Value]));
end;

procedure TExtFormLabelable.SetFHideLabel(Value : Boolean); begin
  FHideLabel := Value;
  JSCode('hideLabel:' + VarToJSON([Value]));
end;

procedure TExtFormLabelable.SetFHideEmptyLabel(Value : Boolean); begin
  FHideEmptyLabel := Value;
  JSCode('hideEmptyLabel:' + VarToJSON([Value]));
end;

procedure TExtFormLabelable.SetFPreventMark(Value : Boolean); begin
  FPreventMark := Value;
  JSCode('preventMark:' + VarToJSON([Value]));
end;

procedure TExtFormLabelable.SetFAutoFitErrors(Value : Boolean); begin
  FAutoFitErrors := Value;
  JSCode('autoFitErrors:' + VarToJSON([Value]));
end;

procedure TExtFormLabelable.SetFMsgTarget(Value : String); begin
  FMsgTarget := Value;
  JSCode('msgTarget:' + VarToJSON([Value]));
end;

procedure TExtFormLabelable.SetFActiveError(Value : String); begin
  FActiveError := Value;
  if not ConfigAvailable(JSName) then
    SetActiveError(Value)
  else
    JSCode('activeError:' + VarToJSON([Value]));
end;

procedure TExtFormLabelable.SetFOnErrorchange(Value : TExtFormLabelableOnErrorchange); begin
  if Assigned(FOnErrorchange) then
    JSCode(JSName+'.events ["errorchange"].listeners=[];');
  if Assigned(Value) then
    On('errorchange', Ajax('errorchange', ['This', '%0.nm','Error', '%1'], true));
  FOnErrorchange := Value;
end;

function TExtFormLabelable.JSClassName : string; begin
  Result := 'Ext-form-Labelable';
end;

procedure TExtFormLabelable.InitDefaults; begin
  inherited;
  FLabelableRenderTplTExtObjectList := TExtObjectList.Create(Self, 'labelableRenderTpl');
  FLabelableRenderTplTExtXTemplate := TExtXTemplate.CreateInternal(Self, 'labelableRenderTpl');
  FActiveErrorsTpl := TExtXTemplate.CreateInternal(Self, 'activeErrorsTpl');
end;

{$IFDEF FPC}constructor TExtFormLabelable.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtFormLabelable.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtFormLabelable.GetFieldLabel : TExtFunction; begin
  JSCode(JSName + '.getFieldLabel();', 'TExtFormLabelable');
  Result := Self;
end;

function TExtFormLabelable.GetInputId : TExtFunction; begin
  JSCode(JSName + '.getInputId();', 'TExtFormLabelable');
  Result := Self;
end;

function TExtFormLabelable.GetActiveError : TExtFunction; begin
  JSCode(JSName + '.getActiveError();', 'TExtFormLabelable');
  Result := Self;
end;

function TExtFormLabelable.HasActiveError : TExtFunction; begin
  JSCode(JSName + '.hasActiveError();', 'TExtFormLabelable');
  Result := Self;
end;

function TExtFormLabelable.SetActiveError(Msg : String) : TExtFunction; begin
  JSCode(JSName + '.setActiveError(' + VarToJSON([Msg]) + ');', 'TExtFormLabelable');
  Result := Self;
end;

function TExtFormLabelable.GetActiveErrors : TExtFunction; begin
  JSCode(JSName + '.getActiveErrors();', 'TExtFormLabelable');
  Result := Self;
end;

function TExtFormLabelable.SetActiveErrors(Errors : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.setActiveErrors(' + VarToJSON(Errors) + ');', 'TExtFormLabelable');
  Result := Self;
end;

function TExtFormLabelable.UnsetActiveError : TExtFunction; begin
  JSCode(JSName + '.unsetActiveError();', 'TExtFormLabelable');
  Result := Self;
end;

function TExtFormLabelable.SetFieldDefaults(Defaults : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setFieldDefaults(' + VarToJSON([Defaults, false]) + ');', 'TExtFormLabelable');
  Result := Self;
end;

destructor TExtFormLabelable.Destroy; begin
  try
    FLabelableRenderTplTExtObjectList.Free;
    FLabelableRenderTplTExtXTemplate.Free;
    FActiveErrorsTpl.Free;
  except end;
  inherited;
end;

procedure TExtFormLabelable.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'errorchange') and Assigned(FOnErrorchange) then
    FOnErrorchange(TExtFormLabelable(ParamAsObject('This')), ParamAsString('Error'));
end;

procedure TExtLayoutContainerVBox.SetFAlign(Value : String); begin
  FAlign := Value;
  JSCode('align:' + VarToJSON([Value]));
end;

function TExtLayoutContainerVBox.JSClassName : string; begin
  Result := 'Ext-layout-container-VBox';
end;

{$IFDEF FPC}constructor TExtLayoutContainerVBox.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilCSSSingleton.JSClassName : string; begin
  Result := 'Ext-util-CSSSingleton';
end;

{$IFDEF FPC}constructor TExtUtilCSSSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilCSSSingleton.CreateStyleSheet(CssText : String; Id : String) : TExtFunction; begin
  JSCode(JSName + '.createStyleSheet(' + VarToJSON([CssText, Id]) + ');', 'TExtUtilCSSSingleton');
  Result := Self;
end;

function TExtUtilCSSSingleton.RemoveStyleSheet(Id : String) : TExtFunction; begin
  JSCode(JSName + '.removeStyleSheet(' + VarToJSON([Id]) + ');', 'TExtUtilCSSSingleton');
  Result := Self;
end;

function TExtUtilCSSSingleton.SwapStyleSheet(Id : String; Url : String) : TExtFunction; begin
  JSCode(JSName + '.swapStyleSheet(' + VarToJSON([Id, Url]) + ');', 'TExtUtilCSSSingleton');
  Result := Self;
end;

function TExtUtilCSSSingleton.RefreshCache : TExtFunction; begin
  JSCode(JSName + '.refreshCache();', 'TExtUtilCSSSingleton');
  Result := Self;
end;

function TExtUtilCSSSingleton.GetRules(RefreshCache : Boolean) : TExtFunction; begin
  JSCode(JSName + '.getRules(' + VarToJSON([RefreshCache]) + ');', 'TExtUtilCSSSingleton');
  Result := Self;
end;

function TExtUtilCSSSingleton.GetRule(Selector : String; RefreshCache : Boolean) : TExtFunction; begin
  JSCode(JSName + '.getRule(' + VarToJSON([Selector, RefreshCache]) + ');', 'TExtUtilCSSSingleton');
  Result := Self;
end;

function TExtUtilCSSSingleton.GetRule(Selector : TExtObjectList; RefreshCache : Boolean) : TExtFunction; begin
  JSCode(JSName + '.GetRule(' + VarToJSON(Selector) + ',' + VarToJSON([RefreshCache]) + ');', 'TExtUtilCSSSingleton');
  Result := Self;
end;

function TExtUtilCSSSingleton.UpdateRule(Selector : String; PropertyJS : String; Value : String) : TExtFunction; begin
  JSCode(JSName + '.updateRule(' + VarToJSON([Selector, PropertyJS, Value]) + ');', 'TExtUtilCSSSingleton');
  Result := Self;
end;

function TExtUtilCSSSingleton.UpdateRule(Selector : TExtObjectList; PropertyJS : String; Value : String) : TExtFunction; begin
  JSCode(JSName + '.UpdateRule(' + VarToJSON(Selector) + ',' + VarToJSON([PropertyJS, Value]) + ');', 'TExtUtilCSSSingleton');
  Result := Self;
end;

procedure TExtTipToolTip.SetFTarget(Value : THTMLElement); begin
  FTarget := Value;
  Value.DeleteFromGarbage;
  JSCode('target:' + VarToJSON([Value, false]));
end;

procedure TExtTipToolTip.SetFTargetTExtElement(Value : TExtElement); begin
  FTargetTExtElement := Value;
  Value.DeleteFromGarbage;
  JSCode('target:' + VarToJSON([Value, false]));
end;

procedure TExtTipToolTip.SetFTargetString(Value : String); begin
  FTargetString := Value;
  JSCode('target:' + VarToJSON([Value]));
end;

procedure TExtTipToolTip.SetFAutoHide(Value : Boolean); begin
  FAutoHide := Value;
  JSCode('autoHide:' + VarToJSON([Value]));
end;

procedure TExtTipToolTip.SetFShowDelay(Value : Integer); begin
  FShowDelay := Value;
  JSCode('showDelay:' + VarToJSON([Value]));
end;

procedure TExtTipToolTip.SetFHideDelay(Value : Integer); begin
  FHideDelay := Value;
  JSCode('hideDelay:' + VarToJSON([Value]));
end;

procedure TExtTipToolTip.SetFDismissDelay(Value : Integer); begin
  FDismissDelay := Value;
  JSCode('dismissDelay:' + VarToJSON([Value]));
end;

procedure TExtTipToolTip.SetFMouseOffset(Value : TArrayOfInteger); begin
  FMouseOffset := Value;
  JSCode('mouseOffset:' + ArrayToJSON(Value));
end;

procedure TExtTipToolTip.SetFTrackMouse(Value : Boolean); begin
  FTrackMouse := Value;
  JSCode('trackMouse:' + VarToJSON([Value]));
end;

procedure TExtTipToolTip.SetFAnchor(Value : String); begin
  FAnchor := Value;
  JSCode('anchor:' + VarToJSON([Value]));
end;

procedure TExtTipToolTip.SetFAnchorToTarget(Value : Boolean); begin
  FAnchorToTarget := Value;
  JSCode('anchorToTarget:' + VarToJSON([Value]));
end;

procedure TExtTipToolTip.SetFAnchorOffset(Value : Integer); begin
  FAnchorOffset := Value;
  JSCode('anchorOffset:' + VarToJSON([Value]));
end;

procedure TExtTipToolTip.SetFDelegate(Value : String); begin
  FDelegate := Value;
  JSCode('delegate:' + VarToJSON([Value]));
end;

function TExtTipToolTip.JSClassName : string; begin
  Result := 'Ext-tip-ToolTip';
end;

procedure TExtTipToolTip.InitDefaults; begin
  inherited;
  FTargetTExtElement := TExtElement.CreateInternal(Self, 'target');
end;

{$IFDEF FPC}constructor TExtTipToolTip.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtTipToolTip.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtTipToolTip.SetTarget(T : String) : TExtFunction; begin
  JSCode(JSName + '.setTarget(' + VarToJSON([T]) + ');', 'TExtTipToolTip');
  Result := Self;
end;

function TExtTipToolTip.SetTarget(T : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.SetTarget(' + VarToJSON([T, false]) + ');', 'TExtTipToolTip');
  Result := Self;
end;

function TExtTipToolTip.SetTarget(T : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.SetTarget(' + VarToJSON([T, false]) + ');', 'TExtTipToolTip');
  Result := Self;
end;

function TExtTipToolTip.Hide : TExtFunction; begin
  JSCode(JSName + '.hide();', 'TExtTipToolTip');
  Result := Self;
end;

function TExtTipToolTip.Show : TExtFunction; begin
  JSCode(JSName + '.show();', 'TExtTipToolTip');
  Result := Self;
end;

destructor TExtTipToolTip.Destroy; begin
  try
    FTargetTExtElement.Free;
  except end;
  inherited;
end;

procedure TExtDataModel.SetFIdgen(Value : String); begin
  FIdgen := Value;
  JSCode('idgen:' + VarToJSON([Value]));
end;

procedure TExtDataModel.SetFIdgenTExtObject(Value : TExtObject); begin
  FIdgenTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('idgen:' + VarToJSON([Value, false]));
end;

procedure TExtDataModel.SetFPersistenceProperty(Value : String); begin
  FPersistenceProperty := Value;
  JSCode('persistenceProperty:' + VarToJSON([Value]));
end;

procedure TExtDataModel.SetFIdProperty(Value : String); begin
  FIdProperty := Value;
  JSCode('idProperty:' + VarToJSON([Value]));
end;

procedure TExtDataModel.SetFDefaultProxyType(Value : String); begin
  FDefaultProxyType := Value;
  JSCode('defaultProxyType:' + VarToJSON([Value]));
end;

procedure TExtDataModel.SetFFields(Value : TExtObjectList); begin
  FFields := Value;
  Value.DeleteFromGarbage;
  JSCode('fields:' + VarToJSON([Value, false]));
end;

procedure TExtDataModel.SetFFieldsTExtObjectList(Value : TExtObjectList); begin
  FFieldsTExtObjectList := Value;
  Value.DeleteFromGarbage;
  JSCode('fields:' + VarToJSON([Value, false]));
end;

procedure TExtDataModel.SetFValidations(Value : TExtObjectList); begin
  FValidations := Value;
  Value.DeleteFromGarbage;
  JSCode('validations:' + VarToJSON([Value, false]));
end;

procedure TExtDataModel.SetFAssociations(Value : TExtObjectList); begin
  FAssociations := Value;
  Value.DeleteFromGarbage;
  JSCode('associations:' + VarToJSON([Value, false]));
end;

procedure TExtDataModel.SetFHasMany(Value : String); begin
  FHasMany := Value;
  JSCode('hasMany:' + VarToJSON([Value]));
end;

procedure TExtDataModel.SetFHasManyTExtObject(Value : TExtObject); begin
  FHasManyTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('hasMany:' + VarToJSON([Value, false]));
end;

procedure TExtDataModel.SetFHasManyTExtObjectList(Value : TExtObjectList); begin
  FHasManyTExtObjectList := Value;
  Value.DeleteFromGarbage;
  JSCode('hasMany:' + VarToJSON([Value, false]));
end;

procedure TExtDataModel.SetFBelongsTo(Value : String); begin
  FBelongsTo := Value;
  JSCode('belongsTo:' + VarToJSON([Value]));
end;

procedure TExtDataModel.SetFBelongsToTExtObject(Value : TExtObject); begin
  FBelongsToTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('belongsTo:' + VarToJSON([Value, false]));
end;

procedure TExtDataModel.SetFBelongsToTExtObjectList(Value : TExtObjectList); begin
  FBelongsToTExtObjectList := Value;
  Value.DeleteFromGarbage;
  JSCode('belongsTo:' + VarToJSON([Value, false]));
end;

procedure TExtDataModel.SetFProxy(Value : String); begin
  FProxy := Value;
  if not ConfigAvailable(JSName) then
    SetProxy(Value)
  else
    JSCode('proxy:' + VarToJSON([Value]));
end;

procedure TExtDataModel.SetFProxyTExtObject(Value : TExtObject); begin
  FProxyTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('proxy:' + VarToJSON([Value, false]));
end;

procedure TExtDataModel.SetFProxyTExtDataProxyProxy(Value : TExtDataProxyProxy); begin
  FProxyTExtDataProxyProxy := Value;
  Value.DeleteFromGarbage;
  JSCode('proxy:' + VarToJSON([Value, false]));
end;

function TExtDataModel.JSClassName : string; begin
  Result := 'Ext-data-Model-method-constructor';
end;

procedure TExtDataModel.InitDefaults; begin
  inherited;
  FIdgenTExtObject := TExtObject.CreateInternal(Self, 'idgen');
  FFields := TExtObjectList.Create(Self, 'fields');
  FFieldsTExtObjectList := TExtObjectList.Create(Self, 'fields');
  FValidations := TExtObjectList.Create(Self, 'validations');
  FAssociations := TExtObjectList.Create(Self, 'associations');
  FHasManyTExtObject := TExtObject.CreateInternal(Self, 'hasMany');
  FHasManyTExtObjectList := TExtObjectList.Create(Self, 'hasMany');
  FBelongsToTExtObject := TExtObject.CreateInternal(Self, 'belongsTo');
  FBelongsToTExtObjectList := TExtObjectList.Create(Self, 'belongsTo');
  FProxyTExtObject := TExtObject.CreateInternal(Self, 'proxy');
  FProxyTExtDataProxyProxy := TExtDataProxyProxy.CreateInternal(Self, 'proxy');
end;

{$IFDEF FPC}constructor TExtDataModel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataModel.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDataModel.Get(FieldName : String) : TExtFunction; begin
  JSCode(JSName + '.get(' + VarToJSON([FieldName]) + ');', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.SetJS(FieldName : String; Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.set(' + VarToJSON([FieldName, Value, false]) + ');', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.SetJS(FieldName : TExtObject; Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetJS(' + VarToJSON([FieldName, false, Value, false]) + ');', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.BeginEdit : TExtFunction; begin
  JSCode(JSName + '.beginEdit();', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.CancelEdit : TExtFunction; begin
  JSCode(JSName + '.cancelEdit();', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.EndEdit(Silent : Boolean) : TExtFunction; begin
  JSCode(JSName + '.endEdit(' + VarToJSON([Silent]) + ');', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.GetChanges : TExtFunction; begin
  JSCode(JSName + '.getChanges();', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.IsModified(FieldName : String) : TExtFunction; begin
  JSCode(JSName + '.isModified(' + VarToJSON([FieldName]) + ');', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.SetDirty : TExtFunction; begin
  JSCode(JSName + '.setDirty();', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.Reject(Silent : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.reject(' + VarToJSON([Silent]) + ');', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.Commit(Silent : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.commit(' + VarToJSON([Silent]) + ');', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.Copy(Id : String = '') : TExtFunction; begin
  JSCode(JSName + '.copy(' + VarToJSON([Id]) + ');', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.SetProxy(Proxy : String) : TExtFunction; begin
  JSCode(JSName + '.setProxy(' + VarToJSON([Proxy]) + ');', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.SetProxy(Proxy : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetProxy(' + VarToJSON([Proxy, false]) + ');', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.SetProxy(Proxy : TExtDataProxyProxy) : TExtFunction; begin
  JSCode(JSName + '.SetProxy(' + VarToJSON([Proxy, false]) + ');', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.GetProxy : TExtFunction; begin
  JSCode(JSName + '.getProxy();', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.Validate : TExtFunction; begin
  JSCode(JSName + '.validate();', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.IsValid : TExtFunction; begin
  JSCode(JSName + '.isValid();', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.Save(Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.save(' + VarToJSON([Options, false]) + ');', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.DestroyJS(Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.destroy(' + VarToJSON([Options, false]) + ');', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.GetId : TExtFunction; begin
  JSCode(JSName + '.getId();', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.SetId(Id : Integer) : TExtFunction; begin
  JSCode(JSName + '.setId(' + VarToJSON([Id]) + ');', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.Join(Store : TExtDataStore) : TExtFunction; begin
  JSCode(JSName + '.join(' + VarToJSON([Store, false]) + ');', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.Unjoin(Store : TExtDataStore) : TExtFunction; begin
  JSCode(JSName + '.unjoin(' + VarToJSON([Store, false]) + ');', 'TExtDataModel');
  Result := Self;
end;

function TExtDataModel.GetAssociatedData : TExtFunction; begin
  JSCode(JSName + '.getAssociatedData();', 'TExtDataModel');
  Result := Self;
end;

destructor TExtDataModel.Destroy; begin
  try
    FIdgenTExtObject.Free;
    FFields.Free;
    FFieldsTExtObjectList.Free;
    FValidations.Free;
    FAssociations.Free;
    FHasManyTExtObject.Free;
    FHasManyTExtObjectList.Free;
    FBelongsToTExtObject.Free;
    FBelongsToTExtObjectList.Free;
    FProxyTExtObject.Free;
    FProxyTExtDataProxyProxy.Free;
  except end;
  inherited;
end;

function TExtChartLegendItem.JSClassName : string; begin
  Result := 'Ext-chart-LegendItem';
end;

{$IFDEF FPC}constructor TExtChartLegendItem.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtChartLegendItem.CreateLegend : TExtFunction; begin
  JSCode(JSName + '.createLegend();', 'TExtChartLegendItem');
  Result := Self;
end;

function TExtChartLegendItem.UpdatePosition(RelativeTo : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.updatePosition(' + VarToJSON([RelativeTo, false]) + ');', 'TExtChartLegendItem');
  Result := Self;
end;

procedure TExtDataUuidGenerator.SetFVersion(Value : Integer); begin
  FVersion := Value;
  JSCode('version:' + VarToJSON([Value]));
end;

function TExtDataUuidGenerator.JSClassName : string; begin
  Result := 'Ext-data-UuidGenerator';
end;

{$IFDEF FPC}constructor TExtDataUuidGenerator.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataUuidGenerator.Reconfigure : TExtFunction; begin
  JSCode(JSName + '.reconfigure();', 'TExtDataUuidGenerator');
  Result := Self;
end;

procedure TExtDrawSprite.SetFTypeJS(Value : String); begin
  FTypeJS := Value;
  JSCode('typeJS:' + VarToJSON([Value]));
end;

procedure TExtDrawSprite.SetFWidth(Value : Integer); begin
  FWidth := Value;
  JSCode('width:' + VarToJSON([Value]));
end;

procedure TExtDrawSprite.SetFHeight(Value : Integer); begin
  FHeight := Value;
  JSCode('height:' + VarToJSON([Value]));
end;

procedure TExtDrawSprite.SetFSize(Value : Integer); begin
  FSize := Value;
  JSCode('size:' + VarToJSON([Value]));
end;

procedure TExtDrawSprite.SetFRadius(Value : Integer); begin
  FRadius := Value;
  JSCode('radius:' + VarToJSON([Value]));
end;

procedure TExtDrawSprite.SetFX(Value : Integer); begin
  FX := Value;
  JSCode('x:' + VarToJSON([Value]));
end;

procedure TExtDrawSprite.SetFY(Value : Integer); begin
  FY := Value;
  JSCode('y:' + VarToJSON([Value]));
end;

procedure TExtDrawSprite.SetFPath(Value : TExtObjectList); begin
  FPath := Value;
  Value.DeleteFromGarbage;
  JSCode('path:' + VarToJSON([Value, false]));
end;

procedure TExtDrawSprite.SetFOpacity(Value : Integer); begin
  FOpacity := Value;
  JSCode('opacity:' + VarToJSON([Value]));
end;

procedure TExtDrawSprite.SetFFill(Value : String); begin
  FFill := Value;
  JSCode('fill:' + VarToJSON([Value]));
end;

procedure TExtDrawSprite.SetFStroke(Value : String); begin
  FStroke := Value;
  JSCode('stroke:' + VarToJSON([Value]));
end;

procedure TExtDrawSprite.SetFStrokeWidth(Value : Integer); begin
  FStrokeWidth := Value;
  JSCode('strokeWidth:' + VarToJSON([Value]));
end;

procedure TExtDrawSprite.SetFFont(Value : String); begin
  FFont := Value;
  JSCode('font:' + VarToJSON([Value]));
end;

procedure TExtDrawSprite.SetFText(Value : String); begin
  FText := Value;
  JSCode('text:' + VarToJSON([Value]));
end;

procedure TExtDrawSprite.SetFGroup(Value : String); begin
  FGroup := Value;
  JSCode('group:' + VarToJSON([Value]));
end;

procedure TExtDrawSprite.SetFGroupTExtObjectList(Value : TExtObjectList); begin
  FGroupTExtObjectList := Value;
  Value.DeleteFromGarbage;
  JSCode('group:' + VarToJSON([Value, false]));
end;

procedure TExtDrawSprite.SetFDraggable(Value : Boolean); begin
  FDraggable := Value;
  JSCode('draggable:' + VarToJSON([Value]));
end;

function TExtDrawSprite.JSClassName : string; begin
  Result := 'Ext-draw-Sprite';
end;

procedure TExtDrawSprite.InitDefaults; begin
  inherited;
  FPath := TExtObjectList.Create(Self, 'path');
  FGroupTExtObjectList := TExtObjectList.Create(Self, 'group');
end;

{$IFDEF FPC}constructor TExtDrawSprite.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDrawSprite.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDrawSprite.SetAttributes(Attrs : TExtObject; Redraw : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setAttributes(' + VarToJSON([Attrs, false, Redraw]) + ');', 'TExtDrawSprite');
  Result := Self;
end;

function TExtDrawSprite.GetBBox : TExtFunction; begin
  JSCode(JSName + '.getBBox();', 'TExtDrawSprite');
  Result := Self;
end;

function TExtDrawSprite.Hide(Redraw : Boolean) : TExtFunction; begin
  JSCode(JSName + '.hide(' + VarToJSON([Redraw]) + ');', 'TExtDrawSprite');
  Result := Self;
end;

function TExtDrawSprite.Show(Redraw : Boolean) : TExtFunction; begin
  JSCode(JSName + '.show(' + VarToJSON([Redraw]) + ');', 'TExtDrawSprite');
  Result := Self;
end;

function TExtDrawSprite.Remove : TExtFunction; begin
  JSCode(JSName + '.remove();', 'TExtDrawSprite');
  Result := Self;
end;

function TExtDrawSprite.DestroyJS : TExtFunction; begin
  JSCode(JSName + '.destroy();', 'TExtDrawSprite');
  Result := Self;
end;

function TExtDrawSprite.Redraw : TExtFunction; begin
  JSCode(JSName + '.redraw();', 'TExtDrawSprite');
  Result := Self;
end;

function TExtDrawSprite.SetStyle(PropertyJS : String; Value : String = '') : TExtFunction; begin
  JSCode(JSName + '.setStyle(' + VarToJSON([PropertyJS, Value]) + ');', 'TExtDrawSprite');
  Result := Self;
end;

function TExtDrawSprite.SetStyle(PropertyJS : TExtObject; Value : String = '') : TExtFunction; begin
  JSCode(JSName + '.SetStyle(' + VarToJSON([PropertyJS, false, Value]) + ');', 'TExtDrawSprite');
  Result := Self;
end;

function TExtDrawSprite.AddCls(ClassName : String) : TExtFunction; begin
  JSCode(JSName + '.addCls(' + VarToJSON([ClassName]) + ');', 'TExtDrawSprite');
  Result := Self;
end;

function TExtDrawSprite.AddCls(ClassName : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.AddCls(' + VarToJSON(ClassName) + ');', 'TExtDrawSprite');
  Result := Self;
end;

function TExtDrawSprite.RemoveCls(ClassName : String) : TExtFunction; begin
  JSCode(JSName + '.removeCls(' + VarToJSON([ClassName]) + ');', 'TExtDrawSprite');
  Result := Self;
end;

function TExtDrawSprite.RemoveCls(ClassName : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.RemoveCls(' + VarToJSON(ClassName) + ');', 'TExtDrawSprite');
  Result := Self;
end;

destructor TExtDrawSprite.Destroy; begin
  try
    FPath.Free;
    FGroupTExtObjectList.Free;
  except end;
  inherited;
end;

function TExtToolbarSpacer.JSClassName : string; begin
  Result := 'Ext-toolbar-Spacer';
end;

{$IFDEF FPC}constructor TExtToolbarSpacer.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtChartTip.JSClassName : string; begin
  Result := 'Ext-chart-Tip';
end;

{$IFDEF FPC}constructor TExtChartTip.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataReaderArray.JSClassName : string; begin
  Result := 'Ext-data-reader-Array-method-constructor';
end;

{$IFDEF FPC}constructor TExtDataReaderArray.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtAbstractPlugin.JSClassName : string; begin
  Result := 'Ext-AbstractPlugin';
end;

{$IFDEF FPC}constructor TExtAbstractPlugin.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtAbstractPlugin.Init(Client : TExtComponent) : TExtFunction; begin
  JSCode(JSName + '.init(' + VarToJSON([Client, false]) + ');', 'TExtAbstractPlugin');
  Result := Self;
end;

function TExtAbstractPlugin.DestroyJS : TExtFunction; begin
  JSCode(JSName + '.destroy();', 'TExtAbstractPlugin');
  Result := Self;
end;

function TExtAbstractPlugin.Enable : TExtFunction; begin
  JSCode(JSName + '.enable();', 'TExtAbstractPlugin');
  Result := Self;
end;

function TExtAbstractPlugin.Disable : TExtFunction; begin
  JSCode(JSName + '.disable();', 'TExtAbstractPlugin');
  Result := Self;
end;

function TExtFxTargetTarget.JSClassName : string; begin
  Result := 'Ext-fx-target-Target';
end;

{$IFDEF FPC}constructor TExtFxTargetTarget.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtFxTargetTarget.Create(Target : TExtComponent); begin
  CreateVar(JSClassName + '(' + VarToJSON([Target, false]) + ');');
  InitDefaults;
end;

constructor TExtFxTargetTarget.Create(Target : TExtElement); begin
  CreateVar(JSClassName + '(' + VarToJSON([Target, false]) + ');');
  InitDefaults;
end;

constructor TExtFxTargetTarget.Create(Target : TExtDrawSprite); begin
  CreateVar(JSClassName + '(' + VarToJSON([Target, false]) + ');');
  InitDefaults;
end;

function TExtNumberSingleton.JSClassName : string; begin
  Result := 'Ext-NumberSingleton';
end;

{$IFDEF FPC}constructor TExtNumberSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtNumberSingleton.Constrain(Number : Integer; Min : Integer; Max : Integer) : TExtFunction; begin
  JSCode(JSName + '.constrain(' + VarToJSON([Number, Min, Max]) + ');', 'TExtNumberSingleton');
  Result := Self;
end;

function TExtNumberSingleton.Snap(Value : Integer; Increment : Integer; MinValue : Integer; MaxValue : Integer) : TExtFunction; begin
  JSCode(JSName + '.snap(' + VarToJSON([Value, Increment, MinValue, MaxValue]) + ');', 'TExtNumberSingleton');
  Result := Self;
end;

function TExtNumberSingleton.ToFixed(Value : Integer; Precision : Integer) : TExtFunction; begin
  JSCode(JSName + '.toFixed(' + VarToJSON([Value, Precision]) + ');', 'TExtNumberSingleton');
  Result := Self;
end;

function TExtNumberSingleton.From(Value : TExtObject; DefaultValue : Integer) : TExtFunction; begin
  JSCode(JSName + '.from(' + VarToJSON([Value, false, DefaultValue]) + ');', 'TExtNumberSingleton');
  Result := Self;
end;

function TExtNumberSingleton.Num : TExtFunction; begin
  JSCode(JSName + '.num();', 'TExtNumberSingleton');
  Result := Self;
end;

function TExtComponentQuery.JSClassName : string; begin
  Result := 'Ext-ComponentQuery';
end;

{$IFDEF FPC}constructor TExtComponentQuery.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtComponentQuery.Query(Selector : String; Root : TExtContainerContainer) : TExtFunction; begin
  JSCode(JSName + '.query(' + VarToJSON([Selector, Root, false]) + ');', 'TExtComponentQuery');
  Result := Self;
end;

function TExtComponentQuery.IsJS(Component : TExtComponent; Selector : String) : TExtFunction; begin
  JSCode(JSName + '.is(' + VarToJSON([Component, false, Selector]) + ');', 'TExtComponentQuery');
  Result := Self;
end;

function TExtStateLocalStorageProvider.JSClassName : string; begin
  Result := 'Ext-state-LocalStorageProvider';
end;

{$IFDEF FPC}constructor TExtStateLocalStorageProvider.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtDataStoreManager.SetFListeners(Value : TExtObject); begin
  FListeners := Value;
  Value.DeleteFromGarbage;
  JSCode('listeners:' + VarToJSON([Value, false]));
end;

function TExtDataStoreManager.JSClassName : string; begin
  Result := 'Ext-data-StoreManager';
end;

procedure TExtDataStoreManager.InitDefaults; begin
  inherited;
  FListeners := TExtObject.CreateInternal(Self, 'listeners');
end;

{$IFDEF FPC}constructor TExtDataStoreManager.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataStoreManager.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDataStoreManager.Register(Stores : TExtDataStore) : TExtFunction; begin
  JSCode(JSName + '.register(' + VarToJSON([Stores, false]) + ');', 'TExtDataStoreManager');
  Result := Self;
end;

function TExtDataStoreManager.Unregister(Stores : String) : TExtFunction; begin
  JSCode(JSName + '.unregister(' + VarToJSON([Stores]) + ');', 'TExtDataStoreManager');
  Result := Self;
end;

function TExtDataStoreManager.Unregister(Stores : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.Unregister(' + VarToJSON(Stores) + ');', 'TExtDataStoreManager');
  Result := Self;
end;

function TExtDataStoreManager.Lookup(Store : String) : TExtFunction; begin
  JSCode(JSName + '.lookup(' + VarToJSON([Store]) + ');', 'TExtDataStoreManager');
  Result := Self;
end;

function TExtDataStoreManager.Lookup(Store : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.Lookup(' + VarToJSON([Store, false]) + ');', 'TExtDataStoreManager');
  Result := Self;
end;

function TExtDataStoreManager.RegStore(Id : String; Config : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.regStore(' + VarToJSON([Id, Config, false]) + ');', 'TExtDataStoreManager');
  Result := Self;
end;

function TExtDataStoreManager.GetStore : TExtFunction; begin
  JSCode(JSName + '.getStore();', 'TExtDataStoreManager');
  Result := Self;
end;

destructor TExtDataStoreManager.Destroy; begin
  try
    FListeners.Free;
  except end;
  inherited;
end;

procedure TExtPanelHeader.SetFTitle(Value : String); begin
  FTitle := Value;
  if not ConfigAvailable(JSName) then
    SetTitle(Value)
  else
    JSCode('title:' + VarToJSON([Value]));
end;

procedure TExtPanelHeader.SetFIconCls(Value : String); begin
  FIconCls := Value;
  if not ConfigAvailable(JSName) then
    SetIconCls(Value)
  else
    JSCode('iconCls:' + VarToJSON([Value]));
end;

function TExtPanelHeader.JSClassName : string; begin
  Result := 'Ext-panel-Header';
end;

{$IFDEF FPC}constructor TExtPanelHeader.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtPanelHeader.SetTitle(Title : String) : TExtFunction; begin
  JSCode(JSName + '.setTitle(' + VarToJSON([Title]) + ');', 'TExtPanelHeader');
  Result := Self;
end;

function TExtPanelHeader.SetIconCls(Cls : String) : TExtFunction; begin
  JSCode(JSName + '.setIconCls(' + VarToJSON([Cls]) + ');', 'TExtPanelHeader');
  Result := Self;
end;

function TExtPanelHeader.AddTool(Tool : TExtObject; Param : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.addTool(' + VarToJSON([Tool, false]) + ',' + VarToJSON(Param) + ');', 'TExtPanelHeader');
  Result := Self;
end;

function TExtBase.JSClassName : string; begin
  Result := 'Ext-Base';
end;

{$IFDEF FPC}constructor TExtBase.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

class function TExtBase.AddStatics(Members : TExtObject) : TExtFunction; begin
  JSCode(JSClassName + '.addStatics(' + VarToJSON([Members, false]) + ');', 'TExtBase');
  Result := Self;
end;

class function TExtBase.Implement(Members : TExtObject) : TExtFunction; begin
  JSCode(JSClassName + '.implement(' + VarToJSON([Members, false]) + ');', 'TExtBase');
  Result := Self;
end;

class function TExtBase.Borrow(FromClass : TExtBase; Members : String) : TExtFunction; begin
  JSCode(JSClassName + '.borrow(' + VarToJSON([FromClass, false, Members]) + ');', 'TExtBase');
  Result := Self;
end;

function TExtBase.Borrow(FromClass : TExtBase; Members : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.Borrow(' + VarToJSON([FromClass, false]) + ',' + VarToJSON(Members) + ');', 'TExtBase');
  Result := Self;
end;

class function TExtBase.Override(Members : TExtObject) : TExtFunction; begin
  JSCode(JSClassName + '.override(' + VarToJSON([Members, false]) + ');', 'TExtBase');
  Result := Self;
end;

class function TExtBase.GetName : TExtFunction; begin
  JSCode(JSClassName + '.getName();', 'TExtBase');
  Result := Self;
end;

class function TExtBase.CreateAlias(Alias : String; Origin : String) : TExtFunction; begin
  JSCode(JSClassName + '.createAlias(' + VarToJSON([Alias, Origin]) + ');', 'TExtBase');
  Result := Self;
end;

function TExtBase.CreateAlias(Alias : TExtObject; Origin : String) : TExtFunction; begin
  JSCode(JSName + '.CreateAlias(' + VarToJSON([Alias, false, Origin]) + ');', 'TExtBase');
  Result := Self;
end;

function TExtBase.CreateAlias(Alias : TExtObject; Origin : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.CreateAlias(' + VarToJSON([Alias, false, Origin, false]) + ');', 'TExtBase');
  Result := Self;
end;

function TExtBase.CreateAlias(Alias : String; Origin : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.CreateAlias(' + VarToJSON([Alias, Origin, false]) + ');', 'TExtBase');
  Result := Self;
end;

procedure TExtFormFieldComboBox.SetFTriggerCls(Value : String); begin
  FTriggerCls := Value;
  JSCode('triggerCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldComboBox.SetFStore(Value : TExtDataStore); begin
  FStore := Value;
  Value.DeleteFromGarbage;
  JSCode('store:' + VarToJSON([Value, false]));
end;

procedure TExtFormFieldComboBox.SetFStoreTExtObjectList(Value : TExtObjectList); begin
  FStoreTExtObjectList := Value;
  Value.DeleteFromGarbage;
  JSCode('store:' + VarToJSON([Value, false]));
end;

procedure TExtFormFieldComboBox.SetFMultiSelect(Value : Boolean); begin
  FMultiSelect := Value;
  JSCode('multiSelect:' + VarToJSON([Value]));
end;

procedure TExtFormFieldComboBox.SetFDelimiter(Value : String); begin
  FDelimiter := Value;
  JSCode('delimiter:' + VarToJSON([Value]));
end;

procedure TExtFormFieldComboBox.SetFDisplayField(Value : String); begin
  FDisplayField := Value;
  JSCode('displayField:' + VarToJSON([Value]));
end;

procedure TExtFormFieldComboBox.SetFValueField(Value : String); begin
  FValueField := Value;
  JSCode('valueField:' + VarToJSON([Value]));
end;

procedure TExtFormFieldComboBox.SetFTriggerAction(Value : String); begin
  FTriggerAction := Value;
  JSCode('triggerAction:' + VarToJSON([Value]));
end;

procedure TExtFormFieldComboBox.SetFAllQuery(Value : String); begin
  FAllQuery := Value;
  JSCode('allQuery:' + VarToJSON([Value]));
end;

procedure TExtFormFieldComboBox.SetFQueryParam(Value : String); begin
  FQueryParam := Value;
  JSCode('queryParam:' + VarToJSON([Value]));
end;

procedure TExtFormFieldComboBox.SetFQueryMode(Value : String); begin
  FQueryMode := Value;
  JSCode('queryMode:' + VarToJSON([Value]));
end;

procedure TExtFormFieldComboBox.SetFPageSize(Value : Integer); begin
  FPageSize := Value;
  JSCode('pageSize:' + VarToJSON([Value]));
end;

procedure TExtFormFieldComboBox.SetFQueryDelay(Value : Integer); begin
  FQueryDelay := Value;
  JSCode('queryDelay:' + VarToJSON([Value]));
end;

procedure TExtFormFieldComboBox.SetFMinChars(Value : Integer); begin
  FMinChars := Value;
  JSCode('minChars:' + VarToJSON([Value]));
end;

procedure TExtFormFieldComboBox.SetFAutoSelect(Value : Boolean); begin
  FAutoSelect := Value;
  JSCode('autoSelect:' + VarToJSON([Value]));
end;

procedure TExtFormFieldComboBox.SetFTypeAhead(Value : Boolean); begin
  FTypeAhead := Value;
  JSCode('typeAhead:' + VarToJSON([Value]));
end;

procedure TExtFormFieldComboBox.SetFTypeAheadDelay(Value : Integer); begin
  FTypeAheadDelay := Value;
  JSCode('typeAheadDelay:' + VarToJSON([Value]));
end;

procedure TExtFormFieldComboBox.SetFSelectOnTab(Value : Boolean); begin
  FSelectOnTab := Value;
  JSCode('selectOnTab:' + VarToJSON([Value]));
end;

procedure TExtFormFieldComboBox.SetFForceSelection(Value : Boolean); begin
  FForceSelection := Value;
  JSCode('forceSelection:' + VarToJSON([Value]));
end;

procedure TExtFormFieldComboBox.SetFValueNotFoundText(Value : String); begin
  FValueNotFoundText := Value;
  JSCode('valueNotFoundText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldComboBox.SetFDefaultListConfig(Value : TExtObject); begin
  FDefaultListConfig := Value;
  Value.DeleteFromGarbage;
  JSCode('defaultListConfig:' + VarToJSON([Value, false]));
end;

procedure TExtFormFieldComboBox.SetFTransform(Value : String); begin
  FTransform := Value;
  JSCode('transform:' + VarToJSON([Value]));
end;

procedure TExtFormFieldComboBox.SetFTransformTHTMLElement(Value : THTMLElement); begin
  FTransformTHTMLElement := Value;
  Value.DeleteFromGarbage;
  JSCode('transform:' + VarToJSON([Value, false]));
end;

procedure TExtFormFieldComboBox.SetFTransformTExtElement(Value : TExtElement); begin
  FTransformTExtElement := Value;
  Value.DeleteFromGarbage;
  JSCode('transform:' + VarToJSON([Value, false]));
end;

procedure TExtFormFieldComboBox.SetFListConfig(Value : TExtObject); begin
  FListConfig := Value;
  Value.DeleteFromGarbage;
  JSCode('listConfig:' + VarToJSON([Value, false]));
end;

procedure TExtFormFieldComboBox.SetFOnBeforequery(Value : TExtFormFieldComboBoxOnBeforequery); begin
  if Assigned(FOnBeforequery) then
    JSCode(JSName+'.events ["beforequery"].listeners=[];');
  if Assigned(Value) then
    On('beforequery', Ajax('beforequery', ['QueryEvent', '%0.nm'], true));
  FOnBeforequery := Value;
end;

procedure TExtFormFieldComboBox.SetFOnSelect(Value : TExtFormFieldComboBoxOnSelect); begin
  if Assigned(FOnSelect) then
    JSCode(JSName+'.events ["select"].listeners=[];');
  if Assigned(Value) then
    On('select', Ajax('select', ['Combo', '%0.nm','Records', '%1.nm'], true));
  FOnSelect := Value;
end;

procedure TExtFormFieldComboBox.SetFOnBeforeselect(Value : TExtFormFieldComboBoxOnBeforeselect); begin
  if Assigned(FOnBeforeselect) then
    JSCode(JSName+'.events ["beforeselect"].listeners=[];');
  if Assigned(Value) then
    On('beforeselect', Ajax('beforeselect', ['Combo', '%0.nm','RecordJS', '%1.nm','Index', '%2'], true));
  FOnBeforeselect := Value;
end;

procedure TExtFormFieldComboBox.SetFOnBeforedeselect(Value : TExtFormFieldComboBoxOnBeforedeselect); begin
  if Assigned(FOnBeforedeselect) then
    JSCode(JSName+'.events ["beforedeselect"].listeners=[];');
  if Assigned(Value) then
    On('beforedeselect', Ajax('beforedeselect', ['Combo', '%0.nm','RecordJS', '%1.nm','Index', '%2'], true));
  FOnBeforedeselect := Value;
end;

function TExtFormFieldComboBox.JSClassName : string; begin
  Result := 'Ext-form-field-ComboBox';
end;

procedure TExtFormFieldComboBox.InitDefaults; begin
  inherited;
  FStore := TExtDataStore.CreateInternal(Self, 'store');
  FStoreTExtObjectList := TExtObjectList.Create(Self, 'store');
  FDefaultListConfig := TExtObject.CreateInternal(Self, 'defaultListConfig');
  FTransformTExtElement := TExtElement.CreateInternal(Self, 'transform');
  FListConfig := TExtObject.CreateInternal(Self, 'listConfig');
end;

{$IFDEF FPC}constructor TExtFormFieldComboBox.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtFormFieldComboBox.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtFormFieldComboBox.GetStore : TExtFunction; begin
  JSCode(JSName + '.getStore();', 'TExtFormFieldComboBox');
  Result := Self;
end;

function TExtFormFieldComboBox.DoQuery(QueryString : String; ForceAll : Boolean = false; RawQuery : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.doQuery(' + VarToJSON([QueryString, ForceAll, RawQuery]) + ');', 'TExtFormFieldComboBox');
  Result := Self;
end;

function TExtFormFieldComboBox.Select(R : TExtObject; Field : String; Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.select(' + VarToJSON([R, false, Field, Value, false]) + ');', 'TExtFormFieldComboBox');
  Result := Self;
end;

function TExtFormFieldComboBox.FindRecordByValue(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.findRecordByValue(' + VarToJSON([Value, false]) + ');', 'TExtFormFieldComboBox');
  Result := Self;
end;

function TExtFormFieldComboBox.FindRecordByDisplay(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.findRecordByDisplay(' + VarToJSON([Value, false]) + ');', 'TExtFormFieldComboBox');
  Result := Self;
end;

function TExtFormFieldComboBox.SetValue(Value : String) : TExtFunction; begin
  JSCode(JSName + '.setValue(' + VarToJSON([Value]) + ');', 'TExtFormFieldComboBox');
  Result := Self;
end;

function TExtFormFieldComboBox.SetValue(Value : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.SetValue(' + VarToJSON(Value) + ');', 'TExtFormFieldComboBox');
  Result := Self;
end;

function TExtFormFieldComboBox.ClearValue : TExtFunction; begin
  JSCode(JSName + '.clearValue();', 'TExtFormFieldComboBox');
  Result := Self;
end;

destructor TExtFormFieldComboBox.Destroy; begin
  try
    FStore.Free;
    FStoreTExtObjectList.Free;
    FDefaultListConfig.Free;
    FTransformTExtElement.Free;
    FListConfig.Free;
  except end;
  inherited;
end;

procedure TExtFormFieldComboBox.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforequery') and Assigned(FOnBeforequery) then
    FOnBeforequery(TExtObject(ParamAsObject('QueryEvent')))
  else if (AEvtName = 'select') and Assigned(FOnSelect) then
    FOnSelect(TExtFormFieldComboBox(ParamAsObject('Combo')), TExtObjectList(ParamAsObject('Records')))
  else if (AEvtName = 'beforeselect') and Assigned(FOnBeforeselect) then
    FOnBeforeselect(TExtFormFieldComboBox(ParamAsObject('Combo')), TExtDataRecord(ParamAsObject('RecordJS')), ParamAsInteger('Index'))
  else if (AEvtName = 'beforedeselect') and Assigned(FOnBeforedeselect) then
    FOnBeforedeselect(TExtFormFieldComboBox(ParamAsObject('Combo')), TExtDataRecord(ParamAsObject('RecordJS')), ParamAsInteger('Index'));
end;

procedure TExtFormFieldAncestor.SetFFieldDefaults(Value : TExtObject); begin
  FFieldDefaults := Value;
  Value.DeleteFromGarbage;
  JSCode('fieldDefaults:' + VarToJSON([Value, false]));
end;

procedure TExtFormFieldAncestor.SetFOnFieldvaliditychange(Value : TExtFormFieldAncestorOnFieldvaliditychange); begin
  if Assigned(FOnFieldvaliditychange) then
    JSCode(JSName+'.events ["fieldvaliditychange"].listeners=[];');
  if Assigned(Value) then
    On('fieldvaliditychange', Ajax('fieldvaliditychange', ['This', '%0.nm','The', '%1.nm','IsValid', '%2'], true));
  FOnFieldvaliditychange := Value;
end;

procedure TExtFormFieldAncestor.SetFOnFielderrorchange(Value : TExtFormFieldAncestorOnFielderrorchange); begin
  if Assigned(FOnFielderrorchange) then
    JSCode(JSName+'.events ["fielderrorchange"].listeners=[];');
  if Assigned(Value) then
    On('fielderrorchange', Ajax('fielderrorchange', ['This', '%0.nm','The', '%1.nm','Error', '%2'], true));
  FOnFielderrorchange := Value;
end;

function TExtFormFieldAncestor.JSClassName : string; begin
  Result := 'Ext-form-FieldAncestor';
end;

procedure TExtFormFieldAncestor.InitDefaults; begin
  inherited;
  FFieldDefaults := TExtObject.CreateInternal(Self, 'fieldDefaults');
end;

{$IFDEF FPC}constructor TExtFormFieldAncestor.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtFormFieldAncestor.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

destructor TExtFormFieldAncestor.Destroy; begin
  try
    FFieldDefaults.Free;
  except end;
  inherited;
end;

procedure TExtFormFieldAncestor.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'fieldvaliditychange') and Assigned(FOnFieldvaliditychange) then
    FOnFieldvaliditychange(TExtFormFieldAncestor(ParamAsObject('This')), TExtFormLabelable(ParamAsObject('The')), ParamAsString('IsValid'))
  else if (AEvtName = 'fielderrorchange') and Assigned(FOnFielderrorchange) then
    FOnFielderrorchange(TExtFormFieldAncestor(ParamAsObject('This')), TExtFormLabelable(ParamAsObject('The')), ParamAsString('Error'));
end;

procedure TExtUtilFilter.SetFPropertyJS(Value : String); begin
  FPropertyJS := Value;
  JSCode('propertyJS:' + VarToJSON([Value]));
end;

procedure TExtUtilFilter.SetFFilterFn(Value : TExtFunction); begin
  FFilterFn := Value;
  JSCode('filterFn:' + VarToJSON([Value, true]));
end;

procedure TExtUtilFilter.SetFAnyMatch(Value : Boolean); begin
  FAnyMatch := Value;
  JSCode('anyMatch:' + VarToJSON([Value]));
end;

procedure TExtUtilFilter.SetFExactMatch(Value : Boolean); begin
  FExactMatch := Value;
  JSCode('exactMatch:' + VarToJSON([Value]));
end;

procedure TExtUtilFilter.SetFCaseSensitive(Value : Boolean); begin
  FCaseSensitive := Value;
  JSCode('caseSensitive:' + VarToJSON([Value]));
end;

procedure TExtUtilFilter.SetFRoot(Value : String); begin
  FRoot := Value;
  JSCode('root:' + VarToJSON([Value]));
end;

function TExtUtilFilter.JSClassName : string; begin
  Result := 'Ext-util-Filter';
end;

{$IFDEF FPC}constructor TExtUtilFilter.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtUtilFilter.Create(Config : TExtObject = nil); begin
  if Config = nil then CreateVar(JSClassName + '({});') else
  CreateVar(JSClassName + '(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

procedure TExtTreePanel.SetFLines(Value : Boolean); begin
  FLines := Value;
  JSCode('lines:' + VarToJSON([Value]));
end;

procedure TExtTreePanel.SetFUseArrows(Value : Boolean); begin
  FUseArrows := Value;
  JSCode('useArrows:' + VarToJSON([Value]));
end;

procedure TExtTreePanel.SetFSingleExpand(Value : Boolean); begin
  FSingleExpand := Value;
  JSCode('singleExpand:' + VarToJSON([Value]));
end;

procedure TExtTreePanel.SetFAnimate(Value : Boolean); begin
  FAnimate := Value;
  JSCode('animate:' + VarToJSON([Value]));
end;

procedure TExtTreePanel.SetFRootVisible(Value : Boolean); begin
  FRootVisible := Value;
  JSCode('rootVisible:' + VarToJSON([Value]));
end;

procedure TExtTreePanel.SetFDisplayField(Value : Boolean); begin
  FDisplayField := Value;
  JSCode('displayField:' + VarToJSON([Value]));
end;

procedure TExtTreePanel.SetFRoot(Value : TExtDataModel); begin
  FRoot := Value;
  Value.DeleteFromGarbage;
  JSCode('root:' + VarToJSON([Value, false]));
end;

procedure TExtTreePanel.SetFRootTExtDataNodeInterface(Value : TExtDataNodeInterface); begin
  FRootTExtDataNodeInterface := Value;
  Value.DeleteFromGarbage;
  JSCode('root:' + VarToJSON([Value, false]));
end;

procedure TExtTreePanel.SetFRootTExtObject(Value : TExtObject); begin
  FRootTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('root:' + VarToJSON([Value, false]));
end;

procedure TExtTreePanel.SetFHideHeaders(Value : Boolean); begin
  FHideHeaders := Value;
  JSCode('hideHeaders:' + VarToJSON([Value]));
end;

procedure TExtTreePanel.SetFFolderSort(Value : Boolean); begin
  FFolderSort := Value;
  JSCode('folderSort:' + VarToJSON([Value]));
end;

procedure TExtTreePanel.SetFOnBeforeload(Value : TExtTreePanelOnBeforeload); begin
  if Assigned(FOnBeforeload) then
    JSCode(JSName+'.events ["beforeload"].listeners=[];');
  if Assigned(Value) then
    On('beforeload', Ajax('beforeload', [], true));
  FOnBeforeload := Value;
end;

procedure TExtTreePanel.SetFOnLoad(Value : TExtTreePanelOnLoad); begin
  if Assigned(FOnLoad) then
    JSCode(JSName+'.events ["load"].listeners=[];');
  if Assigned(Value) then
    On('load', Ajax('load', [], true));
  FOnLoad := Value;
end;

procedure TExtTreePanel.SetFOnItemappend(Value : TExtTreePanelOnItemappend); begin
  if Assigned(FOnItemappend) then
    JSCode(JSName+'.events ["itemappend"].listeners=[];');
  if Assigned(Value) then
    On('itemappend', Ajax('itemappend', [], true));
  FOnItemappend := Value;
end;

procedure TExtTreePanel.SetFOnItemremove(Value : TExtTreePanelOnItemremove); begin
  if Assigned(FOnItemremove) then
    JSCode(JSName+'.events ["itemremove"].listeners=[];');
  if Assigned(Value) then
    On('itemremove', Ajax('itemremove', [], true));
  FOnItemremove := Value;
end;

procedure TExtTreePanel.SetFOnItemmove(Value : TExtTreePanelOnItemmove); begin
  if Assigned(FOnItemmove) then
    JSCode(JSName+'.events ["itemmove"].listeners=[];');
  if Assigned(Value) then
    On('itemmove', Ajax('itemmove', [], true));
  FOnItemmove := Value;
end;

procedure TExtTreePanel.SetFOnIteminsert(Value : TExtTreePanelOnIteminsert); begin
  if Assigned(FOnIteminsert) then
    JSCode(JSName+'.events ["iteminsert"].listeners=[];');
  if Assigned(Value) then
    On('iteminsert', Ajax('iteminsert', [], true));
  FOnIteminsert := Value;
end;

procedure TExtTreePanel.SetFOnBeforeitemappend(Value : TExtTreePanelOnBeforeitemappend); begin
  if Assigned(FOnBeforeitemappend) then
    JSCode(JSName+'.events ["beforeitemappend"].listeners=[];');
  if Assigned(Value) then
    On('beforeitemappend', Ajax('beforeitemappend', [], true));
  FOnBeforeitemappend := Value;
end;

procedure TExtTreePanel.SetFOnBeforeitemremove(Value : TExtTreePanelOnBeforeitemremove); begin
  if Assigned(FOnBeforeitemremove) then
    JSCode(JSName+'.events ["beforeitemremove"].listeners=[];');
  if Assigned(Value) then
    On('beforeitemremove', Ajax('beforeitemremove', [], true));
  FOnBeforeitemremove := Value;
end;

procedure TExtTreePanel.SetFOnBeforeitemmove(Value : TExtTreePanelOnBeforeitemmove); begin
  if Assigned(FOnBeforeitemmove) then
    JSCode(JSName+'.events ["beforeitemmove"].listeners=[];');
  if Assigned(Value) then
    On('beforeitemmove', Ajax('beforeitemmove', [], true));
  FOnBeforeitemmove := Value;
end;

procedure TExtTreePanel.SetFOnBeforeiteminsert(Value : TExtTreePanelOnBeforeiteminsert); begin
  if Assigned(FOnBeforeiteminsert) then
    JSCode(JSName+'.events ["beforeiteminsert"].listeners=[];');
  if Assigned(Value) then
    On('beforeiteminsert', Ajax('beforeiteminsert', [], true));
  FOnBeforeiteminsert := Value;
end;

procedure TExtTreePanel.SetFOnItemexpand(Value : TExtTreePanelOnItemexpand); begin
  if Assigned(FOnItemexpand) then
    JSCode(JSName+'.events ["itemexpand"].listeners=[];');
  if Assigned(Value) then
    On('itemexpand', Ajax('itemexpand', [], true));
  FOnItemexpand := Value;
end;

procedure TExtTreePanel.SetFOnItemcollapse(Value : TExtTreePanelOnItemcollapse); begin
  if Assigned(FOnItemcollapse) then
    JSCode(JSName+'.events ["itemcollapse"].listeners=[];');
  if Assigned(Value) then
    On('itemcollapse', Ajax('itemcollapse', [], true));
  FOnItemcollapse := Value;
end;

procedure TExtTreePanel.SetFOnBeforeitemexpand(Value : TExtTreePanelOnBeforeitemexpand); begin
  if Assigned(FOnBeforeitemexpand) then
    JSCode(JSName+'.events ["beforeitemexpand"].listeners=[];');
  if Assigned(Value) then
    On('beforeitemexpand', Ajax('beforeitemexpand', [], true));
  FOnBeforeitemexpand := Value;
end;

procedure TExtTreePanel.SetFOnBeforeitemcollapse(Value : TExtTreePanelOnBeforeitemcollapse); begin
  if Assigned(FOnBeforeitemcollapse) then
    JSCode(JSName+'.events ["beforeitemcollapse"].listeners=[];');
  if Assigned(Value) then
    On('beforeitemcollapse', Ajax('beforeitemcollapse', [], true));
  FOnBeforeitemcollapse := Value;
end;

procedure TExtTreePanel.SetFOnCheckchange(Value : TExtTreePanelOnCheckchange); begin
  if Assigned(FOnCheckchange) then
    JSCode(JSName+'.events ["checkchange"].listeners=[];');
  if Assigned(Value) then
    On('checkchange', Ajax('checkchange', ['Node', '%0.nm','Checked', '%1'], true));
  FOnCheckchange := Value;
end;

function TExtTreePanel.JSClassName : string; begin
  Result := 'Ext-tree-Panel';
end;

procedure TExtTreePanel.InitDefaults; begin
  inherited;
  FRoot := TExtDataModel.CreateInternal(Self, 'root');
  FRootTExtDataNodeInterface := TExtDataNodeInterface.CreateInternal(Self, 'root');
  FRootTExtObject := TExtObject.CreateInternal(Self, 'root');
end;

{$IFDEF FPC}constructor TExtTreePanel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtTreePanel.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtTreePanel.SetRootNode(Root : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.setRootNode(' + VarToJSON([Root, false]) + ');', 'TExtTreePanel');
  Result := Self;
end;

function TExtTreePanel.SetRootNode(Root : TExtDataNodeInterface) : TExtFunction; begin
  JSCode(JSName + '.SetRootNode(' + VarToJSON([Root, false]) + ');', 'TExtTreePanel');
  Result := Self;
end;

function TExtTreePanel.SetRootNode(Root : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetRootNode(' + VarToJSON([Root, false]) + ');', 'TExtTreePanel');
  Result := Self;
end;

function TExtTreePanel.GetRootNode : TExtFunction; begin
  JSCode(JSName + '.getRootNode();', 'TExtTreePanel');
  Result := Self;
end;

function TExtTreePanel.GetChecked : TExtFunction; begin
  JSCode(JSName + '.getChecked();', 'TExtTreePanel');
  Result := Self;
end;

function TExtTreePanel.ExpandAll(Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.expandAll(' + VarToJSON([Callback, true, Scope, false]) + ');', 'TExtTreePanel');
  Result := Self;
end;

function TExtTreePanel.CollapseAll(Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.collapseAll(' + VarToJSON([Callback, true, Scope, false]) + ');', 'TExtTreePanel');
  Result := Self;
end;

function TExtTreePanel.ExpandPath(Path : String; Field : String = ''; Separator : String = ''; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.expandPath(' + VarToJSON([Path, Field, Separator, Callback, true, Scope, false]) + ');', 'TExtTreePanel');
  Result := Self;
end;

function TExtTreePanel.SelectPath(Path : String; Field : String = ''; Separator : String = ''; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.selectPath(' + VarToJSON([Path, Field, Separator, Callback, true, Scope, false]) + ');', 'TExtTreePanel');
  Result := Self;
end;

destructor TExtTreePanel.Destroy; begin
  try
    FRoot.Free;
    FRootTExtDataNodeInterface.Free;
    FRootTExtObject.Free;
  except end;
  inherited;
end;

procedure TExtTreePanel.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforeload') and Assigned(FOnBeforeload) then
    FOnBeforeload()
  else if (AEvtName = 'load') and Assigned(FOnLoad) then
    FOnLoad()
  else if (AEvtName = 'itemappend') and Assigned(FOnItemappend) then
    FOnItemappend()
  else if (AEvtName = 'itemremove') and Assigned(FOnItemremove) then
    FOnItemremove()
  else if (AEvtName = 'itemmove') and Assigned(FOnItemmove) then
    FOnItemmove()
  else if (AEvtName = 'iteminsert') and Assigned(FOnIteminsert) then
    FOnIteminsert()
  else if (AEvtName = 'beforeitemappend') and Assigned(FOnBeforeitemappend) then
    FOnBeforeitemappend()
  else if (AEvtName = 'beforeitemremove') and Assigned(FOnBeforeitemremove) then
    FOnBeforeitemremove()
  else if (AEvtName = 'beforeitemmove') and Assigned(FOnBeforeitemmove) then
    FOnBeforeitemmove()
  else if (AEvtName = 'beforeiteminsert') and Assigned(FOnBeforeiteminsert) then
    FOnBeforeiteminsert()
  else if (AEvtName = 'itemexpand') and Assigned(FOnItemexpand) then
    FOnItemexpand()
  else if (AEvtName = 'itemcollapse') and Assigned(FOnItemcollapse) then
    FOnItemcollapse()
  else if (AEvtName = 'beforeitemexpand') and Assigned(FOnBeforeitemexpand) then
    FOnBeforeitemexpand()
  else if (AEvtName = 'beforeitemcollapse') and Assigned(FOnBeforeitemcollapse) then
    FOnBeforeitemcollapse()
  else if (AEvtName = 'checkchange') and Assigned(FOnCheckchange) then
    FOnCheckchange(TExtDataModel(ParamAsObject('Node')), ParamAsBoolean('Checked'));
end;

procedure TExtUtilComponentDragger.SetFConstrain(Value : Boolean); begin
  FConstrain := Value;
  JSCode('constrain:' + VarToJSON([Value]));
end;

procedure TExtUtilComponentDragger.SetFDelegate(Value : String); begin
  FDelegate := Value;
  JSCode('delegate:' + VarToJSON([Value]));
end;

procedure TExtUtilComponentDragger.SetFDelegateTExtElement(Value : TExtElement); begin
  FDelegateTExtElement := Value;
  Value.DeleteFromGarbage;
  JSCode('delegate:' + VarToJSON([Value, false]));
end;

procedure TExtUtilComponentDragger.SetFConstrainDelegate(Value : Boolean); begin
  FConstrainDelegate := Value;
  JSCode('constrainDelegate:' + VarToJSON([Value]));
end;

function TExtUtilComponentDragger.JSClassName : string; begin
  Result := 'Ext-util-ComponentDragger';
end;

procedure TExtUtilComponentDragger.InitDefaults; begin
  inherited;
  FDelegateTExtElement := TExtElement.CreateInternal(Self, 'delegate');
end;

{$IFDEF FPC}constructor TExtUtilComponentDragger.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtUtilComponentDragger.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

constructor TExtUtilComponentDragger.Create(Comp : TExtObject; Config : TExtObject = nil); begin
  CreateVar(JSClassName + '(' + VarToJSON([Comp, false, Config, false]) + ');');
  InitDefaults;
end;

destructor TExtUtilComponentDragger.Destroy; begin
  try
    FDelegateTExtElement.Free;
  except end;
  inherited;
end;

procedure TExtFormFieldText.SetFVtypeText(Value : String); begin
  FVtypeText := Value;
  JSCode('vtypeText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldText.SetFStripCharsRe(Value : TRegExp); begin
  FStripCharsRe := Value;
  JSCode('stripCharsRe:' + VarToJSON([#3 +Value]));
end;

procedure TExtFormFieldText.SetFSize(Value : Integer); begin
  FSize := Value;
  JSCode('size:' + VarToJSON([Value]));
end;

procedure TExtFormFieldText.SetFGrow(Value : Boolean); begin
  FGrow := Value;
  JSCode('grow:' + VarToJSON([Value]));
end;

procedure TExtFormFieldText.SetFGrowMin(Value : Integer); begin
  FGrowMin := Value;
  JSCode('growMin:' + VarToJSON([Value]));
end;

procedure TExtFormFieldText.SetFGrowMax(Value : Integer); begin
  FGrowMax := Value;
  JSCode('growMax:' + VarToJSON([Value]));
end;

procedure TExtFormFieldText.SetFGrowAppend(Value : String); begin
  FGrowAppend := Value;
  JSCode('growAppend:' + VarToJSON([Value]));
end;

procedure TExtFormFieldText.SetFVtype(Value : String); begin
  FVtype := Value;
  JSCode('vtype:' + VarToJSON([Value]));
end;

procedure TExtFormFieldText.SetFMaskRe(Value : TRegExp); begin
  FMaskRe := Value;
  JSCode('maskRe:' + VarToJSON([#3 +Value]));
end;

procedure TExtFormFieldText.SetFDisableKeyFilter(Value : Boolean); begin
  FDisableKeyFilter := Value;
  JSCode('disableKeyFilter:' + VarToJSON([Value]));
end;

procedure TExtFormFieldText.SetFAllowBlank(Value : Boolean); begin
  FAllowBlank := Value;
  JSCode('allowBlank:' + VarToJSON([Value]));
end;

procedure TExtFormFieldText.SetFMinLength(Value : Integer); begin
  FMinLength := Value;
  JSCode('minLength:' + VarToJSON([Value]));
end;

procedure TExtFormFieldText.SetFMaxLength(Value : Integer); begin
  FMaxLength := Value;
  JSCode('maxLength:' + VarToJSON([Value]));
end;

procedure TExtFormFieldText.SetFEnforceMaxLength(Value : Boolean); begin
  FEnforceMaxLength := Value;
  JSCode('enforceMaxLength:' + VarToJSON([Value]));
end;

procedure TExtFormFieldText.SetFMinLengthText(Value : String); begin
  FMinLengthText := Value;
  JSCode('minLengthText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldText.SetFMaxLengthText(Value : String); begin
  FMaxLengthText := Value;
  JSCode('maxLengthText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldText.SetFSelectOnFocus(Value : Boolean); begin
  FSelectOnFocus := Value;
  JSCode('selectOnFocus:' + VarToJSON([Value]));
end;

procedure TExtFormFieldText.SetFBlankText(Value : String); begin
  FBlankText := Value;
  JSCode('blankText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldText.SetFValidator(Value : TExtFunction); begin
  FValidator := Value;
  JSCode('validator:' + VarToJSON([Value, true]));
end;

procedure TExtFormFieldText.SetFRegex(Value : TRegExp); begin
  FRegex := Value;
  JSCode('regex:' + VarToJSON([#3 +Value]));
end;

procedure TExtFormFieldText.SetFRegexText(Value : String); begin
  FRegexText := Value;
  JSCode('regexText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldText.SetFEmptyText(Value : String); begin
  FEmptyText := Value;
  JSCode('emptyText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldText.SetFEmptyCls(Value : String); begin
  FEmptyCls := Value;
  JSCode('emptyCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldText.SetFEnableKeyEvents(Value : Boolean); begin
  FEnableKeyEvents := Value;
  JSCode('enableKeyEvents:' + VarToJSON([Value]));
end;

procedure TExtFormFieldText.SetFOnAutosize(Value : TExtFormFieldTextOnAutosize); begin
  if Assigned(FOnAutosize) then
    JSCode(JSName+'.events ["autosize"].listeners=[];');
  if Assigned(Value) then
    On('autosize', Ajax('autosize', ['This', '%0.nm','Width', '%1'], true));
  FOnAutosize := Value;
end;

procedure TExtFormFieldText.SetFOnKeydown(Value : TExtFormFieldTextOnKeydown); begin
  if Assigned(FOnKeydown) then
    JSCode(JSName+'.events ["keydown"].listeners=[];');
  if Assigned(Value) then
    On('keydown', Ajax('keydown', ['This', '%0.nm','E', '%1.nm','This_', '%2.nm','E_', '%3.nm','This__', '%4.nm','E__', '%5.nm'], true));
  FOnKeydown := Value;
end;

function TExtFormFieldText.JSClassName : string; begin
  Result := 'Ext-form-field-Text';
end;

class function TExtFormFieldText.Value : TExtObject;
const
  lValue : TExtObject = nil;
begin
  if lValue = nil then lValue := TExtObject.CreateSingleton('Ext-form-field-Text.Value');
  Result := lValue
end;

class function TExtFormFieldText.Return : Boolean; begin
  Result := false
end;

class function TExtFormFieldText.ReturnString : String; begin
  Result := ''
end;

{$IFDEF FPC}constructor TExtFormFieldText.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtFormFieldText.ProcessRawValue(Value : String) : TExtFunction; begin
  JSCode(JSName + '.processRawValue(' + VarToJSON([Value]) + ');', 'TExtFormFieldText');
  Result := Self;
end;

function TExtFormFieldText.Reset : TExtFunction; begin
  JSCode(JSName + '.reset();', 'TExtFormFieldText');
  Result := Self;
end;

function TExtFormFieldText.GetRawValue : TExtFunction; begin
  JSCode(JSName + '.getRawValue();', 'TExtFormFieldText');
  Result := Self;
end;

function TExtFormFieldText.SetValue(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setValue(' + VarToJSON([Value, false]) + ');', 'TExtFormFieldText');
  Result := Self;
end;

function TExtFormFieldText.GetErrors(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getErrors(' + VarToJSON([Value, false]) + ');', 'TExtFormFieldText');
  Result := Self;
end;

function TExtFormFieldText.SelectText(Start : Integer = 0; EndJS : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.selectText(' + VarToJSON([Start, EndJS]) + ');', 'TExtFormFieldText');
  Result := Self;
end;

function TExtFormFieldText.AutoSize : TExtFunction; begin
  JSCode(JSName + '.autoSize();', 'TExtFormFieldText');
  Result := Self;
end;

procedure TExtFormFieldText.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'autosize') and Assigned(FOnAutosize) then
    FOnAutosize(TExtFormFieldText(ParamAsObject('This')), ParamAsInteger('Width'))
  else if (AEvtName = 'keydown') and Assigned(FOnKeydown) then
    FOnKeydown(TExtFormFieldText(ParamAsObject('This')), ExtEventObject, TExtFormFieldText(ParamAsObject('This_')), ExtEventObject, TExtFormFieldText(ParamAsObject('This__')), ExtEventObject);
end;

procedure TExtTemplate.SetFCompiled(Value : Boolean); begin
  FCompiled := Value;
  JSCode('compiled:' + VarToJSON([Value]));
end;

procedure TExtTemplate.SetFDisableFormats(Value : Boolean); begin
  FDisableFormats := Value;
  JSCode('disableFormats:' + VarToJSON([Value]));
end;

function TExtTemplate.JSClassName : string; begin
  Result := 'Ext-Template';
end;

{$IFDEF FPC}constructor TExtTemplate.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtTemplate.ApplyTemplate(Values : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.applyTemplate(' + VarToJSON([Values, false]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.ApplyTemplate(Values : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.ApplyTemplate(' + VarToJSON(Values) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.SetJS(Html : String; Compile : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.set(' + VarToJSON([Html, Compile]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.Compile : TExtFunction; begin
  JSCode(JSName + '.compile();', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.InsertFirst(El : String; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.insertFirst(' + VarToJSON([El, Values, false, ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.InsertFirst(El : THTMLElement; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertFirst(' + VarToJSON([El, false, Values, false, ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.InsertFirst(El : THTMLElement; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertFirst(' + VarToJSON([El, false]) + ',' + VarToJSON(Values) + ',' + VarToJSON([ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.InsertFirst(El : TExtElement; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertFirst(' + VarToJSON([El, false, Values, false, ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.InsertFirst(El : TExtElement; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertFirst(' + VarToJSON([El, false]) + ',' + VarToJSON(Values) + ',' + VarToJSON([ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.InsertFirst(El : String; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertFirst(' + VarToJSON([El]) + ',' + VarToJSON(Values) + ',' + VarToJSON([ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.InsertBefore(El : String; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.insertBefore(' + VarToJSON([El, Values, false, ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.InsertBefore(El : THTMLElement; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertBefore(' + VarToJSON([El, false, Values, false, ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.InsertBefore(El : THTMLElement; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertBefore(' + VarToJSON([El, false]) + ',' + VarToJSON(Values) + ',' + VarToJSON([ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.InsertBefore(El : TExtElement; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertBefore(' + VarToJSON([El, false, Values, false, ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.InsertBefore(El : TExtElement; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertBefore(' + VarToJSON([El, false]) + ',' + VarToJSON(Values) + ',' + VarToJSON([ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.InsertBefore(El : String; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertBefore(' + VarToJSON([El]) + ',' + VarToJSON(Values) + ',' + VarToJSON([ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.InsertAfter(El : String; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.insertAfter(' + VarToJSON([El, Values, false, ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.InsertAfter(El : THTMLElement; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertAfter(' + VarToJSON([El, false, Values, false, ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.InsertAfter(El : THTMLElement; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertAfter(' + VarToJSON([El, false]) + ',' + VarToJSON(Values) + ',' + VarToJSON([ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.InsertAfter(El : TExtElement; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertAfter(' + VarToJSON([El, false, Values, false, ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.InsertAfter(El : TExtElement; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertAfter(' + VarToJSON([El, false]) + ',' + VarToJSON(Values) + ',' + VarToJSON([ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.InsertAfter(El : String; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.InsertAfter(' + VarToJSON([El]) + ',' + VarToJSON(Values) + ',' + VarToJSON([ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.Append(El : String; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.append(' + VarToJSON([El, Values, false, ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.Append(El : THTMLElement; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Append(' + VarToJSON([El, false, Values, false, ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.Append(El : THTMLElement; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Append(' + VarToJSON([El, false]) + ',' + VarToJSON(Values) + ',' + VarToJSON([ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.Append(El : TExtElement; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Append(' + VarToJSON([El, false, Values, false, ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.Append(El : TExtElement; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Append(' + VarToJSON([El, false]) + ',' + VarToJSON(Values) + ',' + VarToJSON([ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.Append(El : String; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Append(' + VarToJSON([El]) + ',' + VarToJSON(Values) + ',' + VarToJSON([ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.Overwrite(El : String; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.overwrite(' + VarToJSON([El, Values, false, ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.Overwrite(El : THTMLElement; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Overwrite(' + VarToJSON([El, false, Values, false, ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.Overwrite(El : THTMLElement; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Overwrite(' + VarToJSON([El, false]) + ',' + VarToJSON(Values) + ',' + VarToJSON([ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.Overwrite(El : TExtElement; Values : TExtObject; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Overwrite(' + VarToJSON([El, false, Values, false, ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.Overwrite(El : TExtElement; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Overwrite(' + VarToJSON([El, false]) + ',' + VarToJSON(Values) + ',' + VarToJSON([ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.Overwrite(El : String; Values : TExtObjectList; ReturnElement : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Overwrite(' + VarToJSON([El]) + ',' + VarToJSON(Values) + ',' + VarToJSON([ReturnElement]) + ');', 'TExtTemplate');
  Result := Self;
end;

function TExtTemplate.Apply : TExtFunction; begin
  JSCode(JSName + '.apply();', 'TExtTemplate');
  Result := Self;
end;

function TExtLayoutContainerCheckboxGroup.JSClassName : string; begin
  Result := 'Ext-layout-container-CheckboxGroup';
end;

{$IFDEF FPC}constructor TExtLayoutContainerCheckboxGroup.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtFormActionDirectLoad.JSClassName : string; begin
  Result := 'Ext-form-action-DirectLoad';
end;

{$IFDEF FPC}constructor TExtFormActionDirectLoad.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilPoint.JSClassName : string; begin
  Result := 'Ext-util-Point';
end;

{$IFDEF FPC}constructor TExtUtilPoint.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

class function TExtUtilPoint.FromEvent(E : TEvent) : TExtFunction; begin
  JSCode(JSClassName + '.fromEvent(' + VarToJSON([E, false]) + ');', 'TExtUtilPoint');
  Result := Self;
end;

constructor TExtUtilPoint.Create(X : Integer; Y : Integer); begin
  CreateVar(JSClassName + '(' + VarToJSON([X, Y]) + ');');
  InitDefaults;
end;

function TExtUtilPoint.ToString : TExtFunction; begin
  JSCode(JSName + '.toString();', 'TExtUtilPoint');
  Result := Self;
end;

function TExtUtilPoint.Equals(The : TExtUtilPoint) : TExtFunction; begin
  JSCode(JSName + '.equals(' + VarToJSON([The, false]) + ');', 'TExtUtilPoint');
  Result := Self;
end;

function TExtUtilPoint.Equals(The : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.Equals(' + VarToJSON([The, false]) + ');', 'TExtUtilPoint');
  Result := Self;
end;

function TExtUtilPoint.IsWithin(P : TExtUtilPoint; Threshold : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.isWithin(' + VarToJSON([P, false, Threshold, false]) + ');', 'TExtUtilPoint');
  Result := Self;
end;

function TExtUtilPoint.IsWithin(P : TExtObject; Threshold : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.IsWithin(' + VarToJSON([P, false, Threshold, false]) + ');', 'TExtUtilPoint');
  Result := Self;
end;

function TExtUtilPoint.IsWithin(P : TExtObject; Threshold : Integer) : TExtFunction; begin
  JSCode(JSName + '.IsWithin(' + VarToJSON([P, false, Threshold]) + ');', 'TExtUtilPoint');
  Result := Self;
end;

function TExtUtilPoint.IsWithin(P : TExtUtilPoint; Threshold : Integer) : TExtFunction; begin
  JSCode(JSName + '.IsWithin(' + VarToJSON([P, false, Threshold]) + ');', 'TExtUtilPoint');
  Result := Self;
end;

function TExtUtilPoint.RoundedEquals(P : TExtUtilPoint) : TExtFunction; begin
  JSCode(JSName + '.roundedEquals(' + VarToJSON([P, false]) + ');', 'TExtUtilPoint');
  Result := Self;
end;

function TExtUtilPoint.RoundedEquals(P : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.RoundedEquals(' + VarToJSON([P, false]) + ');', 'TExtUtilPoint');
  Result := Self;
end;

function TExtUtilPoint.Translate : TExtFunction; begin
  JSCode(JSName + '.translate();', 'TExtUtilPoint');
  Result := Self;
end;

procedure TExtButtonCycle.SetFItems(Value : TExtObjectList); begin
  FItems := Value;
  Value.DeleteFromGarbage;
  JSCode('items:' + VarToJSON([Value, false]));
end;

procedure TExtButtonCycle.SetFShowText(Value : Boolean); begin
  FShowText := Value;
  JSCode('showText:' + VarToJSON([Value]));
end;

procedure TExtButtonCycle.SetFPrependText(Value : String); begin
  FPrependText := Value;
  JSCode('prependText:' + VarToJSON([Value]));
end;

procedure TExtButtonCycle.SetFChangeHandler(Value : TExtFunction); begin
  FChangeHandler := Value;
  JSCode('changeHandler:' + VarToJSON([Value, true]));
end;

procedure TExtButtonCycle.SetFForceIcon(Value : String); begin
  FForceIcon := Value;
  JSCode('forceIcon:' + VarToJSON([Value]));
end;

procedure TExtButtonCycle.SetFOnChange(Value : TExtButtonCycleOnChange); begin
  if Assigned(FOnChange) then
    JSCode(JSName+'.events ["change"].listeners=[];');
  if Assigned(Value) then
    On('change', Ajax('change', ['This', '%0.nm','Item', '%1.nm'], true));
  FOnChange := Value;
end;

function TExtButtonCycle.JSClassName : string; begin
  Result := 'Ext-button-Cycle';
end;

procedure TExtButtonCycle.InitDefaults; begin
  inherited;
  FItems := TExtObjectList.Create(Self, 'items');
end;

{$IFDEF FPC}constructor TExtButtonCycle.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtButtonCycle.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtButtonCycle.ToggleSelected : TExtFunction; begin
  JSCode(JSName + '.toggleSelected();', 'TExtButtonCycle');
  Result := Self;
end;

destructor TExtButtonCycle.Destroy; begin
  try
    FItems.Free;
  except end;
  inherited;
end;

procedure TExtButtonCycle.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'change') and Assigned(FOnChange) then
    FOnChange(TExtButtonCycle(ParamAsObject('This')), TExtMenuCheckItem(ParamAsObject('Item')));
end;

function TExtGridFeatureChunking.JSClassName : string; begin
  Result := 'Ext-grid-feature-Chunking';
end;

{$IFDEF FPC}constructor TExtGridFeatureChunking.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtEventManagerSingleton.JSClassName : string; begin
  Result := 'Ext-EventManagerSingleton';
end;

{$IFDEF FPC}constructor TExtEventManagerSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtEventManagerSingleton.OnDocumentReady(Fn : TExtFunction; Scope : TExtObject = nil; Options : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.onDocumentReady(' + VarToJSON([Fn, true, Scope, false, Options]) + ');', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.GetId(Element : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.getId(' + VarToJSON([Element, false]) + ');', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.GetId(Element : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.GetId(' + VarToJSON([Element, false]) + ');', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.AddListener(El : String; EventName : String; Handler : TExtFunction; Scope : TExtObject = nil; Options : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.addListener(' + VarToJSON([El, EventName, Handler, true, Scope, false, Options, false]) + ');', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.AddListener(El : THTMLElement; EventName : String; Handler : TExtFunction; Scope : TExtObject = nil; Options : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.AddListener(' + VarToJSON([El, false, EventName, Handler, true, Scope, false, Options, false]) + ');', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.RemoveListener(El : String; EventName : String; Fn : TExtFunction; Scope : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.removeListener(' + VarToJSON([El, EventName, Fn, true, Scope, false]) + ');', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.RemoveListener(El : THTMLElement; EventName : String; Fn : TExtFunction; Scope : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.RemoveListener(' + VarToJSON([El, false, EventName, Fn, true, Scope, false]) + ');', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.RemoveAll(El : String) : TExtFunction; begin
  JSCode(JSName + '.removeAll(' + VarToJSON([El]) + ');', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.RemoveAll(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.RemoveAll(' + VarToJSON([El, false]) + ');', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.PurgeElement(El : String; EventName : String = '') : TExtFunction; begin
  JSCode(JSName + '.purgeElement(' + VarToJSON([El, EventName]) + ');', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.PurgeElement(El : THTMLElement; EventName : String = '') : TExtFunction; begin
  JSCode(JSName + '.PurgeElement(' + VarToJSON([El, false, EventName]) + ');', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.StopEvent(The : TEvent) : TExtFunction; begin
  JSCode(JSName + '.stopEvent(' + VarToJSON([The, false]) + ');', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.StopPropagation(The : TEvent) : TExtFunction; begin
  JSCode(JSName + '.stopPropagation(' + VarToJSON([The, false]) + ');', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.PreventDefault(The : TEvent) : TExtFunction; begin
  JSCode(JSName + '.preventDefault(' + VarToJSON([The, false]) + ');', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.GetRelatedTarget(Event : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getRelatedTarget(' + VarToJSON([Event, false]) + ');', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.GetPageX(Event : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getPageX(' + VarToJSON([Event, false]) + ');', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.GetPageY(Event : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getPageY(' + VarToJSON([Event, false]) + ');', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.GetPageXY(Event : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getPageXY(' + VarToJSON([Event, false]) + ');', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.GetTarget(Event : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getTarget(' + VarToJSON([Event, false]) + ');', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.OnWindowResize(Fn : TExtFunction; Param : TExtObject; _ : Boolean) : TExtFunction; begin
  JSCode(JSName + '.onWindowResize(' + VarToJSON([Fn, true, Param, false, _]) + ');', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.RemoveResizeListener(Fn : TExtFunction; Param : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.removeResizeListener(' + VarToJSON([Fn, true, Param, false]) + ');', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.RemoveUnloadListener(Fn : TExtFunction; Param : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.removeUnloadListener(' + VarToJSON([Fn, true, Param, false]) + ');', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.GetKeyEvent : TExtFunction; begin
  JSCode(JSName + '.getKeyEvent();', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.OnReady : TExtFunction; begin
  JSCode(JSName + '.onReady();', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.OnDocumentReady_ : TExtFunction; begin
  JSCode(JSName + '.onDocumentReady();', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.On : TExtFunction; begin
  JSCode(JSName + '.on();', 'TExtEventManagerSingleton');
  Result := Self;
end;

function TExtEventManagerSingleton.Un : TExtFunction; begin
  JSCode(JSName + '.un();', 'TExtEventManagerSingleton');
  Result := Self;
end;

procedure TExtFocusManagerSingleton.SetFOnBeforecomponentfocus(Value : TExtFocusManagerSingletonOnBeforecomponentfocus); begin
  if Assigned(FOnBeforecomponentfocus) then
    JSCode(JSName+'.events ["beforecomponentfocus"].listeners=[];');
  if Assigned(Value) then
    On('beforecomponentfocus', Ajax('beforecomponentfocus', ['Fm', '%0.nm','Cmp', '%1.nm','PreviousCmp', '%2.nm'], true));
  FOnBeforecomponentfocus := Value;
end;

procedure TExtFocusManagerSingleton.SetFOnComponentfocus(Value : TExtFocusManagerSingletonOnComponentfocus); begin
  if Assigned(FOnComponentfocus) then
    JSCode(JSName+'.events ["componentfocus"].listeners=[];');
  if Assigned(Value) then
    On('componentfocus', Ajax('componentfocus', ['Fm', '%0.nm','Cmp', '%1.nm','PreviousCmp', '%2.nm'], true));
  FOnComponentfocus := Value;
end;

procedure TExtFocusManagerSingleton.SetFOnDisable(Value : TExtFocusManagerSingletonOnDisable); begin
  if Assigned(FOnDisable) then
    JSCode(JSName+'.events ["disable"].listeners=[];');
  if Assigned(Value) then
    On('disable', Ajax('disable', ['Fm', '%0.nm'], true));
  FOnDisable := Value;
end;

procedure TExtFocusManagerSingleton.SetFOnEnable(Value : TExtFocusManagerSingletonOnEnable); begin
  if Assigned(FOnEnable) then
    JSCode(JSName+'.events ["enable"].listeners=[];');
  if Assigned(Value) then
    On('enable', Ajax('enable', ['Fm', '%0.nm'], true));
  FOnEnable := Value;
end;

function TExtFocusManagerSingleton.JSClassName : string; begin
  Result := 'Ext-FocusManagerSingleton';
end;

{$IFDEF FPC}constructor TExtFocusManagerSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtFocusManagerSingleton.AddXTypeToWhitelist(Xtype : String) : TExtFunction; begin
  JSCode(JSName + '.addXTypeToWhitelist(' + VarToJSON([Xtype]) + ');', 'TExtFocusManagerSingleton');
  Result := Self;
end;

function TExtFocusManagerSingleton.AddXTypeToWhitelist(Xtype : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.AddXTypeToWhitelist(' + VarToJSON(Xtype) + ');', 'TExtFocusManagerSingleton');
  Result := Self;
end;

function TExtFocusManagerSingleton.Disable : TExtFunction; begin
  JSCode(JSName + '.disable();', 'TExtFocusManagerSingleton');
  Result := Self;
end;

function TExtFocusManagerSingleton.Enable(Options : Boolean) : TExtFunction; begin
  JSCode(JSName + '.enable(' + VarToJSON([Options]) + ');', 'TExtFocusManagerSingleton');
  Result := Self;
end;

function TExtFocusManagerSingleton.Enable(Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.Enable(' + VarToJSON([Options, false]) + ');', 'TExtFocusManagerSingleton');
  Result := Self;
end;

function TExtFocusManagerSingleton.RemoveXTypeFromWhitelist(Xtype : String) : TExtFunction; begin
  JSCode(JSName + '.removeXTypeFromWhitelist(' + VarToJSON([Xtype]) + ');', 'TExtFocusManagerSingleton');
  Result := Self;
end;

function TExtFocusManagerSingleton.RemoveXTypeFromWhitelist(Xtype : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.RemoveXTypeFromWhitelist(' + VarToJSON(Xtype) + ');', 'TExtFocusManagerSingleton');
  Result := Self;
end;

function TExtFocusManagerSingleton.Subscribe(Container : TExtContainerContainer; Options : Boolean; OptionsKeys : TExtObjectList; OptionsFocusFrame : Boolean) : TExtFunction; begin
  JSCode(JSName + '.subscribe(' + VarToJSON([Container, false, Options]) + ',' + VarToJSON(OptionsKeys) + ',' + VarToJSON([OptionsFocusFrame]) + ');', 'TExtFocusManagerSingleton');
  Result := Self;
end;

function TExtFocusManagerSingleton.Subscribe(Container : TExtContainerContainer; Options : TExtObject; OptionsKeys : TExtObjectList; OptionsFocusFrame : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Subscribe(' + VarToJSON([Container, false, Options, false]) + ',' + VarToJSON(OptionsKeys) + ',' + VarToJSON([OptionsFocusFrame]) + ');', 'TExtFocusManagerSingleton');
  Result := Self;
end;

function TExtFocusManagerSingleton.Subscribe(Container : TExtContainerContainer; Options : TExtObject; OptionsKeys : TExtObject; OptionsFocusFrame : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Subscribe(' + VarToJSON([Container, false, Options, false, OptionsKeys, false, OptionsFocusFrame]) + ');', 'TExtFocusManagerSingleton');
  Result := Self;
end;

function TExtFocusManagerSingleton.Subscribe(Container : TExtContainerContainer; Options : Boolean; OptionsKeys : TExtObject; OptionsFocusFrame : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Subscribe(' + VarToJSON([Container, false, Options, OptionsKeys, false, OptionsFocusFrame]) + ');', 'TExtFocusManagerSingleton');
  Result := Self;
end;

function TExtFocusManagerSingleton.Unsubscribe(Container : TExtContainerContainer) : TExtFunction; begin
  JSCode(JSName + '.unsubscribe(' + VarToJSON([Container, false]) + ');', 'TExtFocusManagerSingleton');
  Result := Self;
end;

procedure TExtFocusManagerSingleton.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforecomponentfocus') and Assigned(FOnBeforecomponentfocus) then
    FOnBeforecomponentfocus(ExtFocusManager, TExtComponent(ParamAsObject('Cmp')), TExtComponent(ParamAsObject('PreviousCmp')))
  else if (AEvtName = 'componentfocus') and Assigned(FOnComponentfocus) then
    FOnComponentfocus(ExtFocusManager, TExtComponent(ParamAsObject('Cmp')), TExtComponent(ParamAsObject('PreviousCmp')))
  else if (AEvtName = 'disable') and Assigned(FOnDisable) then
    FOnDisable(ExtFocusManager)
  else if (AEvtName = 'enable') and Assigned(FOnEnable) then
    FOnEnable(ExtFocusManager);
end;

procedure TExtToolbarPaging.SetFStore(Value : TExtDataStore); begin
  FStore := Value;
  Value.DeleteFromGarbage;
  JSCode('store:' + VarToJSON([Value, false]));
end;

procedure TExtToolbarPaging.SetFDisplayInfo(Value : Boolean); begin
  FDisplayInfo := Value;
  JSCode('displayInfo:' + VarToJSON([Value]));
end;

procedure TExtToolbarPaging.SetFPrependButtons(Value : Boolean); begin
  FPrependButtons := Value;
  JSCode('prependButtons:' + VarToJSON([Value]));
end;

procedure TExtToolbarPaging.SetFDisplayMsg(Value : String); begin
  FDisplayMsg := Value;
  JSCode('displayMsg:' + VarToJSON([Value]));
end;

procedure TExtToolbarPaging.SetFEmptyMsg(Value : String); begin
  FEmptyMsg := Value;
  JSCode('emptyMsg:' + VarToJSON([Value]));
end;

procedure TExtToolbarPaging.SetFBeforePageText(Value : String); begin
  FBeforePageText := Value;
  JSCode('beforePageText:' + VarToJSON([Value]));
end;

procedure TExtToolbarPaging.SetFAfterPageText(Value : String); begin
  FAfterPageText := Value;
  JSCode('afterPageText:' + VarToJSON([Value]));
end;

procedure TExtToolbarPaging.SetFFirstText(Value : String); begin
  FFirstText := Value;
  JSCode('firstText:' + VarToJSON([Value]));
end;

procedure TExtToolbarPaging.SetFPrevText(Value : String); begin
  FPrevText := Value;
  JSCode('prevText:' + VarToJSON([Value]));
end;

procedure TExtToolbarPaging.SetFNextText(Value : String); begin
  FNextText := Value;
  JSCode('nextText:' + VarToJSON([Value]));
end;

procedure TExtToolbarPaging.SetFLastText(Value : String); begin
  FLastText := Value;
  JSCode('lastText:' + VarToJSON([Value]));
end;

procedure TExtToolbarPaging.SetFRefreshText(Value : String); begin
  FRefreshText := Value;
  JSCode('refreshText:' + VarToJSON([Value]));
end;

procedure TExtToolbarPaging.SetFInputItemWidth(Value : Integer); begin
  FInputItemWidth := Value;
  JSCode('inputItemWidth:' + VarToJSON([Value]));
end;

procedure TExtToolbarPaging.SetFOnChange(Value : TExtToolbarPagingOnChange); begin
  if Assigned(FOnChange) then
    JSCode(JSName+'.events ["change"].listeners=[];');
  if Assigned(Value) then
    On('change', Ajax('change', ['This', '%0.nm','PageData', '%1.nm'], true));
  FOnChange := Value;
end;

procedure TExtToolbarPaging.SetFOnBeforechange(Value : TExtToolbarPagingOnBeforechange); begin
  if Assigned(FOnBeforechange) then
    JSCode(JSName+'.events ["beforechange"].listeners=[];');
  if Assigned(Value) then
    On('beforechange', Ajax('beforechange', ['This', '%0.nm','Page', '%1'], true));
  FOnBeforechange := Value;
end;

function TExtToolbarPaging.JSClassName : string; begin
  Result := 'Ext-toolbar-Paging';
end;

procedure TExtToolbarPaging.InitDefaults; begin
  inherited;
  FStore := TExtDataStore.CreateInternal(Self, 'store');
end;

{$IFDEF FPC}constructor TExtToolbarPaging.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtToolbarPaging.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtToolbarPaging.MoveFirst : TExtFunction; begin
  JSCode(JSName + '.moveFirst();', 'TExtToolbarPaging');
  Result := Self;
end;

function TExtToolbarPaging.MovePrevious : TExtFunction; begin
  JSCode(JSName + '.movePrevious();', 'TExtToolbarPaging');
  Result := Self;
end;

function TExtToolbarPaging.MoveNext : TExtFunction; begin
  JSCode(JSName + '.moveNext();', 'TExtToolbarPaging');
  Result := Self;
end;

function TExtToolbarPaging.MoveLast : TExtFunction; begin
  JSCode(JSName + '.moveLast();', 'TExtToolbarPaging');
  Result := Self;
end;

function TExtToolbarPaging.DoRefresh : TExtFunction; begin
  JSCode(JSName + '.doRefresh();', 'TExtToolbarPaging');
  Result := Self;
end;

function TExtToolbarPaging.BindStore(Store : TExtDataStore; Initial : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.bindStore(' + VarToJSON([Store, false, Initial]) + ');', 'TExtToolbarPaging');
  Result := Self;
end;

function TExtToolbarPaging.Unbind(Store : TExtDataStore) : TExtFunction; begin
  JSCode(JSName + '.unbind(' + VarToJSON([Store, false]) + ');', 'TExtToolbarPaging');
  Result := Self;
end;

function TExtToolbarPaging.Bind(Store : TExtDataStore) : TExtFunction; begin
  JSCode(JSName + '.bind(' + VarToJSON([Store, false]) + ');', 'TExtToolbarPaging');
  Result := Self;
end;

destructor TExtToolbarPaging.Destroy; begin
  try
    FStore.Free;
  except end;
  inherited;
end;

procedure TExtToolbarPaging.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'change') and Assigned(FOnChange) then
    FOnChange(TExtToolbarPaging(ParamAsObject('This')), TExtObject(ParamAsObject('PageData')))
  else if (AEvtName = 'beforechange') and Assigned(FOnBeforechange) then
    FOnBeforechange(TExtToolbarPaging(ParamAsObject('This')), ParamAsInteger('Page'));
end;

function TExtSliderSingle.JSClassName : string; begin
  Result := 'Ext-slider-Single';
end;

{$IFDEF FPC}constructor TExtSliderSingle.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtSliderSingle.GetValue : TExtFunction; begin
  JSCode(JSName + '.getValue();', 'TExtSliderSingle');
  Result := Self;
end;

function TExtSliderSingle.SetValue(Value : Integer; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.setValue(' + VarToJSON([Value, Animate]) + ');', 'TExtSliderSingle');
  Result := Self;
end;

function TExtVersion.JSClassName : string; begin
  Result := 'Ext-Version';
end;

{$IFDEF FPC}constructor TExtVersion.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtVersion.Create(Version : String); begin
  CreateVar(JSClassName + '(' + VarToJSON([Version]) + ');');
  InitDefaults;
end;

constructor TExtVersion.Create(Version : Integer); begin
  CreateVar(JSClassName + '(' + VarToJSON([Version]) + ');');
  InitDefaults;
end;

function TExtVersion.GetMajor : TExtFunction; begin
  JSCode(JSName + '.getMajor();', 'TExtVersion');
  Result := Self;
end;

function TExtVersion.GetMinor : TExtFunction; begin
  JSCode(JSName + '.getMinor();', 'TExtVersion');
  Result := Self;
end;

function TExtVersion.GetPatch : TExtFunction; begin
  JSCode(JSName + '.getPatch();', 'TExtVersion');
  Result := Self;
end;

function TExtVersion.GetBuild : TExtFunction; begin
  JSCode(JSName + '.getBuild();', 'TExtVersion');
  Result := Self;
end;

function TExtVersion.GetRelease : TExtFunction; begin
  JSCode(JSName + '.getRelease();', 'TExtVersion');
  Result := Self;
end;

function TExtVersion.IsGreaterThan(Target : String) : TExtFunction; begin
  JSCode(JSName + '.isGreaterThan(' + VarToJSON([Target]) + ');', 'TExtVersion');
  Result := Self;
end;

function TExtVersion.IsGreaterThan(Target : Integer) : TExtFunction; begin
  JSCode(JSName + '.IsGreaterThan(' + VarToJSON([Target]) + ');', 'TExtVersion');
  Result := Self;
end;

function TExtVersion.IsLessThan(Target : String) : TExtFunction; begin
  JSCode(JSName + '.isLessThan(' + VarToJSON([Target]) + ');', 'TExtVersion');
  Result := Self;
end;

function TExtVersion.IsLessThan(Target : Integer) : TExtFunction; begin
  JSCode(JSName + '.IsLessThan(' + VarToJSON([Target]) + ');', 'TExtVersion');
  Result := Self;
end;

function TExtVersion.Equals(Target : String) : TExtFunction; begin
  JSCode(JSName + '.equals(' + VarToJSON([Target]) + ');', 'TExtVersion');
  Result := Self;
end;

function TExtVersion.Equals(Target : Integer) : TExtFunction; begin
  JSCode(JSName + '.Equals(' + VarToJSON([Target]) + ');', 'TExtVersion');
  Result := Self;
end;

function TExtVersion.Match(Target : String) : TExtFunction; begin
  JSCode(JSName + '.match(' + VarToJSON([Target]) + ');', 'TExtVersion');
  Result := Self;
end;

function TExtVersion.Match(Target : Integer) : TExtFunction; begin
  JSCode(JSName + '.Match(' + VarToJSON([Target]) + ');', 'TExtVersion');
  Result := Self;
end;

function TExtVersion.ToArray : TExtFunction; begin
  JSCode(JSName + '.toArray();', 'TExtVersion');
  Result := Self;
end;

function TExtVersion.GetShortVersion : TExtFunction; begin
  JSCode(JSName + '.getShortVersion();', 'TExtVersion');
  Result := Self;
end;

class function TExtVersion.GetComponentValue(Value : TExtObject) : TExtFunction; begin
  JSCode(JSClassName + '.getComponentValue(' + VarToJSON([Value, false]) + ');', 'TExtVersion');
  Result := Self;
end;

class function TExtVersion.Compare(Current : String; Target : String) : TExtFunction; begin
  JSCode(JSClassName + '.compare(' + VarToJSON([Current, Target]) + ');', 'TExtVersion');
  Result := Self;
end;

function TExtVersion.SetVersion(PackageName : String; Version : String) : TExtFunction; begin
  JSCode(JSName + '.setVersion(' + VarToJSON([PackageName, Version]) + ');', 'TExtVersion');
  Result := Self;
end;

function TExtVersion.SetVersion(PackageName : String; Version : TExtVersion) : TExtFunction; begin
  JSCode(JSName + '.SetVersion(' + VarToJSON([PackageName, Version, false]) + ');', 'TExtVersion');
  Result := Self;
end;

function TExtVersion.GetVersion(PackageName : String = '') : TExtFunction; begin
  JSCode(JSName + '.getVersion(' + VarToJSON([PackageName]) + ');', 'TExtVersion');
  Result := Self;
end;

function TExtVersion.Deprecate(PackageName : String; Since : String; Closure : TExtFunction; Scope : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.deprecate(' + VarToJSON([PackageName, Since, Closure, true, Scope, false]) + ');', 'TExtVersion');
  Result := Self;
end;

procedure TExtGridPluginCellEditing.SetFOnBeforeedit(Value : TExtGridPluginCellEditingOnBeforeedit); begin
  if Assigned(FOnBeforeedit) then
    JSCode(JSName+'.events ["beforeedit"].listeners=[];');
  if Assigned(Value) then
    On('beforeedit', Ajax('beforeedit', ['E', '%0.nm'], true));
  FOnBeforeedit := Value;
end;

procedure TExtGridPluginCellEditing.SetFOnEdit(Value : TExtGridPluginCellEditingOnEdit); begin
  if Assigned(FOnEdit) then
    JSCode(JSName+'.events ["edit"].listeners=[];');
  if Assigned(Value) then
    On('edit', Ajax('edit', ['Editor', '%0.nm','E', '%1.nm'], true));
  FOnEdit := Value;
end;

procedure TExtGridPluginCellEditing.SetFOnValidateedit(Value : TExtGridPluginCellEditingOnValidateedit); begin
  if Assigned(FOnValidateedit) then
    JSCode(JSName+'.events ["validateedit"].listeners=[];');
  if Assigned(Value) then
    On('validateedit', Ajax('validateedit', ['Editor', '%0.nm','E', '%1.nm'], true));
  FOnValidateedit := Value;
end;

function TExtGridPluginCellEditing.JSClassName : string; begin
  Result := 'Ext-grid-plugin-CellEditing';
end;

{$IFDEF FPC}constructor TExtGridPluginCellEditing.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtGridPluginCellEditing.StartEdit(RecordJS : TExtDataModel; ColumnHeader : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.startEdit(' + VarToJSON([RecordJS, false, ColumnHeader, false]) + ');', 'TExtGridPluginCellEditing');
  Result := Self;
end;

function TExtGridPluginCellEditing.CancelEdit : TExtFunction; begin
  JSCode(JSName + '.cancelEdit();', 'TExtGridPluginCellEditing');
  Result := Self;
end;

function TExtGridPluginCellEditing.StartEditByPosition(Position : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.startEditByPosition(' + VarToJSON([Position, false]) + ');', 'TExtGridPluginCellEditing');
  Result := Self;
end;

procedure TExtGridPluginCellEditing.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforeedit') and Assigned(FOnBeforeedit) then
    FOnBeforeedit(TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'edit') and Assigned(FOnEdit) then
    FOnEdit(TExtGridPluginEditing(ParamAsObject('Editor')), TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'validateedit') and Assigned(FOnValidateedit) then
    FOnValidateedit(TExtGridPluginEditing(ParamAsObject('Editor')), TExtObject(ParamAsObject('E')));
end;

function TExtFunctionSingleton.JSClassName : string; begin
  Result := 'Ext-FunctionSingleton';
end;

{$IFDEF FPC}constructor TExtFunctionSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtFunctionSingleton.FlexSetter(Setter : TExtFunction) : TExtFunctionSingleton; begin
  JSCode(JSName + '.flexSetter(' + VarToJSON([Setter, true]) + ');', 'TExtFunctionSingleton');
  Result := Self;
end;

function TExtFunctionSingleton.Bind(Fn : TExtFunction; Scope : TExtObject = nil; Args : TExtObjectList = nil; AppendArgs : Boolean = false) : TExtFunctionSingleton; begin
  JSCode(JSName + '.bind(' + VarToJSON([Fn, true, Scope, false]) + ',' + VarToJSON(Args) + ',' + VarToJSON([AppendArgs]) + ');', 'TExtFunctionSingleton');
  Result := Self;
end;

function TExtFunctionSingleton.Bind(Fn : TExtFunction; Scope : TExtObject; Args : TExtObjectList; AppendArgs : Integer) : TExtFunctionSingleton; begin
  JSCode(JSName + '.Bind(' + VarToJSON([Fn, true, Scope, false]) + ',' + VarToJSON(Args) + ',' + VarToJSON([AppendArgs]) + ');', 'TExtFunctionSingleton');
  Result := Self;
end;

function TExtFunctionSingleton.Pass(Fn : TExtFunction; Args : TExtObjectList; Scope : TExtObject = nil) : TExtFunctionSingleton; begin
  JSCode(JSName + '.pass(' + VarToJSON([Fn, true]) + ',' + VarToJSON(Args) + ',' + VarToJSON([Scope, false]) + ');', 'TExtFunctionSingleton');
  Result := Self;
end;

function TExtFunctionSingleton.Alias(ObjectJS : TExtObject; MethodName : String) : TExtFunctionSingleton; begin
  JSCode(JSName + '.alias(' + VarToJSON([ObjectJS, false, MethodName]) + ');', 'TExtFunctionSingleton');
  Result := Self;
end;

function TExtFunctionSingleton.Alias(ObjectJS : TExtFunction; MethodName : String) : TExtFunctionSingleton; begin
  JSCode(JSName + '.Alias(' + VarToJSON([ObjectJS, true, MethodName]) + ');', 'TExtFunctionSingleton');
  Result := Self;
end;

function TExtFunctionSingleton.CreateInterceptor(OrigFn : TExtFunction; NewFn : TExtFunction; Scope : TExtObject = nil; ReturnValue : TExtObject = nil) : TExtFunctionSingleton; begin
  JSCode(JSName + '.createInterceptor(' + VarToJSON([OrigFn, true, NewFn, true, Scope, false, ReturnValue, false]) + ');', 'TExtFunctionSingleton');
  Result := Self;
end;

function TExtFunctionSingleton.CreateDelayed(Fn : TExtFunction; Delay : Integer; Scope : TExtObject = nil; Args : TExtObjectList = nil; AppendArgs : Boolean = false) : TExtFunctionSingleton; begin
  JSCode(JSName + '.createDelayed(' + VarToJSON([Fn, true, Delay, Scope, false]) + ',' + VarToJSON(Args) + ',' + VarToJSON([AppendArgs]) + ');', 'TExtFunctionSingleton');
  Result := Self;
end;

function TExtFunctionSingleton.CreateDelayed(Fn : TExtFunction; Delay : Integer; Scope : TExtObject; Args : TExtObjectList; AppendArgs : Integer) : TExtFunctionSingleton; begin
  JSCode(JSName + '.CreateDelayed(' + VarToJSON([Fn, true, Delay, Scope, false]) + ',' + VarToJSON(Args) + ',' + VarToJSON([AppendArgs]) + ');', 'TExtFunctionSingleton');
  Result := Self;
end;

function TExtFunctionSingleton.Defer(Fn : TExtFunction; Millis : Integer; Scope : TExtObject = nil; Args : TExtObjectList = nil; AppendArgs : Boolean = false) : TExtFunctionSingleton; begin
  JSCode(JSName + '.defer(' + VarToJSON([Fn, true, Millis, Scope, false]) + ',' + VarToJSON(Args) + ',' + VarToJSON([AppendArgs]) + ');', 'TExtFunctionSingleton');
  Result := Self;
end;

function TExtFunctionSingleton.Defer(Fn : TExtFunction; Millis : Integer; Scope : TExtObject; Args : TExtObjectList; AppendArgs : Integer) : TExtFunctionSingleton; begin
  JSCode(JSName + '.Defer(' + VarToJSON([Fn, true, Millis, Scope, false]) + ',' + VarToJSON(Args) + ',' + VarToJSON([AppendArgs]) + ');', 'TExtFunctionSingleton');
  Result := Self;
end;

function TExtFunctionSingleton.CreateSequence(OrigFn : TExtFunction; NewFn : TExtFunction; Scope : TExtObject = nil) : TExtFunctionSingleton; begin
  JSCode(JSName + '.createSequence(' + VarToJSON([OrigFn, true, NewFn, true, Scope, false]) + ');', 'TExtFunctionSingleton');
  Result := Self;
end;

function TExtFunctionSingleton.CreateBuffered(Fn : TExtFunction; Buffer : Integer; Scope : TExtObject = nil; Args : TExtObjectList = nil) : TExtFunctionSingleton; begin
  JSCode(JSName + '.createBuffered(' + VarToJSON([Fn, true, Buffer, Scope, false]) + ',' + VarToJSON(Args) + ');', 'TExtFunctionSingleton');
  Result := Self;
end;

function TExtFunctionSingleton.CreateThrottled(Fn : TExtFunction; Interval : Integer; Scope : TExtObject = nil) : TExtFunctionSingleton; begin
  JSCode(JSName + '.createThrottled(' + VarToJSON([Fn, true, Interval, Scope, false]) + ');', 'TExtFunctionSingleton');
  Result := Self;
end;

function TExtFunctionSingleton.InterceptBefore(ObjectJS : TExtObject; MethodName : String; Fn : TExtFunction) : TExtFunctionSingleton; begin
  JSCode(JSName + '.interceptBefore(' + VarToJSON([ObjectJS, false, MethodName, Fn, true]) + ');', 'TExtFunctionSingleton');
  Result := Self;
end;

function TExtFunctionSingleton.InterceptAfter(ObjectJS : TExtObject; MethodName : String; Fn : TExtFunction) : TExtFunctionSingleton; begin
  JSCode(JSName + '.interceptAfter(' + VarToJSON([ObjectJS, false, MethodName, Fn, true]) + ');', 'TExtFunctionSingleton');
  Result := Self;
end;

function TExtFunctionSingleton.Defer_ : TExtFunctionSingleton; begin
  JSCode(JSName + '.defer();', 'TExtFunctionSingleton');
  Result := Self;
end;

function TExtFunctionSingleton.Pass_ : TExtFunctionSingleton; begin
  JSCode(JSName + '.pass();', 'TExtFunctionSingleton');
  Result := Self;
end;

function TExtFunctionSingleton.Bind_ : TExtFunctionSingleton; begin
  JSCode(JSName + '.bind();', 'TExtFunctionSingleton');
  Result := Self;
end;

function TExtLayoutContainerAuto.JSClassName : string; begin
  Result := 'Ext-layout-container-Auto';
end;

{$IFDEF FPC}constructor TExtLayoutContainerAuto.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtDataOperation.SetFSynchronous(Value : Boolean); begin
  FSynchronous := Value;
  JSCode('synchronous:' + VarToJSON([Value]));
end;

procedure TExtDataOperation.SetFAction(Value : String); begin
  FAction := Value;
  JSCode('action:' + VarToJSON([Value]));
end;

procedure TExtDataOperation.SetFFilters(Value : TExtObjectList); begin
  FFilters := Value;
  Value.DeleteFromGarbage;
  JSCode('filters:' + VarToJSON([Value, false]));
end;

procedure TExtDataOperation.SetFSorters(Value : TExtObjectList); begin
  FSorters := Value;
  Value.DeleteFromGarbage;
  JSCode('sorters:' + VarToJSON([Value, false]));
end;

procedure TExtDataOperation.SetFGroup(Value : TExtUtilGrouper); begin
  FGroup := Value;
  Value.DeleteFromGarbage;
  JSCode('group:' + VarToJSON([Value, false]));
end;

procedure TExtDataOperation.SetFStart(Value : Integer); begin
  FStart := Value;
  JSCode('start:' + VarToJSON([Value]));
end;

procedure TExtDataOperation.SetFLimit(Value : Integer); begin
  FLimit := Value;
  JSCode('limit:' + VarToJSON([Value]));
end;

procedure TExtDataOperation.SetFBatch(Value : TExtDataBatch); begin
  FBatch := Value;
  Value.DeleteFromGarbage;
  JSCode('batch:' + VarToJSON([Value, false]));
end;

procedure TExtDataOperation.SetFCallback(Value : TExtFunction); begin
  FCallback := Value;
  JSCode('callback:' + VarToJSON([Value, true]));
end;

procedure TExtDataOperation.SetFScope(Value : TExtObject); begin
  FScope := Value;
  Value.DeleteFromGarbage;
  JSCode('scope:' + VarToJSON([Value, false]));
end;

function TExtDataOperation.JSClassName : string; begin
  Result := 'Ext-data-Operation';
end;

procedure TExtDataOperation.InitDefaults; begin
  inherited;
  FFilters := TExtObjectList.Create(Self, 'filters');
  FSorters := TExtObjectList.Create(Self, 'sorters');
  FGroup := TExtUtilGrouper.CreateInternal(Self, 'group');
  FBatch := TExtDataBatch.CreateInternal(Self, 'batch');
  FScope := TExtObject.CreateInternal(Self, 'scope');
end;

{$IFDEF FPC}constructor TExtDataOperation.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataOperation.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

constructor TExtDataOperation.Create(Config : TExtObject = nil); begin
  if Config = nil then CreateVar(JSClassName + '({});') else
  CreateVar(JSClassName + '(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

function TExtDataOperation.CommitRecords(ServerRecords : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.commitRecords(' + VarToJSON(ServerRecords) + ');', 'TExtDataOperation');
  Result := Self;
end;

function TExtDataOperation.SetStarted : TExtFunction; begin
  JSCode(JSName + '.setStarted();', 'TExtDataOperation');
  Result := Self;
end;

function TExtDataOperation.SetCompleted : TExtFunction; begin
  JSCode(JSName + '.setCompleted();', 'TExtDataOperation');
  Result := Self;
end;

function TExtDataOperation.SetSuccessful : TExtFunction; begin
  JSCode(JSName + '.setSuccessful();', 'TExtDataOperation');
  Result := Self;
end;

function TExtDataOperation.SetException(Error : String = '') : TExtFunction; begin
  JSCode(JSName + '.setException(' + VarToJSON([Error]) + ');', 'TExtDataOperation');
  Result := Self;
end;

function TExtDataOperation.SetException(Error : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetException(' + VarToJSON([Error, false]) + ');', 'TExtDataOperation');
  Result := Self;
end;

function TExtDataOperation.HasException : TExtFunction; begin
  JSCode(JSName + '.hasException();', 'TExtDataOperation');
  Result := Self;
end;

function TExtDataOperation.GetError : TExtFunction; begin
  JSCode(JSName + '.getError();', 'TExtDataOperation');
  Result := Self;
end;

function TExtDataOperation.GetRecords : TExtFunction; begin
  JSCode(JSName + '.getRecords();', 'TExtDataOperation');
  Result := Self;
end;

function TExtDataOperation.GetResultSet : TExtFunction; begin
  JSCode(JSName + '.getResultSet();', 'TExtDataOperation');
  Result := Self;
end;

function TExtDataOperation.IsStarted : TExtFunction; begin
  JSCode(JSName + '.isStarted();', 'TExtDataOperation');
  Result := Self;
end;

function TExtDataOperation.IsRunning : TExtFunction; begin
  JSCode(JSName + '.isRunning();', 'TExtDataOperation');
  Result := Self;
end;

function TExtDataOperation.IsComplete : TExtFunction; begin
  JSCode(JSName + '.isComplete();', 'TExtDataOperation');
  Result := Self;
end;

function TExtDataOperation.WasSuccessful : TExtFunction; begin
  JSCode(JSName + '.wasSuccessful();', 'TExtDataOperation');
  Result := Self;
end;

function TExtDataOperation.AllowWrite : TExtFunction; begin
  JSCode(JSName + '.allowWrite();', 'TExtDataOperation');
  Result := Self;
end;

destructor TExtDataOperation.Destroy; begin
  try
    FFilters.Free;
    FSorters.Free;
    FGroup.Free;
    FBatch.Free;
    FScope.Free;
  except end;
  inherited;
end;

procedure TExtFormFieldTextArea.SetFGrowMin(Value : Integer); begin
  FGrowMin := Value;
  JSCode('growMin:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTextArea.SetFGrowMax(Value : Integer); begin
  FGrowMax := Value;
  JSCode('growMax:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTextArea.SetFGrowAppend(Value : String); begin
  FGrowAppend := Value;
  JSCode('growAppend:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTextArea.SetFCols(Value : Integer); begin
  FCols := Value;
  JSCode('cols:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTextArea.SetFCols_(Value : Integer); begin
  FCols_ := Value;
  JSCode('cols:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTextArea.SetFEnterIsSpecial(Value : Boolean); begin
  FEnterIsSpecial := Value;
  JSCode('enterIsSpecial:' + VarToJSON([Value]));
end;

procedure TExtFormFieldTextArea.SetFPreventScrollbars(Value : Boolean); begin
  FPreventScrollbars := Value;
  JSCode('preventScrollbars:' + VarToJSON([Value]));
end;

function TExtFormFieldTextArea.JSClassName : string; begin
  Result := 'Ext-form-field-TextArea';
end;

{$IFDEF FPC}constructor TExtFormFieldTextArea.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtFormFieldTextArea.AutoSize : TExtFunction; begin
  JSCode(JSName + '.autoSize();', 'TExtFormFieldTextArea');
  Result := Self;
end;

function TExtDrawEngineVml.JSClassName : string; begin
  Result := 'Ext-draw-engine-Vml';
end;

{$IFDEF FPC}constructor TExtDrawEngineVml.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDrawEngineVml.AddGradient(Gradient : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.addGradient(' + VarToJSON([Gradient, false]) + ');', 'TExtDrawEngineVml');
  Result := Self;
end;

procedure TExtDataProxyDirect.SetFParamOrder(Value : String); begin
  FParamOrder := Value;
  JSCode('paramOrder:' + VarToJSON([Value]));
end;

procedure TExtDataProxyDirect.SetFParamOrderTExtObjectList(Value : TExtObjectList); begin
  FParamOrderTExtObjectList := Value;
  Value.DeleteFromGarbage;
  JSCode('paramOrder:' + VarToJSON([Value, false]));
end;

procedure TExtDataProxyDirect.SetFParamsAsHash(Value : Boolean); begin
  FParamsAsHash := Value;
  JSCode('paramsAsHash:' + VarToJSON([Value]));
end;

procedure TExtDataProxyDirect.SetFDirectFn(Value : TExtFunction); begin
  FDirectFn := Value;
  JSCode('directFn:' + VarToJSON([Value, true]));
end;

procedure TExtDataProxyDirect.SetFApi(Value : TExtObject); begin
  FApi := Value;
  Value.DeleteFromGarbage;
  JSCode('api:' + VarToJSON([Value, false]));
end;

procedure TExtDataProxyDirect.SetFExtraParams(Value : TExtObject); begin
  FExtraParams := Value;
  Value.DeleteFromGarbage;
  JSCode('extraParams:' + VarToJSON([Value, false]));
end;

function TExtDataProxyDirect.JSClassName : string; begin
  Result := 'Ext-data-proxy-Direct';
end;

procedure TExtDataProxyDirect.InitDefaults; begin
  inherited;
  FParamOrderTExtObjectList := TExtObjectList.Create(Self, 'paramOrder');
  FApi := TExtObject.CreateInternal(Self, 'api');
  FExtraParams := TExtObject.CreateInternal(Self, 'extraParams');
end;

{$IFDEF FPC}constructor TExtDataProxyDirect.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataProxyDirect.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

destructor TExtDataProxyDirect.Destroy; begin
  try
    FParamOrderTExtObjectList.Free;
    FApi.Free;
    FExtraParams.Free;
  except end;
  inherited;
end;

procedure TExtGridColumnAction.SetFIcon(Value : String); begin
  FIcon := Value;
  JSCode('icon:' + VarToJSON([Value]));
end;

procedure TExtGridColumnAction.SetFIconCls(Value : String); begin
  FIconCls := Value;
  JSCode('iconCls:' + VarToJSON([Value]));
end;

procedure TExtGridColumnAction.SetFHandler(Value : TExtFunction); begin
  FHandler := Value;
  JSCode('handler:' + VarToJSON([Value, true]));
end;

procedure TExtGridColumnAction.SetFScope(Value : TExtObject); begin
  FScope := Value;
  Value.DeleteFromGarbage;
  JSCode('scope:' + VarToJSON([Value, false]));
end;

procedure TExtGridColumnAction.SetFTooltip(Value : String); begin
  FTooltip := Value;
  JSCode('tooltip:' + VarToJSON([Value]));
end;

procedure TExtGridColumnAction.SetFDisabled(Value : Boolean); begin
  FDisabled := Value;
  JSCode('disabled:' + VarToJSON([Value]));
end;

procedure TExtGridColumnAction.SetFStopSelection(Value : Boolean); begin
  FStopSelection := Value;
  JSCode('stopSelection:' + VarToJSON([Value]));
end;

procedure TExtGridColumnAction.SetFGetClass(Value : TExtFunction); begin
  FGetClass := Value;
  JSCode('getClass:' + VarToJSON([Value, true]));
end;

procedure TExtGridColumnAction.SetFItems(Value : TExtObjectList); begin
  FItems := Value;
  Value.DeleteFromGarbage;
  JSCode('items:' + VarToJSON([Value, false]));
end;

function TExtGridColumnAction.JSClassName : string; begin
  Result := 'Ext-grid-column-Action';
end;

class function TExtGridColumnAction.View : TExtViewTable;
const
  lView : TExtViewTable = nil;
begin
  if lView = nil then lView := TExtViewTable.CreateSingleton('Ext-grid-column-Action.View');
  Result := lView
end;

class function TExtGridColumnAction.RowIndex : Integer; begin
  Result := 0
end;

class function TExtGridColumnAction.ColIndex : Integer; begin
  Result := 0
end;

class function TExtGridColumnAction.Item : TExtObject;
const
  lItem : TExtObject = nil;
begin
  if lItem = nil then lItem := TExtObject.CreateSingleton('Ext-grid-column-Action.Item');
  Result := lItem
end;

class function TExtGridColumnAction.E : TEvent;
const
  lE : TEvent = nil;
begin
  if lE = nil then lE := TEvent.CreateSingleton('Ext-grid-column-Action.E');
  Result := lE
end;

class function TExtGridColumnAction.V : TExtObject;
const
  lV : TExtObject = nil;
begin
  if lV = nil then lV := TExtObject.CreateSingleton('Ext-grid-column-Action.V');
  Result := lV
end;

class function TExtGridColumnAction.Metadata : TExtObject;
const
  lMetadata : TExtObject = nil;
begin
  if lMetadata = nil then lMetadata := TExtObject.CreateSingleton('Ext-grid-column-Action.Metadata');
  Result := lMetadata
end;

class function TExtGridColumnAction.Css : String; begin
  Result := ''
end;

class function TExtGridColumnAction.Attr : String; begin
  Result := ''
end;

class function TExtGridColumnAction.R : TExtDataModel;
const
  lR : TExtDataModel = nil;
begin
  if lR = nil then lR := TExtDataModel.CreateSingleton('Ext-grid-column-Action.R');
  Result := lR
end;

class function TExtGridColumnAction.RowIndex_ : Integer; begin
  Result := 0
end;

class function TExtGridColumnAction.ColIndex_ : Integer; begin
  Result := 0
end;

class function TExtGridColumnAction.Store : TExtDataStore;
const
  lStore : TExtDataStore = nil;
begin
  if lStore = nil then lStore := TExtDataStore.CreateSingleton('Ext-grid-column-Action.Store');
  Result := lStore
end;

class function TExtGridColumnAction.Icon_ : String; begin
  Result := ''
end;

class function TExtGridColumnAction.IconCls_ : String; begin
  Result := ''
end;

class function TExtGridColumnAction.GetClass_ : TExtFunction;
const
  lGetClass_ : TExtFunction = nil;
begin
  if lGetClass_ = nil then lGetClass_ := TExtFunction.CreateSingleton('Ext-grid-column-Action.GetClass');
  Result := lGetClass_
end;

class function TExtGridColumnAction.V_ : TExtObject;
const
  lV_ : TExtObject = nil;
begin
  if lV_ = nil then lV_ := TExtObject.CreateSingleton('Ext-grid-column-Action.V');
  Result := lV_
end;

class function TExtGridColumnAction.Metadata_ : TExtObject;
const
  lMetadata_ : TExtObject = nil;
begin
  if lMetadata_ = nil then lMetadata_ := TExtObject.CreateSingleton('Ext-grid-column-Action.Metadata');
  Result := lMetadata_
end;

class function TExtGridColumnAction.Css_ : String; begin
  Result := ''
end;

class function TExtGridColumnAction.Attr_ : String; begin
  Result := ''
end;

class function TExtGridColumnAction.R_ : TExtDataModel;
const
  lR_ : TExtDataModel = nil;
begin
  if lR_ = nil then lR_ := TExtDataModel.CreateSingleton('Ext-grid-column-Action.R');
  Result := lR_
end;

{$IFDEF FPC}constructor TExtGridColumnAction.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtGridColumnAction.EnableAction : TExtFunction; begin
  JSCode(JSName + '.enableAction();', 'TExtGridColumnAction');
  Result := Self;
end;

function TExtGridColumnAction.DisableAction : TExtFunction; begin
  JSCode(JSName + '.disableAction();', 'TExtGridColumnAction');
  Result := Self;
end;

function TExtEnvFeatureDetector.JSClassName : string; begin
  Result := 'Ext-env-FeatureDetector';
end;

{$IFDEF FPC}constructor TExtEnvFeatureDetector.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtCompositeElement.JSClassName : string; begin
  Result := 'Ext-CompositeElement';
end;

{$IFDEF FPC}constructor TExtCompositeElement.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtCompositeElement.Select(Selector : String; Unique : Boolean = false; Root : THTMLElement = nil) : TExtFunction; begin
  JSCode(JSName + '.select(' + VarToJSON([Selector, Unique, Root, false]) + ');', 'TExtCompositeElement');
  Result := Self;
end;

function TExtCompositeElement.Select(Selector : TExtObjectList; Unique : Boolean = false; Root : THTMLElement = nil) : TExtFunction; begin
  JSCode(JSName + '.Select(' + VarToJSON(Selector) + ',' + VarToJSON([Unique, Root, false]) + ');', 'TExtCompositeElement');
  Result := Self;
end;

function TExtCompositeElement.Select(Selector : TExtObjectList; Unique : Boolean; Root : String) : TExtFunction; begin
  JSCode(JSName + '.Select(' + VarToJSON(Selector) + ',' + VarToJSON([Unique, Root]) + ');', 'TExtCompositeElement');
  Result := Self;
end;

function TExtCompositeElement.Select(Selector : String; Unique : Boolean; Root : String) : TExtFunction; begin
  JSCode(JSName + '.Select(' + VarToJSON([Selector, Unique, Root]) + ');', 'TExtCompositeElement');
  Result := Self;
end;

function TExtCompositeElement.Select_ : TExtFunction; begin
  JSCode(JSName + '.select();', 'TExtCompositeElement');
  Result := Self;
end;

procedure TExtAppController.SetFId(Value : String); begin
  FId := Value;
  JSCode('id:' + VarToJSON([Value]));
end;

procedure TExtAppController.SetFModels(Value : TExtObjectList); begin
  FModels := Value;
  Value.DeleteFromGarbage;
  JSCode('models:' + VarToJSON([Value, false]));
end;

procedure TExtAppController.SetFViews(Value : TExtObjectList); begin
  FViews := Value;
  Value.DeleteFromGarbage;
  JSCode('views:' + VarToJSON([Value, false]));
end;

procedure TExtAppController.SetFStores(Value : TExtObjectList); begin
  FStores := Value;
  Value.DeleteFromGarbage;
  JSCode('stores:' + VarToJSON([Value, false]));
end;

function TExtAppController.JSClassName : string; begin
  Result := 'Ext-app-Controller';
end;

procedure TExtAppController.InitDefaults; begin
  inherited;
  FModels := TExtObjectList.Create(Self, 'models');
  FViews := TExtObjectList.Create(Self, 'views');
  FStores := TExtObjectList.Create(Self, 'stores');
end;

{$IFDEF FPC}constructor TExtAppController.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtAppController.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

constructor TExtAppController.Create(Config : TExtObject = nil); begin
  if Config = nil then CreateVar(JSClassName + '({});') else
  CreateVar(JSClassName + '(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

function TExtAppController.Init(Application : TExtAppApplication) : TExtFunction; begin
  JSCode(JSName + '.init(' + VarToJSON([Application, false]) + ');', 'TExtAppController');
  Result := Self;
end;

function TExtAppController.OnLaunch(Application : TExtAppApplication) : TExtFunction; begin
  JSCode(JSName + '.onLaunch(' + VarToJSON([Application, false]) + ');', 'TExtAppController');
  Result := Self;
end;

function TExtAppController.Control(Selectors : String; Listeners : TExtObject; Name : String) : TExtFunction; begin
  JSCode(JSName + '.control(' + VarToJSON([Selectors, Listeners, false, Name]) + ');', 'TExtAppController');
  Result := Self;
end;

function TExtAppController.Control(Selectors : TExtObject; Listeners : TExtObject; Name : String) : TExtFunction; begin
  JSCode(JSName + '.Control(' + VarToJSON([Selectors, false, Listeners, false, Name]) + ');', 'TExtAppController');
  Result := Self;
end;

function TExtAppController.GetStore(Name : String) : TExtFunction; begin
  JSCode(JSName + '.getStore(' + VarToJSON([Name]) + ');', 'TExtAppController');
  Result := Self;
end;

function TExtAppController.GetModel(Name : String) : TExtFunction; begin
  JSCode(JSName + '.getModel(' + VarToJSON([Name]) + ');', 'TExtAppController');
  Result := Self;
end;

function TExtAppController.GetView(Name : String) : TExtFunction; begin
  JSCode(JSName + '.getView(' + VarToJSON([Name]) + ');', 'TExtAppController');
  Result := Self;
end;

destructor TExtAppController.Destroy; begin
  try
    FModels.Free;
    FViews.Free;
    FStores.Free;
  except end;
  inherited;
end;

procedure TExtUtilFloating.SetFFocusOnToFront(Value : Boolean); begin
  FFocusOnToFront := Value;
  JSCode('focusOnToFront:' + VarToJSON([Value]));
end;

procedure TExtUtilFloating.SetFShadow(Value : String); begin
  FShadow := Value;
  JSCode('shadow:' + VarToJSON([Value]));
end;

procedure TExtUtilFloating.SetFShadowBoolean(Value : Boolean); begin
  FShadowBoolean := Value;
  JSCode('shadow:' + VarToJSON([Value]));
end;

function TExtUtilFloating.JSClassName : string; begin
  Result := 'Ext-util-Floating';
end;

{$IFDEF FPC}constructor TExtUtilFloating.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilFloating.DoConstrain(ConstrainTo : String = '') : TExtFunction; begin
  JSCode(JSName + '.doConstrain(' + VarToJSON([ConstrainTo]) + ');', 'TExtUtilFloating');
  Result := Self;
end;

function TExtUtilFloating.DoConstrain(ConstrainTo : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.DoConstrain(' + VarToJSON([ConstrainTo, false]) + ');', 'TExtUtilFloating');
  Result := Self;
end;

function TExtUtilFloating.DoConstrain(ConstrainTo : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.DoConstrain(' + VarToJSON([ConstrainTo, false]) + ');', 'TExtUtilFloating');
  Result := Self;
end;

function TExtUtilFloating.DoConstrain(ConstrainTo : TExtUtilRegion) : TExtFunction; begin
  JSCode(JSName + '.DoConstrain(' + VarToJSON([ConstrainTo, false]) + ');', 'TExtUtilFloating');
  Result := Self;
end;

function TExtUtilFloating.AlignTo(Element : TExtComponent; Position : String = ''; Offsets : TArrayOfInteger = nil) : TExtFunction; begin
  JSCode(JSName + '.alignTo(' + VarToJSON([Element, false, Position, Offsets]) + ');', 'TExtUtilFloating');
  Result := Self;
end;

function TExtUtilFloating.AlignTo(Element : TExtElement; Position : String = ''; Offsets : TArrayOfInteger = nil) : TExtFunction; begin
  JSCode(JSName + '.AlignTo(' + VarToJSON([Element, false, Position, Offsets]) + ');', 'TExtUtilFloating');
  Result := Self;
end;

function TExtUtilFloating.AlignTo(Element : THTMLElement; Position : String = ''; Offsets : TArrayOfInteger = nil) : TExtFunction; begin
  JSCode(JSName + '.AlignTo(' + VarToJSON([Element, false, Position, Offsets]) + ');', 'TExtUtilFloating');
  Result := Self;
end;

function TExtUtilFloating.AlignTo(Element : String; Position : String = ''; Offsets : TArrayOfInteger = nil) : TExtFunction; begin
  JSCode(JSName + '.AlignTo(' + VarToJSON([Element, Position, Offsets]) + ');', 'TExtUtilFloating');
  Result := Self;
end;

function TExtUtilFloating.ToFront(PreventFocus : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.toFront(' + VarToJSON([PreventFocus]) + ');', 'TExtUtilFloating');
  Result := Self;
end;

function TExtUtilFloating.SetActive(Active : Boolean = false; NewActive : TExtComponent = nil) : TExtFunction; begin
  JSCode(JSName + '.setActive(' + VarToJSON([Active, NewActive, false]) + ');', 'TExtUtilFloating');
  Result := Self;
end;

function TExtUtilFloating.ToBack : TExtFunction; begin
  JSCode(JSName + '.toBack();', 'TExtUtilFloating');
  Result := Self;
end;

function TExtUtilFloating.Center : TExtFunction; begin
  JSCode(JSName + '.center();', 'TExtUtilFloating');
  Result := Self;
end;

function TExtFxTargetCompositeElement.JSClassName : string; begin
  Result := 'Ext-fx-target-CompositeElement';
end;

{$IFDEF FPC}constructor TExtFxTargetCompositeElement.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtUtilKeyNav.SetFDisabled(Value : Boolean); begin
  FDisabled := Value;
  if not ConfigAvailable(JSName) then
    SetDisabled(Value)
  else
    JSCode('disabled:' + VarToJSON([Value]));
end;

procedure TExtUtilKeyNav.SetFDefaultEventAction(Value : String); begin
  FDefaultEventAction := Value;
  JSCode('defaultEventAction:' + VarToJSON([Value]));
end;

procedure TExtUtilKeyNav.SetFForceKeyDown(Value : Boolean); begin
  FForceKeyDown := Value;
  JSCode('forceKeyDown:' + VarToJSON([Value]));
end;

function TExtUtilKeyNav.JSClassName : string; begin
  Result := 'Ext-util-KeyNav';
end;

{$IFDEF FPC}constructor TExtUtilKeyNav.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilKeyNav.DestroyJS(RemoveEl : Boolean) : TExtFunction; begin
  JSCode(JSName + '.destroy(' + VarToJSON([RemoveEl]) + ');', 'TExtUtilKeyNav');
  Result := Self;
end;

function TExtUtilKeyNav.Enable : TExtFunction; begin
  JSCode(JSName + '.enable();', 'TExtUtilKeyNav');
  Result := Self;
end;

function TExtUtilKeyNav.Disable : TExtFunction; begin
  JSCode(JSName + '.disable();', 'TExtUtilKeyNav');
  Result := Self;
end;

function TExtUtilKeyNav.SetDisabled(Disabled : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setDisabled(' + VarToJSON([Disabled]) + ');', 'TExtUtilKeyNav');
  Result := Self;
end;

function TExtUtilKeyNav.GetKeyEvent : TExtFunction; begin
  JSCode(JSName + '.getKeyEvent();', 'TExtUtilKeyNav');
  Result := Self;
end;

procedure TExtDataBatch.SetFOnComplete(Value : TExtDataBatchOnComplete); begin
  if Assigned(FOnComplete) then
    JSCode(JSName+'.events ["complete"].listeners=[];');
  if Assigned(Value) then
    On('complete', Ajax('complete', ['Batch', '%0.nm','Operation', '%1.nm'], true));
  FOnComplete := Value;
end;

procedure TExtDataBatch.SetFOnException(Value : TExtDataBatchOnException); begin
  if Assigned(FOnException) then
    JSCode(JSName+'.events ["exception"].listeners=[];');
  if Assigned(Value) then
    On('exception', Ajax('exception', ['Batch', '%0.nm','Operation', '%1.nm'], true));
  FOnException := Value;
end;

procedure TExtDataBatch.SetFOnOperationcomplete(Value : TExtDataBatchOnOperationcomplete); begin
  if Assigned(FOnOperationcomplete) then
    JSCode(JSName+'.events ["operationcomplete"].listeners=[];');
  if Assigned(Value) then
    On('operationcomplete', Ajax('operationcomplete', ['Batch', '%0.nm','Operation', '%1.nm'], true));
  FOnOperationcomplete := Value;
end;

function TExtDataBatch.JSClassName : string; begin
  Result := 'Ext-data-Batch';
end;

{$IFDEF FPC}constructor TExtDataBatch.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataBatch.Add(Operation : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.add(' + VarToJSON([Operation, false]) + ');', 'TExtDataBatch');
  Result := Self;
end;

function TExtDataBatch.Start : TExtFunction; begin
  JSCode(JSName + '.start();', 'TExtDataBatch');
  Result := Self;
end;

function TExtDataBatch.Pause : TExtFunction; begin
  JSCode(JSName + '.pause();', 'TExtDataBatch');
  Result := Self;
end;

function TExtDataBatch.RunOperation(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.runOperation(' + VarToJSON([Index]) + ');', 'TExtDataBatch');
  Result := Self;
end;

procedure TExtDataBatch.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'complete') and Assigned(FOnComplete) then
    FOnComplete(TExtDataBatch(ParamAsObject('Batch')), TExtObject(ParamAsObject('Operation')))
  else if (AEvtName = 'exception') and Assigned(FOnException) then
    FOnException(TExtDataBatch(ParamAsObject('Batch')), TExtObject(ParamAsObject('Operation')))
  else if (AEvtName = 'operationcomplete') and Assigned(FOnOperationcomplete) then
    FOnOperationcomplete(TExtDataBatch(ParamAsObject('Batch')), TExtObject(ParamAsObject('Operation')));
end;

function TExtGridPropertyStore.JSClassName : string; begin
  Result := 'Ext-grid-property-Store';
end;

{$IFDEF FPC}constructor TExtGridPropertyStore.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridPropertyStore.Create(Grid : TExtGridPanel; Source : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Grid, false, Source, false]) + ');');
  InitDefaults;
end;

procedure TExtButtonSplit.SetFArrowHandler(Value : TExtFunction); begin
  FArrowHandler := Value;
  if not ConfigAvailable(JSName) then
    SetArrowHandler(Value)
  else
    JSCode('arrowHandler:' + VarToJSON([Value, true]));
end;

procedure TExtButtonSplit.SetFArrowTooltip(Value : String); begin
  FArrowTooltip := Value;
  JSCode('arrowTooltip:' + VarToJSON([Value]));
end;

procedure TExtButtonSplit.SetFOnArrowclick(Value : TExtButtonSplitOnArrowclick); begin
  if Assigned(FOnArrowclick) then
    JSCode(JSName+'.events ["arrowclick"].listeners=[];');
  if Assigned(Value) then
    On('arrowclick', Ajax('arrowclick', ['This', '%0.nm','E', '%1.nm'], true));
  FOnArrowclick := Value;
end;

function TExtButtonSplit.JSClassName : string; begin
  Result := 'Ext-button-Split';
end;

{$IFDEF FPC}constructor TExtButtonSplit.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtButtonSplit.SetArrowHandler(Handler : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.setArrowHandler(' + VarToJSON([Handler, true, Scope, false]) + ');', 'TExtButtonSplit');
  Result := Self;
end;

procedure TExtButtonSplit.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'arrowclick') and Assigned(FOnArrowclick) then
    FOnArrowclick(TExtButtonSplit(ParamAsObject('This')), TEvent(ParamAsObject('E')));
end;

procedure TExtGridColumnTemplate.SetFTpl(Value : String); begin
  FTpl := Value;
  JSCode('tpl:' + VarToJSON([Value]));
end;

procedure TExtGridColumnTemplate.SetFTplTExtXTemplate(Value : TExtXTemplate); begin
  FTplTExtXTemplate := Value;
  Value.DeleteFromGarbage;
  JSCode('tpl:' + VarToJSON([Value, false]));
end;

function TExtGridColumnTemplate.JSClassName : string; begin
  Result := 'Ext-grid-column-Template';
end;

procedure TExtGridColumnTemplate.InitDefaults; begin
  inherited;
  FTplTExtXTemplate := TExtXTemplate.CreateInternal(Self, 'tpl');
end;

{$IFDEF FPC}constructor TExtGridColumnTemplate.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridColumnTemplate.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

destructor TExtGridColumnTemplate.Destroy; begin
  try
    FTplTExtXTemplate.Free;
  except end;
  inherited;
end;

procedure TExtChartSeriesSeries.SetFHighlight(Value : Boolean); begin
  FHighlight := Value;
  JSCode('highlight:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesSeries.SetFHighlightTExtObject(Value : TExtObject); begin
  FHighlightTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('highlight:' + VarToJSON([Value, false]));
end;

procedure TExtChartSeriesSeries.SetFTips(Value : TExtObject); begin
  FTips := Value;
  Value.DeleteFromGarbage;
  JSCode('tips:' + VarToJSON([Value, false]));
end;

procedure TExtChartSeriesSeries.SetFTypeJS(Value : String); begin
  FTypeJS := Value;
  JSCode('typeJS:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesSeries.SetFTitle(Value : String); begin
  FTitle := Value;
  JSCode('title:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesSeries.SetFShowInLegend(Value : Boolean); begin
  FShowInLegend := Value;
  JSCode('showInLegend:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesSeries.SetFRenderer(Value : TExtFunction); begin
  FRenderer := Value;
  JSCode('renderer:' + VarToJSON([Value, true]));
end;

procedure TExtChartSeriesSeries.SetFShadowAttributes(Value : TExtObjectList); begin
  FShadowAttributes := Value;
  Value.DeleteFromGarbage;
  JSCode('shadowAttributes:' + VarToJSON([Value, false]));
end;

procedure TExtChartSeriesSeries.SetFListeners(Value : TExtObject); begin
  FListeners := Value;
  Value.DeleteFromGarbage;
  JSCode('listeners:' + VarToJSON([Value, false]));
end;

procedure TExtChartSeriesSeries.SetFOnTitlechange(Value : TExtChartSeriesSeriesOnTitlechange); begin
  if Assigned(FOnTitlechange) then
    JSCode(JSName+'.events ["titlechange"].listeners=[];');
  if Assigned(Value) then
    On('titlechange', Ajax('titlechange', ['Title', '%0','Index', '%1'], true));
  FOnTitlechange := Value;
end;

function TExtChartSeriesSeries.JSClassName : string; begin
  Result := 'Ext-chart-series-Series';
end;

procedure TExtChartSeriesSeries.InitDefaults; begin
  inherited;
  FHighlightTExtObject := TExtObject.CreateInternal(Self, 'highlight');
  FTips := TExtObject.CreateInternal(Self, 'tips');
  FShadowAttributes := TExtObjectList.Create(Self, 'shadowAttributes');
  FListeners := TExtObject.CreateInternal(Self, 'listeners');
end;

{$IFDEF FPC}constructor TExtChartSeriesSeries.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtChartSeriesSeries.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtChartSeriesSeries.EachRecord(Fn : TExtFunction; Scope : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.eachRecord(' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtChartSeriesSeries');
  Result := Self;
end;

function TExtChartSeriesSeries.GetRecordCount : TExtFunction; begin
  JSCode(JSName + '.getRecordCount();', 'TExtChartSeriesSeries');
  Result := Self;
end;

function TExtChartSeriesSeries.IsExcluded(ElseJS : TExtObjectList; X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.isExcluded(' + VarToJSON(ElseJS) + ',' + VarToJSON([X, Y]) + ');', 'TExtChartSeriesSeries');
  Result := Self;
end;

function TExtChartSeriesSeries.IsExcluded(ElseJS : ; X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.IsExcluded(' + VarToJSON([ElseJS, X, Y]) + ');', 'TExtChartSeriesSeries');
  Result := Self;
end;

function TExtChartSeriesSeries.IsExcluded(ElseJS : TExtObjectList; X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.IsExcluded(' + VarToJSON(ElseJS) + ',' + VarToJSON([X, Y]) + ');', 'TExtChartSeriesSeries');
  Result := Self;
end;

function TExtChartSeriesSeries.IsExcluded(ElseJS : ; X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.IsExcluded(' + VarToJSON([ElseJS, X, Y]) + ');', 'TExtChartSeriesSeries');
  Result := Self;
end;

function TExtChartSeriesSeries.IsExcluded(ElseJS : TExtObjectList; X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.IsExcluded(' + VarToJSON(ElseJS) + ',' + VarToJSON([X, Y]) + ');', 'TExtChartSeriesSeries');
  Result := Self;
end;

function TExtChartSeriesSeries.HideAll : TExtFunction; begin
  JSCode(JSName + '.hideAll();', 'TExtChartSeriesSeries');
  Result := Self;
end;

function TExtChartSeriesSeries.ShowAll : TExtFunction; begin
  JSCode(JSName + '.showAll();', 'TExtChartSeriesSeries');
  Result := Self;
end;

function TExtChartSeriesSeries.GetLegendColor : TExtFunction; begin
  JSCode(JSName + '.getLegendColor();', 'TExtChartSeriesSeries');
  Result := Self;
end;

function TExtChartSeriesSeries.SetTitle(Index : Integer; Title : String) : TExtFunction; begin
  JSCode(JSName + '.setTitle(' + VarToJSON([Index, Title]) + ');', 'TExtChartSeriesSeries');
  Result := Self;
end;

destructor TExtChartSeriesSeries.Destroy; begin
  try
    FHighlightTExtObject.Free;
    FTips.Free;
    FShadowAttributes.Free;
    FListeners.Free;
  except end;
  inherited;
end;

procedure TExtChartSeriesSeries.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'titlechange') and Assigned(FOnTitlechange) then
    FOnTitlechange(ParamAsString('Title'), ParamAsInteger('Index'));
end;

function TExtDdScrollManagerSingleton.JSClassName : string; begin
  Result := 'Ext-dd-ScrollManagerSingleton';
end;

{$IFDEF FPC}constructor TExtDdScrollManagerSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDdScrollManagerSingleton.Register(El : String) : TExtFunction; begin
  JSCode(JSName + '.register(' + VarToJSON([El]) + ');', 'TExtDdScrollManagerSingleton');
  Result := Self;
end;

function TExtDdScrollManagerSingleton.Register(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.Register(' + VarToJSON([El, false]) + ');', 'TExtDdScrollManagerSingleton');
  Result := Self;
end;

function TExtDdScrollManagerSingleton.Register(El : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.Register(' + VarToJSON([El, false]) + ');', 'TExtDdScrollManagerSingleton');
  Result := Self;
end;

function TExtDdScrollManagerSingleton.Register(El : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.Register(' + VarToJSON(El) + ');', 'TExtDdScrollManagerSingleton');
  Result := Self;
end;

function TExtDdScrollManagerSingleton.Unregister(El : String) : TExtFunction; begin
  JSCode(JSName + '.unregister(' + VarToJSON([El]) + ');', 'TExtDdScrollManagerSingleton');
  Result := Self;
end;

function TExtDdScrollManagerSingleton.Unregister(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.Unregister(' + VarToJSON([El, false]) + ');', 'TExtDdScrollManagerSingleton');
  Result := Self;
end;

function TExtDdScrollManagerSingleton.Unregister(El : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.Unregister(' + VarToJSON([El, false]) + ');', 'TExtDdScrollManagerSingleton');
  Result := Self;
end;

function TExtDdScrollManagerSingleton.Unregister(El : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.Unregister(' + VarToJSON(El) + ');', 'TExtDdScrollManagerSingleton');
  Result := Self;
end;

function TExtDdScrollManagerSingleton.RefreshCache : TExtFunction; begin
  JSCode(JSName + '.refreshCache();', 'TExtDdScrollManagerSingleton');
  Result := Self;
end;

procedure TExtUtilHistorySingleton.SetFOnReady(Value : TExtUtilHistorySingletonOnReady); begin
  if Assigned(FOnReady) then
    JSCode(JSName+'.events ["ready"].listeners=[];');
  if Assigned(Value) then
    On('ready', Ajax('ready', ['The', '%0.nm'], true));
  FOnReady := Value;
end;

procedure TExtUtilHistorySingleton.SetFOnChange(Value : TExtUtilHistorySingletonOnChange); begin
  if Assigned(FOnChange) then
    JSCode(JSName+'.events ["change"].listeners=[];');
  if Assigned(Value) then
    On('change', Ajax('change', ['Token', '%0'], true));
  FOnChange := Value;
end;

function TExtUtilHistorySingleton.JSClassName : string; begin
  Result := 'Ext-util-HistorySingleton';
end;

{$IFDEF FPC}constructor TExtUtilHistorySingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilHistorySingleton.Add(Token : String; PreventDuplicates : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.add(' + VarToJSON([Token, PreventDuplicates]) + ');', 'TExtUtilHistorySingleton');
  Result := Self;
end;

function TExtUtilHistorySingleton.Back : TExtFunction; begin
  JSCode(JSName + '.back();', 'TExtUtilHistorySingleton');
  Result := Self;
end;

function TExtUtilHistorySingleton.Forward : TExtFunction; begin
  JSCode(JSName + '.forward();', 'TExtUtilHistorySingleton');
  Result := Self;
end;

function TExtUtilHistorySingleton.GetToken : TExtFunction; begin
  JSCode(JSName + '.getToken();', 'TExtUtilHistorySingleton');
  Result := Self;
end;

procedure TExtUtilHistorySingleton.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'ready') and Assigned(FOnReady) then
    FOnReady(ExtUtilHistory)
  else if (AEvtName = 'change') and Assigned(FOnChange) then
    FOnChange(ParamAsString('Token'));
end;

procedure TExtTipQuickTip.SetFTarget(Value : String); begin
  FTarget := Value;
  JSCode('target:' + VarToJSON([Value]));
end;

procedure TExtTipQuickTip.SetFTargetTHTMLElement(Value : THTMLElement); begin
  FTargetTHTMLElement := Value;
  Value.DeleteFromGarbage;
  JSCode('target:' + VarToJSON([Value, false]));
end;

procedure TExtTipQuickTip.SetFTargetTExtElement(Value : TExtElement); begin
  FTargetTExtElement := Value;
  Value.DeleteFromGarbage;
  JSCode('target:' + VarToJSON([Value, false]));
end;

procedure TExtTipQuickTip.SetFInterceptTitles(Value : Boolean); begin
  FInterceptTitles := Value;
  JSCode('interceptTitles:' + VarToJSON([Value]));
end;

function TExtTipQuickTip.JSClassName : string; begin
  Result := 'Ext-tip-QuickTip';
end;

procedure TExtTipQuickTip.InitDefaults; begin
  inherited;
  FTargetTExtElement := TExtElement.CreateInternal(Self, 'target');
end;

{$IFDEF FPC}constructor TExtTipQuickTip.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtTipQuickTip.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtTipQuickTip.Register(Config : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.register(' + VarToJSON([Config, false]) + ');', 'TExtTipQuickTip');
  Result := Self;
end;

function TExtTipQuickTip.Unregister(El : String) : TExtFunction; begin
  JSCode(JSName + '.unregister(' + VarToJSON([El]) + ');', 'TExtTipQuickTip');
  Result := Self;
end;

function TExtTipQuickTip.Unregister(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.Unregister(' + VarToJSON([El, false]) + ');', 'TExtTipQuickTip');
  Result := Self;
end;

function TExtTipQuickTip.Unregister(El : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.Unregister(' + VarToJSON([El, false]) + ');', 'TExtTipQuickTip');
  Result := Self;
end;

function TExtTipQuickTip.CancelShow(El : String) : TExtFunction; begin
  JSCode(JSName + '.cancelShow(' + VarToJSON([El]) + ');', 'TExtTipQuickTip');
  Result := Self;
end;

function TExtTipQuickTip.CancelShow(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.CancelShow(' + VarToJSON([El, false]) + ');', 'TExtTipQuickTip');
  Result := Self;
end;

function TExtTipQuickTip.CancelShow(El : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.CancelShow(' + VarToJSON([El, false]) + ');', 'TExtTipQuickTip');
  Result := Self;
end;

destructor TExtTipQuickTip.Destroy; begin
  try
    FTargetTExtElement.Free;
  except end;
  inherited;
end;

procedure TExtFxAnimator.SetFDuration(Value : Integer); begin
  FDuration := Value;
  JSCode('duration:' + VarToJSON([Value]));
end;

procedure TExtFxAnimator.SetFDelay(Value : Integer); begin
  FDelay := Value;
  JSCode('delay:' + VarToJSON([Value]));
end;

procedure TExtFxAnimator.SetFDynamic(Value : Boolean); begin
  FDynamic := Value;
  JSCode('dynamic:' + VarToJSON([Value]));
end;

procedure TExtFxAnimator.SetFEasing(Value : String); begin
  FEasing := Value;
  JSCode('easing:' + VarToJSON([Value]));
end;

procedure TExtFxAnimator.SetFIterations(Value : Integer); begin
  FIterations := Value;
  JSCode('iterations:' + VarToJSON([Value]));
end;

procedure TExtFxAnimator.SetFTarget(Value : TExtFxTargetTarget); begin
  FTarget := Value;
  Value.DeleteFromGarbage;
  JSCode('target:' + VarToJSON([Value, false]));
end;

procedure TExtFxAnimator.SetFKeyframes(Value : TExtObject); begin
  FKeyframes := Value;
  Value.DeleteFromGarbage;
  JSCode('keyframes:' + VarToJSON([Value, false]));
end;

procedure TExtFxAnimator.SetFOnBeforeanimate(Value : TExtFxAnimatorOnBeforeanimate); begin
  if Assigned(FOnBeforeanimate) then
    JSCode(JSName+'.events ["beforeanimate"].listeners=[];');
  if Assigned(Value) then
    On('beforeanimate', Ajax('beforeanimate', ['This', '%0.nm','This_', '%1.nm','Keyframe', '%2'], true));
  FOnBeforeanimate := Value;
end;

procedure TExtFxAnimator.SetFOnAfteranimate(Value : TExtFxAnimatorOnAfteranimate); begin
  if Assigned(FOnAfteranimate) then
    JSCode(JSName+'.events ["afteranimate"].listeners=[];');
  if Assigned(Value) then
    On('afteranimate', Ajax('afteranimate', ['This', '%0.nm','StartTime', '%1'], true));
  FOnAfteranimate := Value;
end;

function TExtFxAnimator.JSClassName : string; begin
  Result := 'Ext-fx-Animator';
end;

procedure TExtFxAnimator.InitDefaults; begin
  inherited;
  FTarget := TExtFxTargetTarget.CreateInternal(Self, 'target');
  FKeyframes := TExtObject.CreateInternal(Self, 'keyframes');
end;

{$IFDEF FPC}constructor TExtFxAnimator.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtFxAnimator.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtFxAnimator.EndJS : TExtFunction; begin
  JSCode(JSName + '.end();', 'TExtFxAnimator');
  Result := Self;
end;

destructor TExtFxAnimator.Destroy; begin
  try
    FTarget.Free;
    FKeyframes.Free;
  except end;
  inherited;
end;

procedure TExtFxAnimator.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforeanimate') and Assigned(FOnBeforeanimate) then
    FOnBeforeanimate(TExtFxAnimator(ParamAsObject('This')), TExtFxAnimator(ParamAsObject('This_')), ParamAsInteger('Keyframe'))
  else if (AEvtName = 'afteranimate') and Assigned(FOnAfteranimate) then
    FOnAfteranimate(TExtFxAnimator(ParamAsObject('This')), ParamAsTDateTime('StartTime'));
end;

procedure TExtChartAxisAxis.SetFGrid(Value : Boolean); begin
  FGrid := Value;
  JSCode('grid:' + VarToJSON([Value]));
end;

procedure TExtChartAxisAxis.SetFGridTExtObject(Value : TExtObject); begin
  FGridTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('grid:' + VarToJSON([Value, false]));
end;

procedure TExtChartAxisAxis.SetFMajorTickSteps(Value : Integer); begin
  FMajorTickSteps := Value;
  JSCode('majorTickSteps:' + VarToJSON([Value]));
end;

procedure TExtChartAxisAxis.SetFMinorTickSteps(Value : Integer); begin
  FMinorTickSteps := Value;
  JSCode('minorTickSteps:' + VarToJSON([Value]));
end;

procedure TExtChartAxisAxis.SetFTitle(Value : String); begin
  FTitle := Value;
  if not ConfigAvailable(JSName) then
    SetTitle(Value)
  else
    JSCode('title:' + VarToJSON([Value]));
end;

procedure TExtChartAxisAxis.SetFDashSize(Value : Integer); begin
  FDashSize := Value;
  JSCode('dashSize:' + VarToJSON([Value]));
end;

procedure TExtChartAxisAxis.SetFPosition(Value : String); begin
  FPosition := Value;
  JSCode('position:' + VarToJSON([Value]));
end;

procedure TExtChartAxisAxis.SetFLength(Value : Integer); begin
  FLength := Value;
  JSCode('length:' + VarToJSON([Value]));
end;

procedure TExtChartAxisAxis.SetFWidth(Value : Integer); begin
  FWidth := Value;
  JSCode('width:' + VarToJSON([Value]));
end;

function TExtChartAxisAxis.JSClassName : string; begin
  Result := 'Ext-chart-axis-Axis';
end;

procedure TExtChartAxisAxis.InitDefaults; begin
  inherited;
  FGridTExtObject := TExtObject.CreateInternal(Self, 'grid');
end;

{$IFDEF FPC}constructor TExtChartAxisAxis.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtChartAxisAxis.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtChartAxisAxis.DrawAxis : TExtFunction; begin
  JSCode(JSName + '.drawAxis();', 'TExtChartAxisAxis');
  Result := Self;
end;

function TExtChartAxisAxis.DrawGrid : TExtFunction; begin
  JSCode(JSName + '.drawGrid();', 'TExtChartAxisAxis');
  Result := Self;
end;

function TExtChartAxisAxis.DrawLabel : TExtFunction; begin
  JSCode(JSName + '.drawLabel();', 'TExtChartAxisAxis');
  Result := Self;
end;

function TExtChartAxisAxis.SetTitle(Title : String) : TExtFunction; begin
  JSCode(JSName + '.setTitle(' + VarToJSON([Title]) + ');', 'TExtChartAxisAxis');
  Result := Self;
end;

destructor TExtChartAxisAxis.Destroy; begin
  try
    FGridTExtObject.Free;
  except end;
  inherited;
end;

function TExtDirectTransaction.JSClassName : string; begin
  Result := 'Ext-direct-Transaction';
end;

{$IFDEF FPC}constructor TExtDirectTransaction.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDirectTransaction.Create(Config : TExtObject = nil); begin
  if Config = nil then CreateVar(JSClassName + '({});') else
  CreateVar(JSClassName + '(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

procedure TExtDrawSurface.SetFHeight(Value : Integer); begin
  FHeight := Value;
  JSCode('height:' + VarToJSON([Value]));
end;

procedure TExtDrawSurface.SetFWidth(Value : Integer); begin
  FWidth := Value;
  JSCode('width:' + VarToJSON([Value]));
end;

function TExtDrawSurface.JSClassName : string; begin
  Result := 'Ext-draw-Surface';
end;

{$IFDEF FPC}constructor TExtDrawSurface.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDrawSurface.Create(Config : TExtObject = nil); begin
  if Config = nil then CreateVar(JSClassName + '({});') else
  CreateVar(JSClassName + '(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

function TExtDrawSurface.AddCls(Sprite : TExtObject; ClassName : String) : TExtFunction; begin
  JSCode(JSName + '.addCls(' + VarToJSON([Sprite, false, ClassName]) + ');', 'TExtDrawSurface');
  Result := Self;
end;

function TExtDrawSurface.AddCls(Sprite : TExtObject; ClassName : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.AddCls(' + VarToJSON([Sprite, false]) + ',' + VarToJSON(ClassName) + ');', 'TExtDrawSurface');
  Result := Self;
end;

function TExtDrawSurface.RemoveCls(Sprite : TExtObject; ClassName : String) : TExtFunction; begin
  JSCode(JSName + '.removeCls(' + VarToJSON([Sprite, false, ClassName]) + ');', 'TExtDrawSurface');
  Result := Self;
end;

function TExtDrawSurface.RemoveCls(Sprite : TExtObject; ClassName : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.RemoveCls(' + VarToJSON([Sprite, false]) + ',' + VarToJSON(ClassName) + ');', 'TExtDrawSurface');
  Result := Self;
end;

function TExtDrawSurface.SetStyle(Sprite : TExtObject; Styles : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setStyle(' + VarToJSON([Sprite, false, Styles, false]) + ');', 'TExtDrawSurface');
  Result := Self;
end;

function TExtDrawSurface.SetSize(W : Integer; H : Integer) : TExtFunction; begin
  JSCode(JSName + '.setSize(' + VarToJSON([W, H]) + ');', 'TExtDrawSurface');
  Result := Self;
end;

function TExtDrawSurface.AddGradient : TExtFunction; begin
  JSCode(JSName + '.addGradient();', 'TExtDrawSurface');
  Result := Self;
end;

function TExtDrawSurface.Add : TExtFunction; begin
  JSCode(JSName + '.add();', 'TExtDrawSurface');
  Result := Self;
end;

function TExtDrawSurface.Remove(Sprite : TExtDrawSprite; DestroySprite : Boolean) : TExtFunction; begin
  JSCode(JSName + '.remove(' + VarToJSON([Sprite, false, DestroySprite]) + ');', 'TExtDrawSurface');
  Result := Self;
end;

function TExtDrawSurface.RemoveAll(DestroySprites : Boolean) : TExtFunction; begin
  JSCode(JSName + '.removeAll(' + VarToJSON([DestroySprites]) + ');', 'TExtDrawSurface');
  Result := Self;
end;

function TExtDrawSurface.GetGroup(Id : String) : TExtFunction; begin
  JSCode(JSName + '.getGroup(' + VarToJSON([Id]) + ');', 'TExtDrawSurface');
  Result := Self;
end;

function TExtDrawSurface.SetText(Sprite : TExtObject; Text : String) : TExtFunction; begin
  JSCode(JSName + '.setText(' + VarToJSON([Sprite, false, Text]) + ');', 'TExtDrawSurface');
  Result := Self;
end;

function TExtDrawSurface.GetId : TExtFunction; begin
  JSCode(JSName + '.getId();', 'TExtDrawSurface');
  Result := Self;
end;

function TExtDrawSurface.DestroyJS : TExtFunction; begin
  JSCode(JSName + '.destroy();', 'TExtDrawSurface');
  Result := Self;
end;

procedure TExtGridPluginDragDrop.SetFDdGroup(Value : String); begin
  FDdGroup := Value;
  JSCode('ddGroup:' + VarToJSON([Value]));
end;

procedure TExtGridPluginDragDrop.SetFDragGroup(Value : String); begin
  FDragGroup := Value;
  JSCode('dragGroup:' + VarToJSON([Value]));
end;

procedure TExtGridPluginDragDrop.SetFDropGroup(Value : String); begin
  FDropGroup := Value;
  JSCode('dropGroup:' + VarToJSON([Value]));
end;

procedure TExtGridPluginDragDrop.SetFEnableDrop(Value : Boolean); begin
  FEnableDrop := Value;
  JSCode('enableDrop:' + VarToJSON([Value]));
end;

procedure TExtGridPluginDragDrop.SetFEnableDrag(Value : Boolean); begin
  FEnableDrag := Value;
  JSCode('enableDrag:' + VarToJSON([Value]));
end;

function TExtGridPluginDragDrop.JSClassName : string; begin
  Result := 'Ext-grid-plugin-DragDrop';
end;

{$IFDEF FPC}constructor TExtGridPluginDragDrop.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtResizerHandle.JSClassName : string; begin
  Result := 'Ext-resizer-Handle';
end;

{$IFDEF FPC}constructor TExtResizerHandle.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtFormFieldDate.SetFFormat(Value : String); begin
  FFormat := Value;
  JSCode('format:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDate.SetFAltFormats(Value : String); begin
  FAltFormats := Value;
  JSCode('altFormats:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDate.SetFDisabledDaysText(Value : String); begin
  FDisabledDaysText := Value;
  JSCode('disabledDaysText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDate.SetFDisabledDatesText(Value : String); begin
  FDisabledDatesText := Value;
  JSCode('disabledDatesText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDate.SetFMinText(Value : String); begin
  FMinText := Value;
  JSCode('minText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDate.SetFMaxText(Value : String); begin
  FMaxText := Value;
  JSCode('maxText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDate.SetFInvalidText(Value : String); begin
  FInvalidText := Value;
  JSCode('invalidText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDate.SetFTriggerCls(Value : String); begin
  FTriggerCls := Value;
  JSCode('triggerCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDate.SetFShowToday(Value : Boolean); begin
  FShowToday := Value;
  JSCode('showToday:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDate.SetFMinValue(Value : TDateTime); begin
  FMinValue := Value;
  JSCode('minValue:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDate.SetFMinValueString(Value : String); begin
  FMinValueString := Value;
  JSCode('minValue:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDate.SetFMaxValue(Value : TDateTime); begin
  FMaxValue := Value;
  JSCode('maxValue:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDate.SetFMaxValueString(Value : String); begin
  FMaxValueString := Value;
  JSCode('maxValue:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDate.SetFDisabledDays(Value : TArrayOfInteger); begin
  FDisabledDays := Value;
  JSCode('disabledDays:' + ArrayToJSON(Value));
end;

procedure TExtFormFieldDate.SetFDisabledDates(Value : TExtObjectList); begin
  FDisabledDates := Value;
  Value.DeleteFromGarbage;
  JSCode('disabledDates:' + VarToJSON([Value, false]));
end;

procedure TExtFormFieldDate.SetFSubmitFormat(Value : String); begin
  FSubmitFormat := Value;
  JSCode('submitFormat:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDate.SetFStartDay(Value : Integer); begin
  FStartDay := Value;
  JSCode('startDay:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDate.SetFGrow(Value : Boolean); begin
  FGrow := Value;
  JSCode('grow:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDate.SetFGrowMin(Value : Integer); begin
  FGrowMin := Value;
  JSCode('growMin:' + VarToJSON([Value]));
end;

procedure TExtFormFieldDate.SetFGrowMax(Value : Integer); begin
  FGrowMax := Value;
  JSCode('growMax:' + VarToJSON([Value]));
end;

function TExtFormFieldDate.JSClassName : string; begin
  Result := 'Ext-form-field-Date';
end;

procedure TExtFormFieldDate.InitDefaults; begin
  inherited;
  FDisabledDates := TExtObjectList.Create(Self, 'disabledDates');
end;

{$IFDEF FPC}constructor TExtFormFieldDate.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtFormFieldDate.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtFormFieldDate.AutoSize : TExtFunction; begin
  JSCode(JSName + '.autoSize();', 'TExtFormFieldDate');
  Result := Self;
end;

destructor TExtFormFieldDate.Destroy; begin
  try
    FDisabledDates.Free;
  except end;
  inherited;
end;

function TExtFxTargetSprite.JSClassName : string; begin
  Result := 'Ext-fx-target-Sprite';
end;

{$IFDEF FPC}constructor TExtFxTargetSprite.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataJsonPSingleton.JSClassName : string; begin
  Result := 'Ext-data-JsonPSingleton';
end;

{$IFDEF FPC}constructor TExtDataJsonPSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataJsonPSingleton.Request(Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.request(' + VarToJSON([Options, false]) + ');', 'TExtDataJsonPSingleton');
  Result := Self;
end;

function TExtDataJsonPSingleton.Abort(Request : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.abort(' + VarToJSON([Request, false]) + ');', 'TExtDataJsonPSingleton');
  Result := Self;
end;

function TExtDataJsonPSingleton.Abort(Request : String) : TExtFunction; begin
  JSCode(JSName + '.Abort(' + VarToJSON([Request]) + ');', 'TExtDataJsonPSingleton');
  Result := Self;
end;

procedure TExtDirectPollingProvider.SetFInterval(Value : Integer); begin
  FInterval := Value;
  JSCode('interval:' + VarToJSON([Value]));
end;

procedure TExtDirectPollingProvider.SetFBaseParams(Value : TExtObject); begin
  FBaseParams := Value;
  Value.DeleteFromGarbage;
  JSCode('baseParams:' + VarToJSON([Value, false]));
end;

procedure TExtDirectPollingProvider.SetFUrl(Value : String); begin
  FUrl := Value;
  JSCode('url:' + VarToJSON([Value]));
end;

procedure TExtDirectPollingProvider.SetFUrlTExtFunction(Value : TExtFunction); begin
  FUrlTExtFunction := Value;
  JSCode('url:' + VarToJSON([Value, true]));
end;

procedure TExtDirectPollingProvider.SetFOnBeforepoll(Value : TExtDirectPollingProviderOnBeforepoll); begin
  if Assigned(FOnBeforepoll) then
    JSCode(JSName+'.events ["beforepoll"].listeners=[];');
  if Assigned(Value) then
    On('beforepoll', Ajax('beforepoll', ['This', '%0.nm','This_', '%1.nm'], true));
  FOnBeforepoll := Value;
end;

function TExtDirectPollingProvider.JSClassName : string; begin
  Result := 'Ext-direct-PollingProvider';
end;

procedure TExtDirectPollingProvider.InitDefaults; begin
  inherited;
  FBaseParams := TExtObject.CreateInternal(Self, 'baseParams');
end;

{$IFDEF FPC}constructor TExtDirectPollingProvider.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDirectPollingProvider.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDirectPollingProvider.Connect : TExtFunction; begin
  JSCode(JSName + '.connect();', 'TExtDirectPollingProvider');
  Result := Self;
end;

function TExtDirectPollingProvider.Disconnect : TExtFunction; begin
  JSCode(JSName + '.disconnect();', 'TExtDirectPollingProvider');
  Result := Self;
end;

destructor TExtDirectPollingProvider.Destroy; begin
  try
    FBaseParams.Free;
  except end;
  inherited;
end;

procedure TExtDirectPollingProvider.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforepoll') and Assigned(FOnBeforepoll) then
    FOnBeforepoll(TExtDirectPollingProvider(ParamAsObject('This')), TExtDirectPollingProvider(ParamAsObject('This_')));
end;

procedure TExtDataReaderReader.SetFIdProperty(Value : String); begin
  FIdProperty := Value;
  JSCode('idProperty:' + VarToJSON([Value]));
end;

procedure TExtDataReaderReader.SetFTotalProperty(Value : String); begin
  FTotalProperty := Value;
  JSCode('totalProperty:' + VarToJSON([Value]));
end;

procedure TExtDataReaderReader.SetFSuccessProperty(Value : String); begin
  FSuccessProperty := Value;
  JSCode('successProperty:' + VarToJSON([Value]));
end;

procedure TExtDataReaderReader.SetFRoot(Value : String); begin
  FRoot := Value;
  JSCode('root:' + VarToJSON([Value]));
end;

procedure TExtDataReaderReader.SetFMessageProperty(Value : String); begin
  FMessageProperty := Value;
  JSCode('messageProperty:' + VarToJSON([Value]));
end;

procedure TExtDataReaderReader.SetFImplicitIncludes(Value : Boolean); begin
  FImplicitIncludes := Value;
  JSCode('implicitIncludes:' + VarToJSON([Value]));
end;

function TExtDataReaderReader.JSClassName : string; begin
  Result := 'Ext-data-reader-Reader';
end;

{$IFDEF FPC}constructor TExtDataReaderReader.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataReaderReader.Create(Config : TExtObject = nil); begin
  if Config = nil then CreateVar(JSClassName + '({});') else
  CreateVar(JSClassName + '(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

function TExtDataReaderReader.Read(Response : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.read(' + VarToJSON([Response, false]) + ');', 'TExtDataReaderReader');
  Result := Self;
end;

function TExtDataReaderReader.ReadRecords(Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.readRecords(' + VarToJSON([Data, false]) + ');', 'TExtDataReaderReader');
  Result := Self;
end;

function TExtDataReaderReader.GetResponseData(Response : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getResponseData(' + VarToJSON([Response, false]) + ');', 'TExtDataReaderReader');
  Result := Self;
end;

function TExtUtilDelayedTask.JSClassName : string; begin
  Result := 'Ext-util-DelayedTask-method-constructor';
end;

{$IFDEF FPC}constructor TExtUtilDelayedTask.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilDelayedTask.Delay(Delay : Integer; NewFn : TExtFunction = nil; NewScope : TExtObject = nil; NewArgs : TExtObjectList = nil) : TExtFunction; begin
  JSCode(JSName + '.delay(' + VarToJSON([Delay, NewFn, true, NewScope, false]) + ',' + VarToJSON(NewArgs) + ');', 'TExtUtilDelayedTask');
  Result := Self;
end;

function TExtUtilDelayedTask.Cancel : TExtFunction; begin
  JSCode(JSName + '.cancel();', 'TExtUtilDelayedTask');
  Result := Self;
end;

function TExtGridPropertyHeaderContainer.JSClassName : string; begin
  Result := 'Ext-grid-property-HeaderContainer';
end;

{$IFDEF FPC}constructor TExtGridPropertyHeaderContainer.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridPropertyHeaderContainer.Create(Grid : TExtGridPropertyGrid; Source : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Grid, false, Source, false]) + ');');
  InitDefaults;
end;

procedure TExtUtilSorter.SetFPropertyJS(Value : String); begin
  FPropertyJS := Value;
  JSCode('propertyJS:' + VarToJSON([Value]));
end;

procedure TExtUtilSorter.SetFSorterFn(Value : TExtFunction); begin
  FSorterFn := Value;
  JSCode('sorterFn:' + VarToJSON([Value, true]));
end;

procedure TExtUtilSorter.SetFRoot(Value : String); begin
  FRoot := Value;
  JSCode('root:' + VarToJSON([Value]));
end;

procedure TExtUtilSorter.SetFTransform(Value : TExtFunction); begin
  FTransform := Value;
  JSCode('transform:' + VarToJSON([Value, true]));
end;

procedure TExtUtilSorter.SetFDirection(Value : String); begin
  FDirection := Value;
  if not ConfigAvailable(JSName) then
    SetDirection(Value)
  else
    JSCode('direction:' + VarToJSON([Value]));
end;

function TExtUtilSorter.JSClassName : string; begin
  Result := 'Ext-util-Sorter';
end;

{$IFDEF FPC}constructor TExtUtilSorter.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilSorter.SetDirection(Direction : String) : TExtFunction; begin
  JSCode(JSName + '.setDirection(' + VarToJSON([Direction]) + ');', 'TExtUtilSorter');
  Result := Self;
end;

function TExtUtilSorter.Toggle : TExtFunction; begin
  JSCode(JSName + '.toggle();', 'TExtUtilSorter');
  Result := Self;
end;

function TExtUtilSorter.UpdateSortFunction(Fn : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.updateSortFunction(' + VarToJSON([Fn, true]) + ');', 'TExtUtilSorter');
  Result := Self;
end;

procedure TExtGridPluginHeaderResizer.SetFDynamic(Value : Boolean); begin
  FDynamic := Value;
  JSCode('dynamic:' + VarToJSON([Value]));
end;

function TExtGridPluginHeaderResizer.JSClassName : string; begin
  Result := 'Ext-grid-plugin-HeaderResizer';
end;

{$IFDEF FPC}constructor TExtGridPluginHeaderResizer.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtEnvBrowser.JSClassName : string; begin
  Result := 'Ext-env-Browser';
end;

{$IFDEF FPC}constructor TExtEnvBrowser.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtEnvBrowser.IsJS(Value : String) : TExtFunction; begin
  JSCode(JSName + '.is(' + VarToJSON([Value]) + ');', 'TExtEnvBrowser');
  Result := Self;
end;

function TExtChartHighlight.JSClassName : string; begin
  Result := 'Ext-chart-Highlight';
end;

{$IFDEF FPC}constructor TExtChartHighlight.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtChartHighlight.HighlightItem(Item : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.highlightItem(' + VarToJSON([Item, false]) + ');', 'TExtChartHighlight');
  Result := Self;
end;

function TExtChartHighlight.UnHighlightItem : TExtFunction; begin
  JSCode(JSName + '.unHighlightItem();', 'TExtChartHighlight');
  Result := Self;
end;

procedure TExtStateCookieProvider.SetFPath(Value : String); begin
  FPath := Value;
  JSCode('path:' + VarToJSON([Value]));
end;

procedure TExtStateCookieProvider.SetFExpires(Value : TDateTime); begin
  FExpires := Value;
  JSCode('expires:' + VarToJSON([Value]));
end;

procedure TExtStateCookieProvider.SetFDomain(Value : String); begin
  FDomain := Value;
  JSCode('domain:' + VarToJSON([Value]));
end;

procedure TExtStateCookieProvider.SetFSecure(Value : Boolean); begin
  FSecure := Value;
  JSCode('secure:' + VarToJSON([Value]));
end;

function TExtStateCookieProvider.JSClassName : string; begin
  Result := 'Ext-state-CookieProvider-method-constructor';
end;

{$IFDEF FPC}constructor TExtStateCookieProvider.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtStateCookieProvider.Create(Config : TExtObject = nil); begin
  if Config = nil then CreateVar(JSClassName + '({});') else
  CreateVar(JSClassName + '(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

procedure TExtGridFeatureAbstractSummary.SetFShowSummaryRow(Value : Boolean); begin
  FShowSummaryRow := Value;
  JSCode('showSummaryRow:' + VarToJSON([Value]));
end;

function TExtGridFeatureAbstractSummary.JSClassName : string; begin
  Result := 'Ext-grid-feature-AbstractSummary';
end;

{$IFDEF FPC}constructor TExtGridFeatureAbstractSummary.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtGridFeatureAbstractSummary.ToggleSummaryRow(Visible : Boolean) : TExtFunction; begin
  JSCode(JSName + '.toggleSummaryRow(' + VarToJSON([Visible]) + ');', 'TExtGridFeatureAbstractSummary');
  Result := Self;
end;

function TExtGridFeatureAbstractSummary.GetColumnValue(Column : TExtGridColumnColumn; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.getColumnValue(' + VarToJSON([Column, false, Data, false]) + ');', 'TExtGridFeatureAbstractSummary');
  Result := Self;
end;

procedure TExtViewBoundList.SetFPageSize(Value : Integer); begin
  FPageSize := Value;
  JSCode('pageSize:' + VarToJSON([Value]));
end;

function TExtViewBoundList.JSClassName : string; begin
  Result := 'Ext-view-BoundList';
end;

{$IFDEF FPC}constructor TExtViewBoundList.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtGridFeatureGrouping.SetFGroupHeaderTpl(Value : String); begin
  FGroupHeaderTpl := Value;
  JSCode('groupHeaderTpl:' + VarToJSON([Value]));
end;

procedure TExtGridFeatureGrouping.SetFDepthToIndent(Value : Integer); begin
  FDepthToIndent := Value;
  JSCode('depthToIndent:' + VarToJSON([Value]));
end;

procedure TExtGridFeatureGrouping.SetFGroupByText(Value : String); begin
  FGroupByText := Value;
  JSCode('groupByText:' + VarToJSON([Value]));
end;

procedure TExtGridFeatureGrouping.SetFShowGroupsText(Value : String); begin
  FShowGroupsText := Value;
  JSCode('showGroupsText:' + VarToJSON([Value]));
end;

procedure TExtGridFeatureGrouping.SetFHideGroupedHeader(Value : Boolean); begin
  FHideGroupedHeader := Value;
  JSCode('hideGroupedHeader:' + VarToJSON([Value]));
end;

procedure TExtGridFeatureGrouping.SetFStartCollapsed(Value : Boolean); begin
  FStartCollapsed := Value;
  JSCode('startCollapsed:' + VarToJSON([Value]));
end;

procedure TExtGridFeatureGrouping.SetFEnableGroupingMenu(Value : Boolean); begin
  FEnableGroupingMenu := Value;
  JSCode('enableGroupingMenu:' + VarToJSON([Value]));
end;

procedure TExtGridFeatureGrouping.SetFEnableNoGroups(Value : Boolean); begin
  FEnableNoGroups := Value;
  JSCode('enableNoGroups:' + VarToJSON([Value]));
end;

function TExtGridFeatureGrouping.JSClassName : string; begin
  Result := 'Ext-grid-feature-Grouping';
end;

{$IFDEF FPC}constructor TExtGridFeatureGrouping.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtUtilClickRepeater.SetFEl(Value : String); begin
  FEl := Value;
  JSCode('el:' + VarToJSON([Value]));
end;

procedure TExtUtilClickRepeater.SetFElTHTMLElement(Value : THTMLElement); begin
  FElTHTMLElement := Value;
  Value.DeleteFromGarbage;
  JSCode('el:' + VarToJSON([Value, false]));
end;

procedure TExtUtilClickRepeater.SetFElTExtElement(Value : TExtElement); begin
  FElTExtElement := Value;
  Value.DeleteFromGarbage;
  JSCode('el:' + VarToJSON([Value, false]));
end;

procedure TExtUtilClickRepeater.SetFPressedCls(Value : String); begin
  FPressedCls := Value;
  JSCode('pressedCls:' + VarToJSON([Value]));
end;

procedure TExtUtilClickRepeater.SetFAccelerate(Value : Boolean); begin
  FAccelerate := Value;
  JSCode('accelerate:' + VarToJSON([Value]));
end;

procedure TExtUtilClickRepeater.SetFInterval(Value : Integer); begin
  FInterval := Value;
  JSCode('interval:' + VarToJSON([Value]));
end;

procedure TExtUtilClickRepeater.SetFDelay(Value : Integer); begin
  FDelay := Value;
  JSCode('delay:' + VarToJSON([Value]));
end;

procedure TExtUtilClickRepeater.SetFPreventDefault(Value : Boolean); begin
  FPreventDefault := Value;
  JSCode('preventDefault:' + VarToJSON([Value]));
end;

procedure TExtUtilClickRepeater.SetFStopDefault(Value : Boolean); begin
  FStopDefault := Value;
  JSCode('stopDefault:' + VarToJSON([Value]));
end;

function TExtUtilClickRepeater.JSClassName : string; begin
  Result := 'Ext-util-ClickRepeater';
end;

procedure TExtUtilClickRepeater.InitDefaults; begin
  inherited;
  FElTExtElement := TExtElement.CreateInternal(Self, 'el');
end;

{$IFDEF FPC}constructor TExtUtilClickRepeater.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtUtilClickRepeater.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtUtilClickRepeater.Enable : TExtFunction; begin
  JSCode(JSName + '.enable();', 'TExtUtilClickRepeater');
  Result := Self;
end;

function TExtUtilClickRepeater.Disable : TExtFunction; begin
  JSCode(JSName + '.disable();', 'TExtUtilClickRepeater');
  Result := Self;
end;

function TExtUtilClickRepeater.SetDisabled(Disabled : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setDisabled(' + VarToJSON([Disabled]) + ');', 'TExtUtilClickRepeater');
  Result := Self;
end;

destructor TExtUtilClickRepeater.Destroy; begin
  try
    FElTExtElement.Free;
  except end;
  inherited;
end;

procedure TExtElementLoader.SetFUrl(Value : String); begin
  FUrl := Value;
  JSCode('url:' + VarToJSON([Value]));
end;

procedure TExtElementLoader.SetFParams(Value : TExtObject); begin
  FParams := Value;
  Value.DeleteFromGarbage;
  JSCode('params:' + VarToJSON([Value, false]));
end;

procedure TExtElementLoader.SetFBaseParams(Value : TExtObject); begin
  FBaseParams := Value;
  Value.DeleteFromGarbage;
  JSCode('baseParams:' + VarToJSON([Value, false]));
end;

procedure TExtElementLoader.SetFAutoLoad(Value : Boolean); begin
  FAutoLoad := Value;
  JSCode('autoLoad:' + VarToJSON([Value]));
end;

procedure TExtElementLoader.SetFAutoLoadTExtObject(Value : TExtObject); begin
  FAutoLoadTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('autoLoad:' + VarToJSON([Value, false]));
end;

procedure TExtElementLoader.SetFTarget(Value : THTMLElement); begin
  FTarget := Value;
  Value.DeleteFromGarbage;
  JSCode('target:' + VarToJSON([Value, false]));
end;

procedure TExtElementLoader.SetFTargetTExtElement(Value : TExtElement); begin
  FTargetTExtElement := Value;
  Value.DeleteFromGarbage;
  JSCode('target:' + VarToJSON([Value, false]));
end;

procedure TExtElementLoader.SetFTargetString(Value : String); begin
  FTargetString := Value;
  JSCode('target:' + VarToJSON([Value]));
end;

procedure TExtElementLoader.SetFLoadMask(Value : Boolean); begin
  FLoadMask := Value;
  JSCode('loadMask:' + VarToJSON([Value]));
end;

procedure TExtElementLoader.SetFLoadMaskString(Value : String); begin
  FLoadMaskString := Value;
  JSCode('loadMask:' + VarToJSON([Value]));
end;

procedure TExtElementLoader.SetFAjaxOptions(Value : TExtObject); begin
  FAjaxOptions := Value;
  Value.DeleteFromGarbage;
  JSCode('ajaxOptions:' + VarToJSON([Value, false]));
end;

procedure TExtElementLoader.SetFScripts(Value : Boolean); begin
  FScripts := Value;
  JSCode('scripts:' + VarToJSON([Value]));
end;

procedure TExtElementLoader.SetFSuccess(Value : TExtFunction); begin
  FSuccess := Value;
  JSCode('success:' + VarToJSON([Value, true]));
end;

procedure TExtElementLoader.SetFFailure(Value : TExtFunction); begin
  FFailure := Value;
  JSCode('failure:' + VarToJSON([Value, true]));
end;

procedure TExtElementLoader.SetFCallback(Value : TExtFunction); begin
  FCallback := Value;
  JSCode('callback:' + VarToJSON([Value, true]));
end;

procedure TExtElementLoader.SetFScope(Value : TExtObject); begin
  FScope := Value;
  Value.DeleteFromGarbage;
  JSCode('scope:' + VarToJSON([Value, false]));
end;

procedure TExtElementLoader.SetFRenderer(Value : TExtFunction); begin
  FRenderer := Value;
  JSCode('renderer:' + VarToJSON([Value, true]));
end;

procedure TExtElementLoader.SetFOnBeforeload(Value : TExtElementLoaderOnBeforeload); begin
  if Assigned(FOnBeforeload) then
    JSCode(JSName+'.events ["beforeload"].listeners=[];');
  if Assigned(Value) then
    On('beforeload', Ajax('beforeload', ['This', '%0.nm','Options', '%1.nm'], true));
  FOnBeforeload := Value;
end;

procedure TExtElementLoader.SetFOnException(Value : TExtElementLoaderOnException); begin
  if Assigned(FOnException) then
    JSCode(JSName+'.events ["exception"].listeners=[];');
  if Assigned(Value) then
    On('exception', Ajax('exception', ['This', '%0.nm','Response', '%1.nm','Options', '%2.nm'], true));
  FOnException := Value;
end;

procedure TExtElementLoader.SetFOnLoad(Value : TExtElementLoaderOnLoad); begin
  if Assigned(FOnLoad) then
    JSCode(JSName+'.events ["load"].listeners=[];');
  if Assigned(Value) then
    On('load', Ajax('load', ['This', '%0.nm','Response', '%1.nm','Options', '%2.nm'], true));
  FOnLoad := Value;
end;

function TExtElementLoader.JSClassName : string; begin
  Result := 'Ext-ElementLoader';
end;

procedure TExtElementLoader.InitDefaults; begin
  inherited;
  FParams := TExtObject.CreateInternal(Self, 'params');
  FBaseParams := TExtObject.CreateInternal(Self, 'baseParams');
  FAutoLoadTExtObject := TExtObject.CreateInternal(Self, 'autoLoad');
  FTargetTExtElement := TExtElement.CreateInternal(Self, 'target');
  FAjaxOptions := TExtObject.CreateInternal(Self, 'ajaxOptions');
  FScope := TExtObject.CreateInternal(Self, 'scope');
end;

{$IFDEF FPC}constructor TExtElementLoader.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtElementLoader.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtElementLoader.SetTarget(Target : String) : TExtFunction; begin
  JSCode(JSName + '.setTarget(' + VarToJSON([Target]) + ');', 'TExtElementLoader');
  Result := Self;
end;

function TExtElementLoader.SetTarget(Target : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.SetTarget(' + VarToJSON([Target, false]) + ');', 'TExtElementLoader');
  Result := Self;
end;

function TExtElementLoader.SetTarget(Target : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.SetTarget(' + VarToJSON([Target, false]) + ');', 'TExtElementLoader');
  Result := Self;
end;

function TExtElementLoader.GetTarget : TExtFunction; begin
  JSCode(JSName + '.getTarget();', 'TExtElementLoader');
  Result := Self;
end;

function TExtElementLoader.Abort : TExtFunction; begin
  JSCode(JSName + '.abort();', 'TExtElementLoader');
  Result := Self;
end;

function TExtElementLoader.Load(Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.load(' + VarToJSON([Options, false]) + ');', 'TExtElementLoader');
  Result := Self;
end;

function TExtElementLoader.StartAutoRefresh(Interval : Integer; Options : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.startAutoRefresh(' + VarToJSON([Interval, Options, false]) + ');', 'TExtElementLoader');
  Result := Self;
end;

function TExtElementLoader.StopAutoRefresh : TExtFunction; begin
  JSCode(JSName + '.stopAutoRefresh();', 'TExtElementLoader');
  Result := Self;
end;

function TExtElementLoader.IsAutoRefreshing : TExtFunction; begin
  JSCode(JSName + '.isAutoRefreshing();', 'TExtElementLoader');
  Result := Self;
end;

function TExtElementLoader.DestroyJS : TExtFunction; begin
  JSCode(JSName + '.destroy();', 'TExtElementLoader');
  Result := Self;
end;

destructor TExtElementLoader.Destroy; begin
  try
    FParams.Free;
    FBaseParams.Free;
    FAutoLoadTExtObject.Free;
    FTargetTExtElement.Free;
    FAjaxOptions.Free;
    FScope.Free;
  except end;
  inherited;
end;

procedure TExtElementLoader.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforeload') and Assigned(FOnBeforeload) then
    FOnBeforeload(TExtElementLoader(ParamAsObject('This')), TExtObject(ParamAsObject('Options')))
  else if (AEvtName = 'exception') and Assigned(FOnException) then
    FOnException(TExtElementLoader(ParamAsObject('This')), TExtObject(ParamAsObject('Response')), TExtObject(ParamAsObject('Options')))
  else if (AEvtName = 'load') and Assigned(FOnLoad) then
    FOnLoad(TExtElementLoader(ParamAsObject('This')), TExtObject(ParamAsObject('Response')), TExtObject(ParamAsObject('Options')));
end;

procedure TExtXTemplate.SetFCodeRe(Value : TRegExp); begin
  FCodeRe := Value;
  JSCode('codeRe:' + VarToJSON([#3 +Value]));
end;

procedure TExtXTemplate.SetFCompiled(Value : Boolean); begin
  FCompiled := Value;
  JSCode('compiled:' + VarToJSON([Value]));
end;

function TExtXTemplate.JSClassName : string; begin
  Result := 'Ext-XTemplate';
end;

{$IFDEF FPC}constructor TExtXTemplate.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtXTemplate.Compile : TExtFunction; begin
  JSCode(JSName + '.compile();', 'TExtXTemplate');
  Result := Self;
end;

procedure TExtTreeView.SetFRootVisible(Value : Boolean); begin
  FRootVisible := Value;
  JSCode('rootVisible:' + VarToJSON([Value]));
end;

procedure TExtTreeView.SetFAnimate(Value : Boolean); begin
  FAnimate := Value;
  JSCode('animate:' + VarToJSON([Value]));
end;

function TExtTreeView.JSClassName : string; begin
  Result := 'Ext-tree-View';
end;

{$IFDEF FPC}constructor TExtTreeView.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtTreeView.Expand(RecordJS : TExtDataModel; Deep : Boolean = false; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.expand(' + VarToJSON([RecordJS, false, Deep, Callback, true, Scope, false]) + ');', 'TExtTreeView');
  Result := Self;
end;

function TExtTreeView.Collapse(RecordJS : TExtDataModel; Deep : Boolean = false; Callback : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.collapse(' + VarToJSON([RecordJS, false, Deep, Callback, true, Scope, false]) + ');', 'TExtTreeView');
  Result := Self;
end;

function TExtTreeView.Toggle(RecordInstance : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.toggle(' + VarToJSON([RecordInstance, false]) + ');', 'TExtTreeView');
  Result := Self;
end;

function TExtTreeView.GetTreeStore : TExtFunction; begin
  JSCode(JSName + '.getTreeStore();', 'TExtTreeView');
  Result := Self;
end;

procedure TExtFormCheckboxGroup.SetFName(Value : String); begin
  FName := Value;
  JSCode('name:' + VarToJSON([Value]));
end;

procedure TExtFormCheckboxGroup.SetFItems(Value : TExtObjectList); begin
  FItems := Value;
  Value.DeleteFromGarbage;
  JSCode('items:' + VarToJSON([Value, false]));
end;

procedure TExtFormCheckboxGroup.SetFItemsTExtObjectList(Value : TExtObjectList); begin
  FItemsTExtObjectList := Value;
  Value.DeleteFromGarbage;
  JSCode('items:' + VarToJSON([Value, false]));
end;

procedure TExtFormCheckboxGroup.SetFColumns(Value : String); begin
  FColumns := Value;
  JSCode('columns:' + VarToJSON([Value]));
end;

procedure TExtFormCheckboxGroup.SetFColumnsInteger(Value : Integer); begin
  FColumnsInteger := Value;
  JSCode('columns:' + VarToJSON([Value]));
end;

procedure TExtFormCheckboxGroup.SetFColumnsTArrayOfInteger(Value : TArrayOfInteger); begin
  FColumnsTArrayOfInteger := Value;
  JSCode('columns:' + ArrayToJSON(Value));
end;

procedure TExtFormCheckboxGroup.SetFVertical(Value : Boolean); begin
  FVertical := Value;
  JSCode('vertical:' + VarToJSON([Value]));
end;

procedure TExtFormCheckboxGroup.SetFAllowBlank(Value : Boolean); begin
  FAllowBlank := Value;
  JSCode('allowBlank:' + VarToJSON([Value]));
end;

procedure TExtFormCheckboxGroup.SetFBlankText(Value : String); begin
  FBlankText := Value;
  JSCode('blankText:' + VarToJSON([Value]));
end;

procedure TExtFormCheckboxGroup.SetFFieldBodyCls(Value : String); begin
  FFieldBodyCls := Value;
  JSCode('fieldBodyCls:' + VarToJSON([Value]));
end;

function TExtFormCheckboxGroup.JSClassName : string; begin
  Result := 'Ext-form-CheckboxGroup';
end;

procedure TExtFormCheckboxGroup.InitDefaults; begin
  inherited;
  FItems := TExtObjectList.Create(Self, 'items');
  FItemsTExtObjectList := TExtObjectList.Create(Self, 'items');
end;

{$IFDEF FPC}constructor TExtFormCheckboxGroup.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtFormCheckboxGroup.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtFormCheckboxGroup.GetErrors : TExtFunction; begin
  JSCode(JSName + '.getErrors();', 'TExtFormCheckboxGroup');
  Result := Self;
end;

function TExtFormCheckboxGroup.GetChecked : TExtFunction; begin
  JSCode(JSName + '.getChecked();', 'TExtFormCheckboxGroup');
  Result := Self;
end;

function TExtFormCheckboxGroup.Reset : TExtFunction; begin
  JSCode(JSName + '.reset();', 'TExtFormCheckboxGroup');
  Result := Self;
end;

function TExtFormCheckboxGroup.SetValue(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setValue(' + VarToJSON([Value, false]) + ');', 'TExtFormCheckboxGroup');
  Result := Self;
end;

function TExtFormCheckboxGroup.GetValue : TExtFunction; begin
  JSCode(JSName + '.getValue();', 'TExtFormCheckboxGroup');
  Result := Self;
end;

destructor TExtFormCheckboxGroup.Destroy; begin
  try
    FItems.Free;
    FItemsTExtObjectList.Free;
  except end;
  inherited;
end;

function TExtComponentManagerSingleton.JSClassName : string; begin
  Result := 'Ext-ComponentManagerSingleton';
end;

{$IFDEF FPC}constructor TExtComponentManagerSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtSingleton.JSClassName : string; begin
  Result := 'ExtSingleton';
end;

{$IFDEF FPC}constructor TExtSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtSingleton.Id(El : THTMLElement = nil; Prefix : String = '') : TExtFunction; begin
  JSCode(JSName + '.id(' + VarToJSON([El, false, Prefix]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.Id(El : TExtElement; Prefix : String = '') : TExtFunction; begin
  JSCode(JSName + '.Id(' + VarToJSON([El, false, Prefix]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.GetBody : TExtFunction; begin
  JSCode(JSName + '.getBody();', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.GetHead : TExtFunction; begin
  JSCode(JSName + '.getHead();', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.GetDoc : TExtFunction; begin
  JSCode(JSName + '.getDoc();', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.GetCmp(Id : String) : TExtFunction; begin
  JSCode(JSName + '.getCmp(' + VarToJSON([Id]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.GetOrientation : TExtFunction; begin
  JSCode(JSName + '.getOrientation();', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.DestroyJS(Arg1 : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.destroy(' + VarToJSON([Arg1, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.DestroyJS(Arg1 : TExtComponent) : TExtFunction; begin
  JSCode(JSName + '.DestroyJS(' + VarToJSON([Arg1, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.DestroyJS(Arg1 : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.DestroyJS(' + VarToJSON(Arg1) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.Callback(Callback : TExtFunction; Scope : TExtObject = nil; Args : TExtObjectList = nil; Delay : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.callback(' + VarToJSON([Callback, true, Scope, false]) + ',' + VarToJSON(Args) + ',' + VarToJSON([Delay]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.HtmlEncode(Value : String) : TExtFunction; begin
  JSCode(JSName + '.htmlEncode(' + VarToJSON([Value]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.HtmlDecode(Value : String) : TExtFunction; begin
  JSCode(JSName + '.htmlDecode(' + VarToJSON([Value]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.UrlAppend(Url : String; S : String) : TExtFunction; begin
  JSCode(JSName + '.urlAppend(' + VarToJSON([Url, S]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.GetDom(El : String) : TExtFunction; begin
  JSCode(JSName + '.getDom(' + VarToJSON([El]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.GetDom(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.GetDom(' + VarToJSON([El, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.GetDom(El : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.GetDom(' + VarToJSON([El, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.RemoveNode(Node : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.removeNode(' + VarToJSON([Node, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.Value(Value : TExtObject; DefaultValue : TExtObject; AllowBlank : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.value(' + VarToJSON([Value, false, DefaultValue, false, AllowBlank]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.EscapeRe(Str : String) : TExtFunction; begin
  JSCode(JSName + '.escapeRe(' + VarToJSON([Str]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.AddBehaviors(Obj : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.addBehaviors(' + VarToJSON([Obj, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.GetScrollbarSize(Force : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.getScrollbarSize(' + VarToJSON([Force]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.GetScrollBarWidth(Force : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.getScrollBarWidth(' + VarToJSON([Force]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.CopyTo(Dest : TExtObject; Source : TExtObject; Names : String; UsePrototypeKeys : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.copyTo(' + VarToJSON([Dest, false, Source, false, Names, UsePrototypeKeys]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.CopyTo(Dest : TExtObject; Source : TExtObject; Names : TExtObjectList; UsePrototypeKeys : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.CopyTo(' + VarToJSON([Dest, false, Source, false]) + ',' + VarToJSON(Names) + ',' + VarToJSON([UsePrototypeKeys]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.DestroyMembers(O : TExtObject; Args : TString) : TExtFunction; begin
  JSCode(JSName + '.destroyMembers(' + VarToJSON([O, false, Args, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.Partition(Arr : TExtObjectList; Truth : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.partition(' + VarToJSON(Arr) + ',' + VarToJSON([Truth, true]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.Partition(Arr : TNodeList; Truth : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.Partition(' + VarToJSON([Arr, false, Truth, true]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.Invoke(Arr : TExtObjectList; MethodName : String; Args : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.invoke(' + VarToJSON(Arr) + ',' + VarToJSON([MethodName]) + ',' + VarToJSON(Args) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.Invoke(Arr : TNodeList; MethodName : String; Args : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.Invoke(' + VarToJSON([Arr, false, MethodName]) + ',' + VarToJSON(Args) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.Zip(Arr : TExtObjectList; Zipper : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.zip(' + VarToJSON(Arr) + ',' + VarToJSON([Zipper, true]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.Zip(Arr : TNodeList; Zipper : TExtFunction = nil) : TExtFunction; begin
  JSCode(JSName + '.Zip(' + VarToJSON([Arr, false, Zipper, true]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.ToSentence(Items : TExtObjectList; Connector : String) : TExtFunction; begin
  JSCode(JSName + '.toSentence(' + VarToJSON(Items) + ',' + VarToJSON([Connector]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.Application(Config : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.application(' + VarToJSON([Config, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.Apply(ObjectJS : TExtObject; Config : TExtObject; Defaults : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.apply(' + VarToJSON([ObjectJS, false, Config, false, Defaults, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.EmptyFn : TExtFunction; begin
  JSCode(JSName + '.emptyFn();', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.ApplyIf(ObjectJS : TExtObject; Config : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.applyIf(' + VarToJSON([ObjectJS, false, Config, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.Iterate(ObjectJS : TExtObject; Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.iterate(' + VarToJSON([ObjectJS, false, Fn, true, Scope, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.Iterate(ObjectJS : TExtObjectList; Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.Iterate(' + VarToJSON(ObjectJS) + ',' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.Extend(Superclass : TExtFunction; Overrides : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.extend(' + VarToJSON([Superclass, true, Overrides, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.Override(Cls : TExtObject; Overrides : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.override(' + VarToJSON([Cls, false, Overrides, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.ValueFrom(Value : TExtObject; DefaultValue : TExtObject; AllowBlank : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.valueFrom(' + VarToJSON([Value, false, DefaultValue, false, AllowBlank]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.TypeOf(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.typeOf(' + VarToJSON([Value, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.IsEmpty(Value : TExtObject; AllowEmptyString : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.isEmpty(' + VarToJSON([Value, false, AllowEmptyString]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.IsArray(Target : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.isArray(' + VarToJSON([Target, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.IsDate(ObjectJS : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.isDate(' + VarToJSON([ObjectJS, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.IsObject(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.isObject(' + VarToJSON([Value, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.IsPrimitive(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.isPrimitive(' + VarToJSON([Value, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.IsFunction(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.isFunction(' + VarToJSON([Value, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.IsNumber(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.isNumber(' + VarToJSON([Value, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.IsNumeric(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.isNumeric(' + VarToJSON([Value, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.IsString(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.isString(' + VarToJSON([Value, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.IsBoolean(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.isBoolean(' + VarToJSON([Value, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.IsElement(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.isElement(' + VarToJSON([Value, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.IsTextNode(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.isTextNode(' + VarToJSON([Value, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.IsDefined(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.isDefined(' + VarToJSON([Value, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.IsIterable(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.isIterable(' + VarToJSON([Value, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.Clone(Item : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.clone(' + VarToJSON([Item, false]) + ');', 'TExtSingleton');
  Result := Self;
end;

function TExtSingleton.TypeJS : TExtFunction; begin
  JSCode(JSName + '.type();', 'TExtSingleton');
  Result := Self;
end;

procedure TExtDdDropTarget.SetFDdGroup(Value : String); begin
  FDdGroup := Value;
  JSCode('ddGroup:' + VarToJSON([Value]));
end;

procedure TExtDdDropTarget.SetFOverClass(Value : String); begin
  FOverClass := Value;
  JSCode('overClass:' + VarToJSON([Value]));
end;

procedure TExtDdDropTarget.SetFDropAllowed(Value : String); begin
  FDropAllowed := Value;
  JSCode('dropAllowed:' + VarToJSON([Value]));
end;

procedure TExtDdDropTarget.SetFDropNotAllowed(Value : String); begin
  FDropNotAllowed := Value;
  JSCode('dropNotAllowed:' + VarToJSON([Value]));
end;

function TExtDdDropTarget.JSClassName : string; begin
  Result := 'Ext-dd-DropTarget';
end;

{$IFDEF FPC}constructor TExtDdDropTarget.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDdDropTarget.NotifyEnter(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.notifyEnter(' + VarToJSON([Source, false, E, false, Data, false]) + ');', 'TExtDdDropTarget');
  Result := Self;
end;

function TExtDdDropTarget.NotifyOver(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.notifyOver(' + VarToJSON([Source, false, E, false, Data, false]) + ');', 'TExtDdDropTarget');
  Result := Self;
end;

function TExtDdDropTarget.NotifyOut(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.notifyOut(' + VarToJSON([Source, false, E, false, Data, false]) + ');', 'TExtDdDropTarget');
  Result := Self;
end;

function TExtDdDropTarget.NotifyDrop(Source : TExtDdDragSource; E : TEvent; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.notifyDrop(' + VarToJSON([Source, false, E, false, Data, false]) + ');', 'TExtDdDropTarget');
  Result := Self;
end;

procedure TExtFormBasic.SetFMethod(Value : String); begin
  FMethod := Value;
  JSCode('method:' + VarToJSON([Value]));
end;

procedure TExtFormBasic.SetFReader(Value : TExtDataReaderReader); begin
  FReader := Value;
  Value.DeleteFromGarbage;
  JSCode('reader:' + VarToJSON([Value, false]));
end;

procedure TExtFormBasic.SetFErrorReader(Value : TExtDataReaderReader); begin
  FErrorReader := Value;
  Value.DeleteFromGarbage;
  JSCode('errorReader:' + VarToJSON([Value, false]));
end;

procedure TExtFormBasic.SetFUrl(Value : String); begin
  FUrl := Value;
  JSCode('url:' + VarToJSON([Value]));
end;

procedure TExtFormBasic.SetFBaseParams(Value : TExtObject); begin
  FBaseParams := Value;
  Value.DeleteFromGarbage;
  JSCode('baseParams:' + VarToJSON([Value, false]));
end;

procedure TExtFormBasic.SetFTimeout(Value : Integer); begin
  FTimeout := Value;
  JSCode('timeout:' + VarToJSON([Value]));
end;

procedure TExtFormBasic.SetFApi(Value : TExtObject); begin
  FApi := Value;
  Value.DeleteFromGarbage;
  JSCode('api:' + VarToJSON([Value, false]));
end;

procedure TExtFormBasic.SetFParamOrder(Value : String); begin
  FParamOrder := Value;
  JSCode('paramOrder:' + VarToJSON([Value]));
end;

procedure TExtFormBasic.SetFParamOrderTExtObjectList(Value : TExtObjectList); begin
  FParamOrderTExtObjectList := Value;
  Value.DeleteFromGarbage;
  JSCode('paramOrder:' + VarToJSON([Value, false]));
end;

procedure TExtFormBasic.SetFParamsAsHash(Value : Boolean); begin
  FParamsAsHash := Value;
  JSCode('paramsAsHash:' + VarToJSON([Value]));
end;

procedure TExtFormBasic.SetFWaitTitle(Value : String); begin
  FWaitTitle := Value;
  JSCode('waitTitle:' + VarToJSON([Value]));
end;

procedure TExtFormBasic.SetFTrackResetOnLoad(Value : Boolean); begin
  FTrackResetOnLoad := Value;
  JSCode('trackResetOnLoad:' + VarToJSON([Value]));
end;

procedure TExtFormBasic.SetFStandardSubmit(Value : Boolean); begin
  FStandardSubmit := Value;
  JSCode('standardSubmit:' + VarToJSON([Value]));
end;

procedure TExtFormBasic.SetFWaitMsgTarget(Value : String); begin
  FWaitMsgTarget := Value;
  JSCode('waitMsgTarget:' + VarToJSON([Value]));
end;

procedure TExtFormBasic.SetFWaitMsgTargetTHTMLElement(Value : THTMLElement); begin
  FWaitMsgTargetTHTMLElement := Value;
  Value.DeleteFromGarbage;
  JSCode('waitMsgTarget:' + VarToJSON([Value, false]));
end;

procedure TExtFormBasic.SetFWaitMsgTargetTExtElement(Value : TExtElement); begin
  FWaitMsgTargetTExtElement := Value;
  Value.DeleteFromGarbage;
  JSCode('waitMsgTarget:' + VarToJSON([Value, false]));
end;

function TExtFormBasic.JSClassName : string; begin
  Result := 'Ext-form-Basic';
end;

procedure TExtFormBasic.InitDefaults; begin
  inherited;
  FReader := TExtDataReaderReader.CreateInternal(Self, 'reader');
  FErrorReader := TExtDataReaderReader.CreateInternal(Self, 'errorReader');
  FBaseParams := TExtObject.CreateInternal(Self, 'baseParams');
  FApi := TExtObject.CreateInternal(Self, 'api');
  FParamOrderTExtObjectList := TExtObjectList.Create(Self, 'paramOrder');
  FWaitMsgTargetTExtElement := TExtElement.CreateInternal(Self, 'waitMsgTarget');
end;

{$IFDEF FPC}constructor TExtFormBasic.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtFormBasic.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtFormBasic.DestroyJS : TExtFunction; begin
  JSCode(JSName + '.destroy();', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.GetFields : TExtFunction; begin
  JSCode(JSName + '.getFields();', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.HasInvalidField : TExtFunction; begin
  JSCode(JSName + '.hasInvalidField();', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.IsValid : TExtFunction; begin
  JSCode(JSName + '.isValid();', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.CheckValidity : TExtFunction; begin
  JSCode(JSName + '.checkValidity();', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.IsDirty : TExtFunction; begin
  JSCode(JSName + '.isDirty();', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.CheckDirty : TExtFunction; begin
  JSCode(JSName + '.checkDirty();', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.HasUpload : TExtFunction; begin
  JSCode(JSName + '.hasUpload();', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.DoAction(Action : String; Options : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.doAction(' + VarToJSON([Action, Options, false]) + ');', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.DoAction(Action : TExtFormActionAction; Options : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.DoAction(' + VarToJSON([Action, false, Options, false]) + ');', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.Submit(Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.submit(' + VarToJSON([Options, false]) + ');', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.Load(Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.load(' + VarToJSON([Options, false]) + ');', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.UpdateRecord(RecordJS : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.updateRecord(' + VarToJSON([RecordJS, false]) + ');', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.LoadRecord(RecordJS : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.loadRecord(' + VarToJSON([RecordJS, false]) + ');', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.GetRecord : TExtFunction; begin
  JSCode(JSName + '.getRecord();', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.FindField(Id : String) : TExtFunction; begin
  JSCode(JSName + '.findField(' + VarToJSON([Id]) + ');', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.MarkInvalid(Errors : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.markInvalid(' + VarToJSON([Errors, false]) + ');', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.MarkInvalid(Errors : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.MarkInvalid(' + VarToJSON(Errors) + ');', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.MarkInvalid(Errors : TExtDataErrors) : TExtFunction; begin
  JSCode(JSName + '.MarkInvalid(' + VarToJSON([Errors, false]) + ');', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.SetValues(Values : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setValues(' + VarToJSON([Values, false]) + ');', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.SetValues(Values : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.SetValues(' + VarToJSON(Values) + ');', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.GetValues(AsString : Boolean = false; DirtyOnly : Boolean = false; IncludeEmptyText : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.getValues(' + VarToJSON([AsString, DirtyOnly, IncludeEmptyText]) + ');', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.GetFieldValues(DirtyOnly : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.getFieldValues(' + VarToJSON([DirtyOnly]) + ');', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.ClearInvalid : TExtFunction; begin
  JSCode(JSName + '.clearInvalid();', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.Reset : TExtFunction; begin
  JSCode(JSName + '.reset();', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.ApplyToFields(Obj : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.applyToFields(' + VarToJSON([Obj, false]) + ');', 'TExtFormBasic');
  Result := Self;
end;

function TExtFormBasic.ApplyIfToFields(Obj : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.applyIfToFields(' + VarToJSON([Obj, false]) + ');', 'TExtFormBasic');
  Result := Self;
end;

destructor TExtFormBasic.Destroy; begin
  try
    FReader.Free;
    FErrorReader.Free;
    FBaseParams.Free;
    FApi.Free;
    FParamOrderTExtObjectList.Free;
    FWaitMsgTargetTExtElement.Free;
  except end;
  inherited;
end;

function TExtUtilFormatSingleton.JSClassName : string; begin
  Result := 'Ext-util-FormatSingleton';
end;

{$IFDEF FPC}constructor TExtUtilFormatSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilFormatSingleton.Undef(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.undef(' + VarToJSON([Value, false]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.DefaultValue(Value : TExtObject; DefaultValue : String) : TExtFunction; begin
  JSCode(JSName + '.defaultValue(' + VarToJSON([Value, false, DefaultValue]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.Substr(Value : String; Start : Integer; Length : Integer) : TExtFunction; begin
  JSCode(JSName + '.substr(' + VarToJSON([Value, Start, Length]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.Lowercase(Value : String) : TExtFunction; begin
  JSCode(JSName + '.lowercase(' + VarToJSON([Value]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.Uppercase(Value : String) : TExtFunction; begin
  JSCode(JSName + '.uppercase(' + VarToJSON([Value]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.UsMoney(Value : Integer) : TExtFunction; begin
  JSCode(JSName + '.usMoney(' + VarToJSON([Value]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.UsMoney(Value : String) : TExtFunction; begin
  JSCode(JSName + '.UsMoney(' + VarToJSON([Value]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.Currency(Value : Integer; Sign : String; Decimals : Integer; EndJS : Boolean) : TExtFunction; begin
  JSCode(JSName + '.currency(' + VarToJSON([Value, Sign, Decimals, EndJS]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.Currency(Value : String; Sign : String; Decimals : Integer; EndJS : Boolean) : TExtFunction; begin
  JSCode(JSName + '.Currency(' + VarToJSON([Value, Sign, Decimals, EndJS]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.Date(Value : String; Format : String = '') : TExtFunction; begin
  JSCode(JSName + '.date(' + VarToJSON([Value, Format]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.Date(Value : TDateTime; Format : String = '') : TExtFunction; begin
  JSCode(JSName + '.Date(' + VarToJSON([Value, Format]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.DateRenderer(Format : String) : TExtFunction; begin
  JSCode(JSName + '.dateRenderer(' + VarToJSON([Format]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.StripTags(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.stripTags(' + VarToJSON([Value, false]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.StripScripts(Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.stripScripts(' + VarToJSON([Value, false]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.FileSize(Size : Integer) : TExtFunction; begin
  JSCode(JSName + '.fileSize(' + VarToJSON([Size]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.FileSize(Size : String) : TExtFunction; begin
  JSCode(JSName + '.FileSize(' + VarToJSON([Size]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.Math : TExtFunction; begin
  JSCode(JSName + '.math();', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.Round(Value : Integer; Precision : Integer) : TExtFunction; begin
  JSCode(JSName + '.round(' + VarToJSON([Value, Precision]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.Round(Value : String; Precision : Integer) : TExtFunction; begin
  JSCode(JSName + '.Round(' + VarToJSON([Value, Precision]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.Number(V : Integer; Format : String) : TExtFunction; begin
  JSCode(JSName + '.number(' + VarToJSON([V, Format]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.NumberRenderer(Format : String) : TExtFunction; begin
  JSCode(JSName + '.numberRenderer(' + VarToJSON([Format]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.Plural(Value : Integer; Singular : String; Plural : String = '') : TExtFunction; begin
  JSCode(JSName + '.plural(' + VarToJSON([Value, Singular, Plural]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.Nl2br(The : String) : TExtFunction; begin
  JSCode(JSName + '.nl2br(' + VarToJSON([The]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.Capitalize : TExtFunction; begin
  JSCode(JSName + '.capitalize();', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.Ellipsis : TExtFunction; begin
  JSCode(JSName + '.ellipsis();', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.Format : TExtFunction; begin
  JSCode(JSName + '.format();', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.HtmlDecode : TExtFunction; begin
  JSCode(JSName + '.htmlDecode();', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.HtmlEncode : TExtFunction; begin
  JSCode(JSName + '.htmlEncode();', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.LeftPad : TExtFunction; begin
  JSCode(JSName + '.leftPad();', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.Trim : TExtFunction; begin
  JSCode(JSName + '.trim();', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.ParseBox(V : Integer) : TExtFunction; begin
  JSCode(JSName + '.parseBox(' + VarToJSON([V]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.ParseBox(V : String) : TExtFunction; begin
  JSCode(JSName + '.ParseBox(' + VarToJSON([V]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

function TExtUtilFormatSingleton.EscapeRegex(Str : String) : TExtFunction; begin
  JSCode(JSName + '.escapeRegex(' + VarToJSON([Str]) + ');', 'TExtUtilFormatSingleton');
  Result := Self;
end;

procedure TExtGridColumnNumber.SetFFormat(Value : String); begin
  FFormat := Value;
  JSCode('format:' + VarToJSON([Value]));
end;

function TExtGridColumnNumber.JSClassName : string; begin
  Result := 'Ext-grid-column-Number';
end;

{$IFDEF FPC}constructor TExtGridColumnNumber.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataProxySessionStorage.JSClassName : string; begin
  Result := 'Ext-data-proxy-SessionStorage';
end;

{$IFDEF FPC}constructor TExtDataProxySessionStorage.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDrawEngineSvg.JSClassName : string; begin
  Result := 'Ext-draw-engine-Svg';
end;

{$IFDEF FPC}constructor TExtDrawEngineSvg.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDrawEngineSvg.GetRegion : TExtFunction; begin
  JSCode(JSName + '.getRegion();', 'TExtDrawEngineSvg');
  Result := Self;
end;

function TExtDrawEngineSvg.ApplyZIndex(Sprite : TExtDrawSprite; ClassName : String) : TExtFunction; begin
  JSCode(JSName + '.applyZIndex(' + VarToJSON([Sprite, false, ClassName]) + ');', 'TExtDrawEngineSvg');
  Result := Self;
end;

procedure TExtButtonButton.SetFText(Value : String); begin
  FText := Value;
  if not ConfigAvailable(JSName) then
    SetText(Value)
  else
    JSCode('text:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFIcon(Value : String); begin
  FIcon := Value;
  if not ConfigAvailable(JSName) then
    SetIcon(Value)
  else
    JSCode('icon:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFHandler(Value : TExtFunction); begin
  FHandler := Value;
  if not ConfigAvailable(JSName) then
    SetHandler(Value)
  else
    JSCode('handler:' + VarToJSON([Value, true]));
end;

procedure TExtButtonButton.SetFMinWidth(Value : Integer); begin
  FMinWidth := Value;
  JSCode('minWidth:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFTooltip(Value : String); begin
  FTooltip := Value;
  if not ConfigAvailable(JSName) then
    SetTooltip(Value)
  else
    JSCode('tooltip:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFTooltipTExtObject(Value : TExtObject); begin
  FTooltipTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('tooltip:' + VarToJSON([Value, false]));
end;

procedure TExtButtonButton.SetFHidden(Value : Boolean); begin
  FHidden := Value;
  JSCode('hidden:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFDisabled(Value : Boolean); begin
  FDisabled := Value;
  JSCode('disabled:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFPressed(Value : Boolean); begin
  FPressed := Value;
  JSCode('pressed:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFToggleGroup(Value : String); begin
  FToggleGroup := Value;
  JSCode('toggleGroup:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFRepeatJS(Value : Boolean); begin
  FRepeatJS := Value;
  JSCode('repeatJS:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFRepeatJSTExtObject(Value : TExtObject); begin
  FRepeatJSTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('repeatJS:' + VarToJSON([Value, false]));
end;

procedure TExtButtonButton.SetFTabIndex(Value : Integer); begin
  FTabIndex := Value;
  JSCode('tabIndex:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFAllowDepress(Value : Boolean); begin
  FAllowDepress := Value;
  JSCode('allowDepress:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFEnableToggle(Value : Boolean); begin
  FEnableToggle := Value;
  JSCode('enableToggle:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFToggleHandler(Value : TExtFunction); begin
  FToggleHandler := Value;
  JSCode('toggleHandler:' + VarToJSON([Value, true]));
end;

procedure TExtButtonButton.SetFMenu(Value : TExtMenuMenu); begin
  FMenu := Value;
  Value.DeleteFromGarbage;
  JSCode('menu:' + VarToJSON([Value, false]));
end;

procedure TExtButtonButton.SetFMenuString(Value : String); begin
  FMenuString := Value;
  JSCode('menu:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFMenuTExtObject(Value : TExtObject); begin
  FMenuTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('menu:' + VarToJSON([Value, false]));
end;

procedure TExtButtonButton.SetFMenuAlign(Value : String); begin
  FMenuAlign := Value;
  JSCode('menuAlign:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFTextAlign(Value : String); begin
  FTextAlign := Value;
  if not ConfigAvailable(JSName) then
    SetTextAlign(Value)
  else
    JSCode('textAlign:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFOverflowText(Value : String); begin
  FOverflowText := Value;
  JSCode('overflowText:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFIconCls(Value : String); begin
  FIconCls := Value;
  if not ConfigAvailable(JSName) then
    SetIconCls(Value)
  else
    JSCode('iconCls:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFTypeJS(Value : String); begin
  FTypeJS := Value;
  JSCode('typeJS:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFClickEvent(Value : String); begin
  FClickEvent := Value;
  JSCode('clickEvent:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFPreventDefault(Value : Boolean); begin
  FPreventDefault := Value;
  JSCode('preventDefault:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFHandleMouseEvents(Value : Boolean); begin
  FHandleMouseEvents := Value;
  JSCode('handleMouseEvents:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFTooltipType(Value : String); begin
  FTooltipType := Value;
  JSCode('tooltipType:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFBaseCls(Value : String); begin
  FBaseCls := Value;
  JSCode('baseCls:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFPressedCls(Value : String); begin
  FPressedCls := Value;
  JSCode('pressedCls:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFOverCls(Value : String); begin
  FOverCls := Value;
  JSCode('overCls:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFFocusCls(Value : String); begin
  FFocusCls := Value;
  JSCode('focusCls:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFMenuActiveCls(Value : String); begin
  FMenuActiveCls := Value;
  JSCode('menuActiveCls:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFHref(Value : String); begin
  FHref := Value;
  JSCode('href:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFBaseParams(Value : TExtObject); begin
  FBaseParams := Value;
  Value.DeleteFromGarbage;
  JSCode('baseParams:' + VarToJSON([Value, false]));
end;

procedure TExtButtonButton.SetFParams(Value : TExtObject); begin
  FParams := Value;
  Value.DeleteFromGarbage;
  if not ConfigAvailable(JSName) then
    SetParams(Value)
  else
    JSCode('params:' + VarToJSON([Value, false]));
end;

procedure TExtButtonButton.SetFScale(Value : String); begin
  FScale := Value;
  if not ConfigAvailable(JSName) then
    SetScale(Value)
  else
    JSCode('scale:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFScope(Value : TExtObject); begin
  FScope := Value;
  Value.DeleteFromGarbage;
  JSCode('scope:' + VarToJSON([Value, false]));
end;

procedure TExtButtonButton.SetFIconAlign(Value : String); begin
  FIconAlign := Value;
  JSCode('iconAlign:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFArrowAlign(Value : String); begin
  FArrowAlign := Value;
  JSCode('arrowAlign:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFArrowCls(Value : String); begin
  FArrowCls := Value;
  JSCode('arrowCls:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFCls(Value : String); begin
  FCls := Value;
  JSCode('cls:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFAutoWidth(Value : Boolean); begin
  FAutoWidth := Value;
  JSCode('autoWidth:' + VarToJSON([Value]));
end;

procedure TExtButtonButton.SetFOnClick(Value : TExtButtonButtonOnClick); begin
  if Assigned(FOnClick) then
    JSCode(JSName+'.events ["click"].listeners=[];');
  if Assigned(Value) then
    On('click', Ajax('click', ['This', '%0.nm','E', '%1.nm'], true));
  FOnClick := Value;
end;

procedure TExtButtonButton.SetFOnToggle(Value : TExtButtonButtonOnToggle); begin
  if Assigned(FOnToggle) then
    JSCode(JSName+'.events ["toggle"].listeners=[];');
  if Assigned(Value) then
    On('toggle', Ajax('toggle', ['This', '%0.nm','Pressed', '%1','This_', '%2.nm','E', '%3.nm'], true));
  FOnToggle := Value;
end;

procedure TExtButtonButton.SetFOnMouseout(Value : TExtButtonButtonOnMouseout); begin
  if Assigned(FOnMouseout) then
    JSCode(JSName+'.events ["mouseout"].listeners=[];');
  if Assigned(Value) then
    On('mouseout', Ajax('mouseout', ['This', '%0.nm','E', '%1.nm'], true));
  FOnMouseout := Value;
end;

procedure TExtButtonButton.SetFOnMenushow(Value : TExtButtonButtonOnMenushow); begin
  if Assigned(FOnMenushow) then
    JSCode(JSName+'.events ["menushow"].listeners=[];');
  if Assigned(Value) then
    On('menushow', Ajax('menushow', ['This', '%0.nm','Menu', '%1.nm','This_', '%2.nm','Menu_', '%3.nm','This__', '%4.nm','Menu__', '%5.nm','E', '%6.nm','This___', '%7.nm','Menu___', '%8.nm','E_', '%9.nm'], true));
  FOnMenushow := Value;
end;

function TExtButtonButton.JSClassName : string; begin
  Result := 'Ext-button-Button';
end;

class function TExtButtonButton.Button : TExtButtonButton;
const
  lButton : TExtButtonButton = nil;
begin
  if lButton = nil then lButton := TExtButtonButton.CreateSingleton('Ext-button-Button.Button');
  Result := lButton
end;

class function TExtButtonButton.E : TExtEventObjectSingleton;
const
  lE : TExtEventObjectSingleton = nil;
begin
  if lE = nil then lE := TExtEventObjectSingleton.CreateSingleton('Ext-button-Button.E');
  Result := lE
end;

class function TExtButtonButton.Button_ : TExtButtonButton;
const
  lButton_ : TExtButtonButton = nil;
begin
  if lButton_ = nil then lButton_ := TExtButtonButton.CreateSingleton('Ext-button-Button.Button');
  Result := lButton_
end;

class function TExtButtonButton.State : Boolean; begin
  Result := false
end;

procedure TExtButtonButton.InitDefaults; begin
  inherited;
  FTooltipTExtObject := TExtObject.CreateInternal(Self, 'tooltip');
  FRepeatJSTExtObject := TExtObject.CreateInternal(Self, 'repeatJS');
  FMenu := TExtMenuMenu.CreateInternal(Self, 'menu');
  FMenuTExtObject := TExtObject.CreateInternal(Self, 'menu');
  FBaseParams := TExtObject.CreateInternal(Self, 'baseParams');
  FParams := TExtObject.CreateInternal(Self, 'params');
  FScope := TExtObject.CreateInternal(Self, 'scope');
end;

{$IFDEF FPC}constructor TExtButtonButton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtButtonButton.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtButtonButton.GetTemplateArgs : TExtFunction; begin
  JSCode(JSName + '.getTemplateArgs();', 'TExtButtonButton');
  Result := Self;
end;

function TExtButtonButton.SetParams(Params : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setParams(' + VarToJSON([Params, false]) + ');', 'TExtButtonButton');
  Result := Self;
end;

function TExtButtonButton.SetIconCls(Cls : String) : TExtFunction; begin
  JSCode(JSName + '.setIconCls(' + VarToJSON([Cls]) + ');', 'TExtButtonButton');
  Result := Self;
end;

function TExtButtonButton.SetTooltip(Tooltip : String) : TExtFunction; begin
  JSCode(JSName + '.setTooltip(' + VarToJSON([Tooltip]) + ');', 'TExtButtonButton');
  Result := Self;
end;

function TExtButtonButton.SetTooltip(Tooltip : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.SetTooltip(' + VarToJSON([Tooltip, false]) + ');', 'TExtButtonButton');
  Result := Self;
end;

function TExtButtonButton.SetTextAlign(Align : String) : TExtFunction; begin
  JSCode(JSName + '.setTextAlign(' + VarToJSON([Align]) + ');', 'TExtButtonButton');
  Result := Self;
end;

function TExtButtonButton.SetHandler(Handler : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.setHandler(' + VarToJSON([Handler, true, Scope, false]) + ');', 'TExtButtonButton');
  Result := Self;
end;

function TExtButtonButton.SetText(Text : String) : TExtFunction; begin
  JSCode(JSName + '.setText(' + VarToJSON([Text]) + ');', 'TExtButtonButton');
  Result := Self;
end;

function TExtButtonButton.SetIcon(Icon : String) : TExtFunction; begin
  JSCode(JSName + '.setIcon(' + VarToJSON([Icon]) + ');', 'TExtButtonButton');
  Result := Self;
end;

function TExtButtonButton.GetText : TExtFunction; begin
  JSCode(JSName + '.getText();', 'TExtButtonButton');
  Result := Self;
end;

function TExtButtonButton.Toggle(State : Boolean = false; SuppressEvent : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.toggle(' + VarToJSON([State, SuppressEvent]) + ');', 'TExtButtonButton');
  Result := Self;
end;

function TExtButtonButton.ShowMenu : TExtFunction; begin
  JSCode(JSName + '.showMenu();', 'TExtButtonButton');
  Result := Self;
end;

function TExtButtonButton.HideMenu : TExtFunction; begin
  JSCode(JSName + '.hideMenu();', 'TExtButtonButton');
  Result := Self;
end;

function TExtButtonButton.HasVisibleMenu : TExtFunction; begin
  JSCode(JSName + '.hasVisibleMenu();', 'TExtButtonButton');
  Result := Self;
end;

function TExtButtonButton.SetScale(Scale : String) : TExtFunction; begin
  JSCode(JSName + '.setScale(' + VarToJSON([Scale]) + ');', 'TExtButtonButton');
  Result := Self;
end;

function TExtButtonButton.GetPressed(Group : String) : TExtFunction; begin
  JSCode(JSName + '.getPressed(' + VarToJSON([Group]) + ');', 'TExtButtonButton');
  Result := Self;
end;

destructor TExtButtonButton.Destroy; begin
  try
    FTooltipTExtObject.Free;
    FRepeatJSTExtObject.Free;
    FMenu.Free;
    FMenuTExtObject.Free;
    FBaseParams.Free;
    FParams.Free;
    FScope.Free;
  except end;
  inherited;
end;

procedure TExtButtonButton.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'click') and Assigned(FOnClick) then
    FOnClick(TExtButtonButton(ParamAsObject('This')), TEvent(ParamAsObject('E')))
  else if (AEvtName = 'toggle') and Assigned(FOnToggle) then
    FOnToggle(TExtButtonButton(ParamAsObject('This')), ParamAsBoolean('Pressed'), TExtButtonButton(ParamAsObject('This_')), TEvent(ParamAsObject('E')))
  else if (AEvtName = 'mouseout') and Assigned(FOnMouseout) then
    FOnMouseout(TExtButtonButton(ParamAsObject('This')), TEvent(ParamAsObject('E')))
  else if (AEvtName = 'menushow') and Assigned(FOnMenushow) then
    FOnMenushow(TExtButtonButton(ParamAsObject('This')), TExtMenuMenu(ParamAsObject('Menu')), TExtButtonButton(ParamAsObject('This_')), TExtMenuMenu(ParamAsObject('Menu_')), TExtButtonButton(ParamAsObject('This__')), TExtMenuMenu(ParamAsObject('Menu__')), TEvent(ParamAsObject('E')), TExtButtonButton(ParamAsObject('This___')), TExtMenuMenu(ParamAsObject('Menu___')), TEvent(ParamAsObject('E_')));
end;

procedure TExtFormFieldHtmlEditor.SetFEnableFormat(Value : Boolean); begin
  FEnableFormat := Value;
  JSCode('enableFormat:' + VarToJSON([Value]));
end;

procedure TExtFormFieldHtmlEditor.SetFEnableFontSize(Value : Boolean); begin
  FEnableFontSize := Value;
  JSCode('enableFontSize:' + VarToJSON([Value]));
end;

procedure TExtFormFieldHtmlEditor.SetFEnableColors(Value : Boolean); begin
  FEnableColors := Value;
  JSCode('enableColors:' + VarToJSON([Value]));
end;

procedure TExtFormFieldHtmlEditor.SetFEnableAlignments(Value : Boolean); begin
  FEnableAlignments := Value;
  JSCode('enableAlignments:' + VarToJSON([Value]));
end;

procedure TExtFormFieldHtmlEditor.SetFEnableLists(Value : Boolean); begin
  FEnableLists := Value;
  JSCode('enableLists:' + VarToJSON([Value]));
end;

procedure TExtFormFieldHtmlEditor.SetFEnableSourceEdit(Value : Boolean); begin
  FEnableSourceEdit := Value;
  JSCode('enableSourceEdit:' + VarToJSON([Value]));
end;

procedure TExtFormFieldHtmlEditor.SetFEnableLinks(Value : Boolean); begin
  FEnableLinks := Value;
  JSCode('enableLinks:' + VarToJSON([Value]));
end;

procedure TExtFormFieldHtmlEditor.SetFEnableFont(Value : Boolean); begin
  FEnableFont := Value;
  JSCode('enableFont:' + VarToJSON([Value]));
end;

procedure TExtFormFieldHtmlEditor.SetFCreateLinkText(Value : String); begin
  FCreateLinkText := Value;
  JSCode('createLinkText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldHtmlEditor.SetFDefaultLinkValue(Value : String); begin
  FDefaultLinkValue := Value;
  JSCode('defaultLinkValue:' + VarToJSON([Value]));
end;

procedure TExtFormFieldHtmlEditor.SetFFontFamilies(Value : TExtObjectList); begin
  FFontFamilies := Value;
  Value.DeleteFromGarbage;
  JSCode('fontFamilies:' + VarToJSON([Value, false]));
end;

procedure TExtFormFieldHtmlEditor.SetFDefaultValue(Value : String); begin
  FDefaultValue := Value;
  JSCode('defaultValue:' + VarToJSON([Value]));
end;

procedure TExtFormFieldHtmlEditor.SetFFieldCls(Value : String); begin
  FFieldCls := Value;
  JSCode('fieldCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldHtmlEditor.SetFFocusCls(Value : String); begin
  FFocusCls := Value;
  JSCode('focusCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldHtmlEditor.SetFAutoCreate(Value : String); begin
  FAutoCreate := Value;
  JSCode('autoCreate:' + VarToJSON([Value]));
end;

procedure TExtFormFieldHtmlEditor.SetFInputType(Value : String); begin
  FInputType := Value;
  JSCode('inputType:' + VarToJSON([Value]));
end;

procedure TExtFormFieldHtmlEditor.SetFInvalidCls(Value : String); begin
  FInvalidCls := Value;
  JSCode('invalidCls:' + VarToJSON([Value]));
end;

procedure TExtFormFieldHtmlEditor.SetFInvalidText(Value : String); begin
  FInvalidText := Value;
  JSCode('invalidText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldHtmlEditor.SetFMsgFx(Value : String); begin
  FMsgFx := Value;
  JSCode('msgFx:' + VarToJSON([Value]));
end;

procedure TExtFormFieldHtmlEditor.SetFAllowDomMove(Value : Boolean); begin
  FAllowDomMove := Value;
  JSCode('allowDomMove:' + VarToJSON([Value]));
end;

procedure TExtFormFieldHtmlEditor.SetFApplyTo(Value : String); begin
  FApplyTo := Value;
  JSCode('applyTo:' + VarToJSON([Value]));
end;

procedure TExtFormFieldHtmlEditor.SetFReadOnly(Value : String); begin
  FReadOnly := Value;
  JSCode('readOnly:' + VarToJSON([Value]));
end;

procedure TExtFormFieldHtmlEditor.SetFTabIndex(Value : String); begin
  FTabIndex := Value;
  JSCode('tabIndex:' + VarToJSON([Value]));
end;

function TExtFormFieldHtmlEditor.JSClassName : string; begin
  Result := 'Ext-form-field-HtmlEditor';
end;

procedure TExtFormFieldHtmlEditor.InitDefaults; begin
  inherited;
  FFontFamilies := TExtObjectList.Create(Self, 'fontFamilies');
end;

{$IFDEF FPC}constructor TExtFormFieldHtmlEditor.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtFormFieldHtmlEditor.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtFormFieldHtmlEditor.Validate : TExtFunction; begin
  JSCode(JSName + '.validate();', 'TExtFormFieldHtmlEditor');
  Result := Self;
end;

destructor TExtFormFieldHtmlEditor.Destroy; begin
  try
    FFontFamilies.Free;
  except end;
  inherited;
end;

procedure TExtLayer.SetFShim(Value : Boolean); begin
  FShim := Value;
  JSCode('shim:' + VarToJSON([Value]));
end;

procedure TExtLayer.SetFShadow(Value : String); begin
  FShadow := Value;
  JSCode('shadow:' + VarToJSON([Value]));
end;

procedure TExtLayer.SetFShadowBoolean(Value : Boolean); begin
  FShadowBoolean := Value;
  JSCode('shadow:' + VarToJSON([Value]));
end;

procedure TExtLayer.SetFDh(Value : TExtObject); begin
  FDh := Value;
  Value.DeleteFromGarbage;
  JSCode('dh:' + VarToJSON([Value, false]));
end;

procedure TExtLayer.SetFConstrain(Value : Boolean); begin
  FConstrain := Value;
  JSCode('constrain:' + VarToJSON([Value]));
end;

procedure TExtLayer.SetFCls(Value : String); begin
  FCls := Value;
  JSCode('cls:' + VarToJSON([Value]));
end;

procedure TExtLayer.SetFZindex(Value : Integer); begin
  FZindex := Value;
  if not ConfigAvailable(JSName) then
    SetZIndex(Value)
  else
    JSCode('zindex:' + VarToJSON([Value]));
end;

procedure TExtLayer.SetFShadowOffset(Value : Integer); begin
  FShadowOffset := Value;
  JSCode('shadowOffset:' + VarToJSON([Value]));
end;

procedure TExtLayer.SetFUseDisplay(Value : Boolean); begin
  FUseDisplay := Value;
  JSCode('useDisplay:' + VarToJSON([Value]));
end;

procedure TExtLayer.SetFVisibilityCls(Value : String); begin
  FVisibilityCls := Value;
  JSCode('visibilityCls:' + VarToJSON([Value]));
end;

procedure TExtLayer.SetFHideMode(Value : String); begin
  FHideMode := Value;
  JSCode('hideMode:' + VarToJSON([Value]));
end;

function TExtLayer.JSClassName : string; begin
  Result := 'Ext-Layer-cfg-hideMode';
end;

procedure TExtLayer.InitDefaults; begin
  inherited;
  FDh := TExtObject.CreateInternal(Self, 'dh');
end;

{$IFDEF FPC}constructor TExtLayer.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtLayer.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

constructor TExtLayer.Create(Config : TExtObject = nil; ExistingEl : String = ''); begin
  CreateVar(JSClassName + '(' + VarToJSON([Config, false, ExistingEl]) + ');');
  InitDefaults;
end;

constructor TExtLayer.Create(Config : TExtObject; ExistingEl : THTMLElement); begin
  CreateVar(JSClassName + '(' + VarToJSON([Config, false, ExistingEl, false]) + ');');
  InitDefaults;
end;

function TExtLayer.SetZIndex(Zindex : Integer) : TExtFunction; begin
  JSCode(JSName + '.setZIndex(' + VarToJSON([Zindex]) + ');', 'TExtLayer');
  Result := Self;
end;

destructor TExtLayer.Destroy; begin
  try
    FDh.Free;
  except end;
  inherited;
end;

procedure TExtPickerMonth.SetFOkText(Value : String); begin
  FOkText := Value;
  JSCode('okText:' + VarToJSON([Value]));
end;

procedure TExtPickerMonth.SetFCancelText(Value : String); begin
  FCancelText := Value;
  JSCode('cancelText:' + VarToJSON([Value]));
end;

procedure TExtPickerMonth.SetFBaseCls(Value : String); begin
  FBaseCls := Value;
  JSCode('baseCls:' + VarToJSON([Value]));
end;

procedure TExtPickerMonth.SetFShowButtons(Value : Boolean); begin
  FShowButtons := Value;
  JSCode('showButtons:' + VarToJSON([Value]));
end;

procedure TExtPickerMonth.SetFSelectedCls(Value : String); begin
  FSelectedCls := Value;
  JSCode('selectedCls:' + VarToJSON([Value]));
end;

procedure TExtPickerMonth.SetFValue(Value : TDateTime); begin
  FValue := Value;
  if not ConfigAvailable(JSName) then
    SetValue(Value)
  else
    JSCode('value:' + VarToJSON([Value]));
end;

procedure TExtPickerMonth.SetFValueTArrayOfInteger(Value : TArrayOfInteger); begin
  FValueTArrayOfInteger := Value;
  JSCode('value:' + ArrayToJSON(Value));
end;

procedure TExtPickerMonth.SetFOnCancelclick(Value : TExtPickerMonthOnCancelclick); begin
  if Assigned(FOnCancelclick) then
    JSCode(JSName+'.events ["cancelclick"].listeners=[];');
  if Assigned(Value) then
    On('cancelclick', Ajax('cancelclick', ['This', '%0.nm','This_', '%1.nm','Value', '%2.nm'], true));
  FOnCancelclick := Value;
end;

procedure TExtPickerMonth.SetFOnMonthdblclick(Value : TExtPickerMonthOnMonthdblclick); begin
  if Assigned(FOnMonthdblclick) then
    JSCode(JSName+'.events ["monthdblclick"].listeners=[];');
  if Assigned(Value) then
    On('monthdblclick', Ajax('monthdblclick', ['This', '%0.nm','Value', '%1.nm'], true));
  FOnMonthdblclick := Value;
end;

procedure TExtPickerMonth.SetFOnOkclick(Value : TExtPickerMonthOnOkclick); begin
  if Assigned(FOnOkclick) then
    JSCode(JSName+'.events ["okclick"].listeners=[];');
  if Assigned(Value) then
    On('okclick', Ajax('okclick', ['This', '%0.nm','Value', '%1.nm'], true));
  FOnOkclick := Value;
end;

procedure TExtPickerMonth.SetFOnSelect(Value : TExtPickerMonthOnSelect); begin
  if Assigned(FOnSelect) then
    JSCode(JSName+'.events ["select"].listeners=[];');
  if Assigned(Value) then
    On('select', Ajax('select', ['This', '%0.nm','Value', '%1.nm'], true));
  FOnSelect := Value;
end;

procedure TExtPickerMonth.SetFOnYearclick(Value : TExtPickerMonthOnYearclick); begin
  if Assigned(FOnYearclick) then
    JSCode(JSName+'.events ["yearclick"].listeners=[];');
  if Assigned(Value) then
    On('yearclick', Ajax('yearclick', ['This', '%0.nm','Value', '%1.nm'], true));
  FOnYearclick := Value;
end;

procedure TExtPickerMonth.SetFOnYeardblclick(Value : TExtPickerMonthOnYeardblclick); begin
  if Assigned(FOnYeardblclick) then
    JSCode(JSName+'.events ["yeardblclick"].listeners=[];');
  if Assigned(Value) then
    On('yeardblclick', Ajax('yeardblclick', ['This', '%0.nm','Value', '%1.nm'], true));
  FOnYeardblclick := Value;
end;

function TExtPickerMonth.JSClassName : string; begin
  Result := 'Ext-picker-Month';
end;

{$IFDEF FPC}constructor TExtPickerMonth.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtPickerMonth.SetValue(Value : TDateTime) : TExtFunction; begin
  JSCode(JSName + '.setValue(' + VarToJSON([Value]) + ');', 'TExtPickerMonth');
  Result := Self;
end;

function TExtPickerMonth.SetValue(Value : TArrayOfInteger) : TExtFunction; begin
  JSCode(JSName + '.SetValue(' + VarToJSON([Value]) + ');', 'TExtPickerMonth');
  Result := Self;
end;

function TExtPickerMonth.GetValue : TExtFunction; begin
  JSCode(JSName + '.getValue();', 'TExtPickerMonth');
  Result := Self;
end;

function TExtPickerMonth.HasSelection : TExtFunction; begin
  JSCode(JSName + '.hasSelection();', 'TExtPickerMonth');
  Result := Self;
end;

function TExtPickerMonth.AdjustYear(Offset : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.adjustYear(' + VarToJSON([Offset]) + ');', 'TExtPickerMonth');
  Result := Self;
end;

procedure TExtPickerMonth.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'cancelclick') and Assigned(FOnCancelclick) then
    FOnCancelclick(TExtPickerMonth(ParamAsObject('This')), TExtPickerMonth(ParamAsObject('This_')), TExtObjectList(ParamAsObject('Value')))
  else if (AEvtName = 'monthdblclick') and Assigned(FOnMonthdblclick) then
    FOnMonthdblclick(TExtPickerMonth(ParamAsObject('This')), TExtObjectList(ParamAsObject('Value')))
  else if (AEvtName = 'okclick') and Assigned(FOnOkclick) then
    FOnOkclick(TExtPickerMonth(ParamAsObject('This')), TExtObjectList(ParamAsObject('Value')))
  else if (AEvtName = 'select') and Assigned(FOnSelect) then
    FOnSelect(TExtPickerMonth(ParamAsObject('This')), TExtObjectList(ParamAsObject('Value')))
  else if (AEvtName = 'yearclick') and Assigned(FOnYearclick) then
    FOnYearclick(TExtPickerMonth(ParamAsObject('This')), TExtObjectList(ParamAsObject('Value')))
  else if (AEvtName = 'yeardblclick') and Assigned(FOnYeardblclick) then
    FOnYeardblclick(TExtPickerMonth(ParamAsObject('This')), TExtObjectList(ParamAsObject('Value')));
end;

procedure TExtGridColumnBoolean.SetFTrueText(Value : String); begin
  FTrueText := Value;
  JSCode('trueText:' + VarToJSON([Value]));
end;

procedure TExtGridColumnBoolean.SetFFalseText(Value : String); begin
  FFalseText := Value;
  JSCode('falseText:' + VarToJSON([Value]));
end;

procedure TExtGridColumnBoolean.SetFUndefinedText(Value : String); begin
  FUndefinedText := Value;
  JSCode('undefinedText:' + VarToJSON([Value]));
end;

function TExtGridColumnBoolean.JSClassName : string; begin
  Result := 'Ext-grid-column-Boolean';
end;

{$IFDEF FPC}constructor TExtGridColumnBoolean.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtStateManagerSingleton.JSClassName : string; begin
  Result := 'Ext-state-ManagerSingleton';
end;

{$IFDEF FPC}constructor TExtStateManagerSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtStateManagerSingleton.SetProvider(StateProvider : TExtStateProvider) : TExtFunction; begin
  JSCode(JSName + '.setProvider(' + VarToJSON([StateProvider, false]) + ');', 'TExtStateManagerSingleton');
  Result := Self;
end;

function TExtStateManagerSingleton.Get(Name : String; DefaultValue : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.get(' + VarToJSON([Name, DefaultValue, false]) + ');', 'TExtStateManagerSingleton');
  Result := Self;
end;

function TExtStateManagerSingleton.SetJS(Name : String; Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.set(' + VarToJSON([Name, Value, false]) + ');', 'TExtStateManagerSingleton');
  Result := Self;
end;

function TExtStateManagerSingleton.Clear(Name : String) : TExtFunction; begin
  JSCode(JSName + '.clear(' + VarToJSON([Name]) + ');', 'TExtStateManagerSingleton');
  Result := Self;
end;

function TExtStateManagerSingleton.GetProvider : TExtFunction; begin
  JSCode(JSName + '.getProvider();', 'TExtStateManagerSingleton');
  Result := Self;
end;

procedure TExtTabPanel.SetFTabPosition(Value : String); begin
  FTabPosition := Value;
  JSCode('tabPosition:' + VarToJSON([Value]));
end;

procedure TExtTabPanel.SetFActiveItem(Value : String); begin
  FActiveItem := Value;
  JSCode('activeItem:' + VarToJSON([Value]));
end;

procedure TExtTabPanel.SetFActiveItemInteger(Value : Integer); begin
  FActiveItemInteger := Value;
  JSCode('activeItem:' + VarToJSON([Value]));
end;

procedure TExtTabPanel.SetFActiveTab(Value : String); begin
  FActiveTab := Value;
  if not ConfigAvailable(JSName) then
    SetActiveTab(Value)
  else
    JSCode('activeTab:' + VarToJSON([Value]));
end;

procedure TExtTabPanel.SetFActiveTabInteger(Value : Integer); begin
  FActiveTabInteger := Value;
  JSCode('activeTab:' + VarToJSON([Value]));
end;

procedure TExtTabPanel.SetFActiveTabTExtComponent(Value : TExtComponent); begin
  FActiveTabTExtComponent := Value;
  Value.DeleteFromGarbage;
  JSCode('activeTab:' + VarToJSON([Value, false]));
end;

procedure TExtTabPanel.SetFTabBar(Value : TExtObject); begin
  FTabBar := Value;
  Value.DeleteFromGarbage;
  JSCode('tabBar:' + VarToJSON([Value, false]));
end;

procedure TExtTabPanel.SetFLayout(Value : TExtObject); begin
  FLayout := Value;
  Value.DeleteFromGarbage;
  JSCode('layout:' + VarToJSON([Value, false]));
end;

procedure TExtTabPanel.SetFRemovePanelHeader(Value : Boolean); begin
  FRemovePanelHeader := Value;
  JSCode('removePanelHeader:' + VarToJSON([Value]));
end;

procedure TExtTabPanel.SetFPlain(Value : Boolean); begin
  FPlain := Value;
  JSCode('plain:' + VarToJSON([Value]));
end;

procedure TExtTabPanel.SetFItemCls(Value : String); begin
  FItemCls := Value;
  JSCode('itemCls:' + VarToJSON([Value]));
end;

procedure TExtTabPanel.SetFMinTabWidth(Value : Integer); begin
  FMinTabWidth := Value;
  JSCode('minTabWidth:' + VarToJSON([Value]));
end;

procedure TExtTabPanel.SetFMaxTabWidth(Value : Integer); begin
  FMaxTabWidth := Value;
  JSCode('maxTabWidth:' + VarToJSON([Value]));
end;

procedure TExtTabPanel.SetFDeferredRender(Value : Boolean); begin
  FDeferredRender := Value;
  JSCode('deferredRender:' + VarToJSON([Value]));
end;

procedure TExtTabPanel.SetFOnBeforetabchange(Value : TExtTabPanelOnBeforetabchange); begin
  if Assigned(FOnBeforetabchange) then
    JSCode(JSName+'.events ["beforetabchange"].listeners=[];');
  if Assigned(Value) then
    On('beforetabchange', Ajax('beforetabchange', ['TabPanel', '%0.nm','NewCard', '%1.nm','OldCard', '%2.nm'], true));
  FOnBeforetabchange := Value;
end;

procedure TExtTabPanel.SetFOnTabchange(Value : TExtTabPanelOnTabchange); begin
  if Assigned(FOnTabchange) then
    JSCode(JSName+'.events ["tabchange"].listeners=[];');
  if Assigned(Value) then
    On('tabchange', Ajax('tabchange', ['TabPanel', '%0.nm','NewCard', '%1.nm','OldCard', '%2.nm'], true));
  FOnTabchange := Value;
end;

function TExtTabPanel.JSClassName : string; begin
  Result := 'Ext-tab-Panel';
end;

procedure TExtTabPanel.InitDefaults; begin
  inherited;
  FActiveTabTExtComponent := TExtComponent.CreateInternal(Self, 'activeTab');
  FTabBar := TExtObject.CreateInternal(Self, 'tabBar');
  FLayout := TExtObject.CreateInternal(Self, 'layout');
end;

{$IFDEF FPC}constructor TExtTabPanel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtTabPanel.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtTabPanel.SetActiveTab(Card : String) : TExtFunction; begin
  JSCode(JSName + '.setActiveTab(' + VarToJSON([Card]) + ');', 'TExtTabPanel');
  Result := Self;
end;

function TExtTabPanel.SetActiveTab(Card : Integer) : TExtFunction; begin
  JSCode(JSName + '.SetActiveTab(' + VarToJSON([Card]) + ');', 'TExtTabPanel');
  Result := Self;
end;

function TExtTabPanel.SetActiveTab(Card : TExtComponent) : TExtFunction; begin
  JSCode(JSName + '.SetActiveTab(' + VarToJSON([Card, false]) + ');', 'TExtTabPanel');
  Result := Self;
end;

function TExtTabPanel.GetActiveTab : TExtFunction; begin
  JSCode(JSName + '.getActiveTab();', 'TExtTabPanel');
  Result := Self;
end;

function TExtTabPanel.GetTabBar : TExtFunction; begin
  JSCode(JSName + '.getTabBar();', 'TExtTabPanel');
  Result := Self;
end;

function TExtTabPanel.OnAdd : TExtFunction; begin
  JSCode(JSName + '.onAdd();', 'TExtTabPanel');
  Result := Self;
end;

function TExtTabPanel.DoRemove : TExtFunction; begin
  JSCode(JSName + '.doRemove();', 'TExtTabPanel');
  Result := Self;
end;

function TExtTabPanel.OnRemove : TExtFunction; begin
  JSCode(JSName + '.onRemove();', 'TExtTabPanel');
  Result := Self;
end;

destructor TExtTabPanel.Destroy; begin
  try
    FActiveTabTExtComponent.Free;
    FTabBar.Free;
    FLayout.Free;
  except end;
  inherited;
end;

procedure TExtTabPanel.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforetabchange') and Assigned(FOnBeforetabchange) then
    FOnBeforetabchange(TExtTabPanel(ParamAsObject('TabPanel')), TExtComponent(ParamAsObject('NewCard')), TExtComponent(ParamAsObject('OldCard')))
  else if (AEvtName = 'tabchange') and Assigned(FOnTabchange) then
    FOnTabchange(TExtTabPanel(ParamAsObject('TabPanel')), TExtComponent(ParamAsObject('NewCard')), TExtComponent(ParamAsObject('OldCard')));
end;

procedure TExtDataTreeStore.SetFRoot(Value : TExtDataModel); begin
  FRoot := Value;
  Value.DeleteFromGarbage;
  JSCode('root:' + VarToJSON([Value, false]));
end;

procedure TExtDataTreeStore.SetFRootTExtDataNodeInterface(Value : TExtDataNodeInterface); begin
  FRootTExtDataNodeInterface := Value;
  Value.DeleteFromGarbage;
  JSCode('root:' + VarToJSON([Value, false]));
end;

procedure TExtDataTreeStore.SetFRootTExtObject(Value : TExtObject); begin
  FRootTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('root:' + VarToJSON([Value, false]));
end;

procedure TExtDataTreeStore.SetFClearOnLoad(Value : Boolean); begin
  FClearOnLoad := Value;
  JSCode('clearOnLoad:' + VarToJSON([Value]));
end;

procedure TExtDataTreeStore.SetFNodeParam(Value : String); begin
  FNodeParam := Value;
  JSCode('nodeParam:' + VarToJSON([Value]));
end;

procedure TExtDataTreeStore.SetFDefaultRootId(Value : String); begin
  FDefaultRootId := Value;
  JSCode('defaultRootId:' + VarToJSON([Value]));
end;

procedure TExtDataTreeStore.SetFDefaultRootProperty(Value : String); begin
  FDefaultRootProperty := Value;
  JSCode('defaultRootProperty:' + VarToJSON([Value]));
end;

procedure TExtDataTreeStore.SetFFolderSort(Value : Boolean); begin
  FFolderSort := Value;
  JSCode('folderSort:' + VarToJSON([Value]));
end;

procedure TExtDataTreeStore.SetFOnAppend(Value : TExtDataTreeStoreOnAppend); begin
  if Assigned(FOnAppend) then
    JSCode(JSName+'.events ["append"].listeners=[];');
  if Assigned(Value) then
    On('append', Ajax('append', [], true));
  FOnAppend := Value;
end;

procedure TExtDataTreeStore.SetFOnRemove(Value : TExtDataTreeStoreOnRemove); begin
  if Assigned(FOnRemove) then
    JSCode(JSName+'.events ["remove"].listeners=[];');
  if Assigned(Value) then
    On('remove', Ajax('remove', [], true));
  FOnRemove := Value;
end;

procedure TExtDataTreeStore.SetFOnMove(Value : TExtDataTreeStoreOnMove); begin
  if Assigned(FOnMove) then
    JSCode(JSName+'.events ["move"].listeners=[];');
  if Assigned(Value) then
    On('move', Ajax('move', [], true));
  FOnMove := Value;
end;

procedure TExtDataTreeStore.SetFOnInsert(Value : TExtDataTreeStoreOnInsert); begin
  if Assigned(FOnInsert) then
    JSCode(JSName+'.events ["insert"].listeners=[];');
  if Assigned(Value) then
    On('insert', Ajax('insert', [], true));
  FOnInsert := Value;
end;

procedure TExtDataTreeStore.SetFOnBeforeappend(Value : TExtDataTreeStoreOnBeforeappend); begin
  if Assigned(FOnBeforeappend) then
    JSCode(JSName+'.events ["beforeappend"].listeners=[];');
  if Assigned(Value) then
    On('beforeappend', Ajax('beforeappend', [], true));
  FOnBeforeappend := Value;
end;

procedure TExtDataTreeStore.SetFOnBeforeremove(Value : TExtDataTreeStoreOnBeforeremove); begin
  if Assigned(FOnBeforeremove) then
    JSCode(JSName+'.events ["beforeremove"].listeners=[];');
  if Assigned(Value) then
    On('beforeremove', Ajax('beforeremove', [], true));
  FOnBeforeremove := Value;
end;

procedure TExtDataTreeStore.SetFOnBeforemove(Value : TExtDataTreeStoreOnBeforemove); begin
  if Assigned(FOnBeforemove) then
    JSCode(JSName+'.events ["beforemove"].listeners=[];');
  if Assigned(Value) then
    On('beforemove', Ajax('beforemove', [], true));
  FOnBeforemove := Value;
end;

procedure TExtDataTreeStore.SetFOnBeforeinsert(Value : TExtDataTreeStoreOnBeforeinsert); begin
  if Assigned(FOnBeforeinsert) then
    JSCode(JSName+'.events ["beforeinsert"].listeners=[];');
  if Assigned(Value) then
    On('beforeinsert', Ajax('beforeinsert', [], true));
  FOnBeforeinsert := Value;
end;

procedure TExtDataTreeStore.SetFOnExpand(Value : TExtDataTreeStoreOnExpand); begin
  if Assigned(FOnExpand) then
    JSCode(JSName+'.events ["expand"].listeners=[];');
  if Assigned(Value) then
    On('expand', Ajax('expand', [], true));
  FOnExpand := Value;
end;

procedure TExtDataTreeStore.SetFOnCollapse(Value : TExtDataTreeStoreOnCollapse); begin
  if Assigned(FOnCollapse) then
    JSCode(JSName+'.events ["collapse"].listeners=[];');
  if Assigned(Value) then
    On('collapse', Ajax('collapse', [], true));
  FOnCollapse := Value;
end;

procedure TExtDataTreeStore.SetFOnBeforeexpand(Value : TExtDataTreeStoreOnBeforeexpand); begin
  if Assigned(FOnBeforeexpand) then
    JSCode(JSName+'.events ["beforeexpand"].listeners=[];');
  if Assigned(Value) then
    On('beforeexpand', Ajax('beforeexpand', [], true));
  FOnBeforeexpand := Value;
end;

procedure TExtDataTreeStore.SetFOnBeforecollapse(Value : TExtDataTreeStoreOnBeforecollapse); begin
  if Assigned(FOnBeforecollapse) then
    JSCode(JSName+'.events ["beforecollapse"].listeners=[];');
  if Assigned(Value) then
    On('beforecollapse', Ajax('beforecollapse', [], true));
  FOnBeforecollapse := Value;
end;

procedure TExtDataTreeStore.SetFOnRootchange(Value : TExtDataTreeStoreOnRootchange); begin
  if Assigned(FOnRootchange) then
    JSCode(JSName+'.events ["rootchange"].listeners=[];');
  if Assigned(Value) then
    On('rootchange', Ajax('rootchange', [], true));
  FOnRootchange := Value;
end;

procedure TExtDataTreeStore.SetFOnSort(Value : TExtDataTreeStoreOnSort); begin
  if Assigned(FOnSort) then
    JSCode(JSName+'.events ["sort"].listeners=[];');
  if Assigned(Value) then
    On('sort', Ajax('sort', ['Node', '%0.nm'], true));
  FOnSort := Value;
end;

procedure TExtDataTreeStore.SetFOnLoad(Value : TExtDataTreeStoreOnLoad); begin
  if Assigned(FOnLoad) then
    JSCode(JSName+'.events ["load"].listeners=[];');
  if Assigned(Value) then
    On('load', Ajax('load', ['This', '%0.nm','Node', '%1.nm','Records', '%2.nm','Successful', '%3'], true));
  FOnLoad := Value;
end;

function TExtDataTreeStore.JSClassName : string; begin
  Result := 'Ext-data-TreeStore';
end;

procedure TExtDataTreeStore.InitDefaults; begin
  inherited;
  FRoot := TExtDataModel.CreateInternal(Self, 'root');
  FRootTExtDataNodeInterface := TExtDataNodeInterface.CreateInternal(Self, 'root');
  FRootTExtObject := TExtObject.CreateInternal(Self, 'root');
end;

{$IFDEF FPC}constructor TExtDataTreeStore.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataTreeStore.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

destructor TExtDataTreeStore.Destroy; begin
  try
    FRoot.Free;
    FRootTExtDataNodeInterface.Free;
    FRootTExtObject.Free;
  except end;
  inherited;
end;

procedure TExtDataTreeStore.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'append') and Assigned(FOnAppend) then
    FOnAppend()
  else if (AEvtName = 'remove') and Assigned(FOnRemove) then
    FOnRemove()
  else if (AEvtName = 'move') and Assigned(FOnMove) then
    FOnMove()
  else if (AEvtName = 'insert') and Assigned(FOnInsert) then
    FOnInsert()
  else if (AEvtName = 'beforeappend') and Assigned(FOnBeforeappend) then
    FOnBeforeappend()
  else if (AEvtName = 'beforeremove') and Assigned(FOnBeforeremove) then
    FOnBeforeremove()
  else if (AEvtName = 'beforemove') and Assigned(FOnBeforemove) then
    FOnBeforemove()
  else if (AEvtName = 'beforeinsert') and Assigned(FOnBeforeinsert) then
    FOnBeforeinsert()
  else if (AEvtName = 'expand') and Assigned(FOnExpand) then
    FOnExpand()
  else if (AEvtName = 'collapse') and Assigned(FOnCollapse) then
    FOnCollapse()
  else if (AEvtName = 'beforeexpand') and Assigned(FOnBeforeexpand) then
    FOnBeforeexpand()
  else if (AEvtName = 'beforecollapse') and Assigned(FOnBeforecollapse) then
    FOnBeforecollapse()
  else if (AEvtName = 'rootchange') and Assigned(FOnRootchange) then
    FOnRootchange()
  else if (AEvtName = 'sort') and Assigned(FOnSort) then
    FOnSort(TExtDataNodeInterface(ParamAsObject('Node')))
  else if (AEvtName = 'load') and Assigned(FOnLoad) then
    FOnLoad(TExtDataTreeStore(ParamAsObject('This')), TExtDataNodeInterface(ParamAsObject('Node')), TExtObjectList(ParamAsObject('Records')), ParamAsBoolean('Successful'));
end;

procedure TExtDataField.SetFName(Value : String); begin
  FName := Value;
  JSCode('name:' + VarToJSON([Value]));
end;

procedure TExtDataField.SetFTypeJS(Value : String); begin
  FTypeJS := Value;
  JSCode('typeJS:' + VarToJSON([Value]));
end;

procedure TExtDataField.SetFTypeJSTExtObject(Value : TExtObject); begin
  FTypeJSTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('typeJS:' + VarToJSON([Value, false]));
end;

procedure TExtDataField.SetFConvert(Value : TExtFunction); begin
  FConvert := Value;
  JSCode('convert:' + VarToJSON([Value, true]));
end;

procedure TExtDataField.SetFDateFormat(Value : String); begin
  FDateFormat := Value;
  JSCode('dateFormat:' + VarToJSON([Value]));
end;

procedure TExtDataField.SetFUseNull(Value : Boolean); begin
  FUseNull := Value;
  JSCode('useNull:' + VarToJSON([Value]));
end;

procedure TExtDataField.SetFDefaultValue(Value : TExtObject); begin
  FDefaultValue := Value;
  Value.DeleteFromGarbage;
  JSCode('defaultValue:' + VarToJSON([Value, false]));
end;

procedure TExtDataField.SetFMapping(Value : String); begin
  FMapping := Value;
  JSCode('mapping:' + VarToJSON([Value]));
end;

procedure TExtDataField.SetFMappingInteger(Value : Integer); begin
  FMappingInteger := Value;
  JSCode('mapping:' + VarToJSON([Value]));
end;

procedure TExtDataField.SetFSortType(Value : TExtFunction); begin
  FSortType := Value;
  JSCode('sortType:' + VarToJSON([Value, true]));
end;

procedure TExtDataField.SetFSortDir(Value : String); begin
  FSortDir := Value;
  JSCode('sortDir:' + VarToJSON([Value]));
end;

procedure TExtDataField.SetFAllowBlank(Value : Boolean); begin
  FAllowBlank := Value;
  JSCode('allowBlank:' + VarToJSON([Value]));
end;

procedure TExtDataField.SetFPersist(Value : Boolean); begin
  FPersist := Value;
  JSCode('persist:' + VarToJSON([Value]));
end;

function TExtDataField.JSClassName : string; begin
  Result := 'Ext-data-Field';
end;

procedure TExtDataField.InitDefaults; begin
  inherited;
  FTypeJSTExtObject := TExtObject.CreateInternal(Self, 'typeJS');
  FDefaultValue := TExtObject.CreateInternal(Self, 'defaultValue');
end;

{$IFDEF FPC}constructor TExtDataField.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataField.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

destructor TExtDataField.Destroy; begin
  try
    FTypeJSTExtObject.Free;
    FDefaultValue.Free;
  except end;
  inherited;
end;

procedure TExtPanelTable.SetFViewType(Value : String); begin
  FViewType := Value;
  JSCode('viewType:' + VarToJSON([Value]));
end;

procedure TExtPanelTable.SetFViewConfig(Value : TExtObject); begin
  FViewConfig := Value;
  Value.DeleteFromGarbage;
  JSCode('viewConfig:' + VarToJSON([Value, false]));
end;

procedure TExtPanelTable.SetFView(Value : TExtViewTable); begin
  FView := Value;
  Value.DeleteFromGarbage;
  JSCode('view:' + VarToJSON([Value, false]));
end;

procedure TExtPanelTable.SetFSelType(Value : String); begin
  FSelType := Value;
  JSCode('selType:' + VarToJSON([Value]));
end;

procedure TExtPanelTable.SetFSelModel(Value : TExtSelectionModel); begin
  FSelModel := Value;
  Value.DeleteFromGarbage;
  JSCode('selModel:' + VarToJSON([Value, false]));
end;

procedure TExtPanelTable.SetFSelModelTExtObject(Value : TExtObject); begin
  FSelModelTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('selModel:' + VarToJSON([Value, false]));
end;

procedure TExtPanelTable.SetFMultiSelect(Value : Boolean); begin
  FMultiSelect := Value;
  JSCode('multiSelect:' + VarToJSON([Value]));
end;

procedure TExtPanelTable.SetFSimpleSelect(Value : Boolean); begin
  FSimpleSelect := Value;
  JSCode('simpleSelect:' + VarToJSON([Value]));
end;

procedure TExtPanelTable.SetFStore(Value : TExtDataStore); begin
  FStore := Value;
  Value.DeleteFromGarbage;
  JSCode('store:' + VarToJSON([Value, false]));
end;

procedure TExtPanelTable.SetFScrollDelta(Value : Integer); begin
  FScrollDelta := Value;
  JSCode('scrollDelta:' + VarToJSON([Value]));
end;

procedure TExtPanelTable.SetFScroll(Value : String); begin
  FScroll := Value;
  JSCode('scroll:' + VarToJSON([Value]));
end;

procedure TExtPanelTable.SetFScrollBoolean(Value : Boolean); begin
  FScrollBoolean := Value;
  JSCode('scroll:' + VarToJSON([Value]));
end;

procedure TExtPanelTable.SetFColumns(Value : TExtObjectList); begin
  FColumns := Value;
  Value.DeleteFromGarbage;
  JSCode('columns:' + VarToJSON([Value, false]));
end;

procedure TExtPanelTable.SetFForceFit(Value : Boolean); begin
  FForceFit := Value;
  JSCode('forceFit:' + VarToJSON([Value]));
end;

procedure TExtPanelTable.SetFFeatures(Value : TExtObjectList); begin
  FFeatures := Value;
  Value.DeleteFromGarbage;
  JSCode('features:' + VarToJSON([Value, false]));
end;

procedure TExtPanelTable.SetFHideHeaders(Value : Boolean); begin
  FHideHeaders := Value;
  JSCode('hideHeaders:' + VarToJSON([Value]));
end;

procedure TExtPanelTable.SetFDeferRowRender(Value : Boolean); begin
  FDeferRowRender := Value;
  JSCode('deferRowRender:' + VarToJSON([Value]));
end;

procedure TExtPanelTable.SetFSortableColumns(Value : Boolean); begin
  FSortableColumns := Value;
  JSCode('sortableColumns:' + VarToJSON([Value]));
end;

procedure TExtPanelTable.SetFEnableLocking(Value : Boolean); begin
  FEnableLocking := Value;
  JSCode('enableLocking:' + VarToJSON([Value]));
end;

procedure TExtPanelTable.SetFEnableColumnMove(Value : Boolean); begin
  FEnableColumnMove := Value;
  JSCode('enableColumnMove:' + VarToJSON([Value]));
end;

procedure TExtPanelTable.SetFEnableColumnResize(Value : Boolean); begin
  FEnableColumnResize := Value;
  JSCode('enableColumnResize:' + VarToJSON([Value]));
end;

procedure TExtPanelTable.SetFEnableColumnHide(Value : Boolean); begin
  FEnableColumnHide := Value;
  JSCode('enableColumnHide:' + VarToJSON([Value]));
end;

procedure TExtPanelTable.SetFOnReconfigure(Value : TExtPanelTableOnReconfigure); begin
  if Assigned(FOnReconfigure) then
    JSCode(JSName+'.events ["reconfigure"].listeners=[];');
  if Assigned(Value) then
    On('reconfigure', Ajax('reconfigure', ['This', '%0.nm','This_', '%1.nm','Scroller', '%2.nm','Orientation', '%3'], true));
  FOnReconfigure := Value;
end;

procedure TExtPanelTable.SetFOnScrollershow(Value : TExtPanelTableOnScrollershow); begin
  if Assigned(FOnScrollershow) then
    JSCode(JSName+'.events ["scrollershow"].listeners=[];');
  if Assigned(Value) then
    On('scrollershow', Ajax('scrollershow', ['Scroller', '%0.nm','Orientation', '%1'], true));
  FOnScrollershow := Value;
end;

procedure TExtPanelTable.SetFOnBeforeitemmousedown(Value : TExtPanelTableOnBeforeitemmousedown); begin
  if Assigned(FOnBeforeitemmousedown) then
    JSCode(JSName+'.events ["beforeitemmousedown"].listeners=[];');
  if Assigned(Value) then
    On('beforeitemmousedown', Ajax('beforeitemmousedown', [], true));
  FOnBeforeitemmousedown := Value;
end;

procedure TExtPanelTable.SetFOnBeforeitemmouseup(Value : TExtPanelTableOnBeforeitemmouseup); begin
  if Assigned(FOnBeforeitemmouseup) then
    JSCode(JSName+'.events ["beforeitemmouseup"].listeners=[];');
  if Assigned(Value) then
    On('beforeitemmouseup', Ajax('beforeitemmouseup', [], true));
  FOnBeforeitemmouseup := Value;
end;

procedure TExtPanelTable.SetFOnBeforeitemmouseenter(Value : TExtPanelTableOnBeforeitemmouseenter); begin
  if Assigned(FOnBeforeitemmouseenter) then
    JSCode(JSName+'.events ["beforeitemmouseenter"].listeners=[];');
  if Assigned(Value) then
    On('beforeitemmouseenter', Ajax('beforeitemmouseenter', [], true));
  FOnBeforeitemmouseenter := Value;
end;

procedure TExtPanelTable.SetFOnBeforeitemmouseleave(Value : TExtPanelTableOnBeforeitemmouseleave); begin
  if Assigned(FOnBeforeitemmouseleave) then
    JSCode(JSName+'.events ["beforeitemmouseleave"].listeners=[];');
  if Assigned(Value) then
    On('beforeitemmouseleave', Ajax('beforeitemmouseleave', [], true));
  FOnBeforeitemmouseleave := Value;
end;

procedure TExtPanelTable.SetFOnBeforeitemclick(Value : TExtPanelTableOnBeforeitemclick); begin
  if Assigned(FOnBeforeitemclick) then
    JSCode(JSName+'.events ["beforeitemclick"].listeners=[];');
  if Assigned(Value) then
    On('beforeitemclick', Ajax('beforeitemclick', [], true));
  FOnBeforeitemclick := Value;
end;

procedure TExtPanelTable.SetFOnBeforeitemdblclick(Value : TExtPanelTableOnBeforeitemdblclick); begin
  if Assigned(FOnBeforeitemdblclick) then
    JSCode(JSName+'.events ["beforeitemdblclick"].listeners=[];');
  if Assigned(Value) then
    On('beforeitemdblclick', Ajax('beforeitemdblclick', [], true));
  FOnBeforeitemdblclick := Value;
end;

procedure TExtPanelTable.SetFOnBeforeitemcontextmenu(Value : TExtPanelTableOnBeforeitemcontextmenu); begin
  if Assigned(FOnBeforeitemcontextmenu) then
    JSCode(JSName+'.events ["beforeitemcontextmenu"].listeners=[];');
  if Assigned(Value) then
    On('beforeitemcontextmenu', Ajax('beforeitemcontextmenu', [], true));
  FOnBeforeitemcontextmenu := Value;
end;

procedure TExtPanelTable.SetFOnItemmousedown(Value : TExtPanelTableOnItemmousedown); begin
  if Assigned(FOnItemmousedown) then
    JSCode(JSName+'.events ["itemmousedown"].listeners=[];');
  if Assigned(Value) then
    On('itemmousedown', Ajax('itemmousedown', [], true));
  FOnItemmousedown := Value;
end;

procedure TExtPanelTable.SetFOnItemmouseup(Value : TExtPanelTableOnItemmouseup); begin
  if Assigned(FOnItemmouseup) then
    JSCode(JSName+'.events ["itemmouseup"].listeners=[];');
  if Assigned(Value) then
    On('itemmouseup', Ajax('itemmouseup', [], true));
  FOnItemmouseup := Value;
end;

procedure TExtPanelTable.SetFOnItemmouseenter(Value : TExtPanelTableOnItemmouseenter); begin
  if Assigned(FOnItemmouseenter) then
    JSCode(JSName+'.events ["itemmouseenter"].listeners=[];');
  if Assigned(Value) then
    On('itemmouseenter', Ajax('itemmouseenter', [], true));
  FOnItemmouseenter := Value;
end;

procedure TExtPanelTable.SetFOnItemmouseleave(Value : TExtPanelTableOnItemmouseleave); begin
  if Assigned(FOnItemmouseleave) then
    JSCode(JSName+'.events ["itemmouseleave"].listeners=[];');
  if Assigned(Value) then
    On('itemmouseleave', Ajax('itemmouseleave', [], true));
  FOnItemmouseleave := Value;
end;

procedure TExtPanelTable.SetFOnItemclick(Value : TExtPanelTableOnItemclick); begin
  if Assigned(FOnItemclick) then
    JSCode(JSName+'.events ["itemclick"].listeners=[];');
  if Assigned(Value) then
    On('itemclick', Ajax('itemclick', [], true));
  FOnItemclick := Value;
end;

procedure TExtPanelTable.SetFOnItemdblclick(Value : TExtPanelTableOnItemdblclick); begin
  if Assigned(FOnItemdblclick) then
    JSCode(JSName+'.events ["itemdblclick"].listeners=[];');
  if Assigned(Value) then
    On('itemdblclick', Ajax('itemdblclick', [], true));
  FOnItemdblclick := Value;
end;

procedure TExtPanelTable.SetFOnItemcontextmenu(Value : TExtPanelTableOnItemcontextmenu); begin
  if Assigned(FOnItemcontextmenu) then
    JSCode(JSName+'.events ["itemcontextmenu"].listeners=[];');
  if Assigned(Value) then
    On('itemcontextmenu', Ajax('itemcontextmenu', [], true));
  FOnItemcontextmenu := Value;
end;

procedure TExtPanelTable.SetFOnBeforecontainermousedown(Value : TExtPanelTableOnBeforecontainermousedown); begin
  if Assigned(FOnBeforecontainermousedown) then
    JSCode(JSName+'.events ["beforecontainermousedown"].listeners=[];');
  if Assigned(Value) then
    On('beforecontainermousedown', Ajax('beforecontainermousedown', [], true));
  FOnBeforecontainermousedown := Value;
end;

procedure TExtPanelTable.SetFOnBeforecontainermouseup(Value : TExtPanelTableOnBeforecontainermouseup); begin
  if Assigned(FOnBeforecontainermouseup) then
    JSCode(JSName+'.events ["beforecontainermouseup"].listeners=[];');
  if Assigned(Value) then
    On('beforecontainermouseup', Ajax('beforecontainermouseup', [], true));
  FOnBeforecontainermouseup := Value;
end;

procedure TExtPanelTable.SetFOnBeforecontainermouseover(Value : TExtPanelTableOnBeforecontainermouseover); begin
  if Assigned(FOnBeforecontainermouseover) then
    JSCode(JSName+'.events ["beforecontainermouseover"].listeners=[];');
  if Assigned(Value) then
    On('beforecontainermouseover', Ajax('beforecontainermouseover', [], true));
  FOnBeforecontainermouseover := Value;
end;

procedure TExtPanelTable.SetFOnBeforecontainermouseout(Value : TExtPanelTableOnBeforecontainermouseout); begin
  if Assigned(FOnBeforecontainermouseout) then
    JSCode(JSName+'.events ["beforecontainermouseout"].listeners=[];');
  if Assigned(Value) then
    On('beforecontainermouseout', Ajax('beforecontainermouseout', [], true));
  FOnBeforecontainermouseout := Value;
end;

procedure TExtPanelTable.SetFOnBeforecontainerclick(Value : TExtPanelTableOnBeforecontainerclick); begin
  if Assigned(FOnBeforecontainerclick) then
    JSCode(JSName+'.events ["beforecontainerclick"].listeners=[];');
  if Assigned(Value) then
    On('beforecontainerclick', Ajax('beforecontainerclick', [], true));
  FOnBeforecontainerclick := Value;
end;

procedure TExtPanelTable.SetFOnBeforecontainerdblclick(Value : TExtPanelTableOnBeforecontainerdblclick); begin
  if Assigned(FOnBeforecontainerdblclick) then
    JSCode(JSName+'.events ["beforecontainerdblclick"].listeners=[];');
  if Assigned(Value) then
    On('beforecontainerdblclick', Ajax('beforecontainerdblclick', [], true));
  FOnBeforecontainerdblclick := Value;
end;

procedure TExtPanelTable.SetFOnBeforecontainercontextmenu(Value : TExtPanelTableOnBeforecontainercontextmenu); begin
  if Assigned(FOnBeforecontainercontextmenu) then
    JSCode(JSName+'.events ["beforecontainercontextmenu"].listeners=[];');
  if Assigned(Value) then
    On('beforecontainercontextmenu', Ajax('beforecontainercontextmenu', [], true));
  FOnBeforecontainercontextmenu := Value;
end;

procedure TExtPanelTable.SetFOnContainermouseup(Value : TExtPanelTableOnContainermouseup); begin
  if Assigned(FOnContainermouseup) then
    JSCode(JSName+'.events ["containermouseup"].listeners=[];');
  if Assigned(Value) then
    On('containermouseup', Ajax('containermouseup', [], true));
  FOnContainermouseup := Value;
end;

procedure TExtPanelTable.SetFOnContainermouseover(Value : TExtPanelTableOnContainermouseover); begin
  if Assigned(FOnContainermouseover) then
    JSCode(JSName+'.events ["containermouseover"].listeners=[];');
  if Assigned(Value) then
    On('containermouseover', Ajax('containermouseover', [], true));
  FOnContainermouseover := Value;
end;

procedure TExtPanelTable.SetFOnContainermouseout(Value : TExtPanelTableOnContainermouseout); begin
  if Assigned(FOnContainermouseout) then
    JSCode(JSName+'.events ["containermouseout"].listeners=[];');
  if Assigned(Value) then
    On('containermouseout', Ajax('containermouseout', [], true));
  FOnContainermouseout := Value;
end;

procedure TExtPanelTable.SetFOnContainerclick(Value : TExtPanelTableOnContainerclick); begin
  if Assigned(FOnContainerclick) then
    JSCode(JSName+'.events ["containerclick"].listeners=[];');
  if Assigned(Value) then
    On('containerclick', Ajax('containerclick', [], true));
  FOnContainerclick := Value;
end;

procedure TExtPanelTable.SetFOnContainerdblclick(Value : TExtPanelTableOnContainerdblclick); begin
  if Assigned(FOnContainerdblclick) then
    JSCode(JSName+'.events ["containerdblclick"].listeners=[];');
  if Assigned(Value) then
    On('containerdblclick', Ajax('containerdblclick', [], true));
  FOnContainerdblclick := Value;
end;

procedure TExtPanelTable.SetFOnContainercontextmenu(Value : TExtPanelTableOnContainercontextmenu); begin
  if Assigned(FOnContainercontextmenu) then
    JSCode(JSName+'.events ["containercontextmenu"].listeners=[];');
  if Assigned(Value) then
    On('containercontextmenu', Ajax('containercontextmenu', [], true));
  FOnContainercontextmenu := Value;
end;

procedure TExtPanelTable.SetFOnSelectionchange(Value : TExtPanelTableOnSelectionchange); begin
  if Assigned(FOnSelectionchange) then
    JSCode(JSName+'.events ["selectionchange"].listeners=[];');
  if Assigned(Value) then
    On('selectionchange', Ajax('selectionchange', [], true));
  FOnSelectionchange := Value;
end;

procedure TExtPanelTable.SetFOnBeforeselect(Value : TExtPanelTableOnBeforeselect); begin
  if Assigned(FOnBeforeselect) then
    JSCode(JSName+'.events ["beforeselect"].listeners=[];');
  if Assigned(Value) then
    On('beforeselect', Ajax('beforeselect', [], true));
  FOnBeforeselect := Value;
end;

procedure TExtPanelTable.SetFOnSelect(Value : TExtPanelTableOnSelect); begin
  if Assigned(FOnSelect) then
    JSCode(JSName+'.events ["select"].listeners=[];');
  if Assigned(Value) then
    On('select', Ajax('select', [], true));
  FOnSelect := Value;
end;

procedure TExtPanelTable.SetFOnBeforedeselect(Value : TExtPanelTableOnBeforedeselect); begin
  if Assigned(FOnBeforedeselect) then
    JSCode(JSName+'.events ["beforedeselect"].listeners=[];');
  if Assigned(Value) then
    On('beforedeselect', Ajax('beforedeselect', [], true));
  FOnBeforedeselect := Value;
end;

procedure TExtPanelTable.SetFOnDeselect(Value : TExtPanelTableOnDeselect); begin
  if Assigned(FOnDeselect) then
    JSCode(JSName+'.events ["deselect"].listeners=[];');
  if Assigned(Value) then
    On('deselect', Ajax('deselect', [], true));
  FOnDeselect := Value;
end;

procedure TExtPanelTable.SetFOnColumnresize(Value : TExtPanelTableOnColumnresize); begin
  if Assigned(FOnColumnresize) then
    JSCode(JSName+'.events ["columnresize"].listeners=[];');
  if Assigned(Value) then
    On('columnresize', Ajax('columnresize', [], true));
  FOnColumnresize := Value;
end;

procedure TExtPanelTable.SetFOnColumnmove(Value : TExtPanelTableOnColumnmove); begin
  if Assigned(FOnColumnmove) then
    JSCode(JSName+'.events ["columnmove"].listeners=[];');
  if Assigned(Value) then
    On('columnmove', Ajax('columnmove', [], true));
  FOnColumnmove := Value;
end;

procedure TExtPanelTable.SetFOnColumnhide(Value : TExtPanelTableOnColumnhide); begin
  if Assigned(FOnColumnhide) then
    JSCode(JSName+'.events ["columnhide"].listeners=[];');
  if Assigned(Value) then
    On('columnhide', Ajax('columnhide', [], true));
  FOnColumnhide := Value;
end;

procedure TExtPanelTable.SetFOnColumnshow(Value : TExtPanelTableOnColumnshow); begin
  if Assigned(FOnColumnshow) then
    JSCode(JSName+'.events ["columnshow"].listeners=[];');
  if Assigned(Value) then
    On('columnshow', Ajax('columnshow', [], true));
  FOnColumnshow := Value;
end;

procedure TExtPanelTable.SetFOnSortchange(Value : TExtPanelTableOnSortchange); begin
  if Assigned(FOnSortchange) then
    JSCode(JSName+'.events ["sortchange"].listeners=[];');
  if Assigned(Value) then
    On('sortchange', Ajax('sortchange', [], true));
  FOnSortchange := Value;
end;

function TExtPanelTable.JSClassName : string; begin
  Result := 'Ext-panel-Table';
end;

procedure TExtPanelTable.InitDefaults; begin
  inherited;
  FViewConfig := TExtObject.CreateInternal(Self, 'viewConfig');
  FView := TExtViewTable.CreateInternal(Self, 'view');
  FSelModel := TExtSelectionModel.CreateInternal(Self, 'selModel');
  FSelModelTExtObject := TExtObject.CreateInternal(Self, 'selModel');
  FStore := TExtDataStore.CreateInternal(Self, 'store');
  FColumns := TExtObjectList.Create(Self, 'columns');
  FFeatures := TExtObjectList.Create(Self, 'features');
end;

{$IFDEF FPC}constructor TExtPanelTable.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtPanelTable.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtPanelTable.GetStore : TExtFunction; begin
  JSCode(JSName + '.getStore();', 'TExtPanelTable');
  Result := Self;
end;

function TExtPanelTable.GetView : TExtFunction; begin
  JSCode(JSName + '.getView();', 'TExtPanelTable');
  Result := Self;
end;

function TExtPanelTable.DetermineScrollbars : TExtFunction; begin
  JSCode(JSName + '.determineScrollbars();', 'TExtPanelTable');
  Result := Self;
end;

function TExtPanelTable.HideHorizontalScroller : TExtFunction; begin
  JSCode(JSName + '.hideHorizontalScroller();', 'TExtPanelTable');
  Result := Self;
end;

function TExtPanelTable.ShowHorizontalScroller : TExtFunction; begin
  JSCode(JSName + '.showHorizontalScroller();', 'TExtPanelTable');
  Result := Self;
end;

function TExtPanelTable.HideVerticalScroller : TExtFunction; begin
  JSCode(JSName + '.hideVerticalScroller();', 'TExtPanelTable');
  Result := Self;
end;

function TExtPanelTable.ShowVerticalScroller : TExtFunction; begin
  JSCode(JSName + '.showVerticalScroller();', 'TExtPanelTable');
  Result := Self;
end;

function TExtPanelTable.InvalidateScroller : TExtFunction; begin
  JSCode(JSName + '.invalidateScroller();', 'TExtPanelTable');
  Result := Self;
end;

function TExtPanelTable.SetScrollTop(Top : Integer; DeltaY : Integer; DeltaX : Integer) : TExtFunction; begin
  JSCode(JSName + '.setScrollTop(' + VarToJSON([Top, DeltaY, DeltaX]) + ');', 'TExtPanelTable');
  Result := Self;
end;

function TExtPanelTable.GetSelectionModel : TExtFunction; begin
  JSCode(JSName + '.getSelectionModel();', 'TExtPanelTable');
  Result := Self;
end;

function TExtPanelTable.Reconfigure(Store : TExtDataStore = nil; Columns : TExtObjectList = nil) : TExtFunction; begin
  JSCode(JSName + '.reconfigure(' + VarToJSON([Store, false]) + ',' + VarToJSON(Columns) + ');', 'TExtPanelTable');
  Result := Self;
end;

destructor TExtPanelTable.Destroy; begin
  try
    FViewConfig.Free;
    FView.Free;
    FSelModel.Free;
    FSelModelTExtObject.Free;
    FStore.Free;
    FColumns.Free;
    FFeatures.Free;
  except end;
  inherited;
end;

procedure TExtPanelTable.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'reconfigure') and Assigned(FOnReconfigure) then
    FOnReconfigure(TExtPanelTable(ParamAsObject('This')), TExtPanelTable(ParamAsObject('This_')), TExtGridScroller(ParamAsObject('Scroller')), ParamAsString('Orientation'))
  else if (AEvtName = 'scrollershow') and Assigned(FOnScrollershow) then
    FOnScrollershow(TExtGridScroller(ParamAsObject('Scroller')), ParamAsString('Orientation'))
  else if (AEvtName = 'beforeitemmousedown') and Assigned(FOnBeforeitemmousedown) then
    FOnBeforeitemmousedown()
  else if (AEvtName = 'beforeitemmouseup') and Assigned(FOnBeforeitemmouseup) then
    FOnBeforeitemmouseup()
  else if (AEvtName = 'beforeitemmouseenter') and Assigned(FOnBeforeitemmouseenter) then
    FOnBeforeitemmouseenter()
  else if (AEvtName = 'beforeitemmouseleave') and Assigned(FOnBeforeitemmouseleave) then
    FOnBeforeitemmouseleave()
  else if (AEvtName = 'beforeitemclick') and Assigned(FOnBeforeitemclick) then
    FOnBeforeitemclick()
  else if (AEvtName = 'beforeitemdblclick') and Assigned(FOnBeforeitemdblclick) then
    FOnBeforeitemdblclick()
  else if (AEvtName = 'beforeitemcontextmenu') and Assigned(FOnBeforeitemcontextmenu) then
    FOnBeforeitemcontextmenu()
  else if (AEvtName = 'itemmousedown') and Assigned(FOnItemmousedown) then
    FOnItemmousedown()
  else if (AEvtName = 'itemmouseup') and Assigned(FOnItemmouseup) then
    FOnItemmouseup()
  else if (AEvtName = 'itemmouseenter') and Assigned(FOnItemmouseenter) then
    FOnItemmouseenter()
  else if (AEvtName = 'itemmouseleave') and Assigned(FOnItemmouseleave) then
    FOnItemmouseleave()
  else if (AEvtName = 'itemclick') and Assigned(FOnItemclick) then
    FOnItemclick()
  else if (AEvtName = 'itemdblclick') and Assigned(FOnItemdblclick) then
    FOnItemdblclick()
  else if (AEvtName = 'itemcontextmenu') and Assigned(FOnItemcontextmenu) then
    FOnItemcontextmenu()
  else if (AEvtName = 'beforecontainermousedown') and Assigned(FOnBeforecontainermousedown) then
    FOnBeforecontainermousedown()
  else if (AEvtName = 'beforecontainermouseup') and Assigned(FOnBeforecontainermouseup) then
    FOnBeforecontainermouseup()
  else if (AEvtName = 'beforecontainermouseover') and Assigned(FOnBeforecontainermouseover) then
    FOnBeforecontainermouseover()
  else if (AEvtName = 'beforecontainermouseout') and Assigned(FOnBeforecontainermouseout) then
    FOnBeforecontainermouseout()
  else if (AEvtName = 'beforecontainerclick') and Assigned(FOnBeforecontainerclick) then
    FOnBeforecontainerclick()
  else if (AEvtName = 'beforecontainerdblclick') and Assigned(FOnBeforecontainerdblclick) then
    FOnBeforecontainerdblclick()
  else if (AEvtName = 'beforecontainercontextmenu') and Assigned(FOnBeforecontainercontextmenu) then
    FOnBeforecontainercontextmenu()
  else if (AEvtName = 'containermouseup') and Assigned(FOnContainermouseup) then
    FOnContainermouseup()
  else if (AEvtName = 'containermouseover') and Assigned(FOnContainermouseover) then
    FOnContainermouseover()
  else if (AEvtName = 'containermouseout') and Assigned(FOnContainermouseout) then
    FOnContainermouseout()
  else if (AEvtName = 'containerclick') and Assigned(FOnContainerclick) then
    FOnContainerclick()
  else if (AEvtName = 'containerdblclick') and Assigned(FOnContainerdblclick) then
    FOnContainerdblclick()
  else if (AEvtName = 'containercontextmenu') and Assigned(FOnContainercontextmenu) then
    FOnContainercontextmenu()
  else if (AEvtName = 'selectionchange') and Assigned(FOnSelectionchange) then
    FOnSelectionchange()
  else if (AEvtName = 'beforeselect') and Assigned(FOnBeforeselect) then
    FOnBeforeselect()
  else if (AEvtName = 'select') and Assigned(FOnSelect) then
    FOnSelect()
  else if (AEvtName = 'beforedeselect') and Assigned(FOnBeforedeselect) then
    FOnBeforedeselect()
  else if (AEvtName = 'deselect') and Assigned(FOnDeselect) then
    FOnDeselect()
  else if (AEvtName = 'columnresize') and Assigned(FOnColumnresize) then
    FOnColumnresize()
  else if (AEvtName = 'columnmove') and Assigned(FOnColumnmove) then
    FOnColumnmove()
  else if (AEvtName = 'columnhide') and Assigned(FOnColumnhide) then
    FOnColumnhide()
  else if (AEvtName = 'columnshow') and Assigned(FOnColumnshow) then
    FOnColumnshow()
  else if (AEvtName = 'sortchange') and Assigned(FOnSortchange) then
    FOnSortchange();
end;

function TExtGridPropertyProperty.JSClassName : string; begin
  Result := 'Ext-grid-property-Property-method-constructor';
end;

{$IFDEF FPC}constructor TExtGridPropertyProperty.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtContainerViewport.SetFApplyTo(Value : String); begin
  FApplyTo := Value;
  JSCode('applyTo:' + VarToJSON([Value]));
end;

procedure TExtContainerViewport.SetFApplyToTHTMLElement(Value : THTMLElement); begin
  FApplyToTHTMLElement := Value;
  Value.DeleteFromGarbage;
  JSCode('applyTo:' + VarToJSON([Value, false]));
end;

procedure TExtContainerViewport.SetFApplyToTExtElement(Value : TExtElement); begin
  FApplyToTExtElement := Value;
  Value.DeleteFromGarbage;
  JSCode('applyTo:' + VarToJSON([Value, false]));
end;

procedure TExtContainerViewport.SetFAllowDomMove(Value : Boolean); begin
  FAllowDomMove := Value;
  JSCode('allowDomMove:' + VarToJSON([Value]));
end;

procedure TExtContainerViewport.SetFHideParent(Value : Boolean); begin
  FHideParent := Value;
  JSCode('hideParent:' + VarToJSON([Value]));
end;

procedure TExtContainerViewport.SetFRenderTo(Value : String); begin
  FRenderTo := Value;
  JSCode('renderTo:' + VarToJSON([Value]));
end;

procedure TExtContainerViewport.SetFRenderToTHTMLElement(Value : THTMLElement); begin
  FRenderToTHTMLElement := Value;
  Value.DeleteFromGarbage;
  JSCode('renderTo:' + VarToJSON([Value, false]));
end;

procedure TExtContainerViewport.SetFRenderToTExtElement(Value : TExtElement); begin
  FRenderToTExtElement := Value;
  Value.DeleteFromGarbage;
  JSCode('renderTo:' + VarToJSON([Value, false]));
end;

procedure TExtContainerViewport.SetFHideParent_(Value : Boolean); begin
  FHideParent_ := Value;
  JSCode('hideParent:' + VarToJSON([Value]));
end;

procedure TExtContainerViewport.SetFHeight(Value : Integer); begin
  FHeight := Value;
  JSCode('height:' + VarToJSON([Value]));
end;

procedure TExtContainerViewport.SetFWidth(Value : Integer); begin
  FWidth := Value;
  JSCode('width:' + VarToJSON([Value]));
end;

procedure TExtContainerViewport.SetFAutoHeight(Value : Boolean); begin
  FAutoHeight := Value;
  JSCode('autoHeight:' + VarToJSON([Value]));
end;

procedure TExtContainerViewport.SetFAutoWidth(Value : Boolean); begin
  FAutoWidth := Value;
  JSCode('autoWidth:' + VarToJSON([Value]));
end;

procedure TExtContainerViewport.SetFDeferHeight(Value : Boolean); begin
  FDeferHeight := Value;
  JSCode('deferHeight:' + VarToJSON([Value]));
end;

procedure TExtContainerViewport.SetFMonitorResize(Value : Boolean); begin
  FMonitorResize := Value;
  JSCode('monitorResize:' + VarToJSON([Value]));
end;

function TExtContainerViewport.JSClassName : string; begin
  Result := 'Ext-container-Viewport';
end;

procedure TExtContainerViewport.InitDefaults; begin
  inherited;
  FApplyToTExtElement := TExtElement.CreateInternal(Self, 'applyTo');
  FRenderToTExtElement := TExtElement.CreateInternal(Self, 'renderTo');
end;

{$IFDEF FPC}constructor TExtContainerViewport.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtContainerViewport.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

destructor TExtContainerViewport.Destroy; begin
  try
    FApplyToTExtElement.Free;
    FRenderToTExtElement.Free;
  except end;
  inherited;
end;

procedure TExtIsSingleton.SetFDesktop(Value : Boolean); begin
  FDesktop := Value;
  JSCode(JSName + '.desktop=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFTablet(Value : Boolean); begin
  FTablet := Value;
  JSCode(JSName + '.tablet=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFIOS(Value : Boolean); begin
  FIOS := Value;
  JSCode(JSName + '.iOS=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFStandalone(Value : Boolean); begin
  FStandalone := Value;
  JSCode(JSName + '.standalone=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFIPhone(Value : Boolean); begin
  FIPhone := Value;
  JSCode(JSName + '.iPhone=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFIPod(Value : Boolean); begin
  FIPod := Value;
  JSCode(JSName + '.iPod=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFIPad(Value : Boolean); begin
  FIPad := Value;
  JSCode(JSName + '.iPad=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFBlackberry(Value : Boolean); begin
  FBlackberry := Value;
  JSCode(JSName + '.blackberry=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFAndroid(Value : Boolean); begin
  FAndroid := Value;
  JSCode(JSName + '.android=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFMac(Value : Boolean); begin
  FMac := Value;
  JSCode(JSName + '.mac=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFWindows(Value : Boolean); begin
  FWindows := Value;
  JSCode(JSName + '.windows=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFLinux(Value : Boolean); begin
  FLinux := Value;
  JSCode(JSName + '.linux=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFCSS3BoxShadow(Value : Boolean); begin
  FCSS3BoxShadow := Value;
  JSCode(JSName + '.cSS3BoxShadow=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFClassList(Value : Boolean); begin
  FClassList := Value;
  JSCode(JSName + '.classList=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFOrientationChange(Value : Boolean); begin
  FOrientationChange := Value;
  JSCode(JSName + '.orientationChange=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFDeviceMotion(Value : Boolean); begin
  FDeviceMotion := Value;
  JSCode(JSName + '.deviceMotion=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFTouch(Value : Boolean); begin
  FTouch := Value;
  JSCode(JSName + '.touch=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFTransitions(Value : Boolean); begin
  FTransitions := Value;
  JSCode(JSName + '.transitions=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFRightMargin(Value : Boolean); begin
  FRightMargin := Value;
  JSCode(JSName + '.rightMargin=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFDisplayChangeInputSelectionBug(Value : Boolean); begin
  FDisplayChangeInputSelectionBug := Value;
  JSCode(JSName + '.displayChangeInputSelectionBug=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFComputedStyle(Value : Boolean); begin
  FComputedStyle := Value;
  JSCode(JSName + '.computedStyle=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFCanvas(Value : Boolean); begin
  FCanvas := Value;
  JSCode(JSName + '.canvas=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFFloat(Value : Boolean); begin
  FFloat := Value;
  JSCode(JSName + '.float=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFAudioTag(Value : Boolean); begin
  FAudioTag := Value;
  JSCode(JSName + '.audioTag=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFHistory(Value : Boolean); begin
  FHistory := Value;
  JSCode(JSName + '.history=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFCSS3DTransform(Value : Boolean); begin
  FCSS3DTransform := Value;
  JSCode(JSName + '.cSS3DTransform=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFCSS3LinearGradient(Value : Boolean); begin
  FCSS3LinearGradient := Value;
  JSCode(JSName + '.cSS3LinearGradient=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFCSS3BorderRadius(Value : Boolean); begin
  FCSS3BorderRadius := Value;
  JSCode(JSName + '.cSS3BorderRadius=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFGeoLocation(Value : Boolean); begin
  FGeoLocation := Value;
  JSCode(JSName + '.geoLocation=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFMouseEnterLeave(Value : Boolean); begin
  FMouseEnterLeave := Value;
  JSCode(JSName + '.mouseEnterLeave=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFMouseWheel(Value : Boolean); begin
  FMouseWheel := Value;
  JSCode(JSName + '.mouseWheel=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFOpacity(Value : Boolean); begin
  FOpacity := Value;
  JSCode(JSName + '.opacity=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFPlaceholder(Value : Boolean); begin
  FPlaceholder := Value;
  JSCode(JSName + '.placeholder=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFDirect2DBug(Value : Boolean); begin
  FDirect2DBug := Value;
  JSCode(JSName + '.direct2DBug=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFBoundingClientRect(Value : Boolean); begin
  FBoundingClientRect := Value;
  JSCode(JSName + '.boundingClientRect=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFArraySort(Value : Boolean); begin
  FArraySort := Value;
  JSCode(JSName + '.arraySort=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFRange(Value : Boolean); begin
  FRange := Value;
  JSCode(JSName + '.range=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFCreateContextualFragment(Value : Boolean); begin
  FCreateContextualFragment := Value;
  JSCode(JSName + '.createContextualFragment=' + VarToJSON([Value]) + ';');
end;

procedure TExtIsSingleton.SetFWindowOnError(Value : Boolean); begin
  FWindowOnError := Value;
  JSCode(JSName + '.windowOnError=' + VarToJSON([Value]) + ';');
end;

function TExtIsSingleton.JSClassName : string; begin
  Result := 'Ext-isSingleton';
end;

class function TExtIsSingleton.SVG : Boolean; begin
  Result := false
end;

class function TExtIsSingleton.VML : Boolean; begin
  Result := false
end;

{$IFDEF FPC}constructor TExtIsSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtSliderTip.JSClassName : string; begin
  Result := 'Ext-slider-Tip';
end;

{$IFDEF FPC}constructor TExtSliderTip.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtSliderTip.GetText(Thumb : TExtSliderThumb) : TExtFunction; begin
  JSCode(JSName + '.getText(' + VarToJSON([Thumb, false]) + ');', 'TExtSliderTip');
  Result := Self;
end;

function TExtGridScroller.JSClassName : string; begin
  Result := 'Ext-grid-Scroller';
end;

{$IFDEF FPC}constructor TExtGridScroller.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtGridScroller.SetScrollTop(ScrollTop : Integer) : TExtFunction; begin
  JSCode(JSName + '.setScrollTop(' + VarToJSON([ScrollTop]) + ');', 'TExtGridScroller');
  Result := Self;
end;

function TExtGridScroller.SetScrollLeft(ScrollLeft : Integer) : TExtFunction; begin
  JSCode(JSName + '.setScrollLeft(' + VarToJSON([ScrollLeft]) + ');', 'TExtGridScroller');
  Result := Self;
end;

function TExtGridScroller.ScrollByDeltaY(Delta : Integer) : TExtFunction; begin
  JSCode(JSName + '.scrollByDeltaY(' + VarToJSON([Delta]) + ');', 'TExtGridScroller');
  Result := Self;
end;

function TExtGridScroller.ScrollByDeltaX(Delta : Integer) : TExtFunction; begin
  JSCode(JSName + '.scrollByDeltaX(' + VarToJSON([Delta]) + ');', 'TExtGridScroller');
  Result := Self;
end;

function TExtGridScroller.ScrollToTop : TExtFunction; begin
  JSCode(JSName + '.scrollToTop();', 'TExtGridScroller');
  Result := Self;
end;

procedure TExtContainerButtonGroup.SetFColumns(Value : Integer); begin
  FColumns := Value;
  JSCode('columns:' + VarToJSON([Value]));
end;

procedure TExtContainerButtonGroup.SetFBaseCls(Value : String); begin
  FBaseCls := Value;
  JSCode('baseCls:' + VarToJSON([Value]));
end;

procedure TExtContainerButtonGroup.SetFLayout(Value : TExtObject); begin
  FLayout := Value;
  Value.DeleteFromGarbage;
  JSCode('layout:' + VarToJSON([Value, false]));
end;

procedure TExtContainerButtonGroup.SetFFrame(Value : Boolean); begin
  FFrame := Value;
  JSCode('frame:' + VarToJSON([Value]));
end;

procedure TExtContainerButtonGroup.SetFTools(Value : TExtObjectList); begin
  FTools := Value;
  Value.DeleteFromGarbage;
  JSCode('tools:' + VarToJSON([Value, false]));
end;

procedure TExtContainerButtonGroup.SetFCollapsible(Value : Boolean); begin
  FCollapsible := Value;
  JSCode('collapsible:' + VarToJSON([Value]));
end;

procedure TExtContainerButtonGroup.SetFCollapseMode(Value : Boolean); begin
  FCollapseMode := Value;
  JSCode('collapseMode:' + VarToJSON([Value]));
end;

procedure TExtContainerButtonGroup.SetFAnimCollapse(Value : Boolean); begin
  FAnimCollapse := Value;
  JSCode('animCollapse:' + VarToJSON([Value]));
end;

procedure TExtContainerButtonGroup.SetFClosable(Value : Boolean); begin
  FClosable := Value;
  JSCode('closable:' + VarToJSON([Value]));
end;

function TExtContainerButtonGroup.JSClassName : string; begin
  Result := 'Ext-container-ButtonGroup';
end;

procedure TExtContainerButtonGroup.InitDefaults; begin
  inherited;
  FLayout := TExtObject.CreateInternal(Self, 'layout');
  FTools := TExtObjectList.Create(Self, 'tools');
end;

{$IFDEF FPC}constructor TExtContainerButtonGroup.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtContainerButtonGroup.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

destructor TExtContainerButtonGroup.Destroy; begin
  try
    FLayout.Free;
    FTools.Free;
  except end;
  inherited;
end;

procedure TExtProgressBar.SetFValue(Value : Integer); begin
  FValue := Value;
  JSCode('value:' + VarToJSON([Value]));
end;

procedure TExtProgressBar.SetFText(Value : String); begin
  FText := Value;
  JSCode('text:' + VarToJSON([Value]));
end;

procedure TExtProgressBar.SetFTextEl(Value : String); begin
  FTextEl := Value;
  JSCode('textEl:' + VarToJSON([Value]));
end;

procedure TExtProgressBar.SetFTextElTHTMLElement(Value : THTMLElement); begin
  FTextElTHTMLElement := Value;
  Value.DeleteFromGarbage;
  JSCode('textEl:' + VarToJSON([Value, false]));
end;

procedure TExtProgressBar.SetFTextElTExtElement(Value : TExtElement); begin
  FTextElTExtElement := Value;
  Value.DeleteFromGarbage;
  JSCode('textEl:' + VarToJSON([Value, false]));
end;

procedure TExtProgressBar.SetFId(Value : String); begin
  FId := Value;
  JSCode('id:' + VarToJSON([Value]));
end;

procedure TExtProgressBar.SetFBaseCls(Value : String); begin
  FBaseCls := Value;
  JSCode('baseCls:' + VarToJSON([Value]));
end;

procedure TExtProgressBar.SetFAnimate(Value : Boolean); begin
  FAnimate := Value;
  JSCode('animate:' + VarToJSON([Value]));
end;

procedure TExtProgressBar.SetFText_(Value : String); begin
  FText_ := Value;
  JSCode('text:' + VarToJSON([Value]));
end;

procedure TExtProgressBar.SetFOnUpdate(Value : TExtProgressBarOnUpdate); begin
  if Assigned(FOnUpdate) then
    JSCode(JSName+'.events ["update"].listeners=[];');
  if Assigned(Value) then
    On('update', Ajax('update', ['This', '%0.nm','Value', '%1','Text', '%2'], true));
  FOnUpdate := Value;
end;

function TExtProgressBar.JSClassName : string; begin
  Result := 'Ext-ProgressBar';
end;

procedure TExtProgressBar.InitDefaults; begin
  inherited;
  FTextElTExtElement := TExtElement.CreateInternal(Self, 'textEl');
end;

{$IFDEF FPC}constructor TExtProgressBar.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtProgressBar.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtProgressBar.UpdateProgress(Value : Integer = 0; Text : String = ''; Animate : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.updateProgress(' + VarToJSON([Value, Text, Animate]) + ');', 'TExtProgressBar');
  Result := Self;
end;

function TExtProgressBar.UpdateText(Text : String = '') : TExtFunction; begin
  JSCode(JSName + '.updateText(' + VarToJSON([Text]) + ');', 'TExtProgressBar');
  Result := Self;
end;

function TExtProgressBar.Wait(Config : TExtObject = nil; ConfigDuration : Integer = 0; ConfigInterval : Integer = 0; ConfigAnimate : Boolean = false; ConfigIncrement : Integer = 0; ConfigText : String = ''; ConfigFn : TExtFunction = nil; ConfigScope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.wait(' + VarToJSON([Config, false, ConfigDuration, ConfigInterval, ConfigAnimate, ConfigIncrement, ConfigText, ConfigFn, true, ConfigScope, false]) + ');', 'TExtProgressBar');
  Result := Self;
end;

function TExtProgressBar.IsWaiting : TExtFunction; begin
  JSCode(JSName + '.isWaiting();', 'TExtProgressBar');
  Result := Self;
end;

function TExtProgressBar.Reset(Hide : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.reset(' + VarToJSON([Hide]) + ');', 'TExtProgressBar');
  Result := Self;
end;

destructor TExtProgressBar.Destroy; begin
  try
    FTextElTExtElement.Free;
  except end;
  inherited;
end;

procedure TExtProgressBar.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'update') and Assigned(FOnUpdate) then
    FOnUpdate(TExtProgressBar(ParamAsObject('This')), ParamAsInteger('Value'), ParamAsString('Text'));
end;

function TExtDataValidations.JSClassName : string; begin
  Result := 'Ext-data-validations';
end;

{$IFDEF FPC}constructor TExtDataValidations.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataValidations.Presence(Config : TExtObject; Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.presence(' + VarToJSON([Config, false, Value, false]) + ');', 'TExtDataValidations');
  Result := Self;
end;

function TExtDataValidations.Length(Config : TExtObject; Value : String) : TExtFunction; begin
  JSCode(JSName + '.length(' + VarToJSON([Config, false, Value]) + ');', 'TExtDataValidations');
  Result := Self;
end;

function TExtDataValidations.Email(Config : TExtObject; Email : String) : TExtFunction; begin
  JSCode(JSName + '.email(' + VarToJSON([Config, false, Email]) + ');', 'TExtDataValidations');
  Result := Self;
end;

function TExtDataValidations.Format(Config : TExtObject; Value : String) : TExtFunction; begin
  JSCode(JSName + '.format(' + VarToJSON([Config, false, Value]) + ');', 'TExtDataValidations');
  Result := Self;
end;

function TExtDataValidations.Inclusion(Config : TExtObject; Value : String) : TExtFunction; begin
  JSCode(JSName + '.inclusion(' + VarToJSON([Config, false, Value]) + ');', 'TExtDataValidations');
  Result := Self;
end;

function TExtDataValidations.Exclusion(Config : TExtObject; Value : String) : TExtFunction; begin
  JSCode(JSName + '.exclusion(' + VarToJSON([Config, false, Value]) + ');', 'TExtDataValidations');
  Result := Self;
end;

procedure TExtDataTree.SetFOnAppend(Value : TExtDataTreeOnAppend); begin
  if Assigned(FOnAppend) then
    JSCode(JSName+'.events ["append"].listeners=[];');
  if Assigned(Value) then
    On('append', Ajax('append', [], true));
  FOnAppend := Value;
end;

procedure TExtDataTree.SetFOnRemove(Value : TExtDataTreeOnRemove); begin
  if Assigned(FOnRemove) then
    JSCode(JSName+'.events ["remove"].listeners=[];');
  if Assigned(Value) then
    On('remove', Ajax('remove', [], true));
  FOnRemove := Value;
end;

procedure TExtDataTree.SetFOnMove(Value : TExtDataTreeOnMove); begin
  if Assigned(FOnMove) then
    JSCode(JSName+'.events ["move"].listeners=[];');
  if Assigned(Value) then
    On('move', Ajax('move', [], true));
  FOnMove := Value;
end;

procedure TExtDataTree.SetFOnInsert(Value : TExtDataTreeOnInsert); begin
  if Assigned(FOnInsert) then
    JSCode(JSName+'.events ["insert"].listeners=[];');
  if Assigned(Value) then
    On('insert', Ajax('insert', [], true));
  FOnInsert := Value;
end;

procedure TExtDataTree.SetFOnBeforeappend(Value : TExtDataTreeOnBeforeappend); begin
  if Assigned(FOnBeforeappend) then
    JSCode(JSName+'.events ["beforeappend"].listeners=[];');
  if Assigned(Value) then
    On('beforeappend', Ajax('beforeappend', [], true));
  FOnBeforeappend := Value;
end;

procedure TExtDataTree.SetFOnBeforeremove(Value : TExtDataTreeOnBeforeremove); begin
  if Assigned(FOnBeforeremove) then
    JSCode(JSName+'.events ["beforeremove"].listeners=[];');
  if Assigned(Value) then
    On('beforeremove', Ajax('beforeremove', [], true));
  FOnBeforeremove := Value;
end;

procedure TExtDataTree.SetFOnBeforemove(Value : TExtDataTreeOnBeforemove); begin
  if Assigned(FOnBeforemove) then
    JSCode(JSName+'.events ["beforemove"].listeners=[];');
  if Assigned(Value) then
    On('beforemove', Ajax('beforemove', [], true));
  FOnBeforemove := Value;
end;

procedure TExtDataTree.SetFOnBeforeinsert(Value : TExtDataTreeOnBeforeinsert); begin
  if Assigned(FOnBeforeinsert) then
    JSCode(JSName+'.events ["beforeinsert"].listeners=[];');
  if Assigned(Value) then
    On('beforeinsert', Ajax('beforeinsert', [], true));
  FOnBeforeinsert := Value;
end;

procedure TExtDataTree.SetFOnExpand(Value : TExtDataTreeOnExpand); begin
  if Assigned(FOnExpand) then
    JSCode(JSName+'.events ["expand"].listeners=[];');
  if Assigned(Value) then
    On('expand', Ajax('expand', [], true));
  FOnExpand := Value;
end;

procedure TExtDataTree.SetFOnCollapse(Value : TExtDataTreeOnCollapse); begin
  if Assigned(FOnCollapse) then
    JSCode(JSName+'.events ["collapse"].listeners=[];');
  if Assigned(Value) then
    On('collapse', Ajax('collapse', [], true));
  FOnCollapse := Value;
end;

procedure TExtDataTree.SetFOnBeforeexpand(Value : TExtDataTreeOnBeforeexpand); begin
  if Assigned(FOnBeforeexpand) then
    JSCode(JSName+'.events ["beforeexpand"].listeners=[];');
  if Assigned(Value) then
    On('beforeexpand', Ajax('beforeexpand', [], true));
  FOnBeforeexpand := Value;
end;

procedure TExtDataTree.SetFOnBeforecollapse(Value : TExtDataTreeOnBeforecollapse); begin
  if Assigned(FOnBeforecollapse) then
    JSCode(JSName+'.events ["beforecollapse"].listeners=[];');
  if Assigned(Value) then
    On('beforecollapse', Ajax('beforecollapse', [], true));
  FOnBeforecollapse := Value;
end;

procedure TExtDataTree.SetFOnRootchange(Value : TExtDataTreeOnRootchange); begin
  if Assigned(FOnRootchange) then
    JSCode(JSName+'.events ["rootchange"].listeners=[];');
  if Assigned(Value) then
    On('rootchange', Ajax('rootchange', ['Root', '%0.nm'], true));
  FOnRootchange := Value;
end;

function TExtDataTree.JSClassName : string; begin
  Result := 'Ext-data-Tree';
end;

{$IFDEF FPC}constructor TExtDataTree.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataTree.GetNodeById(Id : String) : TExtFunction; begin
  JSCode(JSName + '.getNodeById(' + VarToJSON([Id]) + ');', 'TExtDataTree');
  Result := Self;
end;

procedure TExtDataTree.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'append') and Assigned(FOnAppend) then
    FOnAppend()
  else if (AEvtName = 'remove') and Assigned(FOnRemove) then
    FOnRemove()
  else if (AEvtName = 'move') and Assigned(FOnMove) then
    FOnMove()
  else if (AEvtName = 'insert') and Assigned(FOnInsert) then
    FOnInsert()
  else if (AEvtName = 'beforeappend') and Assigned(FOnBeforeappend) then
    FOnBeforeappend()
  else if (AEvtName = 'beforeremove') and Assigned(FOnBeforeremove) then
    FOnBeforeremove()
  else if (AEvtName = 'beforemove') and Assigned(FOnBeforemove) then
    FOnBeforemove()
  else if (AEvtName = 'beforeinsert') and Assigned(FOnBeforeinsert) then
    FOnBeforeinsert()
  else if (AEvtName = 'expand') and Assigned(FOnExpand) then
    FOnExpand()
  else if (AEvtName = 'collapse') and Assigned(FOnCollapse) then
    FOnCollapse()
  else if (AEvtName = 'beforeexpand') and Assigned(FOnBeforeexpand) then
    FOnBeforeexpand()
  else if (AEvtName = 'beforecollapse') and Assigned(FOnBeforecollapse) then
    FOnBeforecollapse()
  else if (AEvtName = 'rootchange') and Assigned(FOnRootchange) then
    FOnRootchange(TExtDataModel(ParamAsObject('Root')));
end;

procedure TExtDdDragSource.SetFDdGroup(Value : String); begin
  FDdGroup := Value;
  JSCode('ddGroup:' + VarToJSON([Value]));
end;

procedure TExtDdDragSource.SetFDropAllowed(Value : String); begin
  FDropAllowed := Value;
  JSCode('dropAllowed:' + VarToJSON([Value]));
end;

procedure TExtDdDragSource.SetFDropNotAllowed(Value : String); begin
  FDropNotAllowed := Value;
  JSCode('dropNotAllowed:' + VarToJSON([Value]));
end;

procedure TExtDdDragSource.SetFAnimRepair(Value : Boolean); begin
  FAnimRepair := Value;
  JSCode('animRepair:' + VarToJSON([Value]));
end;

procedure TExtDdDragSource.SetFRepairHighlightColor(Value : String); begin
  FRepairHighlightColor := Value;
  JSCode('repairHighlightColor:' + VarToJSON([Value]));
end;

function TExtDdDragSource.JSClassName : string; begin
  Result := 'Ext-dd-DragSource';
end;

{$IFDEF FPC}constructor TExtDdDragSource.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDdDragSource.Create(El : String; Config : TExtObject = nil); begin
  CreateVar(JSClassName + '(' + VarToJSON([El, Config, false]) + ');');
  InitDefaults;
end;

constructor TExtDdDragSource.Create(El : THTMLElement; Config : TExtObject = nil); begin
  CreateVar(JSClassName + '(' + VarToJSON([El, false, Config, false]) + ');');
  InitDefaults;
end;

constructor TExtDdDragSource.Create(El : TExtElement; Config : TExtObject = nil); begin
  CreateVar(JSClassName + '(' + VarToJSON([El, false, Config, false]) + ');');
  InitDefaults;
end;

function TExtDdDragSource.GetDragData : TExtFunction; begin
  JSCode(JSName + '.getDragData();', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.AfterDragEnter(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.afterDragEnter(' + VarToJSON([Target, false, E, false, Id]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.BeforeDragEnter(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.beforeDragEnter(' + VarToJSON([Target, false, E, false, Id]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.AfterDragOver(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.afterDragOver(' + VarToJSON([Target, false, E, false, Id]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.BeforeDragOver(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.beforeDragOver(' + VarToJSON([Target, false, E, false, Id]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.AfterDragOut(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.afterDragOut(' + VarToJSON([Target, false, E, false, Id]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.BeforeDragOut(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.beforeDragOut(' + VarToJSON([Target, false, E, false, Id]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.AfterDragDrop(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.afterDragDrop(' + VarToJSON([Target, false, E, false, Id]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.BeforeDragDrop(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.beforeDragDrop(' + VarToJSON([Target, false, E, false, Id]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.AfterValidDrop(Target : TExtObject; E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.afterValidDrop(' + VarToJSON([Target, false, E, false, Id]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.AfterInvalidDrop(E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.afterInvalidDrop(' + VarToJSON([E, false, Id]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.BeforeInvalidDrop(Target : TExtDdDragDrop; E : TEvent; Id : String) : TExtFunction; begin
  JSCode(JSName + '.beforeInvalidDrop(' + VarToJSON([Target, false, E, false, Id]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.OnBeforeDrag(Data : TExtObject; E : TEvent) : TExtFunction; begin
  JSCode(JSName + '.onBeforeDrag(' + VarToJSON([Data, false, E, false]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.OnStartDrag(X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.onStartDrag(' + VarToJSON([X, Y]) + ');', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.GetProxy : TExtFunction; begin
  JSCode(JSName + '.getProxy();', 'TExtDdDragSource');
  Result := Self;
end;

function TExtDdDragSource.HideProxy : TExtFunction; begin
  JSCode(JSName + '.hideProxy();', 'TExtDdDragSource');
  Result := Self;
end;

procedure TExtLayoutContainerAccordion.SetFFill(Value : Boolean); begin
  FFill := Value;
  JSCode('fill:' + VarToJSON([Value]));
end;

procedure TExtLayoutContainerAccordion.SetFAutoWidth(Value : Boolean); begin
  FAutoWidth := Value;
  JSCode('autoWidth:' + VarToJSON([Value]));
end;

procedure TExtLayoutContainerAccordion.SetFTitleCollapse(Value : Boolean); begin
  FTitleCollapse := Value;
  JSCode('titleCollapse:' + VarToJSON([Value]));
end;

procedure TExtLayoutContainerAccordion.SetFHideCollapseTool(Value : Boolean); begin
  FHideCollapseTool := Value;
  JSCode('hideCollapseTool:' + VarToJSON([Value]));
end;

procedure TExtLayoutContainerAccordion.SetFCollapseFirst(Value : Boolean); begin
  FCollapseFirst := Value;
  JSCode('collapseFirst:' + VarToJSON([Value]));
end;

procedure TExtLayoutContainerAccordion.SetFAnimate(Value : Boolean); begin
  FAnimate := Value;
  JSCode('animate:' + VarToJSON([Value]));
end;

procedure TExtLayoutContainerAccordion.SetFActiveOnTop(Value : Boolean); begin
  FActiveOnTop := Value;
  JSCode('activeOnTop:' + VarToJSON([Value]));
end;

procedure TExtLayoutContainerAccordion.SetFMulti(Value : Boolean); begin
  FMulti := Value;
  JSCode('multi:' + VarToJSON([Value]));
end;

function TExtLayoutContainerAccordion.JSClassName : string; begin
  Result := 'Ext-layout-container-Accordion';
end;

{$IFDEF FPC}constructor TExtLayoutContainerAccordion.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilMemento.JSClassName : string; begin
  Result := 'Ext-util-Memento';
end;

{$IFDEF FPC}constructor TExtUtilMemento.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtUtilMemento.Create(Target : TExtObject; Props : String); begin
  CreateVar(JSClassName + '(' + VarToJSON([Target, false, Props]) + ');');
  InitDefaults;
end;

constructor TExtUtilMemento.Create(Target : TExtObject; Props : TExtObjectList); begin
  CreateVar(JSClassName + '(' + VarToJSON([Target, false]) + ',' + VarToJSON(Props) + ');');
  InitDefaults;
end;

function TExtUtilMemento.Capture(Props : String; Target : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.capture(' + VarToJSON([Props, Target, false]) + ');', 'TExtUtilMemento');
  Result := Self;
end;

function TExtUtilMemento.Capture(Props : TExtObjectList; Target : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.Capture(' + VarToJSON(Props) + ',' + VarToJSON([Target, false]) + ');', 'TExtUtilMemento');
  Result := Self;
end;

function TExtUtilMemento.Remove(Props : String) : TExtFunction; begin
  JSCode(JSName + '.remove(' + VarToJSON([Props]) + ');', 'TExtUtilMemento');
  Result := Self;
end;

function TExtUtilMemento.Remove(Props : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.Remove(' + VarToJSON(Props) + ');', 'TExtUtilMemento');
  Result := Self;
end;

function TExtUtilMemento.Restore(Props : String; Clear : Boolean; Target : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.restore(' + VarToJSON([Props, Clear, Target, false]) + ');', 'TExtUtilMemento');
  Result := Self;
end;

function TExtUtilMemento.Restore(Props : TExtObjectList; Clear : Boolean; Target : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.Restore(' + VarToJSON(Props) + ',' + VarToJSON([Clear, Target, false]) + ');', 'TExtUtilMemento');
  Result := Self;
end;

function TExtUtilMemento.RestoreAll(Clear : Boolean; Target : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.restoreAll(' + VarToJSON([Clear, Target, false]) + ');', 'TExtUtilMemento');
  Result := Self;
end;

procedure TExtChartSeriesBar.SetFColumn(Value : Boolean); begin
  FColumn := Value;
  JSCode('column:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesBar.SetFGutter(Value : Integer); begin
  FGutter := Value;
  JSCode('gutter:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesBar.SetFGroupGutter(Value : Integer); begin
  FGroupGutter := Value;
  JSCode('groupGutter:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesBar.SetFXPadding(Value : Integer); begin
  FXPadding := Value;
  JSCode('xPadding:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesBar.SetFYPadding(Value : Integer); begin
  FYPadding := Value;
  JSCode('yPadding:' + VarToJSON([Value]));
end;

function TExtChartSeriesBar.JSClassName : string; begin
  Result := 'Ext-chart-series-Bar';
end;

{$IFDEF FPC}constructor TExtChartSeriesBar.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtChartSeriesBar.DrawSeries : TExtFunction; begin
  JSCode(JSName + '.drawSeries();', 'TExtChartSeriesBar');
  Result := Self;
end;

function TExtChartSeriesBar.GetLegendColor(ElseJS : TVarMe) : TExtFunction; begin
  JSCode(JSName + '.getLegendColor(' + VarToJSON([ElseJS, false]) + ');', 'TExtChartSeriesBar');
  Result := Self;
end;

function TExtDataDirectStore.JSClassName : string; begin
  Result := 'Ext-data-DirectStore';
end;

{$IFDEF FPC}constructor TExtDataDirectStore.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataArrayStore.JSClassName : string; begin
  Result := 'Ext-data-ArrayStore';
end;

{$IFDEF FPC}constructor TExtDataArrayStore.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtChartSeriesScatter.SetFMarkerConfig(Value : TExtObject); begin
  FMarkerConfig := Value;
  Value.DeleteFromGarbage;
  JSCode('markerConfig:' + VarToJSON([Value, false]));
end;

procedure TExtChartSeriesScatter.SetFStyle(Value : TExtObject); begin
  FStyle := Value;
  Value.DeleteFromGarbage;
  JSCode('style:' + VarToJSON([Value, false]));
end;

procedure TExtChartSeriesScatter.SetFAxis(Value : String); begin
  FAxis := Value;
  JSCode('axis:' + VarToJSON([Value]));
end;

procedure TExtChartSeriesScatter.SetFAxisTExtObjectList(Value : TExtObjectList); begin
  FAxisTExtObjectList := Value;
  Value.DeleteFromGarbage;
  JSCode('axis:' + VarToJSON([Value, false]));
end;

function TExtChartSeriesScatter.JSClassName : string; begin
  Result := 'Ext-chart-series-Scatter';
end;

procedure TExtChartSeriesScatter.InitDefaults; begin
  inherited;
  FMarkerConfig := TExtObject.CreateInternal(Self, 'markerConfig');
  FStyle := TExtObject.CreateInternal(Self, 'style');
  FAxisTExtObjectList := TExtObjectList.Create(Self, 'axis');
end;

{$IFDEF FPC}constructor TExtChartSeriesScatter.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtChartSeriesScatter.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtChartSeriesScatter.DrawSeries : TExtFunction; begin
  JSCode(JSName + '.drawSeries();', 'TExtChartSeriesScatter');
  Result := Self;
end;

destructor TExtChartSeriesScatter.Destroy; begin
  try
    FMarkerConfig.Free;
    FStyle.Free;
    FAxisTExtObjectList.Free;
  except end;
  inherited;
end;

procedure TExtFormActionSubmit.SetFClientValidation(Value : Boolean); begin
  FClientValidation := Value;
  JSCode('clientValidation:' + VarToJSON([Value]));
end;

function TExtFormActionSubmit.JSClassName : string; begin
  Result := 'Ext-form-action-Submit';
end;

{$IFDEF FPC}constructor TExtFormActionSubmit.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtTreePluginTreeViewDragDrop.SetFAllowParentInsert(Value : Boolean); begin
  FAllowParentInsert := Value;
  JSCode('allowParentInsert:' + VarToJSON([Value]));
end;

procedure TExtTreePluginTreeViewDragDrop.SetFAllowContainerDrop(Value : String); begin
  FAllowContainerDrop := Value;
  JSCode('allowContainerDrop:' + VarToJSON([Value]));
end;

procedure TExtTreePluginTreeViewDragDrop.SetFAppendOnly(Value : String); begin
  FAppendOnly := Value;
  JSCode('appendOnly:' + VarToJSON([Value]));
end;

procedure TExtTreePluginTreeViewDragDrop.SetFDdGroup(Value : String); begin
  FDdGroup := Value;
  JSCode('ddGroup:' + VarToJSON([Value]));
end;

procedure TExtTreePluginTreeViewDragDrop.SetFDragGroup(Value : String); begin
  FDragGroup := Value;
  JSCode('dragGroup:' + VarToJSON([Value]));
end;

procedure TExtTreePluginTreeViewDragDrop.SetFDropGroup(Value : String); begin
  FDropGroup := Value;
  JSCode('dropGroup:' + VarToJSON([Value]));
end;

procedure TExtTreePluginTreeViewDragDrop.SetFExpandDelay(Value : String); begin
  FExpandDelay := Value;
  JSCode('expandDelay:' + VarToJSON([Value]));
end;

procedure TExtTreePluginTreeViewDragDrop.SetFEnableDrop(Value : Boolean); begin
  FEnableDrop := Value;
  JSCode('enableDrop:' + VarToJSON([Value]));
end;

procedure TExtTreePluginTreeViewDragDrop.SetFEnableDrag(Value : Boolean); begin
  FEnableDrag := Value;
  JSCode('enableDrag:' + VarToJSON([Value]));
end;

procedure TExtTreePluginTreeViewDragDrop.SetFNodeHighlightColor(Value : String); begin
  FNodeHighlightColor := Value;
  JSCode('nodeHighlightColor:' + VarToJSON([Value]));
end;

procedure TExtTreePluginTreeViewDragDrop.SetFNodeHighlightOnDrop(Value : Boolean); begin
  FNodeHighlightOnDrop := Value;
  JSCode('nodeHighlightOnDrop:' + VarToJSON([Value]));
end;

procedure TExtTreePluginTreeViewDragDrop.SetFNodeHighlightOnRepair(Value : Boolean); begin
  FNodeHighlightOnRepair := Value;
  JSCode('nodeHighlightOnRepair:' + VarToJSON([Value]));
end;

function TExtTreePluginTreeViewDragDrop.JSClassName : string; begin
  Result := 'Ext-tree-plugin-TreeViewDragDrop';
end;

{$IFDEF FPC}constructor TExtTreePluginTreeViewDragDrop.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilKeyMap.JSClassName : string; begin
  Result := 'Ext-util-KeyMap';
end;

{$IFDEF FPC}constructor TExtUtilKeyMap.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtUtilKeyMap.Create(El : String; Binding : TExtObject; EventName : String = ''); begin
  CreateVar(JSClassName + '(' + VarToJSON([El, Binding, false, EventName]) + ');');
  InitDefaults;
end;

constructor TExtUtilKeyMap.Create(El : THTMLElement; Binding : TExtObject; EventName : String = ''); begin
  CreateVar(JSClassName + '(' + VarToJSON([El, false, Binding, false, EventName]) + ');');
  InitDefaults;
end;

constructor TExtUtilKeyMap.Create(El : TExtElement; Binding : TExtObject; EventName : String = ''); begin
  CreateVar(JSClassName + '(' + VarToJSON([El, false, Binding, false, EventName]) + ');');
  InitDefaults;
end;

function TExtUtilKeyMap.AddBinding(Binding : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.addBinding(' + VarToJSON([Binding, false]) + ');', 'TExtUtilKeyMap');
  Result := Self;
end;

function TExtUtilKeyMap.AddBinding(Binding : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.AddBinding(' + VarToJSON(Binding) + ');', 'TExtUtilKeyMap');
  Result := Self;
end;

function TExtUtilKeyMap.On(Key : Integer; Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.on(' + VarToJSON([Key, Fn, true, Scope, false]) + ');', 'TExtUtilKeyMap');
  Result := Self;
end;

function TExtUtilKeyMap.On(Key : TArrayOfInteger; Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.On(' + VarToJSON([Key, Fn, true, Scope, false]) + ');', 'TExtUtilKeyMap');
  Result := Self;
end;

function TExtUtilKeyMap.On(Key : TExtObject; Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.On(' + VarToJSON([Key, false, Fn, true, Scope, false]) + ');', 'TExtUtilKeyMap');
  Result := Self;
end;

function TExtUtilKeyMap.IsEnabled : TExtFunction; begin
  JSCode(JSName + '.isEnabled();', 'TExtUtilKeyMap');
  Result := Self;
end;

function TExtUtilKeyMap.Enable : TExtFunction; begin
  JSCode(JSName + '.enable();', 'TExtUtilKeyMap');
  Result := Self;
end;

function TExtUtilKeyMap.Disable : TExtFunction; begin
  JSCode(JSName + '.disable();', 'TExtUtilKeyMap');
  Result := Self;
end;

function TExtUtilKeyMap.SetDisabled(Disabled : Boolean; RemoveEl : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setDisabled(' + VarToJSON([Disabled, RemoveEl]) + ');', 'TExtUtilKeyMap');
  Result := Self;
end;

procedure TExtGridPropertyGrid.SetFPropertyNames(Value : TExtObject); begin
  FPropertyNames := Value;
  Value.DeleteFromGarbage;
  JSCode('propertyNames:' + VarToJSON([Value, false]));
end;

procedure TExtGridPropertyGrid.SetFSource(Value : TExtObject); begin
  FSource := Value;
  Value.DeleteFromGarbage;
  if not ConfigAvailable(JSName) then
    SetSource(Value)
  else
    JSCode('source:' + VarToJSON([Value, false]));
end;

procedure TExtGridPropertyGrid.SetFCustomEditors(Value : TExtObject); begin
  FCustomEditors := Value;
  Value.DeleteFromGarbage;
  JSCode('customEditors:' + VarToJSON([Value, false]));
end;

procedure TExtGridPropertyGrid.SetFSource_(Value : TExtObject); begin
  FSource_ := Value;
  Value.DeleteFromGarbage;
  JSCode('source:' + VarToJSON([Value, false]));
end;

procedure TExtGridPropertyGrid.SetFCustomRenderers(Value : TExtObject); begin
  FCustomRenderers := Value;
  Value.DeleteFromGarbage;
  JSCode('customRenderers:' + VarToJSON([Value, false]));
end;

procedure TExtGridPropertyGrid.SetFValueField(Value : String); begin
  FValueField := Value;
  JSCode('valueField:' + VarToJSON([Value]));
end;

procedure TExtGridPropertyGrid.SetFNameField(Value : String); begin
  FNameField := Value;
  JSCode('nameField:' + VarToJSON([Value]));
end;

procedure TExtGridPropertyGrid.SetFNameColumnWidth(Value : Integer); begin
  FNameColumnWidth := Value;
  JSCode('nameColumnWidth:' + VarToJSON([Value]));
end;

procedure TExtGridPropertyGrid.SetFOnBeforepropertychange(Value : TExtGridPropertyGridOnBeforepropertychange); begin
  if Assigned(FOnBeforepropertychange) then
    JSCode(JSName+'.events ["beforepropertychange"].listeners=[];');
  if Assigned(Value) then
    On('beforepropertychange', Ajax('beforepropertychange', ['Source', '%0.nm','RecordId', '%1','Value', '%2.nm','OldValue', '%3.nm'], true));
  FOnBeforepropertychange := Value;
end;

procedure TExtGridPropertyGrid.SetFOnPropertychange(Value : TExtGridPropertyGridOnPropertychange); begin
  if Assigned(FOnPropertychange) then
    JSCode(JSName+'.events ["propertychange"].listeners=[];');
  if Assigned(Value) then
    On('propertychange', Ajax('propertychange', ['Source', '%0.nm','RecordId', '%1','Value', '%2.nm','OldValue', '%3.nm'], true));
  FOnPropertychange := Value;
end;

function TExtGridPropertyGrid.JSClassName : string; begin
  Result := 'Ext-grid-property-Grid';
end;

procedure TExtGridPropertyGrid.InitDefaults; begin
  inherited;
  FPropertyNames := TExtObject.CreateInternal(Self, 'propertyNames');
  FSource := TExtObject.CreateInternal(Self, 'source');
  FCustomEditors := TExtObject.CreateInternal(Self, 'customEditors');
  FSource_ := TExtObject.CreateInternal(Self, 'source');
  FCustomRenderers := TExtObject.CreateInternal(Self, 'customRenderers');
end;

{$IFDEF FPC}constructor TExtGridPropertyGrid.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridPropertyGrid.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtGridPropertyGrid.SetSource(Source : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setSource(' + VarToJSON([Source, false]) + ');', 'TExtGridPropertyGrid');
  Result := Self;
end;

function TExtGridPropertyGrid.GetSource : TExtFunction; begin
  JSCode(JSName + '.getSource();', 'TExtGridPropertyGrid');
  Result := Self;
end;

function TExtGridPropertyGrid.SetProperty(Prop : String; Value : TExtObject; Create : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.setProperty(' + VarToJSON([Prop, Value, false, Create]) + ');', 'TExtGridPropertyGrid');
  Result := Self;
end;

function TExtGridPropertyGrid.RemoveProperty(Prop : String) : TExtFunction; begin
  JSCode(JSName + '.removeProperty(' + VarToJSON([Prop]) + ');', 'TExtGridPropertyGrid');
  Result := Self;
end;

destructor TExtGridPropertyGrid.Destroy; begin
  try
    FPropertyNames.Free;
    FSource.Free;
    FCustomEditors.Free;
    FSource_.Free;
    FCustomRenderers.Free;
  except end;
  inherited;
end;

procedure TExtGridPropertyGrid.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforepropertychange') and Assigned(FOnBeforepropertychange) then
    FOnBeforepropertychange(TExtObject(ParamAsObject('Source')), ParamAsString('RecordId'), TExtObject(ParamAsObject('Value')), TExtObject(ParamAsObject('OldValue')))
  else if (AEvtName = 'propertychange') and Assigned(FOnPropertychange) then
    FOnPropertychange(TExtObject(ParamAsObject('Source')), ParamAsString('RecordId'), TExtObject(ParamAsObject('Value')), TExtObject(ParamAsObject('OldValue')));
end;

procedure TExtDataIdGenerator.SetFId(Value : String); begin
  FId := Value;
  JSCode('id:' + VarToJSON([Value]));
end;

function TExtDataIdGenerator.JSClassName : string; begin
  Result := 'Ext-data-IdGenerator';
end;

{$IFDEF FPC}constructor TExtDataIdGenerator.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataIdGenerator.Generate : TExtFunction; begin
  JSCode(JSName + '.generate();', 'TExtDataIdGenerator');
  Result := Self;
end;

class function TExtDataIdGenerator.Get(Config : String) : TExtFunction; begin
  JSCode(JSClassName + '.get(' + VarToJSON([Config]) + ');', 'TExtDataIdGenerator');
  Result := Self;
end;

function TExtDataIdGenerator.Get(Config : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.Get(' + VarToJSON([Config, false]) + ');', 'TExtDataIdGenerator');
  Result := Self;
end;

procedure TExtSelectionRowModel.SetFEnableKeyNav(Value : Boolean); begin
  FEnableKeyNav := Value;
  JSCode('enableKeyNav:' + VarToJSON([Value]));
end;

procedure TExtSelectionRowModel.SetFIgnoreRightMouseSelection(Value : Boolean); begin
  FIgnoreRightMouseSelection := Value;
  JSCode('ignoreRightMouseSelection:' + VarToJSON([Value]));
end;

procedure TExtSelectionRowModel.SetFOnBeforedeselect(Value : TExtSelectionRowModelOnBeforedeselect); begin
  if Assigned(FOnBeforedeselect) then
    JSCode(JSName+'.events ["beforedeselect"].listeners=[];');
  if Assigned(Value) then
    On('beforedeselect', Ajax('beforedeselect', ['This', '%0.nm','RecordJS', '%1.nm','Index', '%2'], true));
  FOnBeforedeselect := Value;
end;

procedure TExtSelectionRowModel.SetFOnBeforeselect(Value : TExtSelectionRowModelOnBeforeselect); begin
  if Assigned(FOnBeforeselect) then
    JSCode(JSName+'.events ["beforeselect"].listeners=[];');
  if Assigned(Value) then
    On('beforeselect', Ajax('beforeselect', ['This', '%0.nm','RecordJS', '%1.nm','Index', '%2'], true));
  FOnBeforeselect := Value;
end;

procedure TExtSelectionRowModel.SetFOnDeselect(Value : TExtSelectionRowModelOnDeselect); begin
  if Assigned(FOnDeselect) then
    JSCode(JSName+'.events ["deselect"].listeners=[];');
  if Assigned(Value) then
    On('deselect', Ajax('deselect', ['This', '%0.nm','RecordJS', '%1.nm','Index', '%2'], true));
  FOnDeselect := Value;
end;

procedure TExtSelectionRowModel.SetFOnSelect(Value : TExtSelectionRowModelOnSelect); begin
  if Assigned(FOnSelect) then
    JSCode(JSName+'.events ["select"].listeners=[];');
  if Assigned(Value) then
    On('select', Ajax('select', ['This', '%0.nm','RecordJS', '%1.nm','Index', '%2'], true));
  FOnSelect := Value;
end;

function TExtSelectionRowModel.JSClassName : string; begin
  Result := 'Ext-selection-RowModel';
end;

{$IFDEF FPC}constructor TExtSelectionRowModel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtSelectionRowModel.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforedeselect') and Assigned(FOnBeforedeselect) then
    FOnBeforedeselect(TExtSelectionRowModel(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), ParamAsInteger('Index'))
  else if (AEvtName = 'beforeselect') and Assigned(FOnBeforeselect) then
    FOnBeforeselect(TExtSelectionRowModel(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), ParamAsInteger('Index'))
  else if (AEvtName = 'deselect') and Assigned(FOnDeselect) then
    FOnDeselect(TExtSelectionRowModel(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), ParamAsInteger('Index'))
  else if (AEvtName = 'select') and Assigned(FOnSelect) then
    FOnSelect(TExtSelectionRowModel(ParamAsObject('This')), TExtDataModel(ParamAsObject('RecordJS')), ParamAsInteger('Index'));
end;

procedure TExtResizerResizer.SetFDynamic(Value : Boolean); begin
  FDynamic := Value;
  JSCode('dynamic:' + VarToJSON([Value]));
end;

procedure TExtResizerResizer.SetFHandles(Value : String); begin
  FHandles := Value;
  JSCode('handles:' + VarToJSON([Value]));
end;

procedure TExtResizerResizer.SetFHeight(Value : Integer); begin
  FHeight := Value;
  JSCode('height:' + VarToJSON([Value]));
end;

procedure TExtResizerResizer.SetFWidth(Value : Integer); begin
  FWidth := Value;
  JSCode('width:' + VarToJSON([Value]));
end;

procedure TExtResizerResizer.SetFHeightIncrement(Value : Integer); begin
  FHeightIncrement := Value;
  JSCode('heightIncrement:' + VarToJSON([Value]));
end;

procedure TExtResizerResizer.SetFWidthIncrement(Value : Integer); begin
  FWidthIncrement := Value;
  JSCode('widthIncrement:' + VarToJSON([Value]));
end;

procedure TExtResizerResizer.SetFMinHeight(Value : Integer); begin
  FMinHeight := Value;
  JSCode('minHeight:' + VarToJSON([Value]));
end;

procedure TExtResizerResizer.SetFMinWidth(Value : Integer); begin
  FMinWidth := Value;
  JSCode('minWidth:' + VarToJSON([Value]));
end;

procedure TExtResizerResizer.SetFMaxHeight(Value : Integer); begin
  FMaxHeight := Value;
  JSCode('maxHeight:' + VarToJSON([Value]));
end;

procedure TExtResizerResizer.SetFMaxWidth(Value : Integer); begin
  FMaxWidth := Value;
  JSCode('maxWidth:' + VarToJSON([Value]));
end;

procedure TExtResizerResizer.SetFPinned(Value : Boolean); begin
  FPinned := Value;
  JSCode('pinned:' + VarToJSON([Value]));
end;

procedure TExtResizerResizer.SetFPreserveRatio(Value : Boolean); begin
  FPreserveRatio := Value;
  JSCode('preserveRatio:' + VarToJSON([Value]));
end;

procedure TExtResizerResizer.SetFTransparent(Value : Boolean); begin
  FTransparent := Value;
  JSCode('transparent:' + VarToJSON([Value]));
end;

procedure TExtResizerResizer.SetFConstrainTo(Value : TExtElement); begin
  FConstrainTo := Value;
  Value.DeleteFromGarbage;
  JSCode('constrainTo:' + VarToJSON([Value, false]));
end;

procedure TExtResizerResizer.SetFConstrainToTExtUtilRegion(Value : TExtUtilRegion); begin
  FConstrainToTExtUtilRegion := Value;
  Value.DeleteFromGarbage;
  JSCode('constrainTo:' + VarToJSON([Value, false]));
end;

procedure TExtResizerResizer.SetFTarget(Value : TExtElement); begin
  FTarget := Value;
  Value.DeleteFromGarbage;
  JSCode('target:' + VarToJSON([Value, false]));
end;

procedure TExtResizerResizer.SetFTargetTExtComponent(Value : TExtComponent); begin
  FTargetTExtComponent := Value;
  Value.DeleteFromGarbage;
  JSCode('target:' + VarToJSON([Value, false]));
end;

procedure TExtResizerResizer.SetFOnBeforeresize(Value : TExtResizerResizerOnBeforeresize); begin
  if Assigned(FOnBeforeresize) then
    JSCode(JSName+'.events ["beforeresize"].listeners=[];');
  if Assigned(Value) then
    On('beforeresize', Ajax('beforeresize', ['This', '%0.nm','Width', '%1','Height', '%2','E', '%3.nm'], true));
  FOnBeforeresize := Value;
end;

procedure TExtResizerResizer.SetFOnResizedrag(Value : TExtResizerResizerOnResizedrag); begin
  if Assigned(FOnResizedrag) then
    JSCode(JSName+'.events ["resizedrag"].listeners=[];');
  if Assigned(Value) then
    On('resizedrag', Ajax('resizedrag', ['This', '%0.nm','Width', '%1','Height', '%2','E', '%3.nm'], true));
  FOnResizedrag := Value;
end;

procedure TExtResizerResizer.SetFOnResize(Value : TExtResizerResizerOnResize); begin
  if Assigned(FOnResize) then
    JSCode(JSName+'.events ["resize"].listeners=[];');
  if Assigned(Value) then
    On('resize', Ajax('resize', ['This', '%0.nm','Width', '%1','Height', '%2','E', '%3.nm'], true));
  FOnResize := Value;
end;

function TExtResizerResizer.JSClassName : string; begin
  Result := 'Ext-resizer-Resizer';
end;

procedure TExtResizerResizer.InitDefaults; begin
  inherited;
  FConstrainTo := TExtElement.CreateInternal(Self, 'constrainTo');
  FConstrainToTExtUtilRegion := TExtUtilRegion.CreateInternal(Self, 'constrainTo');
  FTarget := TExtElement.CreateInternal(Self, 'target');
  FTargetTExtComponent := TExtComponent.CreateInternal(Self, 'target');
end;

{$IFDEF FPC}constructor TExtResizerResizer.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtResizerResizer.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtResizerResizer.ResizeTo(Width : Integer; Height : Integer) : TExtFunction; begin
  JSCode(JSName + '.resizeTo(' + VarToJSON([Width, Height]) + ');', 'TExtResizerResizer');
  Result := Self;
end;

function TExtResizerResizer.GetEl : TExtFunction; begin
  JSCode(JSName + '.getEl();', 'TExtResizerResizer');
  Result := Self;
end;

function TExtResizerResizer.GetTarget : TExtFunction; begin
  JSCode(JSName + '.getTarget();', 'TExtResizerResizer');
  Result := Self;
end;

destructor TExtResizerResizer.Destroy; begin
  try
    FConstrainTo.Free;
    FConstrainToTExtUtilRegion.Free;
    FTarget.Free;
    FTargetTExtComponent.Free;
  except end;
  inherited;
end;

procedure TExtResizerResizer.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforeresize') and Assigned(FOnBeforeresize) then
    FOnBeforeresize(TExtResizerResizer(ParamAsObject('This')), ParamAsInteger('Width'), ParamAsInteger('Height'), ExtEventObject)
  else if (AEvtName = 'resizedrag') and Assigned(FOnResizedrag) then
    FOnResizedrag(TExtResizerResizer(ParamAsObject('This')), ParamAsInteger('Width'), ParamAsInteger('Height'), ExtEventObject)
  else if (AEvtName = 'resize') and Assigned(FOnResize) then
    FOnResize(TExtResizerResizer(ParamAsObject('This')), ParamAsInteger('Width'), ParamAsInteger('Height'), ExtEventObject);
end;

function TExtUtilGrouper.JSClassName : string; begin
  Result := 'Ext-util-Grouper';
end;

{$IFDEF FPC}constructor TExtUtilGrouper.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilGrouper.GetGroupString(Instance : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.getGroupString(' + VarToJSON([Instance, false]) + ');', 'TExtUtilGrouper');
  Result := Self;
end;

function TExtFxTargetElementCSS.JSClassName : string; begin
  Result := 'Ext-fx-target-ElementCSS';
end;

{$IFDEF FPC}constructor TExtFxTargetElementCSS.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilCookiesSingleton.JSClassName : string; begin
  Result := 'Ext-util-CookiesSingleton';
end;

{$IFDEF FPC}constructor TExtUtilCookiesSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUtilCookiesSingleton.SetJS(Name : String; Value : TExtObject; Expires : TExtObject = nil; Path : String = ''; Domain : String = ''; Secure : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.set(' + VarToJSON([Name, Value, false, Expires, false, Path, Domain, Secure]) + ');', 'TExtUtilCookiesSingleton');
  Result := Self;
end;

function TExtUtilCookiesSingleton.Get(Name : String) : TExtFunction; begin
  JSCode(JSName + '.get(' + VarToJSON([Name]) + ');', 'TExtUtilCookiesSingleton');
  Result := Self;
end;

function TExtUtilCookiesSingleton.Clear(Name : String; Path : String = '') : TExtFunction; begin
  JSCode(JSName + '.clear(' + VarToJSON([Name, Path]) + ');', 'TExtUtilCookiesSingleton');
  Result := Self;
end;

procedure TExtChartAxisTime.SetFDateFormat(Value : String); begin
  FDateFormat := Value;
  JSCode('dateFormat:' + VarToJSON([Value]));
end;

procedure TExtChartAxisTime.SetFDateFormatBoolean(Value : Boolean); begin
  FDateFormatBoolean := Value;
  JSCode('dateFormat:' + VarToJSON([Value]));
end;

procedure TExtChartAxisTime.SetFFromDate(Value : TDateTime); begin
  FFromDate := Value;
  JSCode('fromDate:' + VarToJSON([Value]));
end;

procedure TExtChartAxisTime.SetFToDate(Value : TDateTime); begin
  FToDate := Value;
  JSCode('toDate:' + VarToJSON([Value]));
end;

procedure TExtChartAxisTime.SetFStep(Value : TExtObjectList); begin
  FStep := Value;
  Value.DeleteFromGarbage;
  JSCode('step:' + VarToJSON([Value, false]));
end;

procedure TExtChartAxisTime.SetFStepBoolean(Value : Boolean); begin
  FStepBoolean := Value;
  JSCode('step:' + VarToJSON([Value]));
end;

procedure TExtChartAxisTime.SetFConstrain(Value : Boolean); begin
  FConstrain := Value;
  JSCode('constrain:' + VarToJSON([Value]));
end;

function TExtChartAxisTime.JSClassName : string; begin
  Result := 'Ext-chart-axis-Time';
end;

procedure TExtChartAxisTime.InitDefaults; begin
  inherited;
  FStep := TExtObjectList.Create(Self, 'step');
end;

{$IFDEF FPC}constructor TExtChartAxisTime.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtChartAxisTime.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

destructor TExtChartAxisTime.Destroy; begin
  try
    FStep.Free;
  except end;
  inherited;
end;

function TArray.JSClassName : string; begin
  Result := 'Array';
end;

{$IFDEF FPC}constructor TArray.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TArray.Create(Items : Integer); begin
  CreateVar(JSClassName + '(' + VarToJSON([Items]) + ');');
  InitDefaults;
end;

constructor TArray.Create(Items : TExtObjectList); begin
  CreateVar(JSClassName + '(' + VarToJSON(Items) + ');');
  InitDefaults;
end;

function TArray.Pop : TExtFunction; begin
  JSCode(JSName + '.pop();', 'TArray');
  Result := Self;
end;

function TArray.Push(Elements : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.push(' + VarToJSON(Elements) + ');', 'TArray');
  Result := Self;
end;

function TArray.Reverse : TExtFunction; begin
  JSCode(JSName + '.reverse();', 'TArray');
  Result := Self;
end;

function TArray.Shift : TExtFunction; begin
  JSCode(JSName + '.shift();', 'TArray');
  Result := Self;
end;

function TArray.Sort(CompareFunction : TExtFunction) : TExtFunction; begin
  JSCode(JSName + '.sort(' + VarToJSON([CompareFunction, true]) + ');', 'TArray');
  Result := Self;
end;

function TArray.Splice(Index : Integer; HowMany : Integer; Elements : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.splice(' + VarToJSON([Index, HowMany]) + ',' + VarToJSON(Elements) + ');', 'TArray');
  Result := Self;
end;

function TArray.Unshift(Elements : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.unshift(' + VarToJSON(Elements) + ');', 'TArray');
  Result := Self;
end;

function TArray.Concat(Values : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.concat(' + VarToJSON(Values) + ');', 'TArray');
  Result := Self;
end;

function TArray.Join(Separator : String) : TExtFunction; begin
  JSCode(JSName + '.join(' + VarToJSON([Separator]) + ');', 'TArray');
  Result := Self;
end;

function TArray.Slice(BeginJS : Integer; EndJS : Integer) : TExtFunction; begin
  JSCode(JSName + '.slice(' + VarToJSON([BeginJS, EndJS]) + ');', 'TArray');
  Result := Self;
end;

function TArray.ToString : TExtFunction; begin
  JSCode(JSName + '.toString();', 'TArray');
  Result := Self;
end;

function TExtGridFeatureSummary.JSClassName : string; begin
  Result := 'Ext-grid-feature-Summary';
end;

{$IFDEF FPC}constructor TExtGridFeatureSummary.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtMenuDatePicker.SetFHideOnClick(Value : Boolean); begin
  FHideOnClick := Value;
  JSCode('hideOnClick:' + VarToJSON([Value]));
end;

procedure TExtMenuDatePicker.SetFPickerId(Value : String); begin
  FPickerId := Value;
  JSCode('pickerId:' + VarToJSON([Value]));
end;

procedure TExtMenuDatePicker.SetFMaxHeight(Value : Integer); begin
  FMaxHeight := Value;
  JSCode('maxHeight:' + VarToJSON([Value]));
end;

procedure TExtMenuDatePicker.SetFOnClick(Value : TExtMenuDatePickerOnClick); begin
  if Assigned(FOnClick) then
    JSCode(JSName+'.events ["click"].listeners=[];');
  if Assigned(Value) then
    On('click', Ajax('click', [], true));
  FOnClick := Value;
end;

procedure TExtMenuDatePicker.SetFOnItemclick(Value : TExtMenuDatePickerOnItemclick); begin
  if Assigned(FOnItemclick) then
    JSCode(JSName+'.events ["itemclick"].listeners=[];');
  if Assigned(Value) then
    On('itemclick', Ajax('itemclick', [], true));
  FOnItemclick := Value;
end;

procedure TExtMenuDatePicker.SetFOnSelect(Value : TExtMenuDatePickerOnSelect); begin
  if Assigned(FOnSelect) then
    JSCode(JSName+'.events ["select"].listeners=[];');
  if Assigned(Value) then
    On('select', Ajax('select', [], true));
  FOnSelect := Value;
end;

function TExtMenuDatePicker.JSClassName : string; begin
  Result := 'Ext-menu-DatePicker';
end;

{$IFDEF FPC}constructor TExtMenuDatePicker.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtMenuDatePicker.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'click') and Assigned(FOnClick) then
    FOnClick()
  else if (AEvtName = 'itemclick') and Assigned(FOnItemclick) then
    FOnItemclick()
  else if (AEvtName = 'select') and Assigned(FOnSelect) then
    FOnSelect();
end;

procedure TExtLayoutContainerFit.SetFDefaultMargins(Value : TExtObject); begin
  FDefaultMargins := Value;
  Value.DeleteFromGarbage;
  JSCode('defaultMargins:' + VarToJSON([Value, false]));
end;

function TExtLayoutContainerFit.JSClassName : string; begin
  Result := 'Ext-layout-container-Fit';
end;

procedure TExtLayoutContainerFit.InitDefaults; begin
  inherited;
  FDefaultMargins := TExtObject.CreateInternal(Self, 'defaultMargins');
end;

{$IFDEF FPC}constructor TExtLayoutContainerFit.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtLayoutContainerFit.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

destructor TExtLayoutContainerFit.Destroy; begin
  try
    FDefaultMargins.Free;
  except end;
  inherited;
end;

function TExtDataErrors.JSClassName : string; begin
  Result := 'Ext-data-Errors';
end;

{$IFDEF FPC}constructor TExtDataErrors.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataErrors.IsValid : TExtFunction; begin
  JSCode(JSName + '.isValid();', 'TExtDataErrors');
  Result := Self;
end;

function TExtDataErrors.GetByField(FieldName : String) : TExtFunction; begin
  JSCode(JSName + '.getByField(' + VarToJSON([FieldName]) + ');', 'TExtDataErrors');
  Result := Self;
end;

procedure TExtFormFieldNumber.SetFStripCharsRe(Value : TRegExp); begin
  FStripCharsRe := Value;
  JSCode('stripCharsRe:' + VarToJSON([#3 +Value]));
end;

procedure TExtFormFieldNumber.SetFMaskRe(Value : TRegExp); begin
  FMaskRe := Value;
  JSCode('maskRe:' + VarToJSON([#3 +Value]));
end;

procedure TExtFormFieldNumber.SetFAllowDecimals(Value : Boolean); begin
  FAllowDecimals := Value;
  JSCode('allowDecimals:' + VarToJSON([Value]));
end;

procedure TExtFormFieldNumber.SetFDecimalSeparator(Value : String); begin
  FDecimalSeparator := Value;
  JSCode('decimalSeparator:' + VarToJSON([Value]));
end;

procedure TExtFormFieldNumber.SetFDecimalPrecision(Value : Integer); begin
  FDecimalPrecision := Value;
  JSCode('decimalPrecision:' + VarToJSON([Value]));
end;

procedure TExtFormFieldNumber.SetFMinValue(Value : Integer); begin
  FMinValue := Value;
  if not ConfigAvailable(JSName) then
    SetMinValue(Value)
  else
    JSCode('minValue:' + VarToJSON([Value]));
end;

procedure TExtFormFieldNumber.SetFMaxValue(Value : Integer); begin
  FMaxValue := Value;
  if not ConfigAvailable(JSName) then
    SetMaxValue(Value)
  else
    JSCode('maxValue:' + VarToJSON([Value]));
end;

procedure TExtFormFieldNumber.SetFStep(Value : Integer); begin
  FStep := Value;
  JSCode('step:' + VarToJSON([Value]));
end;

procedure TExtFormFieldNumber.SetFMinText(Value : String); begin
  FMinText := Value;
  JSCode('minText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldNumber.SetFMaxText(Value : String); begin
  FMaxText := Value;
  JSCode('maxText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldNumber.SetFNanText(Value : String); begin
  FNanText := Value;
  JSCode('nanText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldNumber.SetFNegativeText(Value : String); begin
  FNegativeText := Value;
  JSCode('negativeText:' + VarToJSON([Value]));
end;

procedure TExtFormFieldNumber.SetFBaseChars(Value : String); begin
  FBaseChars := Value;
  JSCode('baseChars:' + VarToJSON([Value]));
end;

procedure TExtFormFieldNumber.SetFAutoStripChars(Value : Boolean); begin
  FAutoStripChars := Value;
  JSCode('autoStripChars:' + VarToJSON([Value]));
end;

function TExtFormFieldNumber.JSClassName : string; begin
  Result := 'Ext-form-field-Number';
end;

{$IFDEF FPC}constructor TExtFormFieldNumber.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtFormFieldNumber.GetErrors(Value : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.getErrors(' + VarToJSON([Value, false]) + ');', 'TExtFormFieldNumber');
  Result := Self;
end;

function TExtFormFieldNumber.SetMinValue(Value : Integer) : TExtFunction; begin
  JSCode(JSName + '.setMinValue(' + VarToJSON([Value]) + ');', 'TExtFormFieldNumber');
  Result := Self;
end;

function TExtFormFieldNumber.SetMaxValue(Value : Integer) : TExtFunction; begin
  JSCode(JSName + '.setMaxValue(' + VarToJSON([Value]) + ');', 'TExtFormFieldNumber');
  Result := Self;
end;

function TExtModelManagerSingleton.JSClassName : string; begin
  Result := 'Ext-ModelManagerSingleton';
end;

{$IFDEF FPC}constructor TExtModelManagerSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtModelManagerSingleton.GetModel(Id : String) : TExtFunction; begin
  JSCode(JSName + '.getModel(' + VarToJSON([Id]) + ');', 'TExtModelManagerSingleton');
  Result := Self;
end;

function TExtModelManagerSingleton.GetModel(Id : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.GetModel(' + VarToJSON([Id, false]) + ');', 'TExtModelManagerSingleton');
  Result := Self;
end;

function TExtModelManagerSingleton.RegModel(Name : String; Config : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.regModel(' + VarToJSON([Name, Config, false]) + ');', 'TExtModelManagerSingleton');
  Result := Self;
end;

function TExtToolbarFill.JSClassName : string; begin
  Result := 'Ext-toolbar-Fill';
end;

{$IFDEF FPC}constructor TExtToolbarFill.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtStateStateful.SetFStateful(Value : Boolean); begin
  FStateful := Value;
  JSCode('stateful:' + VarToJSON([Value]));
end;

procedure TExtStateStateful.SetFStateId(Value : String); begin
  FStateId := Value;
  JSCode('stateId:' + VarToJSON([Value]));
end;

procedure TExtStateStateful.SetFStateEvents(Value : TExtObjectList); begin
  FStateEvents := Value;
  Value.DeleteFromGarbage;
  JSCode('stateEvents:' + VarToJSON([Value, false]));
end;

procedure TExtStateStateful.SetFSaveDelay(Value : Integer); begin
  FSaveDelay := Value;
  JSCode('saveDelay:' + VarToJSON([Value]));
end;

procedure TExtStateStateful.SetFOnBeforestaterestore(Value : TExtStateStatefulOnBeforestaterestore); begin
  if Assigned(FOnBeforestaterestore) then
    JSCode(JSName+'.events ["beforestaterestore"].listeners=[];');
  if Assigned(Value) then
    On('beforestaterestore', Ajax('beforestaterestore', ['This', '%0.nm','State', '%1.nm'], true));
  FOnBeforestaterestore := Value;
end;

procedure TExtStateStateful.SetFOnStaterestore(Value : TExtStateStatefulOnStaterestore); begin
  if Assigned(FOnStaterestore) then
    JSCode(JSName+'.events ["staterestore"].listeners=[];');
  if Assigned(Value) then
    On('staterestore', Ajax('staterestore', ['This', '%0.nm','State', '%1.nm'], true));
  FOnStaterestore := Value;
end;

procedure TExtStateStateful.SetFOnBeforestatesave(Value : TExtStateStatefulOnBeforestatesave); begin
  if Assigned(FOnBeforestatesave) then
    JSCode(JSName+'.events ["beforestatesave"].listeners=[];');
  if Assigned(Value) then
    On('beforestatesave', Ajax('beforestatesave', ['This', '%0.nm','State', '%1.nm'], true));
  FOnBeforestatesave := Value;
end;

procedure TExtStateStateful.SetFOnStatesave(Value : TExtStateStatefulOnStatesave); begin
  if Assigned(FOnStatesave) then
    JSCode(JSName+'.events ["statesave"].listeners=[];');
  if Assigned(Value) then
    On('statesave', Ajax('statesave', ['This', '%0.nm','State', '%1.nm'], true));
  FOnStatesave := Value;
end;

function TExtStateStateful.JSClassName : string; begin
  Result := 'Ext-state-Stateful';
end;

procedure TExtStateStateful.InitDefaults; begin
  inherited;
  FStateEvents := TExtObjectList.Create(Self, 'stateEvents');
end;

{$IFDEF FPC}constructor TExtStateStateful.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtStateStateful.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtStateStateful.AddStateEvents(Events : String) : TExtFunction; begin
  JSCode(JSName + '.addStateEvents(' + VarToJSON([Events]) + ');', 'TExtStateStateful');
  Result := Self;
end;

function TExtStateStateful.AddStateEvents(Events : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.AddStateEvents(' + VarToJSON(Events) + ');', 'TExtStateStateful');
  Result := Self;
end;

function TExtStateStateful.GetState : TExtFunction; begin
  JSCode(JSName + '.getState();', 'TExtStateStateful');
  Result := Self;
end;

function TExtStateStateful.ApplyState(State : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.applyState(' + VarToJSON([State, false]) + ');', 'TExtStateStateful');
  Result := Self;
end;

function TExtStateStateful.GetStateId : TExtFunction; begin
  JSCode(JSName + '.getStateId();', 'TExtStateStateful');
  Result := Self;
end;

function TExtStateStateful.SavePropToState(PropName : String; State : TExtObject; StateName : String = '') : TExtFunction; begin
  JSCode(JSName + '.savePropToState(' + VarToJSON([PropName, State, false, StateName]) + ');', 'TExtStateStateful');
  Result := Self;
end;

function TExtStateStateful.DestroyJS : TExtFunction; begin
  JSCode(JSName + '.destroy();', 'TExtStateStateful');
  Result := Self;
end;

destructor TExtStateStateful.Destroy; begin
  try
    FStateEvents.Free;
  except end;
  inherited;
end;

procedure TExtStateStateful.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforestaterestore') and Assigned(FOnBeforestaterestore) then
    FOnBeforestaterestore(TExtStateStateful(ParamAsObject('This')), TExtObject(ParamAsObject('State')))
  else if (AEvtName = 'staterestore') and Assigned(FOnStaterestore) then
    FOnStaterestore(TExtStateStateful(ParamAsObject('This')), TExtObject(ParamAsObject('State')))
  else if (AEvtName = 'beforestatesave') and Assigned(FOnBeforestatesave) then
    FOnBeforestatesave(TExtStateStateful(ParamAsObject('This')), TExtObject(ParamAsObject('State')))
  else if (AEvtName = 'statesave') and Assigned(FOnStatesave) then
    FOnStatesave(TExtStateStateful(ParamAsObject('This')), TExtObject(ParamAsObject('State')));
end;

procedure TExtChartLabel.SetFLabelJS(Value : TExtObject); begin
  FLabelJS := Value;
  Value.DeleteFromGarbage;
  JSCode('labelJS:' + VarToJSON([Value, false]));
end;

function TExtChartLabel.JSClassName : string; begin
  Result := 'Ext-chart-Label';
end;

procedure TExtChartLabel.InitDefaults; begin
  inherited;
  FLabelJS := TExtObject.CreateInternal(Self, 'labelJS');
end;

{$IFDEF FPC}constructor TExtChartLabel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtChartLabel.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

destructor TExtChartLabel.Destroy; begin
  try
    FLabelJS.Free;
  except end;
  inherited;
end;

function TString.JSClassName : string; begin
  Result := 'String';
end;

{$IFDEF FPC}constructor TString.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TString.Create(Value : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Value, false]) + ');');
  InitDefaults;
end;

function TString.FromCharCode(Num1 : Integer) : TExtFunction; begin
  JSCode(JSName + '.fromCharCode(' + VarToJSON([Num1]) + ');', 'TString');
  Result := Self;
end;

function TString.CharAt(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.charAt(' + VarToJSON([Index]) + ');', 'TString');
  Result := Self;
end;

function TString.CharCodeAt(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.charCodeAt(' + VarToJSON([Index]) + ');', 'TString');
  Result := Self;
end;

function TString.Concat(String2StringN : String) : TExtFunction; begin
  JSCode(JSName + '.concat(' + VarToJSON([String2StringN]) + ');', 'TString');
  Result := Self;
end;

function TString.IndexOf(SearchValue : String; FromIndex : Integer) : TExtFunction; begin
  JSCode(JSName + '.indexOf(' + VarToJSON([SearchValue, FromIndex]) + ');', 'TString');
  Result := Self;
end;

function TString.LastIndexOf(SearchValue : String; FromIndex : Integer) : TExtFunction; begin
  JSCode(JSName + '.lastIndexOf(' + VarToJSON([SearchValue, FromIndex]) + ');', 'TString');
  Result := Self;
end;

function TString.LocaleCompare(CompareString : String) : TExtFunction; begin
  JSCode(JSName + '.localeCompare(' + VarToJSON([CompareString]) + ');', 'TString');
  Result := Self;
end;

function TString.Match(Regexp : TRegExp) : TExtFunction; begin
  JSCode(JSName + '.match(' + VarToJSON([#3 + Regexp]) + ');', 'TString');
  Result := Self;
end;

function TString.Replace(Regexp : TRegExp; Substr : String; NewSubStr : String; FunctionJS : TExtFunction) : TExtFunction; begin
  JSCode(JSName + '.replace(' + VarToJSON([#3 + Regexp, Substr, NewSubStr, FunctionJS, true]) + ');', 'TString');
  Result := Self;
end;

function TString.Search(Regexp : TRegExp) : TExtFunction; begin
  JSCode(JSName + '.search(' + VarToJSON([#3 + Regexp]) + ');', 'TString');
  Result := Self;
end;

function TString.Slice(BeginSlice : Integer; EndSlice : Integer) : TExtFunction; begin
  JSCode(JSName + '.slice(' + VarToJSON([BeginSlice, EndSlice]) + ');', 'TString');
  Result := Self;
end;

function TString.Split(Seperator : String; Limit : Integer) : TExtFunction; begin
  JSCode(JSName + '.split(' + VarToJSON([Seperator, Limit]) + ');', 'TString');
  Result := Self;
end;

function TString.Substr(Start : Integer; Length : Integer) : TExtFunction; begin
  JSCode(JSName + '.substr(' + VarToJSON([Start, Length]) + ');', 'TString');
  Result := Self;
end;

function TString.Substring(IndexA : Integer; IndexB : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.substring(' + VarToJSON([IndexA, IndexB]) + ');', 'TString');
  Result := Self;
end;

function TString.ToLocaleLowerCase : TExtFunction; begin
  JSCode(JSName + '.toLocaleLowerCase();', 'TString');
  Result := Self;
end;

function TString.ToLocaleUpperCase : TExtFunction; begin
  JSCode(JSName + '.toLocaleUpperCase();', 'TString');
  Result := Self;
end;

function TString.ToLowerCase : TExtFunction; begin
  JSCode(JSName + '.toLowerCase();', 'TString');
  Result := Self;
end;

function TString.ToString : TExtFunction; begin
  JSCode(JSName + '.toString();', 'TString');
  Result := Self;
end;

function TString.ToUpperCase : TExtFunction; begin
  JSCode(JSName + '.toUpperCase();', 'TString');
  Result := Self;
end;

function TString.ValueOf : TExtFunction; begin
  JSCode(JSName + '.valueOf();', 'TString');
  Result := Self;
end;

function TExtWindowMessageBox.JSClassName : string; begin
  Result := 'Ext-window-MessageBox';
end;

{$IFDEF FPC}constructor TExtWindowMessageBox.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtWindowMessageBox.Show(Config : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.show(' + VarToJSON([Config, false]) + ');', 'TExtWindowMessageBox');
  Result := Self;
end;

function TExtWindowMessageBox.SetIcon(Icon : String) : TExtFunction; begin
  JSCode(JSName + '.setIcon(' + VarToJSON([Icon]) + ');', 'TExtWindowMessageBox');
  Result := Self;
end;

function TExtWindowMessageBox.UpdateProgress(Value : Integer = 0; ProgressText : String = ''; Msg : String = '') : TExtFunction; begin
  JSCode(JSName + '.updateProgress(' + VarToJSON([Value, ProgressText, Msg]) + ');', 'TExtWindowMessageBox');
  Result := Self;
end;

function TExtWindowMessageBox.Confirm(Title : String; Msg : String; Fn : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.confirm(' + VarToJSON([Title, Msg, Fn, true, Scope, false]) + ');', 'TExtWindowMessageBox');
  Result := Self;
end;

function TExtWindowMessageBox.Prompt(Title : String; Msg : String; Fn : TExtFunction = nil; Scope : TExtObject = nil; Multiline : Boolean = false; Value : String = '') : TExtFunction; begin
  JSCode(JSName + '.prompt(' + VarToJSON([Title, Msg, Fn, true, Scope, false, Multiline, Value]) + ');', 'TExtWindowMessageBox');
  Result := Self;
end;

function TExtWindowMessageBox.Prompt(Title : String; Msg : String; Fn : TExtFunction; Scope : TExtObject; Multiline : Integer; Value : String = '') : TExtFunction; begin
  JSCode(JSName + '.Prompt(' + VarToJSON([Title, Msg, Fn, true, Scope, false, Multiline, Value]) + ');', 'TExtWindowMessageBox');
  Result := Self;
end;

function TExtWindowMessageBox.Wait(Msg : String; Title : String = ''; Config : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.wait(' + VarToJSON([Msg, Title, Config, false]) + ');', 'TExtWindowMessageBox');
  Result := Self;
end;

function TExtWindowMessageBox.Alert(Title : String; Msg : String; Fn : TExtFunction = nil; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.alert(' + VarToJSON([Title, Msg, Fn, true, Scope, false]) + ');', 'TExtWindowMessageBox');
  Result := Self;
end;

function TExtWindowMessageBox.Progress(Title : String; Msg : String; ProgressText : String = '') : TExtFunction; begin
  JSCode(JSName + '.progress(' + VarToJSON([Title, Msg, ProgressText]) + ');', 'TExtWindowMessageBox');
  Result := Self;
end;

procedure TExtDataStore.SetFRemoteSort(Value : Boolean); begin
  FRemoteSort := Value;
  JSCode('remoteSort:' + VarToJSON([Value]));
end;

procedure TExtDataStore.SetFRemoteFilter(Value : Boolean); begin
  FRemoteFilter := Value;
  JSCode('remoteFilter:' + VarToJSON([Value]));
end;

procedure TExtDataStore.SetFRemoteGroup(Value : Boolean); begin
  FRemoteGroup := Value;
  JSCode('remoteGroup:' + VarToJSON([Value]));
end;

procedure TExtDataStore.SetFProxy(Value : String); begin
  FProxy := Value;
  JSCode('proxy:' + VarToJSON([Value]));
end;

procedure TExtDataStore.SetFProxyTExtDataProxyProxy(Value : TExtDataProxyProxy); begin
  FProxyTExtDataProxyProxy := Value;
  Value.DeleteFromGarbage;
  JSCode('proxy:' + VarToJSON([Value, false]));
end;

procedure TExtDataStore.SetFProxyTExtObject(Value : TExtObject); begin
  FProxyTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('proxy:' + VarToJSON([Value, false]));
end;

procedure TExtDataStore.SetFData(Value : TExtObjectList); begin
  FData := Value;
  Value.DeleteFromGarbage;
  JSCode('data:' + VarToJSON([Value, false]));
end;

procedure TExtDataStore.SetFDataTExtObjectList(Value : TExtObjectList); begin
  FDataTExtObjectList := Value;
  Value.DeleteFromGarbage;
  JSCode('data:' + VarToJSON([Value, false]));
end;

procedure TExtDataStore.SetFPageSize(Value : Integer); begin
  FPageSize := Value;
  JSCode('pageSize:' + VarToJSON([Value]));
end;

procedure TExtDataStore.SetFClearOnPageLoad(Value : Boolean); begin
  FClearOnPageLoad := Value;
  JSCode('clearOnPageLoad:' + VarToJSON([Value]));
end;

procedure TExtDataStore.SetFSortOnFilter(Value : Boolean); begin
  FSortOnFilter := Value;
  JSCode('sortOnFilter:' + VarToJSON([Value]));
end;

procedure TExtDataStore.SetFBuffered(Value : Boolean); begin
  FBuffered := Value;
  JSCode('buffered:' + VarToJSON([Value]));
end;

procedure TExtDataStore.SetFPurgePageCount(Value : Integer); begin
  FPurgePageCount := Value;
  JSCode('purgePageCount:' + VarToJSON([Value]));
end;

procedure TExtDataStore.SetFOnBeforeprefetch(Value : TExtDataStoreOnBeforeprefetch); begin
  if Assigned(FOnBeforeprefetch) then
    JSCode(JSName+'.events ["beforeprefetch"].listeners=[];');
  if Assigned(Value) then
    On('beforeprefetch', Ajax('beforeprefetch', ['This', '%0.nm','Operation', '%1.nm'], true));
  FOnBeforeprefetch := Value;
end;

procedure TExtDataStore.SetFOnGroupchange(Value : TExtDataStoreOnGroupchange); begin
  if Assigned(FOnGroupchange) then
    JSCode(JSName+'.events ["groupchange"].listeners=[];');
  if Assigned(Value) then
    On('groupchange', Ajax('groupchange', ['Store', '%0.nm','Groupers', '%1.nm'], true));
  FOnGroupchange := Value;
end;

procedure TExtDataStore.SetFOnLoad(Value : TExtDataStoreOnLoad); begin
  if Assigned(FOnLoad) then
    JSCode(JSName+'.events ["load"].listeners=[];');
  if Assigned(Value) then
    On('load', Ajax('load', ['This', '%0.nm','Records', '%1.nm','Successful', '%2','Operation', '%3.nm'], true));
  FOnLoad := Value;
end;

function TExtDataStore.JSClassName : string; begin
  Result := 'Ext-data-Store';
end;

procedure TExtDataStore.InitDefaults; begin
  inherited;
  FProxyTExtDataProxyProxy := TExtDataProxyProxy.CreateInternal(Self, 'proxy');
  FProxyTExtObject := TExtObject.CreateInternal(Self, 'proxy');
  FData := TExtObjectList.Create(Self, 'data');
  FDataTExtObjectList := TExtObjectList.Create(Self, 'data');
end;

{$IFDEF FPC}constructor TExtDataStore.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataStore.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDataStore.Group(Groupers : String; Direction : String) : TExtFunction; begin
  JSCode(JSName + '.group(' + VarToJSON([Groupers, Direction]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Group(Groupers : TExtObjectList; Direction : String) : TExtFunction; begin
  JSCode(JSName + '.Group(' + VarToJSON(Groupers) + ',' + VarToJSON([Direction]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.ClearGrouping : TExtFunction; begin
  JSCode(JSName + '.clearGrouping();', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.IsGrouped : TExtFunction; begin
  JSCode(JSName + '.isGrouped();', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.GetGroups(GroupName : String = '') : TExtFunction; begin
  JSCode(JSName + '.getGroups(' + VarToJSON([GroupName]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.GetGroupString(Instance : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.getGroupString(' + VarToJSON([Instance, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Insert(Index : Integer; Records : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.insert(' + VarToJSON([Index]) + ',' + VarToJSON(Records) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Add(Model : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.add(' + VarToJSON(Model) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Add(Model : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.Add(' + VarToJSON([Model, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Each(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.each(' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Remove(Records : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.remove(' + VarToJSON([Records, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Remove(Records : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.Remove(' + VarToJSON(Records) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.RemoveAt(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.removeAt(' + VarToJSON([Index]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Load(Options : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.load(' + VarToJSON([Options, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Load(Options : TExtFunction) : TExtFunction; begin
  JSCode(JSName + '.Load(' + VarToJSON([Options, true]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Filter(Filters : TExtObjectList; Value : String = '') : TExtFunction; begin
  JSCode(JSName + '.filter(' + VarToJSON(Filters) + ',' + VarToJSON([Value]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Filter(Filters : String; Value : String = '') : TExtFunction; begin
  JSCode(JSName + '.Filter(' + VarToJSON([Filters, Value]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.ClearFilter(SuppressEvent : Boolean) : TExtFunction; begin
  JSCode(JSName + '.clearFilter(' + VarToJSON([SuppressEvent]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.IsFiltered : TExtFunction; begin
  JSCode(JSName + '.isFiltered();', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.FilterBy(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.filterBy(' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.QueryBy(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.queryBy(' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.LoadData(Data : TExtObjectList; Append : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.loadData(' + VarToJSON(Data) + ',' + VarToJSON([Append]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.LoadRawData(Data : TExtObjectList; Append : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.loadRawData(' + VarToJSON(Data) + ',' + VarToJSON([Append]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.LoadRecords(Records : TExtObjectList; Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.loadRecords(' + VarToJSON(Records) + ',' + VarToJSON([Options, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.LoadPage(Page : Integer; Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.loadPage(' + VarToJSON([Page, Options, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.NextPage(Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.nextPage(' + VarToJSON([Options, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.PreviousPage(Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.previousPage(' + VarToJSON([Options, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Prefetch(Options : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.prefetch(' + VarToJSON([Options, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.PrefetchPage(Page : Integer; Options : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.prefetchPage(' + VarToJSON([Page, Options, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.PurgeRecords : TExtFunction; begin
  JSCode(JSName + '.purgeRecords();', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.GetPageFromRecordIndex(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.getPageFromRecordIndex(' + VarToJSON([Index]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.HasPendingRequests : TExtFunction; begin
  JSCode(JSName + '.hasPendingRequests();', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.GuaranteeRange : TExtFunction; begin
  JSCode(JSName + '.guaranteeRange();', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Find(FieldName : String; Value : String; StartIndex : Integer = 0; AnyMatch : Boolean = false; CaseSensitive : Boolean = false; ExactMatch : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.find(' + VarToJSON([FieldName, Value, StartIndex, AnyMatch, CaseSensitive, ExactMatch]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Find(FieldName : String; Value : TRegExp; StartIndex : Integer = 0; AnyMatch : Boolean = false; CaseSensitive : Boolean = false; ExactMatch : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.Find(' + VarToJSON([FieldName, #3 + Value, StartIndex, AnyMatch, CaseSensitive, ExactMatch]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.FindRecord(FieldName : String; Value : String; StartIndex : Integer = 0; AnyMatch : Boolean = false; CaseSensitive : Boolean = false; ExactMatch : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.findRecord(' + VarToJSON([FieldName, Value, StartIndex, AnyMatch, CaseSensitive, ExactMatch]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.FindRecord(FieldName : String; Value : TRegExp; StartIndex : Integer = 0; AnyMatch : Boolean = false; CaseSensitive : Boolean = false; ExactMatch : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.FindRecord(' + VarToJSON([FieldName, #3 + Value, StartIndex, AnyMatch, CaseSensitive, ExactMatch]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.FindExact(FieldName : String; Value : TExtObject; StartIndex : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.findExact(' + VarToJSON([FieldName, Value, false, StartIndex]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.FindBy(Fn : TExtFunction; Scope : TExtObject = nil; StartIndex : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.findBy(' + VarToJSON([Fn, true, Scope, false, StartIndex]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Collect(DataIndex : String; AllowNull : Boolean = false; BypassFilter : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.collect(' + VarToJSON([DataIndex, AllowNull, BypassFilter]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.GetCount : TExtFunction; begin
  JSCode(JSName + '.getCount();', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.GetTotalCount : TExtFunction; begin
  JSCode(JSName + '.getTotalCount();', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.GetAt(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.getAt(' + VarToJSON([Index]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.GetRange(StartIndex : Integer = 0; EndIndex : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.getRange(' + VarToJSON([StartIndex, EndIndex]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.GetById(Id : String) : TExtFunction; begin
  JSCode(JSName + '.getById(' + VarToJSON([Id]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.IndexOf(RecordJS : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.indexOf(' + VarToJSON([RecordJS, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.IndexOfTotal(RecordJS : TExtDataModel) : TExtFunction; begin
  JSCode(JSName + '.indexOfTotal(' + VarToJSON([RecordJS, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.IndexOfId(Id : String) : TExtFunction; begin
  JSCode(JSName + '.indexOfId(' + VarToJSON([Id]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.RemoveAll(Silent : Boolean) : TExtFunction; begin
  JSCode(JSName + '.removeAll(' + VarToJSON([Silent]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.First(Grouped : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.first(' + VarToJSON([Grouped]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Last(Grouped : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.last(' + VarToJSON([Grouped]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Sum(Field : String; Grouped : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.sum(' + VarToJSON([Field, Grouped]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Count(Grouped : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.count(' + VarToJSON([Grouped]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Min(Field : String; Grouped : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.min(' + VarToJSON([Field, Grouped]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Max(Field : String; Grouped : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.max(' + VarToJSON([Field, Grouped]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Average(Field : String; Grouped : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.average(' + VarToJSON([Field, Grouped]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Aggregate(Fn : TExtFunction; Scope : TExtObject = nil; Grouped : Boolean = false; Args : TExtObjectList = nil) : TExtFunction; begin
  JSCode(JSName + '.aggregate(' + VarToJSON([Fn, true, Scope, false, Grouped]) + ',' + VarToJSON(Args) + ');', 'TExtDataStore');
  Result := Self;
end;

destructor TExtDataStore.Destroy; begin
  try
    FProxyTExtDataProxyProxy.Free;
    FProxyTExtObject.Free;
    FData.Free;
    FDataTExtObjectList.Free;
  except end;
  inherited;
end;

procedure TExtDataStore.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforeprefetch') and Assigned(FOnBeforeprefetch) then
    FOnBeforeprefetch(TExtDataStore(ParamAsObject('This')), TExtDataOperation(ParamAsObject('Operation')))
  else if (AEvtName = 'groupchange') and Assigned(FOnGroupchange) then
    FOnGroupchange(TExtDataStore(ParamAsObject('Store')), TExtObjectList(ParamAsObject('Groupers')))
  else if (AEvtName = 'load') and Assigned(FOnLoad) then
    FOnLoad(TExtDataStore(ParamAsObject('This')), TExtObjectList(ParamAsObject('Records')), ParamAsBoolean('Successful'), TExtDataOperation(ParamAsObject('Operation')));
end;

function TExtTipQuickTipManagerSingleton.JSClassName : string; begin
  Result := 'Ext-tip-QuickTipManagerSingleton';
end;

{$IFDEF FPC}constructor TExtTipQuickTipManagerSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtTipQuickTipManagerSingleton.Init(AutoRender : Boolean = false; Config : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.init(' + VarToJSON([AutoRender, Config, false]) + ');', 'TExtTipQuickTipManagerSingleton');
  Result := Self;
end;

function TExtTipQuickTipManagerSingleton.DestroyJS : TExtFunction; begin
  JSCode(JSName + '.destroy();', 'TExtTipQuickTipManagerSingleton');
  Result := Self;
end;

function TExtTipQuickTipManagerSingleton.Enable : TExtFunction; begin
  JSCode(JSName + '.enable();', 'TExtTipQuickTipManagerSingleton');
  Result := Self;
end;

function TExtTipQuickTipManagerSingleton.Disable : TExtFunction; begin
  JSCode(JSName + '.disable();', 'TExtTipQuickTipManagerSingleton');
  Result := Self;
end;

function TExtTipQuickTipManagerSingleton.IsEnabled : TExtFunction; begin
  JSCode(JSName + '.isEnabled();', 'TExtTipQuickTipManagerSingleton');
  Result := Self;
end;

function TExtTipQuickTipManagerSingleton.GetQuickTip : TExtFunction; begin
  JSCode(JSName + '.getQuickTip();', 'TExtTipQuickTipManagerSingleton');
  Result := Self;
end;

function TExtTipQuickTipManagerSingleton.Register(Config : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.register(' + VarToJSON([Config, false]) + ');', 'TExtTipQuickTipManagerSingleton');
  Result := Self;
end;

function TExtTipQuickTipManagerSingleton.Unregister(El : String) : TExtFunction; begin
  JSCode(JSName + '.unregister(' + VarToJSON([El]) + ');', 'TExtTipQuickTipManagerSingleton');
  Result := Self;
end;

function TExtTipQuickTipManagerSingleton.Unregister(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.Unregister(' + VarToJSON([El, false]) + ');', 'TExtTipQuickTipManagerSingleton');
  Result := Self;
end;

function TExtTipQuickTipManagerSingleton.Unregister(El : TExtElement) : TExtFunction; begin
  JSCode(JSName + '.Unregister(' + VarToJSON([El, false]) + ');', 'TExtTipQuickTipManagerSingleton');
  Result := Self;
end;

function TExtTipQuickTipManagerSingleton.Tips(Config : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.tips(' + VarToJSON([Config, false]) + ');', 'TExtTipQuickTipManagerSingleton');
  Result := Self;
end;

procedure TExtMenuMenu.SetFAllowOtherMenus(Value : Boolean); begin
  FAllowOtherMenus := Value;
  JSCode('allowOtherMenus:' + VarToJSON([Value]));
end;

procedure TExtMenuMenu.SetFAriaRole(Value : String); begin
  FAriaRole := Value;
  JSCode('ariaRole:' + VarToJSON([Value]));
end;

procedure TExtMenuMenu.SetFAutoRender(Value : Boolean); begin
  FAutoRender := Value;
  JSCode('autoRender:' + VarToJSON([Value]));
end;

procedure TExtMenuMenu.SetFDefaultAlign(Value : String); begin
  FDefaultAlign := Value;
  JSCode('defaultAlign:' + VarToJSON([Value]));
end;

procedure TExtMenuMenu.SetFFloating(Value : Boolean); begin
  FFloating := Value;
  JSCode('floating:' + VarToJSON([Value]));
end;

procedure TExtMenuMenu.SetFHide(Value : Boolean); begin
  FHide := Value;
  JSCode('hide:' + VarToJSON([Value]));
end;

procedure TExtMenuMenu.SetFHidden(Value : Boolean); begin
  FHidden := Value;
  JSCode('hidden:' + VarToJSON([Value]));
end;

procedure TExtMenuMenu.SetFIgnoreParentClicks(Value : Boolean); begin
  FIgnoreParentClicks := Value;
  JSCode('ignoreParentClicks:' + VarToJSON([Value]));
end;

procedure TExtMenuMenu.SetFLayout(Value : String); begin
  FLayout := Value;
  JSCode('layout:' + VarToJSON([Value]));
end;

procedure TExtMenuMenu.SetFLayoutTExtObject(Value : TExtObject); begin
  FLayoutTExtObject := Value;
  Value.DeleteFromGarbage;
  JSCode('layout:' + VarToJSON([Value, false]));
end;

procedure TExtMenuMenu.SetFShowSeparator(Value : Boolean); begin
  FShowSeparator := Value;
  JSCode('showSeparator:' + VarToJSON([Value]));
end;

procedure TExtMenuMenu.SetFMinWidth(Value : Integer); begin
  FMinWidth := Value;
  JSCode('minWidth:' + VarToJSON([Value]));
end;

procedure TExtMenuMenu.SetFPlain(Value : Boolean); begin
  FPlain := Value;
  JSCode('plain:' + VarToJSON([Value]));
end;

procedure TExtMenuMenu.SetFOnClick(Value : TExtMenuMenuOnClick); begin
  if Assigned(FOnClick) then
    JSCode(JSName+'.events ["click"].listeners=[];');
  if Assigned(Value) then
    On('click', Ajax('click', ['Menu', '%0.nm','Item', '%1.nm','E', '%2.nm'], true));
  FOnClick := Value;
end;

procedure TExtMenuMenu.SetFOnMouseenter(Value : TExtMenuMenuOnMouseenter); begin
  if Assigned(FOnMouseenter) then
    JSCode(JSName+'.events ["mouseenter"].listeners=[];');
  if Assigned(Value) then
    On('mouseenter', Ajax('mouseenter', ['Menu', '%0.nm','E', '%1.nm'], true));
  FOnMouseenter := Value;
end;

procedure TExtMenuMenu.SetFOnMouseleave(Value : TExtMenuMenuOnMouseleave); begin
  if Assigned(FOnMouseleave) then
    JSCode(JSName+'.events ["mouseleave"].listeners=[];');
  if Assigned(Value) then
    On('mouseleave', Ajax('mouseleave', ['Menu', '%0.nm','E', '%1.nm'], true));
  FOnMouseleave := Value;
end;

procedure TExtMenuMenu.SetFOnMouseover(Value : TExtMenuMenuOnMouseover); begin
  if Assigned(FOnMouseover) then
    JSCode(JSName+'.events ["mouseover"].listeners=[];');
  if Assigned(Value) then
    On('mouseover', Ajax('mouseover', ['Menu', '%0.nm','Item', '%1.nm','E', '%2.nm'], true));
  FOnMouseover := Value;
end;

function TExtMenuMenu.JSClassName : string; begin
  Result := 'Ext-menu-Menu';
end;

procedure TExtMenuMenu.InitDefaults; begin
  inherited;
  FLayoutTExtObject := TExtObject.CreateInternal(Self, 'layout');
end;

{$IFDEF FPC}constructor TExtMenuMenu.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtMenuMenu.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtMenuMenu.CanActivateItem : TExtFunction; begin
  JSCode(JSName + '.canActivateItem();', 'TExtMenuMenu');
  Result := Self;
end;

function TExtMenuMenu.DeactivateActiveItem : TExtFunction; begin
  JSCode(JSName + '.deactivateActiveItem();', 'TExtMenuMenu');
  Result := Self;
end;

function TExtMenuMenu.ShowBy(Component : TExtComponent; Position : String = ''; Offsets : TArrayOfInteger = nil) : TExtFunction; begin
  JSCode(JSName + '.showBy(' + VarToJSON([Component, false, Position, Offsets]) + ');', 'TExtMenuMenu');
  Result := Self;
end;

function TExtMenuMenu.ShowBy(Component : TExtElement; Position : String = ''; Offsets : TArrayOfInteger = nil) : TExtFunction; begin
  JSCode(JSName + '.ShowBy(' + VarToJSON([Component, false, Position, Offsets]) + ');', 'TExtMenuMenu');
  Result := Self;
end;

destructor TExtMenuMenu.Destroy; begin
  try
    FLayoutTExtObject.Free;
  except end;
  inherited;
end;

procedure TExtMenuMenu.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'click') and Assigned(FOnClick) then
    FOnClick(TExtMenuMenu(ParamAsObject('Menu')), TExtComponent(ParamAsObject('Item')), ExtEventObject)
  else if (AEvtName = 'mouseenter') and Assigned(FOnMouseenter) then
    FOnMouseenter(TExtMenuMenu(ParamAsObject('Menu')), ExtEventObject)
  else if (AEvtName = 'mouseleave') and Assigned(FOnMouseleave) then
    FOnMouseleave(TExtMenuMenu(ParamAsObject('Menu')), ExtEventObject)
  else if (AEvtName = 'mouseover') and Assigned(FOnMouseover) then
    FOnMouseover(TExtMenuMenu(ParamAsObject('Menu')), TExtComponent(ParamAsObject('Item')), ExtEventObject);
end;

procedure TExtChartLegend.SetFVisible(Value : Boolean); begin
  FVisible := Value;
  JSCode('visible:' + VarToJSON([Value]));
end;

procedure TExtChartLegend.SetFPosition(Value : String); begin
  FPosition := Value;
  JSCode('position:' + VarToJSON([Value]));
end;

procedure TExtChartLegend.SetFX(Value : Integer); begin
  FX := Value;
  JSCode('x:' + VarToJSON([Value]));
end;

procedure TExtChartLegend.SetFY(Value : Integer); begin
  FY := Value;
  JSCode('y:' + VarToJSON([Value]));
end;

procedure TExtChartLegend.SetFLabelFont(Value : String); begin
  FLabelFont := Value;
  JSCode('labelFont:' + VarToJSON([Value]));
end;

procedure TExtChartLegend.SetFBoxStroke(Value : String); begin
  FBoxStroke := Value;
  JSCode('boxStroke:' + VarToJSON([Value]));
end;

procedure TExtChartLegend.SetFBoxStrokeWidth(Value : String); begin
  FBoxStrokeWidth := Value;
  JSCode('boxStrokeWidth:' + VarToJSON([Value]));
end;

procedure TExtChartLegend.SetFBoxFill(Value : String); begin
  FBoxFill := Value;
  JSCode('boxFill:' + VarToJSON([Value]));
end;

procedure TExtChartLegend.SetFItemSpacing(Value : Integer); begin
  FItemSpacing := Value;
  JSCode('itemSpacing:' + VarToJSON([Value]));
end;

procedure TExtChartLegend.SetFPadding(Value : Integer); begin
  FPadding := Value;
  JSCode('padding:' + VarToJSON([Value]));
end;

procedure TExtChartLegend.SetFBoxZIndex(Value : Integer); begin
  FBoxZIndex := Value;
  JSCode('boxZIndex:' + VarToJSON([Value]));
end;

function TExtChartLegend.JSClassName : string; begin
  Result := 'Ext-chart-Legend';
end;

{$IFDEF FPC}constructor TExtChartLegend.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtChartLegend.Create(Config : TExtObject); begin
  if Config = nil then CreateVar(JSClassName + '({});') else
  CreateVar(JSClassName + '(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

initialization
  ExtFormFieldVTypes := TExtFormFieldVTypesSingleton.CreateSingleton;
  ExtDate := TExtDateSingleton.CreateSingleton;
  ExtDirectManager := TExtDirectManagerSingleton.CreateSingleton;
  ExtString := TExtStringSingleton.CreateSingleton;
  ExtClassManager := TExtClassManagerSingleton.CreateSingleton;
  ExtDdDragDropManager := TExtDdDragDropManagerSingleton.CreateSingleton;
  ExtDomHelper := TExtDomHelperSingleton.CreateSingleton;
  ExtMenuManager := TExtMenuManagerSingleton.CreateSingleton;
  ExtDdRegistry := TExtDdRegistrySingleton.CreateSingleton;
  ExtEventObject := TExtEventObjectSingleton.CreateSingleton;
  ExtObject := TExtObjectSingleton.CreateSingleton;
  ExtDomQuery := TExtDomQuerySingleton.CreateSingleton;
  ExtFxEasing := TExtFxEasingSingleton.CreateSingleton;
  ExtPluginManager := TExtPluginManagerSingleton.CreateSingleton;
  ExtDataSortTypes := TExtDataSortTypesSingleton.CreateSingleton;
  ExtLoader := TExtLoaderSingleton.CreateSingleton;
  ExtViewTableChunker := TExtViewTableChunkerSingleton.CreateSingleton;
  ExtArray := TExtArraySingleton.CreateSingleton;
  ExtDataTypes := TExtDataTypesSingleton.CreateSingleton;
  ExtJSON := TExtJSONSingleton.CreateSingleton;
  ExtAjax := TExtAjaxSingleton.CreateSingleton;
  ExtUtilCSS := TExtUtilCSSSingleton.CreateSingleton;
  ExtNumber := TExtNumberSingleton.CreateSingleton;
  ExtEventManager := TExtEventManagerSingleton.CreateSingleton;
  ExtFocusManager := TExtFocusManagerSingleton.CreateSingleton;
  ExtFunction := TExtFunctionSingleton.CreateSingleton;
  ExtDdScrollManager := TExtDdScrollManagerSingleton.CreateSingleton;
  ExtUtilHistory := TExtUtilHistorySingleton.CreateSingleton;
  ExtDataJsonP := TExtDataJsonPSingleton.CreateSingleton;
  ExtComponentManager := TExtComponentManagerSingleton.CreateSingleton;
  Ext := TExtSingleton.CreateSingleton;
  ExtUtilFormat := TExtUtilFormatSingleton.CreateSingleton;
  ExtStateManager := TExtStateManagerSingleton.CreateSingleton;
  ExtIs := TExtIsSingleton.CreateSingleton;
  ExtUtilCookies := TExtUtilCookiesSingleton.CreateSingleton;
  ExtModelManager := TExtModelManagerSingleton.CreateSingleton;
  ExtTipQuickTipManager := TExtTipQuickTipManagerSingleton.CreateSingleton;

finalization
  ExtTipQuickTipManager.Destroy;
  ExtModelManager.Destroy;
  ExtUtilCookies.Destroy;
  ExtIs.Destroy;
  ExtStateManager.Destroy;
  ExtUtilFormat.Destroy;
  Ext.Destroy;
  ExtComponentManager.Destroy;
  ExtDataJsonP.Destroy;
  ExtUtilHistory.Destroy;
  ExtDdScrollManager.Destroy;
  ExtFunction.Destroy;
  ExtFocusManager.Destroy;
  ExtEventManager.Destroy;
  ExtNumber.Destroy;
  ExtUtilCSS.Destroy;
  ExtAjax.Destroy;
  ExtJSON.Destroy;
  ExtDataTypes.Destroy;
  ExtArray.Destroy;
  ExtViewTableChunker.Destroy;
  ExtLoader.Destroy;
  ExtDataSortTypes.Destroy;
  ExtPluginManager.Destroy;
  ExtFxEasing.Destroy;
  ExtDomQuery.Destroy;
  ExtObject.Destroy;
  ExtEventObject.Destroy;
  ExtDdRegistry.Destroy;
  ExtMenuManager.Destroy;
  ExtDomHelper.Destroy;
  ExtDdDragDropManager.Destroy;
  ExtClassManager.Destroy;
  ExtString.Destroy;
  ExtDirectManager.Destroy;
  ExtDate.Destroy;
  ExtFormFieldVTypes.Destroy;
end.