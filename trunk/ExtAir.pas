unit ExtAir;

// Generated by ExtToPascal v.0.9.8, at 6/1/2010 11:41:27
// from "C:\Trabalho\ext-3.0.0\docs\output" detected as ExtJS v.3

interface

uses
  StrUtils, ExtPascal, ExtPascalUtils, ExtState, ExtUtil, ExtData, Ext;

type
  TExtAirSystemMenuSingleton = class;
  TExtAirNativeWindowGroup = class;
  TExtAirSoundSingleton = class;
  TExtAirDragTypeSingleton = class;
  TExtAirNativeWindowManagerSingleton = class;
  TExtAirNativeObservable = class;
  TExtAirFileProvider = class;
  TExtAirNativeWindow = class;

  TExtAirSystemMenuSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Add(Text : string; Actions : TExtObjectList; Mindex : Integer) : TExtFunction;
    function Get : TExtFunction;
  end;

  TExtAirNativeWindowGroup = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function CloseAll : TExtFunction;
    function Each(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction;
    function Get(Id : string) : TExtFunction;
    function Register(Win : TExtObject) : TExtFunction;
    function Unregister(Win : TExtObject) : TExtFunction;
  end;

  TExtAirSoundSingleton = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Play(FileJS : string; StartAt : Integer = 0) : TExtFunction;
  end;

  TExtAirDragTypeSingleton = class(TExtFunction)
  private
    FMatchers : TExtObject;
    FPseudos : TExtObject;
    procedure SetFMatchers(Value : TExtObject);
    procedure SetFPseudos(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    class function BITMAP : TExtObject;
    class function FILES : TExtObject;
    class function HTML : TExtObject;
    class function TEXT : TExtObject;
    class function URL : TExtObject;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Filter(El : TExtObjectList; Selector : string; NonMatches : Boolean) : TExtFunction;
    function IsJS(El : string; Selector : string) : TExtFunction; overload;
    function IsJS(El : THTMLElement; Selector : string) : TExtFunction; overload;
    function IsJS(El : TExtObjectList; Selector : string) : TExtFunction; overload;
    function Operators : TExtFunction;
    function Select(Selector : string; Root : TExtDataNode = nil) : TExtFunction;
    function SelectNode(Selector : string; Root : TExtDataNode = nil) : TExtFunction;
    function SelectNumber(Selector : string; Root : TExtDataNode = nil; DefaultValue : Integer = 0) : TExtFunction;
    function SelectValue(Selector : string; Root : TExtDataNode = nil; DefaultValue : string = '') : TExtFunction;
    destructor Destroy; override;
    property Matchers : TExtObject read FMatchers write SetFMatchers;
    property Pseudos : TExtObject read FPseudos write SetFPseudos;
  end;

  TExtAirNativeWindowManagerSingleton = class(TExtAirNativeWindowGroup)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtAirNativeObservable = class(TExtUtilObservable)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
  end;

  TExtAirFileProvider = class(TExtStateProvider)
  private
    FDefaultState : TExtObject;
    FFileJS : string;
    procedure SetFDefaultState(Value : TExtObject);
    procedure SetFFileJS(Value : string);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    destructor Destroy; override;
    property DefaultState : TExtObject read FDefaultState write SetFDefaultState;
    property FileJS : string read FFileJS write SetFFileJS;
  end;

  // Procedural types for events TExtAirNativeWindow
  TExtAirNativeWindowOnClose = procedure(E : TExtObject) of object;
  TExtAirNativeWindowOnClosing = procedure(E : TExtObject) of object;
  TExtAirNativeWindowOnDisplayStateChange = procedure(E : TExtObject) of object;
  TExtAirNativeWindowOnDisplayStateChanging = procedure(E : TExtObject) of object;
  TExtAirNativeWindowOnMove = procedure(E : TExtObject) of object;
  TExtAirNativeWindowOnMoving = procedure(E : TExtObject) of object;
  TExtAirNativeWindowOnResize = procedure(E : TExtObject) of object;
  TExtAirNativeWindowOnResizing = procedure(E : TExtObject) of object;

  TExtAirNativeWindow = class(TExtAirNativeObservable)
  private
    FChrome : string; // 'standard'
    FHeight : Integer;
    FInstance : TExtAirNativeWindow;
    FMaximizable : Boolean;
    FMinimizable : Boolean;
    FMinimizeToTray : Boolean;
    FResizable : Boolean;
    FTransparent : Boolean;
    FTrayIcon : string;
    FTrayMenu : TNativeMenu;
    FTrayTip : string;
    FTypeJS : string;
    FWidth : Integer;
    FId : string;
    FOnClose : TExtAirNativeWindowOnClose;
    FOnClosing : TExtAirNativeWindowOnClosing;
    FOnDisplayStateChange : TExtAirNativeWindowOnDisplayStateChange;
    FOnDisplayStateChanging : TExtAirNativeWindowOnDisplayStateChanging;
    FOnMove : TExtAirNativeWindowOnMove;
    FOnMoving : TExtAirNativeWindowOnMoving;
    FOnResize : TExtAirNativeWindowOnResize;
    FOnResizing : TExtAirNativeWindowOnResizing;
    procedure SetFChrome(Value : string);
    procedure SetFHeight(Value : Integer);
    procedure SetFInstance(Value : TExtAirNativeWindow);
    procedure SetFMaximizable(Value : Boolean);
    procedure SetFMinimizable(Value : Boolean);
    procedure SetFMinimizeToTray(Value : Boolean);
    procedure SetFResizable(Value : Boolean);
    procedure SetFTransparent(Value : Boolean);
    procedure SetFTrayIcon(Value : string);
    procedure SetFTrayMenu(Value : TNativeMenu);
    procedure SetFTrayTip(Value : string);
    procedure SetFTypeJS(Value : string);
    procedure SetFWidth(Value : Integer);
    procedure SetFId(Value : string);
    procedure SetFOnClose(Value : TExtAirNativeWindowOnClose);
    procedure SetFOnClosing(Value : TExtAirNativeWindowOnClosing);
    procedure SetFOnDisplayStateChange(Value : TExtAirNativeWindowOnDisplayStateChange);
    procedure SetFOnDisplayStateChanging(Value : TExtAirNativeWindowOnDisplayStateChanging);
    procedure SetFOnMove(Value : TExtAirNativeWindowOnMove);
    procedure SetFOnMoving(Value : TExtAirNativeWindowOnMoving);
    procedure SetFOnResize(Value : TExtAirNativeWindowOnResize);
    procedure SetFOnResizing(Value : TExtAirNativeWindowOnResizing);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function NativeWindowGetRootHtmlWindow : TExtFunction;
    function NativeWindowGetRootWindow : TExtFunction;
    function Activate : TExtFunction;
    function Close : TExtFunction;
    function GetCenterXY : TExtFunction;
    function GetNative : TExtFunction;
    function Hide : TExtFunction;
    function IsMaximized : TExtFunction;
    function IsMinimized : TExtFunction;
    function MoveTo(X : Integer; Y : Integer) : TExtFunction;
    function Resize(Width : Integer; Height : Integer) : TExtFunction;
    function Show : TExtFunction;
    property Chrome : string read FChrome write SetFChrome;
    property Height : Integer read FHeight write SetFHeight;
    property Instance : TExtAirNativeWindow read FInstance write SetFInstance;
    property Maximizable : Boolean read FMaximizable write SetFMaximizable;
    property Minimizable : Boolean read FMinimizable write SetFMinimizable;
    property MinimizeToTray : Boolean read FMinimizeToTray write SetFMinimizeToTray;
    property Resizable : Boolean read FResizable write SetFResizable;
    property Transparent : Boolean read FTransparent write SetFTransparent;
    property TrayIcon : string read FTrayIcon write SetFTrayIcon;
    property TrayMenu : TNativeMenu read FTrayMenu write SetFTrayMenu;
    property TrayTip : string read FTrayTip write SetFTrayTip;
    property TypeJS : string read FTypeJS write SetFTypeJS;
    property Width : Integer read FWidth write SetFWidth;
    property Id : string read FId write SetFId;
    property OnClose : TExtAirNativeWindowOnClose read FOnClose write SetFOnClose;
    property OnClosing : TExtAirNativeWindowOnClosing read FOnClosing write SetFOnClosing;
    property OnDisplayStateChange : TExtAirNativeWindowOnDisplayStateChange read FOnDisplayStateChange write SetFOnDisplayStateChange;
    property OnDisplayStateChanging : TExtAirNativeWindowOnDisplayStateChanging read FOnDisplayStateChanging write SetFOnDisplayStateChanging;
    property OnMove : TExtAirNativeWindowOnMove read FOnMove write SetFOnMove;
    property OnMoving : TExtAirNativeWindowOnMoving read FOnMoving write SetFOnMoving;
    property OnResize : TExtAirNativeWindowOnResize read FOnResize write SetFOnResize;
    property OnResizing : TExtAirNativeWindowOnResizing read FOnResizing write SetFOnResizing;
  end;

var
  ExtAirSystemMenu : TExtAirSystemMenuSingleton;
  ExtAirSound : TExtAirSoundSingleton;
  ExtAirDragType : TExtAirDragTypeSingleton;
  ExtAirNativeWindowManager : TExtAirNativeWindowManagerSingleton;

implementation

function TExtAirSystemMenuSingleton.JSClassName : string; begin
  Result := 'Ext.air.SystemMenu';
end;

{$IFDEF FPC}constructor TExtAirSystemMenuSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtAirSystemMenuSingleton.Add(Text : string; Actions : TExtObjectList; Mindex : Integer) : TExtFunction; begin
  JSCode(JSName + '.add(' + VarToJSON([Text]) + ',' + VarToJSON(Actions) + ',' + VarToJSON([Mindex]) + ');', 'TExtAirSystemMenuSingleton');
  Result := Self;
end;

function TExtAirSystemMenuSingleton.Get : TExtFunction; begin
  JSCode(JSName + '.get();', 'TExtAirSystemMenuSingleton');
  Result := Self;
end;

function TExtAirNativeWindowGroup.JSClassName : string; begin
  Result := 'Ext.air.NativeWindowGroup';
end;

{$IFDEF FPC}constructor TExtAirNativeWindowGroup.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtAirNativeWindowGroup.CloseAll : TExtFunction; begin
  JSCode(JSName + '.closeAll();', 'TExtAirNativeWindowGroup');
  Result := Self;
end;

function TExtAirNativeWindowGroup.Each(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.each(' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtAirNativeWindowGroup');
  Result := Self;
end;

function TExtAirNativeWindowGroup.Get(Id : string) : TExtFunction; begin
  JSCode(JSName + '.get(' + VarToJSON([Id]) + ');', 'TExtAirNativeWindowGroup');
  Result := Self;
end;

function TExtAirNativeWindowGroup.Register(Win : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.register(' + VarToJSON([Win, false]) + ');', 'TExtAirNativeWindowGroup');
  Result := Self;
end;

function TExtAirNativeWindowGroup.Unregister(Win : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.unregister(' + VarToJSON([Win, false]) + ');', 'TExtAirNativeWindowGroup');
  Result := Self;
end;

function TExtAirSoundSingleton.JSClassName : string; begin
  Result := 'Ext.air.Sound';
end;

{$IFDEF FPC}constructor TExtAirSoundSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtAirSoundSingleton.Play(FileJS : string; StartAt : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.play(' + VarToJSON([FileJS, StartAt]) + ');', 'TExtAirSoundSingleton');
  Result := Self;
end;

procedure TExtAirDragTypeSingleton.SetFMatchers(Value : TExtObject); begin
  FMatchers := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.matchers=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtAirDragTypeSingleton.SetFPseudos(Value : TExtObject); begin
  FPseudos := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.pseudos=' + VarToJSON([Value, false]) + ';');
end;

function TExtAirDragTypeSingleton.JSClassName : string; begin
  Result := 'Ext.air.DragType';
end;

class function TExtAirDragTypeSingleton.BITMAP : TExtObject;
const
  lBITMAP : TExtObject = nil;
begin
  if lBITMAP = nil then lBITMAP := TExtObject.CreateSingleton('Ext.air.DragType.BITMAP');
  Result := lBITMAP
end;

class function TExtAirDragTypeSingleton.FILES : TExtObject;
const
  lFILES : TExtObject = nil;
begin
  if lFILES = nil then lFILES := TExtObject.CreateSingleton('Ext.air.DragType.FILES');
  Result := lFILES
end;

class function TExtAirDragTypeSingleton.HTML : TExtObject;
const
  lHTML : TExtObject = nil;
begin
  if lHTML = nil then lHTML := TExtObject.CreateSingleton('Ext.air.DragType.HTML');
  Result := lHTML
end;

class function TExtAirDragTypeSingleton.TEXT : TExtObject;
const
  lTEXT : TExtObject = nil;
begin
  if lTEXT = nil then lTEXT := TExtObject.CreateSingleton('Ext.air.DragType.TEXT');
  Result := lTEXT
end;

class function TExtAirDragTypeSingleton.URL : TExtObject;
const
  lURL : TExtObject = nil;
begin
  if lURL = nil then lURL := TExtObject.CreateSingleton('Ext.air.DragType.URL');
  Result := lURL
end;

procedure TExtAirDragTypeSingleton.InitDefaults; begin
  inherited;
  FMatchers := TExtObject.CreateInternal(Self, 'matchers');
  FPseudos := TExtObject.CreateInternal(Self, 'pseudos');
end;

{$IFDEF FPC}constructor TExtAirDragTypeSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtAirDragTypeSingleton.Filter(El : TExtObjectList; Selector : string; NonMatches : Boolean) : TExtFunction; begin
  JSCode(JSName + '.filter(' + VarToJSON(El) + ',' + VarToJSON([Selector, NonMatches]) + ');', 'TExtAirDragTypeSingleton');
  Result := Self;
end;

function TExtAirDragTypeSingleton.IsJS(El : string; Selector : string) : TExtFunction; begin
  JSCode(JSName + '.is(' + VarToJSON([El, Selector]) + ');', 'TExtAirDragTypeSingleton');
  Result := Self;
end;

function TExtAirDragTypeSingleton.IsJS(El : THTMLElement; Selector : string) : TExtFunction; begin
  JSCode(JSName + '.is(' + VarToJSON([El, false, Selector]) + ');', 'TExtAirDragTypeSingleton');
  Result := Self;
end;

function TExtAirDragTypeSingleton.IsJS(El : TExtObjectList; Selector : string) : TExtFunction; begin
  JSCode(JSName + '.is(' + VarToJSON(El) + ',' + VarToJSON([Selector]) + ');', 'TExtAirDragTypeSingleton');
  Result := Self;
end;

function TExtAirDragTypeSingleton.Operators : TExtFunction; begin
  JSCode(JSName + '.operators();', 'TExtAirDragTypeSingleton');
  Result := Self;
end;

function TExtAirDragTypeSingleton.Select(Selector : string; Root : TExtDataNode = nil) : TExtFunction; begin
  JSCode(JSName + '.select(' + VarToJSON([Selector, Root, false]) + ');', 'TExtAirDragTypeSingleton');
  Result := Self;
end;

function TExtAirDragTypeSingleton.SelectNode(Selector : string; Root : TExtDataNode = nil) : TExtFunction; begin
  JSCode(JSName + '.selectNode(' + VarToJSON([Selector, Root, false]) + ');', 'TExtAirDragTypeSingleton');
  Result := Self;
end;

function TExtAirDragTypeSingleton.SelectNumber(Selector : string; Root : TExtDataNode = nil; DefaultValue : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.selectNumber(' + VarToJSON([Selector, Root, false, DefaultValue]) + ');', 'TExtAirDragTypeSingleton');
  Result := Self;
end;

function TExtAirDragTypeSingleton.SelectValue(Selector : string; Root : TExtDataNode = nil; DefaultValue : string = '') : TExtFunction; begin
  JSCode(JSName + '.selectValue(' + VarToJSON([Selector, Root, false, DefaultValue]) + ');', 'TExtAirDragTypeSingleton');
  Result := Self;
end;

destructor TExtAirDragTypeSingleton.Destroy; begin
  try
    FMatchers.Free;
    FPseudos.Free;
  except end;
  inherited;
end;

function TExtAirNativeWindowManagerSingleton.JSClassName : string; begin
  Result := 'Ext.air.NativeWindowManager';
end;

{$IFDEF FPC}constructor TExtAirNativeWindowManagerSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtAirNativeObservable.JSClassName : string; begin
  Result := 'Ext.air.NativeObservable';
end;

{$IFDEF FPC}constructor TExtAirNativeObservable.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtAirNativeObservable.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

procedure TExtAirFileProvider.SetFDefaultState(Value : TExtObject); begin
  FDefaultState := Value;
  Value.DeleteFromGarbage;
  JSCode('defaultState:' + VarToJSON([Value, false]));
end;

procedure TExtAirFileProvider.SetFFileJS(Value : string); begin
  FFileJS := Value;
  JSCode('fileJS:' + VarToJSON([Value]));
end;

function TExtAirFileProvider.JSClassName : string; begin
  Result := 'Ext.air.FileProvider';
end;

procedure TExtAirFileProvider.InitDefaults; begin
  inherited;
  FDefaultState := TExtObject.CreateInternal(Self, 'defaultState');
end;

{$IFDEF FPC}constructor TExtAirFileProvider.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtAirFileProvider.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

destructor TExtAirFileProvider.Destroy; begin
  try
    FDefaultState.Free;
  except end;
  inherited;
end;

procedure TExtAirNativeWindow.SetFChrome(Value : string); begin
  FChrome := Value;
  JSCode('chrome:' + VarToJSON([Value]));
end;

procedure TExtAirNativeWindow.SetFHeight(Value : Integer); begin
  FHeight := Value;
  JSCode('height:' + VarToJSON([Value]));
end;

procedure TExtAirNativeWindow.SetFInstance(Value : TExtAirNativeWindow); begin
  FInstance := Value;
  Value.DeleteFromGarbage;
  JSCode('instance:' + VarToJSON([Value, false]));
end;

procedure TExtAirNativeWindow.SetFMaximizable(Value : Boolean); begin
  FMaximizable := Value;
  JSCode('maximizable:' + VarToJSON([Value]));
end;

procedure TExtAirNativeWindow.SetFMinimizable(Value : Boolean); begin
  FMinimizable := Value;
  JSCode('minimizable:' + VarToJSON([Value]));
end;

procedure TExtAirNativeWindow.SetFMinimizeToTray(Value : Boolean); begin
  FMinimizeToTray := Value;
  JSCode('minimizeToTray:' + VarToJSON([Value]));
end;

procedure TExtAirNativeWindow.SetFResizable(Value : Boolean); begin
  FResizable := Value;
  JSCode('resizable:' + VarToJSON([Value]));
end;

procedure TExtAirNativeWindow.SetFTransparent(Value : Boolean); begin
  FTransparent := Value;
  JSCode('transparent:' + VarToJSON([Value]));
end;

procedure TExtAirNativeWindow.SetFTrayIcon(Value : string); begin
  FTrayIcon := Value;
  JSCode('trayIcon:' + VarToJSON([Value]));
end;

procedure TExtAirNativeWindow.SetFTrayMenu(Value : TNativeMenu); begin
  FTrayMenu := Value;
  Value.DeleteFromGarbage;
  JSCode('trayMenu:' + VarToJSON([Value, false]));
end;

procedure TExtAirNativeWindow.SetFTrayTip(Value : string); begin
  FTrayTip := Value;
  JSCode('trayTip:' + VarToJSON([Value]));
end;

procedure TExtAirNativeWindow.SetFTypeJS(Value : string); begin
  FTypeJS := Value;
  JSCode('typeJS:' + VarToJSON([Value]));
end;

procedure TExtAirNativeWindow.SetFWidth(Value : Integer); begin
  FWidth := Value;
  JSCode('width:' + VarToJSON([Value]));
end;

procedure TExtAirNativeWindow.SetFId(Value : string); begin
  FId := Value;
  JSCode(JSName + '.id=' + VarToJSON([Value]) + ';');
end;

procedure TExtAirNativeWindow.SetFOnClose(Value : TExtAirNativeWindowOnClose); begin
  if Assigned(FOnClose) then
    JSCode(JSName+'.events ["close"].listeners=[];');
  if Assigned(Value) then
    On('close', Ajax('close', ['E', '%0.nm'], true));
  FOnClose := Value;
end;

procedure TExtAirNativeWindow.SetFOnClosing(Value : TExtAirNativeWindowOnClosing); begin
  if Assigned(FOnClosing) then
    JSCode(JSName+'.events ["closing"].listeners=[];');
  if Assigned(Value) then
    On('closing', Ajax('closing', ['E', '%0.nm'], true));
  FOnClosing := Value;
end;

procedure TExtAirNativeWindow.SetFOnDisplayStateChange(Value : TExtAirNativeWindowOnDisplayStateChange); begin
  if Assigned(FOnDisplayStateChange) then
    JSCode(JSName+'.events ["displayStateChange"].listeners=[];');
  if Assigned(Value) then
    On('displayStateChange', Ajax('displayStateChange', ['E', '%0.nm'], true));
  FOnDisplayStateChange := Value;
end;

procedure TExtAirNativeWindow.SetFOnDisplayStateChanging(Value : TExtAirNativeWindowOnDisplayStateChanging); begin
  if Assigned(FOnDisplayStateChanging) then
    JSCode(JSName+'.events ["displayStateChanging"].listeners=[];');
  if Assigned(Value) then
    On('displayStateChanging', Ajax('displayStateChanging', ['E', '%0.nm'], true));
  FOnDisplayStateChanging := Value;
end;

procedure TExtAirNativeWindow.SetFOnMove(Value : TExtAirNativeWindowOnMove); begin
  if Assigned(FOnMove) then
    JSCode(JSName+'.events ["move"].listeners=[];');
  if Assigned(Value) then
    On('move', Ajax('move', ['E', '%0.nm'], true));
  FOnMove := Value;
end;

procedure TExtAirNativeWindow.SetFOnMoving(Value : TExtAirNativeWindowOnMoving); begin
  if Assigned(FOnMoving) then
    JSCode(JSName+'.events ["moving"].listeners=[];');
  if Assigned(Value) then
    On('moving', Ajax('moving', ['E', '%0.nm'], true));
  FOnMoving := Value;
end;

procedure TExtAirNativeWindow.SetFOnResize(Value : TExtAirNativeWindowOnResize); begin
  if Assigned(FOnResize) then
    JSCode(JSName+'.events ["resize"].listeners=[];');
  if Assigned(Value) then
    On('resize', Ajax('resize', ['E', '%0.nm'], true));
  FOnResize := Value;
end;

procedure TExtAirNativeWindow.SetFOnResizing(Value : TExtAirNativeWindowOnResizing); begin
  if Assigned(FOnResizing) then
    JSCode(JSName+'.events ["resizing"].listeners=[];');
  if Assigned(Value) then
    On('resizing', Ajax('resizing', ['E', '%0.nm'], true));
  FOnResizing := Value;
end;

function TExtAirNativeWindow.JSClassName : string; begin
  Result := 'Ext.air.NativeWindow';
end;

procedure TExtAirNativeWindow.InitDefaults; begin
  inherited;
  FChrome := 'standard';
  FInstance := TExtAirNativeWindow.CreateInternal(Self, 'instance');
end;

{$IFDEF FPC}constructor TExtAirNativeWindow.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtAirNativeWindow.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtAirNativeWindow.NativeWindowGetRootHtmlWindow : TExtFunction; begin
  JSCode(JSName + '.NativeWindow.getRootHtmlWindow();', 'TExtAirNativeWindow');
  Result := Self;
end;

function TExtAirNativeWindow.NativeWindowGetRootWindow : TExtFunction; begin
  JSCode(JSName + '.NativeWindow.getRootWindow();', 'TExtAirNativeWindow');
  Result := Self;
end;

function TExtAirNativeWindow.Activate : TExtFunction; begin
  JSCode(JSName + '.activate();', 'TExtAirNativeWindow');
  Result := Self;
end;

function TExtAirNativeWindow.Close : TExtFunction; begin
  JSCode(JSName + '.close();', 'TExtAirNativeWindow');
  Result := Self;
end;

function TExtAirNativeWindow.GetCenterXY : TExtFunction; begin
  JSCode(JSName + '.getCenterXY();', 'TExtAirNativeWindow');
  Result := Self;
end;

function TExtAirNativeWindow.GetNative : TExtFunction; begin
  JSCode(JSName + '.getNative();', 'TExtAirNativeWindow');
  Result := Self;
end;

function TExtAirNativeWindow.Hide : TExtFunction; begin
  JSCode(JSName + '.hide();', 'TExtAirNativeWindow');
  Result := Self;
end;

function TExtAirNativeWindow.IsMaximized : TExtFunction; begin
  JSCode(JSName + '.isMaximized();', 'TExtAirNativeWindow');
  Result := Self;
end;

function TExtAirNativeWindow.IsMinimized : TExtFunction; begin
  JSCode(JSName + '.isMinimized();', 'TExtAirNativeWindow');
  Result := Self;
end;

function TExtAirNativeWindow.MoveTo(X : Integer; Y : Integer) : TExtFunction; begin
  JSCode(JSName + '.moveTo(' + VarToJSON([X, Y]) + ');', 'TExtAirNativeWindow');
  Result := Self;
end;

function TExtAirNativeWindow.Resize(Width : Integer; Height : Integer) : TExtFunction; begin
  JSCode(JSName + '.resize(' + VarToJSON([Width, Height]) + ');', 'TExtAirNativeWindow');
  Result := Self;
end;

function TExtAirNativeWindow.Show : TExtFunction; begin
  JSCode(JSName + '.show();', 'TExtAirNativeWindow');
  Result := Self;
end;

procedure TExtAirNativeWindow.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'close') and Assigned(FOnClose) then
    FOnClose(TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'closing') and Assigned(FOnClosing) then
    FOnClosing(TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'displayStateChange') and Assigned(FOnDisplayStateChange) then
    FOnDisplayStateChange(TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'displayStateChanging') and Assigned(FOnDisplayStateChanging) then
    FOnDisplayStateChanging(TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'move') and Assigned(FOnMove) then
    FOnMove(TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'moving') and Assigned(FOnMoving) then
    FOnMoving(TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'resize') and Assigned(FOnResize) then
    FOnResize(TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'resizing') and Assigned(FOnResizing) then
    FOnResizing(TExtObject(ParamAsObject('E')));
end;

initialization
  ExtAirSystemMenu := TExtAirSystemMenuSingleton.CreateSingleton;
  ExtAirSound := TExtAirSoundSingleton.CreateSingleton;
  ExtAirDragType := TExtAirDragTypeSingleton.CreateSingleton;
  ExtAirNativeWindowManager := TExtAirNativeWindowManagerSingleton.CreateSingleton;

finalization
  ExtAirNativeWindowManager.Destroy;
  ExtAirDragType.Destroy;
  ExtAirSound.Destroy;
  ExtAirSystemMenu.Destroy;
end.