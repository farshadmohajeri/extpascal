unit ExtGrid;

// Generated by ExtToPascal v.0.9.8, at 20/1/2010 15:14:38
// from "C:\Trabalho\ext-3.1.0\docs\output" detected as ExtJS v.3

interface

uses
  StrUtils, ExtPascal, ExtPascalUtils, ExtUtil, ExtDd, Ext, ExtData;

type
  TExtGridRowNumberer = class;
  TExtGridColumn = class;
  TExtGridPropertyRecord = class;
  TExtGridTemplateColumn = class;
  TExtGridPropertyStore = class;
  TExtGridNumberColumn = class;
  TExtGridGridView = class;
  TExtGridColumnModel = class;
  TExtGridBooleanColumn = class;
  TExtGridDateColumn = class;
  TExtGridAbstractSelectionModel = class;
  TExtGridPropertyColumnModel = class;
  TExtGridCellSelectionModel = class;
  TExtGridRowSelectionModel = class;
  TExtGridGroupingView = class;
  TExtGridCheckboxSelectionModel = class;
  TExtGridGridDragZone = class;
  TExtGridGridPanel = class;
  TExtGridEditorGridPanel = class;
  TExtGridPropertyGrid = class;

  TExtGridRowNumberer = class(TExtFunction)
  private
    FHeader : String;
    FWidth : Integer;
    procedure SetFHeader(Value : String);
    procedure SetFWidth(Value : Integer);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property Header : String read FHeader write SetFHeader;
    property Width : Integer read FWidth write SetFWidth;
  end;

  // Enumerated types for properties
  TExtGridColumnAlign = (alInherit, alLeft, alRight, alCenter, alJustify);

  TExtGridColumn = class(TExtFunction)
  private
    FAlign : TExtGridColumnAlign;
    FCss : String;
    FDataIndex : String;
    FEditable : Boolean;
    FEditor : TExtFormField;
    FEmptyGroupText : String;
    FFixed : Boolean;
    FGroupName : String;
    FGroupRenderer : TExtFunction;
    FGroupable : Boolean;
    FHeader : String;
    FHidden : Boolean;
    FHideable : Boolean; // true
    FId : String;
    FMenuDisabled : Boolean;
    FRenderer : String;
    FResizable : Boolean;
    FScope : TExtObject;
    FSortable : Boolean;
    FTooltip : String;
    FWidth : Integer;
    FXtype : String;
    FRenderer_ : TExtFunction;
    FRendererExtFunction : TExtFunction;
    procedure SetFAlign(Value : TExtGridColumnAlign);
    procedure SetFCss(Value : String);
    procedure SetFDataIndex(Value : String);
    procedure SetFEditable(Value : Boolean);
    procedure SetFEditor(Value : TExtFormField);
    procedure SetFEmptyGroupText(Value : String);
    procedure SetFFixed(Value : Boolean);
    procedure SetFGroupName(Value : String);
    procedure SetFGroupRenderer(Value : TExtFunction);
    procedure SetFGroupable(Value : Boolean);
    procedure SetFHeader(Value : String);
    procedure SetFHidden(Value : Boolean);
    procedure SetFHideable(Value : Boolean);
    procedure SetFId(Value : String);
    procedure SetFMenuDisabled(Value : Boolean);
    procedure SetFRenderer(Value : String);
    procedure SetFResizable(Value : Boolean);
    procedure SetFScope(Value : TExtObject);
    procedure SetFSortable(Value : Boolean);
    procedure SetFTooltip(Value : String);
    procedure SetFWidth(Value : Integer);
    procedure SetFXtype(Value : String);
    procedure SetFRenderer_(Value : TExtFunction);
    procedure SetFRendererExtFunction(Value : TExtFunction);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function GetCellEditor(RowIndex : Integer) : TExtFunction;
    destructor Destroy; override;
    property Align : TExtGridColumnAlign read FAlign write SetFAlign;
    property Css : String read FCss write SetFCss;
    property DataIndex : String read FDataIndex write SetFDataIndex;
    property Editable : Boolean read FEditable write SetFEditable;
    property Editor : TExtFormField read FEditor write SetFEditor;
    property EmptyGroupText : String read FEmptyGroupText write SetFEmptyGroupText;
    property Fixed : Boolean read FFixed write SetFFixed;
    property GroupName : String read FGroupName write SetFGroupName;
    property GroupRenderer : TExtFunction read FGroupRenderer write SetFGroupRenderer;
    property Groupable : Boolean read FGroupable write SetFGroupable;
    property Header : String read FHeader write SetFHeader;
    property Hidden : Boolean read FHidden write SetFHidden;
    property Hideable : Boolean read FHideable write SetFHideable;
    property Id : String read FId write SetFId;
    property MenuDisabled : Boolean read FMenuDisabled write SetFMenuDisabled;
    property Renderer : String read FRenderer write SetFRenderer;
    property Resizable : Boolean read FResizable write SetFResizable;
    property Scope : TExtObject read FScope write SetFScope;
    property Sortable : Boolean read FSortable write SetFSortable;
    property Tooltip : String read FTooltip write SetFTooltip;
    property Width : Integer read FWidth write SetFWidth;
    property Xtype : String read FXtype write SetFXtype;
    property Renderer_ : TExtFunction read FRenderer_ write SetFRenderer_;
    property RendererExtFunction : TExtFunction read FRendererExtFunction write SetFRendererExtFunction;
  end;

  TExtGridPropertyRecord = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtGridTemplateColumn = class(TExtGridColumn)
  private
    FTpl : String;
    FTplXTemplate : TExtXTemplate;
    procedure SetFTpl(Value : String);
    procedure SetFTplXTemplate(Value : TExtXTemplate);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    property Tpl : String read FTpl write SetFTpl;
    property TplXTemplate : TExtXTemplate read FTplXTemplate write SetFTplXTemplate;
  end;

  TExtGridPropertyStore = class(TExtUtilObservable)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Grid : TExtGridGrid; Source : TExtObject);
  end;

  TExtGridNumberColumn = class(TExtGridColumn)
  private
    FFormat : String; // '0,000.00'
    procedure SetFFormat(Value : String);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    property Format : String read FFormat write SetFFormat;
  end;

  // Procedural types for events TExtGridGridView
  TExtGridGridViewOnBeforerefresh = procedure(View : TExtGridGridView) of object;
  TExtGridGridViewOnBeforerowremoved = procedure(View : TExtGridGridView; RowIndex : Integer; RecordJS : TExtDataRecord) of object;
  TExtGridGridViewOnBeforerowsinserted = procedure(View : TExtGridGridView; FirstRow : Integer; LastRow : Integer) of object;
  TExtGridGridViewOnRefresh = procedure(View : TExtGridGridView) of object;
  TExtGridGridViewOnRowremoved = procedure(View : TExtGridGridView; RowIndex : Integer; RecordJS : TExtDataRecord) of object;
  TExtGridGridViewOnRowsinserted = procedure(View : TExtGridGridView; FirstRow : Integer; LastRow : Integer) of object;
  TExtGridGridViewOnRowupdated = procedure(View : TExtGridGridView; FirstRow : Integer; RecordJS : TExtDataRecord) of object;

  TExtGridGridView = class(TExtUtilObservable)
  private
    FAutoFill : Boolean;
    FCellSelector : String; // 'td.x-grid3-cell'
    FCellSelectorDepth : Integer; // 4
    FColumnsText : String; // 'Columns'
    FDeferEmptyText : Boolean; // true
    FEmptyText : String;
    FEnableRowBody : Boolean;
    FForceFit : Boolean;
    FHeadersDisabled : Boolean;
    FRowBodySelector : String; // 'div.x-grid3-row'
    FRowBodySelectorDepth : Integer; // 10
    FRowSelector : String; // 'div.x-grid3-row'
    FRowSelectorDepth : Integer; // 10
    FScrollOffset : Integer;
    FSelectedRowClass : String; // 'x-grid3-row-selected'
    FSortAscText : String; // 'Sort Ascending'
    FSortClasses : TExtObjectList;
    FSortDescText : String; // 'Sort Descending'
    FDragZone : TExtGridGridDragZone;
    FMainBody : TExtElement;
    FOnBeforerefresh : TExtGridGridViewOnBeforerefresh;
    FOnBeforerowremoved : TExtGridGridViewOnBeforerowremoved;
    FOnBeforerowsinserted : TExtGridGridViewOnBeforerowsinserted;
    FOnRefresh : TExtGridGridViewOnRefresh;
    FOnRowremoved : TExtGridGridViewOnRowremoved;
    FOnRowsinserted : TExtGridGridViewOnRowsinserted;
    FOnRowupdated : TExtGridGridViewOnRowupdated;
    procedure SetFAutoFill(Value : Boolean);
    procedure SetFCellSelector(Value : String);
    procedure SetFCellSelectorDepth(Value : Integer);
    procedure SetFColumnsText(Value : String);
    procedure SetFDeferEmptyText(Value : Boolean);
    procedure SetFEmptyText(Value : String);
    procedure SetFEnableRowBody(Value : Boolean);
    procedure SetFForceFit(Value : Boolean);
    procedure SetFHeadersDisabled(Value : Boolean);
    procedure SetFRowBodySelector(Value : String);
    procedure SetFRowBodySelectorDepth(Value : Integer);
    procedure SetFRowSelector(Value : String);
    procedure SetFRowSelectorDepth(Value : Integer);
    procedure SetFScrollOffset(Value : Integer);
    procedure SetFSelectedRowClass(Value : String);
    procedure SetFSortAscText(Value : String);
    procedure SetFSortClasses(Value : TExtObjectList);
    procedure SetFSortDescText(Value : String);
    procedure SetFDragZone(Value : TExtGridGridDragZone);
    procedure SetFMainBody(Value : TExtElement);
    procedure SetFOnBeforerefresh(Value : TExtGridGridViewOnBeforerefresh);
    procedure SetFOnBeforerowremoved(Value : TExtGridGridViewOnBeforerowremoved);
    procedure SetFOnBeforerowsinserted(Value : TExtGridGridViewOnBeforerowsinserted);
    procedure SetFOnRefresh(Value : TExtGridGridViewOnRefresh);
    procedure SetFOnRowremoved(Value : TExtGridGridViewOnRowremoved);
    procedure SetFOnRowsinserted(Value : TExtGridGridViewOnRowsinserted);
    procedure SetFOnRowupdated(Value : TExtGridGridViewOnRowupdated);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function FindCellIndex(El : THTMLElement) : TExtFunction;
    function FindRow(El : THTMLElement) : TExtFunction;
    function FindRowBody(El : THTMLElement) : TExtFunction;
    function FindRowIndex(El : THTMLElement) : TExtFunction;
    function FocusCell(Row : Integer; Col : Integer) : TExtFunction;
    function FocusRow(Row : Integer) : TExtFunction;
    function GetCell(Row : Integer; Col : Integer) : TExtFunction;
    function GetHeaderCell(Index : Integer) : TExtFunction;
    function GetRow(Index : Integer) : TExtFunction;
    function GetRowClass(RecordJS : TExtDataRecord; Index : Integer; RowParams : TExtObject; Store : TExtDataStore) : TExtFunction;
    function Refresh(HeadersToo : Boolean = false) : TExtFunction;
    function ScrollToTop : TExtFunction;
    destructor Destroy; override;
    property AutoFill : Boolean read FAutoFill write SetFAutoFill;
    property CellSelector : String read FCellSelector write SetFCellSelector;
    property CellSelectorDepth : Integer read FCellSelectorDepth write SetFCellSelectorDepth;
    property ColumnsText : String read FColumnsText write SetFColumnsText;
    property DeferEmptyText : Boolean read FDeferEmptyText write SetFDeferEmptyText;
    property EmptyText : String read FEmptyText write SetFEmptyText;
    property EnableRowBody : Boolean read FEnableRowBody write SetFEnableRowBody;
    property ForceFit : Boolean read FForceFit write SetFForceFit;
    property HeadersDisabled : Boolean read FHeadersDisabled write SetFHeadersDisabled;
    property RowBodySelector : String read FRowBodySelector write SetFRowBodySelector;
    property RowBodySelectorDepth : Integer read FRowBodySelectorDepth write SetFRowBodySelectorDepth;
    property RowSelector : String read FRowSelector write SetFRowSelector;
    property RowSelectorDepth : Integer read FRowSelectorDepth write SetFRowSelectorDepth;
    property ScrollOffset : Integer read FScrollOffset write SetFScrollOffset;
    property SelectedRowClass : String read FSelectedRowClass write SetFSelectedRowClass;
    property SortAscText : String read FSortAscText write SetFSortAscText;
    property SortClasses : TExtObjectList read FSortClasses write SetFSortClasses;
    property SortDescText : String read FSortDescText write SetFSortDescText;
    property DragZone : TExtGridGridDragZone read FDragZone write SetFDragZone;
    property MainBody : TExtElement read FMainBody write SetFMainBody;
    property OnBeforerefresh : TExtGridGridViewOnBeforerefresh read FOnBeforerefresh write SetFOnBeforerefresh;
    property OnBeforerowremoved : TExtGridGridViewOnBeforerowremoved read FOnBeforerowremoved write SetFOnBeforerowremoved;
    property OnBeforerowsinserted : TExtGridGridViewOnBeforerowsinserted read FOnBeforerowsinserted write SetFOnBeforerowsinserted;
    property OnRefresh : TExtGridGridViewOnRefresh read FOnRefresh write SetFOnRefresh;
    property OnRowremoved : TExtGridGridViewOnRowremoved read FOnRowremoved write SetFOnRowremoved;
    property OnRowsinserted : TExtGridGridViewOnRowsinserted read FOnRowsinserted write SetFOnRowsinserted;
    property OnRowupdated : TExtGridGridViewOnRowupdated read FOnRowupdated write SetFOnRowupdated;
  end;

  // Procedural types for events TExtGridColumnModel
  TExtGridColumnModelOnColumnmoved = procedure(This : TExtGridColumnModel; OldIndex : Integer; NewIndex : Integer) of object;
  TExtGridColumnModelOnConfigchange = procedure(This : TExtGridColumnModel) of object;
  TExtGridColumnModelOnHeaderchange = procedure(This : TExtGridColumnModel; ColumnIndex : Integer; NewText : String) of object;
  TExtGridColumnModelOnHiddenchange = procedure(This : TExtGridColumnModel; ColumnIndex : Integer; Hidden : Boolean) of object;
  TExtGridColumnModelOnWidthchange = procedure(This : TExtGridColumnModel; ColumnIndex : Integer; NewWidth : Integer) of object;

  TExtGridColumnModel = class(TExtUtilObservable)
  private
    FColumns : TExtObjectList;
    FDefaultSortable : Boolean;
    FDefaultWidth : Integer; // 100
    FDefaults : TExtObject;
    FOnColumnmoved : TExtGridColumnModelOnColumnmoved;
    FOnConfigchange : TExtGridColumnModelOnConfigchange;
    FOnHeaderchange : TExtGridColumnModelOnHeaderchange;
    FOnHiddenchange : TExtGridColumnModelOnHiddenchange;
    FOnWidthchange : TExtGridColumnModelOnWidthchange;
    procedure SetFColumns(Value : TExtObjectList);
    procedure SetFDefaultSortable(Value : Boolean);
    procedure SetFDefaultWidth(Value : Integer);
    procedure SetFDefaults(Value : TExtObject);
    procedure SetFOnColumnmoved(Value : TExtGridColumnModelOnColumnmoved);
    procedure SetFOnConfigchange(Value : TExtGridColumnModelOnConfigchange);
    procedure SetFOnHeaderchange(Value : TExtGridColumnModelOnHeaderchange);
    procedure SetFOnHiddenchange(Value : TExtGridColumnModelOnHiddenchange);
    procedure SetFOnWidthchange(Value : TExtGridColumnModelOnWidthchange);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function DestroyJS : TExtFunction; override;
    function FindColumnIndex(Col : String) : TExtFunction;
    function GetCellEditor(ColIndex : Integer; RowIndex : Integer) : TExtFunction;
    function GetColumnById(Id : String) : TExtFunction;
    function GetColumnCount(VisibleOnly : Boolean) : TExtFunction;
    function GetColumnHeader(Col : Integer) : TExtFunction;
    function GetColumnId(Index : Integer) : TExtFunction;
    function GetColumnTooltip(Col : Integer) : TExtFunction;
    function GetColumnWidth(Col : Integer) : TExtFunction;
    function GetColumnsBy(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction;
    function GetDataIndex(Col : Integer) : TExtFunction;
    function GetIndexById(Id : String) : TExtFunction;
    function GetRenderer(Col : Integer) : TExtFunction;
    function GetTotalWidth(IncludeHidden : Boolean) : TExtFunction;
    function IsCellEditable(ColIndex : Integer; RowIndex : Integer) : TExtFunction;
    function IsFixed(ColIndex : Integer) : TExtFunction;
    function IsHidden(ColIndex : Integer) : TExtFunction;
    function IsMenuDisabled(Col : Integer) : TExtFunction;
    function IsResizable : TExtFunction;
    function IsSortable(Col : Integer) : TExtFunction;
    function MoveColumn(OldIndex : Integer; NewIndex : Integer) : TExtFunction;
    function SetColumnHeader(Col : Integer; Header : String) : TExtFunction;
    function SetColumnTooltip(Col : Integer; Tooltip : String) : TExtFunction;
    function SetColumnWidth(Col : Integer; Width : Integer; SuppressEvent : Boolean) : TExtFunction;
    function SetConfig(Config : TExtObjectList = nil; Initial : Boolean = false) : TExtFunction;
    function SetDataIndex(Col : Integer; DataIndex : String) : TExtFunction;
    function SetEditable(Col : Integer; Editable : Boolean) : TExtFunction;
    function SetEditor(Col : Integer; Editor : TExtObject) : TExtFunction;
    function SetHidden(ColIndex : Integer; Hidden : Boolean) : TExtFunction;
    function SetRenderer(Col : Integer; Fn : TExtFunction) : TExtFunction;
    destructor Destroy; override;
    property Columns : TExtObjectList read FColumns write SetFColumns;
    property DefaultSortable : Boolean read FDefaultSortable write SetFDefaultSortable;
    property DefaultWidth : Integer read FDefaultWidth write SetFDefaultWidth;
    property Defaults : TExtObject read FDefaults write SetFDefaults;
    property OnColumnmoved : TExtGridColumnModelOnColumnmoved read FOnColumnmoved write SetFOnColumnmoved;
    property OnConfigchange : TExtGridColumnModelOnConfigchange read FOnConfigchange write SetFOnConfigchange;
    property OnHeaderchange : TExtGridColumnModelOnHeaderchange read FOnHeaderchange write SetFOnHeaderchange;
    property OnHiddenchange : TExtGridColumnModelOnHiddenchange read FOnHiddenchange write SetFOnHiddenchange;
    property OnWidthchange : TExtGridColumnModelOnWidthchange read FOnWidthchange write SetFOnWidthchange;
  end;

  TExtGridBooleanColumn = class(TExtGridColumn)
  private
    FFalseText : String; // 'false'
    FTrueText : String; // 'true'
    FUndefinedText : String;
    procedure SetFFalseText(Value : String);
    procedure SetFTrueText(Value : String);
    procedure SetFUndefinedText(Value : String);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    property FalseText : String read FFalseText write SetFFalseText;
    property TrueText : String read FTrueText write SetFTrueText;
    property UndefinedText : String read FUndefinedText write SetFUndefinedText;
  end;

  TExtGridDateColumn = class(TExtGridColumn)
  private
    FFormat : String; // 'm/d/Y'
    procedure SetFFormat(Value : String);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    property Format : String read FFormat write SetFFormat;
  end;

  TExtGridAbstractSelectionModel = class(TExtUtilObservable)
  private
    FGrid : TExtObject;
    procedure SetFGrid(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function IsLocked : TExtFunction;
    function Lock : TExtFunction;
    function Unlock : TExtFunction;
    destructor Destroy; override;
    property Grid : TExtObject read FGrid write SetFGrid;
  end;

  TExtGridPropertyColumnModel = class(TExtGridColumnModel)
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
  end;

  // Procedural types for events TExtGridCellSelectionModel
  TExtGridCellSelectionModelOnBeforecellselect = procedure(This : TExtGridCellSelectionModel; RowIndex : Integer; ColIndex : Integer) of object;
  TExtGridCellSelectionModelOnCellselect = procedure(This : TExtGridCellSelectionModel; RowIndex : Integer; ColIndex : Integer) of object;
  TExtGridCellSelectionModelOnSelectionchange = procedure(This : TExtGridCellSelectionModel; Selection : TExtObject) of object;

  TExtGridCellSelectionModel = class(TExtGridAbstractSelectionModel)
  private
    FOnBeforecellselect : TExtGridCellSelectionModelOnBeforecellselect;
    FOnCellselect : TExtGridCellSelectionModelOnCellselect;
    FOnSelectionchange : TExtGridCellSelectionModelOnSelectionchange;
    procedure SetFOnBeforecellselect(Value : TExtGridCellSelectionModelOnBeforecellselect);
    procedure SetFOnCellselect(Value : TExtGridCellSelectionModelOnCellselect);
    procedure SetFOnSelectionchange(Value : TExtGridCellSelectionModelOnSelectionchange);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Config : TExtObject = nil);
    function ClearSelections(PreventNotify : Boolean) : TExtFunction;
    function GetSelectedCell : TExtFunction;
    function HasSelection : TExtFunction;
    function Select(RowIndex : Integer; ColIndex : Integer; PreventViewNotify : Boolean = false; PreventFocus : Boolean = false; R : TExtDataRecord = nil) : TExtFunction;
    property OnBeforecellselect : TExtGridCellSelectionModelOnBeforecellselect read FOnBeforecellselect write SetFOnBeforecellselect;
    property OnCellselect : TExtGridCellSelectionModelOnCellselect read FOnCellselect write SetFOnCellselect;
    property OnSelectionchange : TExtGridCellSelectionModelOnSelectionchange read FOnSelectionchange write SetFOnSelectionchange;
  end;

  // Procedural types for events TExtGridRowSelectionModel
  TExtGridRowSelectionModelOnBeforerowselect = procedure(This : TExtGridRowSelectionModel; RowIndex : Integer; KeepExisting : Boolean; RecordJS : TExtDataRecord) of object;
  TExtGridRowSelectionModelOnRowdeselect = procedure(This : TExtGridRowSelectionModel; RowIndex : Integer; RecordJS : TExtDataRecord) of object;
  TExtGridRowSelectionModelOnRowselect = procedure(This : TExtGridRowSelectionModel; RowIndex : Integer; R : TExtDataRecord) of object;
  TExtGridRowSelectionModelOnSelectionchange = procedure(This : TExtGridRowSelectionModel) of object;

  TExtGridRowSelectionModel = class(TExtGridAbstractSelectionModel)
  private
    FMoveEditorOnEnter : Boolean;
    FSingleSelect : Boolean;
    FOnBeforerowselect : TExtGridRowSelectionModelOnBeforerowselect;
    FOnRowdeselect : TExtGridRowSelectionModelOnRowdeselect;
    FOnRowselect : TExtGridRowSelectionModelOnRowselect;
    FOnSelectionchange : TExtGridRowSelectionModelOnSelectionchange;
    procedure SetFMoveEditorOnEnter(Value : Boolean);
    procedure SetFSingleSelect(Value : Boolean);
    procedure SetFOnBeforerowselect(Value : TExtGridRowSelectionModelOnBeforerowselect);
    procedure SetFOnRowdeselect(Value : TExtGridRowSelectionModelOnRowdeselect);
    procedure SetFOnRowselect(Value : TExtGridRowSelectionModelOnRowselect);
    procedure SetFOnSelectionchange(Value : TExtGridRowSelectionModelOnSelectionchange);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Config : TExtObject = nil);
    function ClearSelections(Fast : Boolean = false) : TExtFunction;
    function DeselectRange(StartRow : Integer; EndRow : Integer) : TExtFunction;
    function DeselectRow(Row : Integer; PreventViewNotify : Boolean = false) : TExtFunction;
    function Each(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction;
    function GetCount : TExtFunction;
    function GetSelected : TExtFunction;
    function GetSelections : TExtFunction;
    function HasNext : TExtFunction;
    function HasPrevious : TExtFunction;
    function HasSelection : TExtFunction;
    function IsIdSelected(Id : String) : TExtFunction;
    function IsSelected(Index : Integer) : TExtFunction; overload;
    function IsSelected(Index : TExtDataRecord) : TExtFunction; overload;
    function SelectAll : TExtFunction;
    function SelectFirstRow : TExtFunction;
    function SelectLastRow(KeepExisting : Boolean = false) : TExtFunction;
    function SelectNext(KeepExisting : Boolean = false) : TExtFunction;
    function SelectPrevious(KeepExisting : Boolean = false) : TExtFunction;
    function SelectRange(StartRow : Integer; EndRow : Integer; KeepExisting : Boolean = false) : TExtFunction;
    function SelectRecords(Records : TExtObjectList; KeepExisting : Boolean = false) : TExtFunction;
    function SelectRow(Row : Integer; KeepExisting : Boolean = false; PreventViewNotify : Boolean = false) : TExtFunction;
    function SelectRows(Rows : TExtObjectList; KeepExisting : Boolean = false) : TExtFunction;
    property MoveEditorOnEnter : Boolean read FMoveEditorOnEnter write SetFMoveEditorOnEnter;
    property SingleSelect : Boolean read FSingleSelect write SetFSingleSelect;
    property OnBeforerowselect : TExtGridRowSelectionModelOnBeforerowselect read FOnBeforerowselect write SetFOnBeforerowselect;
    property OnRowdeselect : TExtGridRowSelectionModelOnRowdeselect read FOnRowdeselect write SetFOnRowdeselect;
    property OnRowselect : TExtGridRowSelectionModelOnRowselect read FOnRowselect write SetFOnRowselect;
    property OnSelectionchange : TExtGridRowSelectionModelOnSelectionchange read FOnSelectionchange write SetFOnSelectionchange;
  end;

  TExtGridGroupingView = class(TExtGridGridView)
  private
    FEmptyGroupText : String;
    FEnableGrouping : Boolean; // true
    FEnableGroupingMenu : Boolean; // true
    FEnableNoGroups : Boolean; // true
    FGroupByText : String; // 'Group By This Field'
    FGroupMode : String;
    FGroupRenderer : TExtFunction;
    FGroupTextTpl : String; // '{text}'
    FHideGroupedColumn : Boolean;
    FIgnoreAdd : Boolean;
    FShowGroupName : Boolean; // true
    FShowGroupsText : String; // 'Show in Groups'
    FStartCollapsed : Boolean;
    procedure SetFEmptyGroupText(Value : String);
    procedure SetFEnableGrouping(Value : Boolean);
    procedure SetFEnableGroupingMenu(Value : Boolean);
    procedure SetFEnableNoGroups(Value : Boolean);
    procedure SetFGroupByText(Value : String);
    procedure SetFGroupMode(Value : String);
    procedure SetFGroupRenderer(Value : TExtFunction);
    procedure SetFGroupTextTpl(Value : String);
    procedure SetFHideGroupedColumn(Value : Boolean);
    procedure SetFIgnoreAdd(Value : Boolean);
    procedure SetFShowGroupName(Value : Boolean);
    procedure SetFShowGroupsText(Value : String);
    procedure SetFStartCollapsed(Value : Boolean);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function CollapseAllGroups : TExtFunction;
    function ExpandAllGroups : TExtFunction;
    function GetGroupId(Value : String) : TExtFunction;
    function ToggleAllGroups(Expanded : Boolean = false) : TExtFunction;
    function ToggleGroup(GroupId : String; Expanded : Boolean = false) : TExtFunction;
    function ToggleRowIndex(RowIndex : Integer; Expanded : Boolean = false) : TExtFunction;
    property EmptyGroupText : String read FEmptyGroupText write SetFEmptyGroupText;
    property EnableGrouping : Boolean read FEnableGrouping write SetFEnableGrouping;
    property EnableGroupingMenu : Boolean read FEnableGroupingMenu write SetFEnableGroupingMenu;
    property EnableNoGroups : Boolean read FEnableNoGroups write SetFEnableNoGroups;
    property GroupByText : String read FGroupByText write SetFGroupByText;
    property GroupMode : String read FGroupMode write SetFGroupMode;
    property GroupRenderer : TExtFunction read FGroupRenderer write SetFGroupRenderer;
    property GroupTextTpl : String read FGroupTextTpl write SetFGroupTextTpl;
    property HideGroupedColumn : Boolean read FHideGroupedColumn write SetFHideGroupedColumn;
    property IgnoreAdd : Boolean read FIgnoreAdd write SetFIgnoreAdd;
    property ShowGroupName : Boolean read FShowGroupName write SetFShowGroupName;
    property ShowGroupsText : String read FShowGroupsText write SetFShowGroupsText;
    property StartCollapsed : Boolean read FStartCollapsed write SetFStartCollapsed;
  end;

  TExtGridCheckboxSelectionModel = class(TExtGridRowSelectionModel)
  private
    FCheckOnly : Boolean;
    FHeader : String;
    FSortable : Boolean;
    FWidth : Integer; // 20
    procedure SetFCheckOnly(Value : Boolean);
    procedure SetFHeader(Value : String);
    procedure SetFSortable(Value : Boolean);
    procedure SetFWidth(Value : Integer);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    property CheckOnly : Boolean read FCheckOnly write SetFCheckOnly;
    property Header : String read FHeader write SetFHeader;
    property Sortable : Boolean read FSortable write SetFSortable;
    property Width : Integer read FWidth write SetFWidth;
  end;

  TExtGridGridDragZone = class(TExtDdDragZone)
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function AfterRepair : TExtFunction;
    function GetDragData : TExtFunction;
    function GetRepairXY(E : TEventObject) : TExtFunction;
    function OnInitDrag : TExtFunction;
  end;

  // Procedural types for events TExtGridGridPanel
  TExtGridGridPanelOnBodyscroll = procedure(ScrollLeft : Integer; ScrollTop : Integer) of object;
  TExtGridGridPanelOnCellclick = procedure(This : TExtGridGridPanel; RowIndex : Integer; ColumnIndex : Integer; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnCellcontextmenu = procedure(This : TExtGridGridPanel; RowIndex : Integer; CellIndex : Integer; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnCelldblclick = procedure(This : TExtGridGridPanel; RowIndex : Integer; ColumnIndex : Integer; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnCellmousedown = procedure(This : TExtGridGridPanel; RowIndex : Integer; ColumnIndex : Integer; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnClick = procedure(E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnColumnmove = procedure(OldIndex : Integer; NewIndex : Integer) of object;
  TExtGridGridPanelOnColumnresize = procedure(ColumnIndex : Integer; NewSize : Integer) of object;
  TExtGridGridPanelOnContainerclick = procedure(This : TExtGridGridPanel; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnContainercontextmenu = procedure(This : TExtGridGridPanel; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnContainerdblclick = procedure(This : TExtGridGridPanel; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnContainermousedown = procedure(This : TExtGridGridPanel; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnContextmenu = procedure(E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnDblclick = procedure(E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnGroupclick = procedure(This : TExtGridGridPanel; GroupField : String; GroupValue : String; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnGroupcontextmenu = procedure(This : TExtGridGridPanel; GroupField : String; GroupValue : String; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnGroupdblclick = procedure(This : TExtGridGridPanel; GroupField : String; GroupValue : String; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnGroupmousedown = procedure(This : TExtGridGridPanel; GroupField : String; GroupValue : String; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnHeaderclick = procedure(This : TExtGridGridPanel; ColumnIndex : Integer; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnHeadercontextmenu = procedure(This : TExtGridGridPanel; ColumnIndex : Integer; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnHeaderdblclick = procedure(This : TExtGridGridPanel; ColumnIndex : Integer; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnHeadermousedown = procedure(This : TExtGridGridPanel; ColumnIndex : Integer; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnKeydown = procedure(E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnKeypress = procedure(E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnMousedown = procedure(E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnMouseout = procedure(E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnMouseover = procedure(E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnMouseup = procedure(E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnReconfigure = procedure(This : TExtGridGridPanel; Store : TExtDataStore; ColModel : TExtGridColumnModel) of object;
  TExtGridGridPanelOnRowbodyclick = procedure(This : TExtGridGridPanel; RowIndex : Integer; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnRowbodycontextmenu = procedure(This : TExtGridGridPanel; RowIndex : Integer; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnRowbodydblclick = procedure(This : TExtGridGridPanel; RowIndex : Integer; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnRowbodymousedown = procedure(This : TExtGridGridPanel; RowIndex : Integer; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnRowclick = procedure(This : TExtGridGridPanel; RowIndex : Integer; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnRowcontextmenu = procedure(This : TExtGridGridPanel; RowIndex : Integer; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnRowdblclick = procedure(This : TExtGridGridPanel; RowIndex : Integer; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnRowmousedown = procedure(This : TExtGridGridPanel; RowIndex : Integer; E : TExtEventObjectSingleton) of object;
  TExtGridGridPanelOnSortchange = procedure(This : TExtGridGridPanel; SortInfo : TExtObject) of object;
  TExtGridGridPanelOnViewready = procedure(This : TExtGridGridPanel) of object;

  TExtGridGridPanel = class(TExtPanel)
  private
    FAutoExpandColumn : String;
    FAutoExpandMax : Integer;
    FAutoExpandMin : Integer;
    FBubbleEvents : TExtObjectList;
    FCm : TExtObject;
    FColModel : TExtObject;
    FColumnLines : Boolean;
    FColumns : TExtObjectList;
    FDdGroup : String;
    FDdText : String;
    FDeferRowRender : Boolean;
    FDisableSelection : Boolean;
    FEnableColumnHide : Boolean;
    FEnableColumnMove : Boolean;
    FEnableColumnResize : Boolean;
    FEnableDragDrop : Boolean;
    FEnableHdMenu : Boolean;
    FHideHeaders : Boolean;
    FLoadMask : TExtObject;
    FMaxHeight : Integer;
    FMinColumnWidth : Integer;
    FSelModel : TExtObject;
    FSm : TExtObject;
    FStateEvents : TExtObjectList;
    FStore : TExtDataStore;
    FStripeRows : Boolean;
    FTrackMouseOver : Boolean;
    FView : TExtObject;
    FViewConfig : TExtObject;
    FLoadMaskBoolean : Boolean;
    FOnBodyscroll : TExtGridGridPanelOnBodyscroll;
    FOnCellclick : TExtGridGridPanelOnCellclick;
    FOnCellcontextmenu : TExtGridGridPanelOnCellcontextmenu;
    FOnCelldblclick : TExtGridGridPanelOnCelldblclick;
    FOnCellmousedown : TExtGridGridPanelOnCellmousedown;
    FOnClick : TExtGridGridPanelOnClick;
    FOnColumnmove : TExtGridGridPanelOnColumnmove;
    FOnColumnresize : TExtGridGridPanelOnColumnresize;
    FOnContainerclick : TExtGridGridPanelOnContainerclick;
    FOnContainercontextmenu : TExtGridGridPanelOnContainercontextmenu;
    FOnContainerdblclick : TExtGridGridPanelOnContainerdblclick;
    FOnContainermousedown : TExtGridGridPanelOnContainermousedown;
    FOnContextmenu : TExtGridGridPanelOnContextmenu;
    FOnDblclick : TExtGridGridPanelOnDblclick;
    FOnGroupclick : TExtGridGridPanelOnGroupclick;
    FOnGroupcontextmenu : TExtGridGridPanelOnGroupcontextmenu;
    FOnGroupdblclick : TExtGridGridPanelOnGroupdblclick;
    FOnGroupmousedown : TExtGridGridPanelOnGroupmousedown;
    FOnHeaderclick : TExtGridGridPanelOnHeaderclick;
    FOnHeadercontextmenu : TExtGridGridPanelOnHeadercontextmenu;
    FOnHeaderdblclick : TExtGridGridPanelOnHeaderdblclick;
    FOnHeadermousedown : TExtGridGridPanelOnHeadermousedown;
    FOnKeydown : TExtGridGridPanelOnKeydown;
    FOnKeypress : TExtGridGridPanelOnKeypress;
    FOnMousedown : TExtGridGridPanelOnMousedown;
    FOnMouseout : TExtGridGridPanelOnMouseout;
    FOnMouseover : TExtGridGridPanelOnMouseover;
    FOnMouseup : TExtGridGridPanelOnMouseup;
    FOnReconfigure : TExtGridGridPanelOnReconfigure;
    FOnRowbodyclick : TExtGridGridPanelOnRowbodyclick;
    FOnRowbodycontextmenu : TExtGridGridPanelOnRowbodycontextmenu;
    FOnRowbodydblclick : TExtGridGridPanelOnRowbodydblclick;
    FOnRowbodymousedown : TExtGridGridPanelOnRowbodymousedown;
    FOnRowclick : TExtGridGridPanelOnRowclick;
    FOnRowcontextmenu : TExtGridGridPanelOnRowcontextmenu;
    FOnRowdblclick : TExtGridGridPanelOnRowdblclick;
    FOnRowmousedown : TExtGridGridPanelOnRowmousedown;
    FOnSortchange : TExtGridGridPanelOnSortchange;
    FOnViewready : TExtGridGridPanelOnViewready;
    procedure SetFAutoExpandColumn(Value : String);
    procedure SetFAutoExpandMax(Value : Integer);
    procedure SetFAutoExpandMin(Value : Integer);
    procedure SetFBubbleEvents(Value : TExtObjectList);
    procedure SetFCm(Value : TExtObject);
    procedure SetFColModel(Value : TExtObject);
    procedure SetFColumnLines(Value : Boolean);
    procedure SetFColumns(Value : TExtObjectList);
    procedure SetFDdGroup(Value : String);
    procedure SetFDdText(Value : String);
    procedure SetFDeferRowRender(Value : Boolean);
    procedure SetFDisableSelection(Value : Boolean);
    procedure SetFEnableColumnHide(Value : Boolean);
    procedure SetFEnableColumnMove(Value : Boolean);
    procedure SetFEnableColumnResize(Value : Boolean);
    procedure SetFEnableDragDrop(Value : Boolean);
    procedure SetFEnableHdMenu(Value : Boolean);
    procedure SetFHideHeaders(Value : Boolean);
    procedure SetFLoadMask(Value : TExtObject);
    procedure SetFMaxHeight(Value : Integer);
    procedure SetFMinColumnWidth(Value : Integer);
    procedure SetFSelModel(Value : TExtObject);
    procedure SetFSm(Value : TExtObject);
    procedure SetFStateEvents(Value : TExtObjectList);
    procedure SetFStore(Value : TExtDataStore);
    procedure SetFStripeRows(Value : Boolean);
    procedure SetFTrackMouseOver(Value : Boolean);
    procedure SetFView(Value : TExtObject);
    procedure SetFViewConfig(Value : TExtObject);
    procedure SetFLoadMaskBoolean(Value : Boolean);
    procedure SetFOnBodyscroll(Value : TExtGridGridPanelOnBodyscroll);
    procedure SetFOnCellclick(Value : TExtGridGridPanelOnCellclick);
    procedure SetFOnCellcontextmenu(Value : TExtGridGridPanelOnCellcontextmenu);
    procedure SetFOnCelldblclick(Value : TExtGridGridPanelOnCelldblclick);
    procedure SetFOnCellmousedown(Value : TExtGridGridPanelOnCellmousedown);
    procedure SetFOnClick(Value : TExtGridGridPanelOnClick);
    procedure SetFOnColumnmove(Value : TExtGridGridPanelOnColumnmove);
    procedure SetFOnColumnresize(Value : TExtGridGridPanelOnColumnresize);
    procedure SetFOnContainerclick(Value : TExtGridGridPanelOnContainerclick);
    procedure SetFOnContainercontextmenu(Value : TExtGridGridPanelOnContainercontextmenu);
    procedure SetFOnContainerdblclick(Value : TExtGridGridPanelOnContainerdblclick);
    procedure SetFOnContainermousedown(Value : TExtGridGridPanelOnContainermousedown);
    procedure SetFOnContextmenu(Value : TExtGridGridPanelOnContextmenu);
    procedure SetFOnDblclick(Value : TExtGridGridPanelOnDblclick);
    procedure SetFOnGroupclick(Value : TExtGridGridPanelOnGroupclick);
    procedure SetFOnGroupcontextmenu(Value : TExtGridGridPanelOnGroupcontextmenu);
    procedure SetFOnGroupdblclick(Value : TExtGridGridPanelOnGroupdblclick);
    procedure SetFOnGroupmousedown(Value : TExtGridGridPanelOnGroupmousedown);
    procedure SetFOnHeaderclick(Value : TExtGridGridPanelOnHeaderclick);
    procedure SetFOnHeadercontextmenu(Value : TExtGridGridPanelOnHeadercontextmenu);
    procedure SetFOnHeaderdblclick(Value : TExtGridGridPanelOnHeaderdblclick);
    procedure SetFOnHeadermousedown(Value : TExtGridGridPanelOnHeadermousedown);
    procedure SetFOnKeydown(Value : TExtGridGridPanelOnKeydown);
    procedure SetFOnKeypress(Value : TExtGridGridPanelOnKeypress);
    procedure SetFOnMousedown(Value : TExtGridGridPanelOnMousedown);
    procedure SetFOnMouseout(Value : TExtGridGridPanelOnMouseout);
    procedure SetFOnMouseover(Value : TExtGridGridPanelOnMouseover);
    procedure SetFOnMouseup(Value : TExtGridGridPanelOnMouseup);
    procedure SetFOnReconfigure(Value : TExtGridGridPanelOnReconfigure);
    procedure SetFOnRowbodyclick(Value : TExtGridGridPanelOnRowbodyclick);
    procedure SetFOnRowbodycontextmenu(Value : TExtGridGridPanelOnRowbodycontextmenu);
    procedure SetFOnRowbodydblclick(Value : TExtGridGridPanelOnRowbodydblclick);
    procedure SetFOnRowbodymousedown(Value : TExtGridGridPanelOnRowbodymousedown);
    procedure SetFOnRowclick(Value : TExtGridGridPanelOnRowclick);
    procedure SetFOnRowcontextmenu(Value : TExtGridGridPanelOnRowcontextmenu);
    procedure SetFOnRowdblclick(Value : TExtGridGridPanelOnRowdblclick);
    procedure SetFOnRowmousedown(Value : TExtGridGridPanelOnRowmousedown);
    procedure SetFOnSortchange(Value : TExtGridGridPanelOnSortchange);
    procedure SetFOnViewready(Value : TExtGridGridPanelOnViewready);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function GetColumnModel : TExtFunction;
    function GetDragDropText : TExtFunction;
    function GetGridEl : TExtFunction;
    function GetSelectionModel : TExtFunction;
    function GetStore : TExtFunction;
    function GetView : TExtFunction;
    function Reconfigure(Store : TExtDataStore; ColModel : TExtGridColumnModel) : TExtFunction;
    destructor Destroy; override;
    property AutoExpandColumn : String read FAutoExpandColumn write SetFAutoExpandColumn;
    property AutoExpandMax : Integer read FAutoExpandMax write SetFAutoExpandMax;
    property AutoExpandMin : Integer read FAutoExpandMin write SetFAutoExpandMin;
    property BubbleEvents : TExtObjectList read FBubbleEvents write SetFBubbleEvents;
    property Cm : TExtObject read FCm write SetFCm;
    property ColModel : TExtObject read FColModel write SetFColModel;
    property ColumnLines : Boolean read FColumnLines write SetFColumnLines;
    property Columns : TExtObjectList read FColumns write SetFColumns;
    property DdGroup : String read FDdGroup write SetFDdGroup;
    property DdText : String read FDdText write SetFDdText;
    property DeferRowRender : Boolean read FDeferRowRender write SetFDeferRowRender;
    property DisableSelection : Boolean read FDisableSelection write SetFDisableSelection;
    property EnableColumnHide : Boolean read FEnableColumnHide write SetFEnableColumnHide;
    property EnableColumnMove : Boolean read FEnableColumnMove write SetFEnableColumnMove;
    property EnableColumnResize : Boolean read FEnableColumnResize write SetFEnableColumnResize;
    property EnableDragDrop : Boolean read FEnableDragDrop write SetFEnableDragDrop;
    property EnableHdMenu : Boolean read FEnableHdMenu write SetFEnableHdMenu;
    property HideHeaders : Boolean read FHideHeaders write SetFHideHeaders;
    property LoadMask : TExtObject read FLoadMask write SetFLoadMask;
    property MaxHeight : Integer read FMaxHeight write SetFMaxHeight;
    property MinColumnWidth : Integer read FMinColumnWidth write SetFMinColumnWidth;
    property SelModel : TExtObject read FSelModel write SetFSelModel;
    property Sm : TExtObject read FSm write SetFSm;
    property StateEvents : TExtObjectList read FStateEvents write SetFStateEvents;
    property Store : TExtDataStore read FStore write SetFStore;
    property StripeRows : Boolean read FStripeRows write SetFStripeRows;
    property TrackMouseOver : Boolean read FTrackMouseOver write SetFTrackMouseOver;
    property View : TExtObject read FView write SetFView;
    property ViewConfig : TExtObject read FViewConfig write SetFViewConfig;
    property LoadMaskBoolean : Boolean read FLoadMaskBoolean write SetFLoadMaskBoolean;
    property OnBodyscroll : TExtGridGridPanelOnBodyscroll read FOnBodyscroll write SetFOnBodyscroll;
    property OnCellclick : TExtGridGridPanelOnCellclick read FOnCellclick write SetFOnCellclick;
    property OnCellcontextmenu : TExtGridGridPanelOnCellcontextmenu read FOnCellcontextmenu write SetFOnCellcontextmenu;
    property OnCelldblclick : TExtGridGridPanelOnCelldblclick read FOnCelldblclick write SetFOnCelldblclick;
    property OnCellmousedown : TExtGridGridPanelOnCellmousedown read FOnCellmousedown write SetFOnCellmousedown;
    property OnClick : TExtGridGridPanelOnClick read FOnClick write SetFOnClick;
    property OnColumnmove : TExtGridGridPanelOnColumnmove read FOnColumnmove write SetFOnColumnmove;
    property OnColumnresize : TExtGridGridPanelOnColumnresize read FOnColumnresize write SetFOnColumnresize;
    property OnContainerclick : TExtGridGridPanelOnContainerclick read FOnContainerclick write SetFOnContainerclick;
    property OnContainercontextmenu : TExtGridGridPanelOnContainercontextmenu read FOnContainercontextmenu write SetFOnContainercontextmenu;
    property OnContainerdblclick : TExtGridGridPanelOnContainerdblclick read FOnContainerdblclick write SetFOnContainerdblclick;
    property OnContainermousedown : TExtGridGridPanelOnContainermousedown read FOnContainermousedown write SetFOnContainermousedown;
    property OnContextmenu : TExtGridGridPanelOnContextmenu read FOnContextmenu write SetFOnContextmenu;
    property OnDblclick : TExtGridGridPanelOnDblclick read FOnDblclick write SetFOnDblclick;
    property OnGroupclick : TExtGridGridPanelOnGroupclick read FOnGroupclick write SetFOnGroupclick;
    property OnGroupcontextmenu : TExtGridGridPanelOnGroupcontextmenu read FOnGroupcontextmenu write SetFOnGroupcontextmenu;
    property OnGroupdblclick : TExtGridGridPanelOnGroupdblclick read FOnGroupdblclick write SetFOnGroupdblclick;
    property OnGroupmousedown : TExtGridGridPanelOnGroupmousedown read FOnGroupmousedown write SetFOnGroupmousedown;
    property OnHeaderclick : TExtGridGridPanelOnHeaderclick read FOnHeaderclick write SetFOnHeaderclick;
    property OnHeadercontextmenu : TExtGridGridPanelOnHeadercontextmenu read FOnHeadercontextmenu write SetFOnHeadercontextmenu;
    property OnHeaderdblclick : TExtGridGridPanelOnHeaderdblclick read FOnHeaderdblclick write SetFOnHeaderdblclick;
    property OnHeadermousedown : TExtGridGridPanelOnHeadermousedown read FOnHeadermousedown write SetFOnHeadermousedown;
    property OnKeydown : TExtGridGridPanelOnKeydown read FOnKeydown write SetFOnKeydown;
    property OnKeypress : TExtGridGridPanelOnKeypress read FOnKeypress write SetFOnKeypress;
    property OnMousedown : TExtGridGridPanelOnMousedown read FOnMousedown write SetFOnMousedown;
    property OnMouseout : TExtGridGridPanelOnMouseout read FOnMouseout write SetFOnMouseout;
    property OnMouseover : TExtGridGridPanelOnMouseover read FOnMouseover write SetFOnMouseover;
    property OnMouseup : TExtGridGridPanelOnMouseup read FOnMouseup write SetFOnMouseup;
    property OnReconfigure : TExtGridGridPanelOnReconfigure read FOnReconfigure write SetFOnReconfigure;
    property OnRowbodyclick : TExtGridGridPanelOnRowbodyclick read FOnRowbodyclick write SetFOnRowbodyclick;
    property OnRowbodycontextmenu : TExtGridGridPanelOnRowbodycontextmenu read FOnRowbodycontextmenu write SetFOnRowbodycontextmenu;
    property OnRowbodydblclick : TExtGridGridPanelOnRowbodydblclick read FOnRowbodydblclick write SetFOnRowbodydblclick;
    property OnRowbodymousedown : TExtGridGridPanelOnRowbodymousedown read FOnRowbodymousedown write SetFOnRowbodymousedown;
    property OnRowclick : TExtGridGridPanelOnRowclick read FOnRowclick write SetFOnRowclick;
    property OnRowcontextmenu : TExtGridGridPanelOnRowcontextmenu read FOnRowcontextmenu write SetFOnRowcontextmenu;
    property OnRowdblclick : TExtGridGridPanelOnRowdblclick read FOnRowdblclick write SetFOnRowdblclick;
    property OnRowmousedown : TExtGridGridPanelOnRowmousedown read FOnRowmousedown write SetFOnRowmousedown;
    property OnSortchange : TExtGridGridPanelOnSortchange read FOnSortchange write SetFOnSortchange;
    property OnViewready : TExtGridGridPanelOnViewready read FOnViewready write SetFOnViewready;
  end;

  // Procedural types for events TExtGridEditorGridPanel
  TExtGridEditorGridPanelOnAfteredit = procedure(E : TExtObject) of object;
  TExtGridEditorGridPanelOnBeforeedit = procedure(E : TExtObject) of object;
  TExtGridEditorGridPanelOnValidateedit = procedure(E : TExtObject) of object;

  TExtGridEditorGridPanel = class(TExtGridGridPanel)
  private
    FAutoEncode : Boolean;
    FClicksToEdit : Integer; // 2
    FForceValidation : Boolean;
    FSelModel : TExtObject;
    FOnAfteredit : TExtGridEditorGridPanelOnAfteredit;
    FOnBeforeedit : TExtGridEditorGridPanelOnBeforeedit;
    FOnValidateedit : TExtGridEditorGridPanelOnValidateedit;
    procedure SetFAutoEncode(Value : Boolean);
    procedure SetFClicksToEdit(Value : Integer);
    procedure SetFForceValidation(Value : Boolean);
    procedure SetFSelModel(Value : TExtObject);
    procedure SetFOnAfteredit(Value : TExtGridEditorGridPanelOnAfteredit);
    procedure SetFOnBeforeedit(Value : TExtGridEditorGridPanelOnBeforeedit);
    procedure SetFOnValidateedit(Value : TExtGridEditorGridPanelOnValidateedit);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function StartEditing(RowIndex : Integer; ColIndex : Integer) : TExtFunction;
    function StopEditing(Cancel : Boolean = false) : TExtFunction;
    destructor Destroy; override;
    property AutoEncode : Boolean read FAutoEncode write SetFAutoEncode;
    property ClicksToEdit : Integer read FClicksToEdit write SetFClicksToEdit;
    property ForceValidation : Boolean read FForceValidation write SetFForceValidation;
    property SelModel : TExtObject read FSelModel write SetFSelModel;
    property OnAfteredit : TExtGridEditorGridPanelOnAfteredit read FOnAfteredit write SetFOnAfteredit;
    property OnBeforeedit : TExtGridEditorGridPanelOnBeforeedit read FOnBeforeedit write SetFOnBeforeedit;
    property OnValidateedit : TExtGridEditorGridPanelOnValidateedit read FOnValidateedit write SetFOnValidateedit;
  end;

  // Procedural types for events TExtGridPropertyGrid
  TExtGridPropertyGridOnBeforepropertychange = procedure(Source : TExtObject; RecordId : String; Value : String; OldValue : String) of object;
  TExtGridPropertyGridOnPropertychange = procedure(Source : TExtObject; RecordId : String; Value : String; OldValue : String) of object;

  TExtGridPropertyGrid = class(TExtGridEditorGridPanel)
  private
    FCustomEditors : TExtObject;
    FPropertyNames : TExtObject;
    FSource : TExtObject;
    FOnBeforepropertychange : TExtGridPropertyGridOnBeforepropertychange;
    FOnPropertychange : TExtGridPropertyGridOnPropertychange;
    procedure SetFCustomEditors(Value : TExtObject);
    procedure SetFPropertyNames(Value : TExtObject);
    procedure SetFSource(Value : TExtObject);
    procedure SetFOnBeforepropertychange(Value : TExtGridPropertyGridOnBeforepropertychange);
    procedure SetFOnPropertychange(Value : TExtGridPropertyGridOnPropertychange);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function GetSource : TExtFunction;
    function SetSource(Source : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property CustomEditors : TExtObject read FCustomEditors write SetFCustomEditors;
    property PropertyNames : TExtObject read FPropertyNames write SetFPropertyNames;
    property Source : TExtObject read FSource write SetFSource;
    property OnBeforepropertychange : TExtGridPropertyGridOnBeforepropertychange read FOnBeforepropertychange write SetFOnBeforepropertychange;
    property OnPropertychange : TExtGridPropertyGridOnPropertychange read FOnPropertychange write SetFOnPropertychange;
  end;

implementation

procedure TExtGridRowNumberer.SetFHeader(Value : String); begin
  FHeader := Value;
  JSCode('header:' + VarToJSON([Value]));
end;

procedure TExtGridRowNumberer.SetFWidth(Value : Integer); begin
  FWidth := Value;
  JSCode('width:' + VarToJSON([Value]));
end;

function TExtGridRowNumberer.JSClassName : string; begin
  Result := 'Ext.grid.RowNumberer';
end;

{$IFDEF FPC}constructor TExtGridRowNumberer.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtGridColumn.SetFAlign(Value : TExtGridColumnAlign); begin
  FAlign := Value;
  JSCode('align:"' + EnumToJSString(TypeInfo(TExtGridColumnAlign), ord(Value)) + '"');
end;

procedure TExtGridColumn.SetFCss(Value : String); begin
  FCss := Value;
  JSCode('css:' + VarToJSON([Value]));
end;

procedure TExtGridColumn.SetFDataIndex(Value : String); begin
  FDataIndex := Value;
  JSCode('dataIndex:' + VarToJSON([Value]));
end;

procedure TExtGridColumn.SetFEditable(Value : Boolean); begin
  FEditable := Value;
  JSCode('editable:' + VarToJSON([Value]));
end;

procedure TExtGridColumn.SetFEditor(Value : TExtFormField); begin
  FEditor := Value;
  Value.DeleteFromGarbage;
  JSCode('editor:' + VarToJSON([Value, false]));
end;

procedure TExtGridColumn.SetFEmptyGroupText(Value : String); begin
  FEmptyGroupText := Value;
  JSCode('emptyGroupText:' + VarToJSON([Value]));
end;

procedure TExtGridColumn.SetFFixed(Value : Boolean); begin
  FFixed := Value;
  JSCode('fixed:' + VarToJSON([Value]));
end;

procedure TExtGridColumn.SetFGroupName(Value : String); begin
  FGroupName := Value;
  JSCode('groupName:' + VarToJSON([Value]));
end;

procedure TExtGridColumn.SetFGroupRenderer(Value : TExtFunction); begin
  FGroupRenderer := Value;
  JSCode('groupRenderer:' + VarToJSON([Value, true]));
end;

procedure TExtGridColumn.SetFGroupable(Value : Boolean); begin
  FGroupable := Value;
  JSCode('groupable:' + VarToJSON([Value]));
end;

procedure TExtGridColumn.SetFHeader(Value : String); begin
  FHeader := Value;
  JSCode('header:' + VarToJSON([Value]));
end;

procedure TExtGridColumn.SetFHidden(Value : Boolean); begin
  FHidden := Value;
  JSCode('hidden:' + VarToJSON([Value]));
end;

procedure TExtGridColumn.SetFHideable(Value : Boolean); begin
  FHideable := Value;
  JSCode('hideable:' + VarToJSON([Value]));
end;

procedure TExtGridColumn.SetFId(Value : String); begin
  FId := Value;
  JSCode('id:' + VarToJSON([Value]));
end;

procedure TExtGridColumn.SetFMenuDisabled(Value : Boolean); begin
  FMenuDisabled := Value;
  JSCode('menuDisabled:' + VarToJSON([Value]));
end;

procedure TExtGridColumn.SetFRenderer(Value : String); begin
  FRenderer := Value;
  JSCode('renderer:' + VarToJSON([Value]));
end;

procedure TExtGridColumn.SetFResizable(Value : Boolean); begin
  FResizable := Value;
  JSCode('resizable:' + VarToJSON([Value]));
end;

procedure TExtGridColumn.SetFScope(Value : TExtObject); begin
  FScope := Value;
  Value.DeleteFromGarbage;
  JSCode('scope:' + VarToJSON([Value, false]));
end;

procedure TExtGridColumn.SetFSortable(Value : Boolean); begin
  FSortable := Value;
  JSCode('sortable:' + VarToJSON([Value]));
end;

procedure TExtGridColumn.SetFTooltip(Value : String); begin
  FTooltip := Value;
  JSCode('tooltip:' + VarToJSON([Value]));
end;

procedure TExtGridColumn.SetFWidth(Value : Integer); begin
  FWidth := Value;
  JSCode('width:' + VarToJSON([Value]));
end;

procedure TExtGridColumn.SetFXtype(Value : String); begin
  FXtype := Value;
  JSCode('xtype:' + VarToJSON([Value]));
end;

procedure TExtGridColumn.SetFRenderer_(Value : TExtFunction); begin
  FRenderer_ := Value;
  JSCode(JSName + '.renderer=' + VarToJSON([Value, true]) + ';');
end;

procedure TExtGridColumn.SetFRendererExtFunction(Value : TExtFunction); begin
  FRendererExtFunction := Value;
  JSCode('renderer:' + VarToJSON([Value, true]));
end;

function TExtGridColumn.JSClassName : string; begin
  Result := 'Ext.grid.Column';
end;

procedure TExtGridColumn.InitDefaults; begin
  inherited;
  FEditor := TExtFormField.CreateInternal(Self, 'editor');
  FHideable := true;
  FScope := TExtObject.CreateInternal(Self, 'scope');
end;

{$IFDEF FPC}constructor TExtGridColumn.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridColumn.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtGridColumn.GetCellEditor(RowIndex : Integer) : TExtFunction; begin
  JSCode(JSName + '.getCellEditor(' + VarToJSON([RowIndex]) + ');', 'TExtGridColumn');
  Result := Self;
end;

destructor TExtGridColumn.Destroy; begin
  try
    FEditor.Free;
    FScope.Free;
  except end;
  inherited;
end;

function TExtGridPropertyRecord.JSClassName : string; begin
  Result := 'Ext.grid.PropertyRecord';
end;

{$IFDEF FPC}constructor TExtGridPropertyRecord.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtGridTemplateColumn.SetFTpl(Value : String); begin
  FTpl := Value;
  JSCode('tpl:' + VarToJSON([Value]));
end;

procedure TExtGridTemplateColumn.SetFTplXTemplate(Value : TExtXTemplate); begin
  FTplXTemplate := Value;
  Value.DeleteFromGarbage;
  JSCode('tpl:' + VarToJSON([Value, false]));
end;

function TExtGridTemplateColumn.JSClassName : string; begin
  Result := 'Ext.grid.TemplateColumn';
end;

procedure TExtGridTemplateColumn.InitDefaults; begin
  inherited;
  FTplXTemplate := TExtXTemplate.CreateInternal(Self, 'tpl');
end;

{$IFDEF FPC}constructor TExtGridTemplateColumn.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridTemplateColumn.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtGridPropertyStore.JSClassName : string; begin
  Result := 'Ext.grid.PropertyStore';
end;

{$IFDEF FPC}constructor TExtGridPropertyStore.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridPropertyStore.Create(Grid : TExtGridGrid; Source : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Grid, false, Source, false]) + ');');
  InitDefaults;
end;

procedure TExtGridNumberColumn.SetFFormat(Value : String); begin
  FFormat := Value;
  JSCode('format:' + VarToJSON([Value]));
end;

function TExtGridNumberColumn.JSClassName : string; begin
  Result := 'Ext.grid.NumberColumn';
end;

procedure TExtGridNumberColumn.InitDefaults; begin
  inherited;
  FFormat := '0,000.00';
end;

{$IFDEF FPC}constructor TExtGridNumberColumn.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridNumberColumn.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

procedure TExtGridGridView.SetFAutoFill(Value : Boolean); begin
  FAutoFill := Value;
  JSCode('autoFill:' + VarToJSON([Value]));
end;

procedure TExtGridGridView.SetFCellSelector(Value : String); begin
  FCellSelector := Value;
  JSCode('cellSelector:' + VarToJSON([Value]));
end;

procedure TExtGridGridView.SetFCellSelectorDepth(Value : Integer); begin
  FCellSelectorDepth := Value;
  JSCode('cellSelectorDepth:' + VarToJSON([Value]));
end;

procedure TExtGridGridView.SetFColumnsText(Value : String); begin
  FColumnsText := Value;
  JSCode('columnsText:' + VarToJSON([Value]));
end;

procedure TExtGridGridView.SetFDeferEmptyText(Value : Boolean); begin
  FDeferEmptyText := Value;
  JSCode('deferEmptyText:' + VarToJSON([Value]));
end;

procedure TExtGridGridView.SetFEmptyText(Value : String); begin
  FEmptyText := Value;
  JSCode('emptyText:' + VarToJSON([Value]));
end;

procedure TExtGridGridView.SetFEnableRowBody(Value : Boolean); begin
  FEnableRowBody := Value;
  JSCode('enableRowBody:' + VarToJSON([Value]));
end;

procedure TExtGridGridView.SetFForceFit(Value : Boolean); begin
  FForceFit := Value;
  JSCode('forceFit:' + VarToJSON([Value]));
end;

procedure TExtGridGridView.SetFHeadersDisabled(Value : Boolean); begin
  FHeadersDisabled := Value;
  JSCode('headersDisabled:' + VarToJSON([Value]));
end;

procedure TExtGridGridView.SetFRowBodySelector(Value : String); begin
  FRowBodySelector := Value;
  JSCode('rowBodySelector:' + VarToJSON([Value]));
end;

procedure TExtGridGridView.SetFRowBodySelectorDepth(Value : Integer); begin
  FRowBodySelectorDepth := Value;
  JSCode('rowBodySelectorDepth:' + VarToJSON([Value]));
end;

procedure TExtGridGridView.SetFRowSelector(Value : String); begin
  FRowSelector := Value;
  JSCode('rowSelector:' + VarToJSON([Value]));
end;

procedure TExtGridGridView.SetFRowSelectorDepth(Value : Integer); begin
  FRowSelectorDepth := Value;
  JSCode('rowSelectorDepth:' + VarToJSON([Value]));
end;

procedure TExtGridGridView.SetFScrollOffset(Value : Integer); begin
  FScrollOffset := Value;
  JSCode('scrollOffset:' + VarToJSON([Value]));
end;

procedure TExtGridGridView.SetFSelectedRowClass(Value : String); begin
  FSelectedRowClass := Value;
  JSCode('selectedRowClass:' + VarToJSON([Value]));
end;

procedure TExtGridGridView.SetFSortAscText(Value : String); begin
  FSortAscText := Value;
  JSCode('sortAscText:' + VarToJSON([Value]));
end;

procedure TExtGridGridView.SetFSortClasses(Value : TExtObjectList); begin
  FSortClasses := Value;
  Value.DeleteFromGarbage;
  JSCode('sortClasses:' + VarToJSON([Value, false]));
end;

procedure TExtGridGridView.SetFSortDescText(Value : String); begin
  FSortDescText := Value;
  JSCode('sortDescText:' + VarToJSON([Value]));
end;

procedure TExtGridGridView.SetFDragZone(Value : TExtGridGridDragZone); begin
  FDragZone := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.dragZone=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtGridGridView.SetFMainBody(Value : TExtElement); begin
  FMainBody := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.mainBody=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtGridGridView.SetFOnBeforerefresh(Value : TExtGridGridViewOnBeforerefresh); begin
  if Assigned(FOnBeforerefresh) then
    JSCode(JSName+'.events ["beforerefresh"].listeners=[];');
  if Assigned(Value) then
    On('beforerefresh', Ajax('beforerefresh', ['View', '%0.nm'], true));
  FOnBeforerefresh := Value;
end;

procedure TExtGridGridView.SetFOnBeforerowremoved(Value : TExtGridGridViewOnBeforerowremoved); begin
  if Assigned(FOnBeforerowremoved) then
    JSCode(JSName+'.events ["beforerowremoved"].listeners=[];');
  if Assigned(Value) then
    On('beforerowremoved', Ajax('beforerowremoved', ['View', '%0.nm','RowIndex', '%1','RecordJS', '%2.nm'], true));
  FOnBeforerowremoved := Value;
end;

procedure TExtGridGridView.SetFOnBeforerowsinserted(Value : TExtGridGridViewOnBeforerowsinserted); begin
  if Assigned(FOnBeforerowsinserted) then
    JSCode(JSName+'.events ["beforerowsinserted"].listeners=[];');
  if Assigned(Value) then
    On('beforerowsinserted', Ajax('beforerowsinserted', ['View', '%0.nm','FirstRow', '%1','LastRow', '%2'], true));
  FOnBeforerowsinserted := Value;
end;

procedure TExtGridGridView.SetFOnRefresh(Value : TExtGridGridViewOnRefresh); begin
  if Assigned(FOnRefresh) then
    JSCode(JSName+'.events ["refresh"].listeners=[];');
  if Assigned(Value) then
    On('refresh', Ajax('refresh', ['View', '%0.nm'], true));
  FOnRefresh := Value;
end;

procedure TExtGridGridView.SetFOnRowremoved(Value : TExtGridGridViewOnRowremoved); begin
  if Assigned(FOnRowremoved) then
    JSCode(JSName+'.events ["rowremoved"].listeners=[];');
  if Assigned(Value) then
    On('rowremoved', Ajax('rowremoved', ['View', '%0.nm','RowIndex', '%1','RecordJS', '%2.nm'], true));
  FOnRowremoved := Value;
end;

procedure TExtGridGridView.SetFOnRowsinserted(Value : TExtGridGridViewOnRowsinserted); begin
  if Assigned(FOnRowsinserted) then
    JSCode(JSName+'.events ["rowsinserted"].listeners=[];');
  if Assigned(Value) then
    On('rowsinserted', Ajax('rowsinserted', ['View', '%0.nm','FirstRow', '%1','LastRow', '%2'], true));
  FOnRowsinserted := Value;
end;

procedure TExtGridGridView.SetFOnRowupdated(Value : TExtGridGridViewOnRowupdated); begin
  if Assigned(FOnRowupdated) then
    JSCode(JSName+'.events ["rowupdated"].listeners=[];');
  if Assigned(Value) then
    On('rowupdated', Ajax('rowupdated', ['View', '%0.nm','FirstRow', '%1','RecordJS', '%2.nm'], true));
  FOnRowupdated := Value;
end;

function TExtGridGridView.JSClassName : string; begin
  Result := 'Ext.grid.GridView';
end;

procedure TExtGridGridView.InitDefaults; begin
  inherited;
  FCellSelector := 'td.x-grid3-cell';
  FCellSelectorDepth := 4;
  FColumnsText := 'Columns';
  FDeferEmptyText := true;
  FRowBodySelector := 'div.x-grid3-row';
  FRowBodySelectorDepth := 10;
  FRowSelector := 'div.x-grid3-row';
  FRowSelectorDepth := 10;
  FSelectedRowClass := 'x-grid3-row-selected';
  FSortAscText := 'Sort Ascending';
  FSortClasses := TExtObjectList.Create(Self, 'sortClasses');
  FSortDescText := 'Sort Descending';
  FDragZone := TExtGridGridDragZone.CreateInternal(Self, 'dragZone');
  FMainBody := TExtElement.CreateInternal(Self, 'mainBody');
end;

{$IFDEF FPC}constructor TExtGridGridView.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridGridView.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtGridGridView.FindCellIndex(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.findCellIndex(' + VarToJSON([El, false]) + ');', 'TExtGridGridView');
  Result := Self;
end;

function TExtGridGridView.FindRow(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.findRow(' + VarToJSON([El, false]) + ');', 'TExtGridGridView');
  Result := Self;
end;

function TExtGridGridView.FindRowBody(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.findRowBody(' + VarToJSON([El, false]) + ');', 'TExtGridGridView');
  Result := Self;
end;

function TExtGridGridView.FindRowIndex(El : THTMLElement) : TExtFunction; begin
  JSCode(JSName + '.findRowIndex(' + VarToJSON([El, false]) + ');', 'TExtGridGridView');
  Result := Self;
end;

function TExtGridGridView.FocusCell(Row : Integer; Col : Integer) : TExtFunction; begin
  JSCode(JSName + '.focusCell(' + VarToJSON([Row, Col]) + ');', 'TExtGridGridView');
  Result := Self;
end;

function TExtGridGridView.FocusRow(Row : Integer) : TExtFunction; begin
  JSCode(JSName + '.focusRow(' + VarToJSON([Row]) + ');', 'TExtGridGridView');
  Result := Self;
end;

function TExtGridGridView.GetCell(Row : Integer; Col : Integer) : TExtFunction; begin
  JSCode(JSName + '.getCell(' + VarToJSON([Row, Col]) + ');', 'TExtGridGridView');
  Result := Self;
end;

function TExtGridGridView.GetHeaderCell(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.getHeaderCell(' + VarToJSON([Index]) + ');', 'TExtGridGridView');
  Result := Self;
end;

function TExtGridGridView.GetRow(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.getRow(' + VarToJSON([Index]) + ');', 'TExtGridGridView');
  Result := Self;
end;

function TExtGridGridView.GetRowClass(RecordJS : TExtDataRecord; Index : Integer; RowParams : TExtObject; Store : TExtDataStore) : TExtFunction; begin
  JSCode(JSName + '.getRowClass(' + VarToJSON([RecordJS, false, Index, RowParams, false, Store, false]) + ');', 'TExtGridGridView');
  Result := Self;
end;

function TExtGridGridView.Refresh(HeadersToo : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.refresh(' + VarToJSON([HeadersToo]) + ');', 'TExtGridGridView');
  Result := Self;
end;

function TExtGridGridView.ScrollToTop : TExtFunction; begin
  JSCode(JSName + '.scrollToTop();', 'TExtGridGridView');
  Result := Self;
end;

destructor TExtGridGridView.Destroy; begin
  try
    FSortClasses.Free;
    FDragZone.Free;
    FMainBody.Free;
  except end;
  inherited;
end;

procedure TExtGridGridView.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforerefresh') and Assigned(FOnBeforerefresh) then
    FOnBeforerefresh(TExtGridGridView(ParamAsObject('View')))
  else if (AEvtName = 'beforerowremoved') and Assigned(FOnBeforerowremoved) then
    FOnBeforerowremoved(TExtGridGridView(ParamAsObject('View')), ParamAsInteger('RowIndex'), TExtDataRecord(ParamAsObject('RecordJS')))
  else if (AEvtName = 'beforerowsinserted') and Assigned(FOnBeforerowsinserted) then
    FOnBeforerowsinserted(TExtGridGridView(ParamAsObject('View')), ParamAsInteger('FirstRow'), ParamAsInteger('LastRow'))
  else if (AEvtName = 'refresh') and Assigned(FOnRefresh) then
    FOnRefresh(TExtGridGridView(ParamAsObject('View')))
  else if (AEvtName = 'rowremoved') and Assigned(FOnRowremoved) then
    FOnRowremoved(TExtGridGridView(ParamAsObject('View')), ParamAsInteger('RowIndex'), TExtDataRecord(ParamAsObject('RecordJS')))
  else if (AEvtName = 'rowsinserted') and Assigned(FOnRowsinserted) then
    FOnRowsinserted(TExtGridGridView(ParamAsObject('View')), ParamAsInteger('FirstRow'), ParamAsInteger('LastRow'))
  else if (AEvtName = 'rowupdated') and Assigned(FOnRowupdated) then
    FOnRowupdated(TExtGridGridView(ParamAsObject('View')), ParamAsInteger('FirstRow'), TExtDataRecord(ParamAsObject('RecordJS')));
end;

procedure TExtGridColumnModel.SetFColumns(Value : TExtObjectList); begin
  FColumns := Value;
  Value.DeleteFromGarbage;
  JSCode('columns:' + VarToJSON([Value, false]));
end;

procedure TExtGridColumnModel.SetFDefaultSortable(Value : Boolean); begin
  FDefaultSortable := Value;
  JSCode('defaultSortable:' + VarToJSON([Value]));
end;

procedure TExtGridColumnModel.SetFDefaultWidth(Value : Integer); begin
  FDefaultWidth := Value;
  JSCode('defaultWidth:' + VarToJSON([Value]));
end;

procedure TExtGridColumnModel.SetFDefaults(Value : TExtObject); begin
  FDefaults := Value;
  Value.DeleteFromGarbage;
  JSCode('defaults:' + VarToJSON([Value, false]));
end;

procedure TExtGridColumnModel.SetFOnColumnmoved(Value : TExtGridColumnModelOnColumnmoved); begin
  if Assigned(FOnColumnmoved) then
    JSCode(JSName+'.events ["columnmoved"].listeners=[];');
  if Assigned(Value) then
    On('columnmoved', Ajax('columnmoved', ['This', '%0.nm','OldIndex', '%1','NewIndex', '%2'], true));
  FOnColumnmoved := Value;
end;

procedure TExtGridColumnModel.SetFOnConfigchange(Value : TExtGridColumnModelOnConfigchange); begin
  if Assigned(FOnConfigchange) then
    JSCode(JSName+'.events ["configchange"].listeners=[];');
  if Assigned(Value) then
    On('configchange', Ajax('configchange', ['This', '%0.nm'], true));
  FOnConfigchange := Value;
end;

procedure TExtGridColumnModel.SetFOnHeaderchange(Value : TExtGridColumnModelOnHeaderchange); begin
  if Assigned(FOnHeaderchange) then
    JSCode(JSName+'.events ["headerchange"].listeners=[];');
  if Assigned(Value) then
    On('headerchange', Ajax('headerchange', ['This', '%0.nm','ColumnIndex', '%1','NewText', '%2'], true));
  FOnHeaderchange := Value;
end;

procedure TExtGridColumnModel.SetFOnHiddenchange(Value : TExtGridColumnModelOnHiddenchange); begin
  if Assigned(FOnHiddenchange) then
    JSCode(JSName+'.events ["hiddenchange"].listeners=[];');
  if Assigned(Value) then
    On('hiddenchange', Ajax('hiddenchange', ['This', '%0.nm','ColumnIndex', '%1','Hidden', '%2'], true));
  FOnHiddenchange := Value;
end;

procedure TExtGridColumnModel.SetFOnWidthchange(Value : TExtGridColumnModelOnWidthchange); begin
  if Assigned(FOnWidthchange) then
    JSCode(JSName+'.events ["widthchange"].listeners=[];');
  if Assigned(Value) then
    On('widthchange', Ajax('widthchange', ['This', '%0.nm','ColumnIndex', '%1','NewWidth', '%2'], true));
  FOnWidthchange := Value;
end;

function TExtGridColumnModel.JSClassName : string; begin
  Result := 'Ext.grid.ColumnModel';
end;

procedure TExtGridColumnModel.InitDefaults; begin
  inherited;
  FColumns := TExtObjectList.Create(Self, 'columns');
  FDefaultWidth := 100;
  FDefaults := TExtObject.CreateInternal(Self, 'defaults');
end;

{$IFDEF FPC}constructor TExtGridColumnModel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridColumnModel.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtGridColumnModel.DestroyJS : TExtFunction; begin
  JSCode(JSName + '.destroy();', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.FindColumnIndex(Col : String) : TExtFunction; begin
  JSCode(JSName + '.findColumnIndex(' + VarToJSON([Col]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.GetCellEditor(ColIndex : Integer; RowIndex : Integer) : TExtFunction; begin
  JSCode(JSName + '.getCellEditor(' + VarToJSON([ColIndex, RowIndex]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.GetColumnById(Id : String) : TExtFunction; begin
  JSCode(JSName + '.getColumnById(' + VarToJSON([Id]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.GetColumnCount(VisibleOnly : Boolean) : TExtFunction; begin
  JSCode(JSName + '.getColumnCount(' + VarToJSON([VisibleOnly]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.GetColumnHeader(Col : Integer) : TExtFunction; begin
  JSCode(JSName + '.getColumnHeader(' + VarToJSON([Col]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.GetColumnId(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.getColumnId(' + VarToJSON([Index]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.GetColumnTooltip(Col : Integer) : TExtFunction; begin
  JSCode(JSName + '.getColumnTooltip(' + VarToJSON([Col]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.GetColumnWidth(Col : Integer) : TExtFunction; begin
  JSCode(JSName + '.getColumnWidth(' + VarToJSON([Col]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.GetColumnsBy(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.getColumnsBy(' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.GetDataIndex(Col : Integer) : TExtFunction; begin
  JSCode(JSName + '.getDataIndex(' + VarToJSON([Col]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.GetIndexById(Id : String) : TExtFunction; begin
  JSCode(JSName + '.getIndexById(' + VarToJSON([Id]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.GetRenderer(Col : Integer) : TExtFunction; begin
  JSCode(JSName + '.getRenderer(' + VarToJSON([Col]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.GetTotalWidth(IncludeHidden : Boolean) : TExtFunction; begin
  JSCode(JSName + '.getTotalWidth(' + VarToJSON([IncludeHidden]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.IsCellEditable(ColIndex : Integer; RowIndex : Integer) : TExtFunction; begin
  JSCode(JSName + '.isCellEditable(' + VarToJSON([ColIndex, RowIndex]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.IsFixed(ColIndex : Integer) : TExtFunction; begin
  JSCode(JSName + '.isFixed(' + VarToJSON([ColIndex]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.IsHidden(ColIndex : Integer) : TExtFunction; begin
  JSCode(JSName + '.isHidden(' + VarToJSON([ColIndex]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.IsMenuDisabled(Col : Integer) : TExtFunction; begin
  JSCode(JSName + '.isMenuDisabled(' + VarToJSON([Col]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.IsResizable : TExtFunction; begin
  JSCode(JSName + '.isResizable();', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.IsSortable(Col : Integer) : TExtFunction; begin
  JSCode(JSName + '.isSortable(' + VarToJSON([Col]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.MoveColumn(OldIndex : Integer; NewIndex : Integer) : TExtFunction; begin
  JSCode(JSName + '.moveColumn(' + VarToJSON([OldIndex, NewIndex]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.SetColumnHeader(Col : Integer; Header : String) : TExtFunction; begin
  JSCode(JSName + '.setColumnHeader(' + VarToJSON([Col, Header]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.SetColumnTooltip(Col : Integer; Tooltip : String) : TExtFunction; begin
  JSCode(JSName + '.setColumnTooltip(' + VarToJSON([Col, Tooltip]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.SetColumnWidth(Col : Integer; Width : Integer; SuppressEvent : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setColumnWidth(' + VarToJSON([Col, Width, SuppressEvent]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.SetConfig(Config : TExtObjectList = nil; Initial : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.setConfig(' + VarToJSON(Config) + ',' + VarToJSON([Initial]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.SetDataIndex(Col : Integer; DataIndex : String) : TExtFunction; begin
  JSCode(JSName + '.setDataIndex(' + VarToJSON([Col, DataIndex]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.SetEditable(Col : Integer; Editable : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setEditable(' + VarToJSON([Col, Editable]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.SetEditor(Col : Integer; Editor : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setEditor(' + VarToJSON([Col, Editor, false]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.SetHidden(ColIndex : Integer; Hidden : Boolean) : TExtFunction; begin
  JSCode(JSName + '.setHidden(' + VarToJSON([ColIndex, Hidden]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

function TExtGridColumnModel.SetRenderer(Col : Integer; Fn : TExtFunction) : TExtFunction; begin
  JSCode(JSName + '.setRenderer(' + VarToJSON([Col, Fn, true]) + ');', 'TExtGridColumnModel');
  Result := Self;
end;

destructor TExtGridColumnModel.Destroy; begin
  try
    FColumns.Free;
    FDefaults.Free;
  except end;
  inherited;
end;

procedure TExtGridColumnModel.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'columnmoved') and Assigned(FOnColumnmoved) then
    FOnColumnmoved(TExtGridColumnModel(ParamAsObject('This')), ParamAsInteger('OldIndex'), ParamAsInteger('NewIndex'))
  else if (AEvtName = 'configchange') and Assigned(FOnConfigchange) then
    FOnConfigchange(TExtGridColumnModel(ParamAsObject('This')))
  else if (AEvtName = 'headerchange') and Assigned(FOnHeaderchange) then
    FOnHeaderchange(TExtGridColumnModel(ParamAsObject('This')), ParamAsInteger('ColumnIndex'), ParamAsString('NewText'))
  else if (AEvtName = 'hiddenchange') and Assigned(FOnHiddenchange) then
    FOnHiddenchange(TExtGridColumnModel(ParamAsObject('This')), ParamAsInteger('ColumnIndex'), ParamAsBoolean('Hidden'))
  else if (AEvtName = 'widthchange') and Assigned(FOnWidthchange) then
    FOnWidthchange(TExtGridColumnModel(ParamAsObject('This')), ParamAsInteger('ColumnIndex'), ParamAsInteger('NewWidth'));
end;

procedure TExtGridBooleanColumn.SetFFalseText(Value : String); begin
  FFalseText := Value;
  JSCode('falseText:' + VarToJSON([Value]));
end;

procedure TExtGridBooleanColumn.SetFTrueText(Value : String); begin
  FTrueText := Value;
  JSCode('trueText:' + VarToJSON([Value]));
end;

procedure TExtGridBooleanColumn.SetFUndefinedText(Value : String); begin
  FUndefinedText := Value;
  JSCode('undefinedText:' + VarToJSON([Value]));
end;

function TExtGridBooleanColumn.JSClassName : string; begin
  Result := 'Ext.grid.BooleanColumn';
end;

procedure TExtGridBooleanColumn.InitDefaults; begin
  inherited;
  FFalseText := 'false';
  FTrueText := 'true';
end;

{$IFDEF FPC}constructor TExtGridBooleanColumn.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridBooleanColumn.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

procedure TExtGridDateColumn.SetFFormat(Value : String); begin
  FFormat := Value;
  JSCode('format:' + VarToJSON([Value]));
end;

function TExtGridDateColumn.JSClassName : string; begin
  Result := 'Ext.grid.DateColumn';
end;

procedure TExtGridDateColumn.InitDefaults; begin
  inherited;
  FFormat := 'm/d/Y';
end;

{$IFDEF FPC}constructor TExtGridDateColumn.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridDateColumn.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

procedure TExtGridAbstractSelectionModel.SetFGrid(Value : TExtObject); begin
  FGrid := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.grid=' + VarToJSON([Value, false]) + ';');
end;

function TExtGridAbstractSelectionModel.JSClassName : string; begin
  Result := 'Ext.grid.AbstractSelectionModel';
end;

procedure TExtGridAbstractSelectionModel.InitDefaults; begin
  inherited;
  FGrid := TExtObject.CreateInternal(Self, 'grid');
end;

{$IFDEF FPC}constructor TExtGridAbstractSelectionModel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridAbstractSelectionModel.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtGridAbstractSelectionModel.IsLocked : TExtFunction; begin
  JSCode(JSName + '.isLocked();', 'TExtGridAbstractSelectionModel');
  Result := Self;
end;

function TExtGridAbstractSelectionModel.Lock : TExtFunction; begin
  JSCode(JSName + '.lock();', 'TExtGridAbstractSelectionModel');
  Result := Self;
end;

function TExtGridAbstractSelectionModel.Unlock : TExtFunction; begin
  JSCode(JSName + '.unlock();', 'TExtGridAbstractSelectionModel');
  Result := Self;
end;

destructor TExtGridAbstractSelectionModel.Destroy; begin
  try
    FGrid.Free;
  except end;
  inherited;
end;

function TExtGridPropertyColumnModel.JSClassName : string; begin
  Result := 'Ext.grid.PropertyColumnModel';
end;

procedure TExtGridPropertyColumnModel.InitDefaults; begin
  inherited;
end;

{$IFDEF FPC}constructor TExtGridPropertyColumnModel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridPropertyColumnModel.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

procedure TExtGridCellSelectionModel.SetFOnBeforecellselect(Value : TExtGridCellSelectionModelOnBeforecellselect); begin
  if Assigned(FOnBeforecellselect) then
    JSCode(JSName+'.events ["beforecellselect"].listeners=[];');
  if Assigned(Value) then
    On('beforecellselect', Ajax('beforecellselect', ['This', '%0.nm','RowIndex', '%1','ColIndex', '%2'], true));
  FOnBeforecellselect := Value;
end;

procedure TExtGridCellSelectionModel.SetFOnCellselect(Value : TExtGridCellSelectionModelOnCellselect); begin
  if Assigned(FOnCellselect) then
    JSCode(JSName+'.events ["cellselect"].listeners=[];');
  if Assigned(Value) then
    On('cellselect', Ajax('cellselect', ['This', '%0.nm','RowIndex', '%1','ColIndex', '%2'], true));
  FOnCellselect := Value;
end;

procedure TExtGridCellSelectionModel.SetFOnSelectionchange(Value : TExtGridCellSelectionModelOnSelectionchange); begin
  if Assigned(FOnSelectionchange) then
    JSCode(JSName+'.events ["selectionchange"].listeners=[];');
  if Assigned(Value) then
    On('selectionchange', Ajax('selectionchange', ['This', '%0.nm','Selection', '%1.nm'], true));
  FOnSelectionchange := Value;
end;

function TExtGridCellSelectionModel.JSClassName : string; begin
  Result := 'Ext.grid.CellSelectionModel';
end;

{$IFDEF FPC}constructor TExtGridCellSelectionModel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridCellSelectionModel.Create(Config : TExtObject = nil); begin
  CreateVar(JSClassName + '(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

function TExtGridCellSelectionModel.ClearSelections(PreventNotify : Boolean) : TExtFunction; begin
  JSCode(JSName + '.clearSelections(' + VarToJSON([PreventNotify]) + ');', 'TExtGridCellSelectionModel');
  Result := Self;
end;

function TExtGridCellSelectionModel.GetSelectedCell : TExtFunction; begin
  JSCode(JSName + '.getSelectedCell();', 'TExtGridCellSelectionModel');
  Result := Self;
end;

function TExtGridCellSelectionModel.HasSelection : TExtFunction; begin
  JSCode(JSName + '.hasSelection();', 'TExtGridCellSelectionModel');
  Result := Self;
end;

function TExtGridCellSelectionModel.Select(RowIndex : Integer; ColIndex : Integer; PreventViewNotify : Boolean = false; PreventFocus : Boolean = false; R : TExtDataRecord = nil) : TExtFunction; begin
  JSCode(JSName + '.select(' + VarToJSON([RowIndex, ColIndex, PreventViewNotify, PreventFocus, R, false]) + ');', 'TExtGridCellSelectionModel');
  Result := Self;
end;

procedure TExtGridCellSelectionModel.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforecellselect') and Assigned(FOnBeforecellselect) then
    FOnBeforecellselect(TExtGridCellSelectionModel(ParamAsObject('This')), ParamAsInteger('RowIndex'), ParamAsInteger('ColIndex'))
  else if (AEvtName = 'cellselect') and Assigned(FOnCellselect) then
    FOnCellselect(TExtGridCellSelectionModel(ParamAsObject('This')), ParamAsInteger('RowIndex'), ParamAsInteger('ColIndex'))
  else if (AEvtName = 'selectionchange') and Assigned(FOnSelectionchange) then
    FOnSelectionchange(TExtGridCellSelectionModel(ParamAsObject('This')), TExtObject(ParamAsObject('Selection')));
end;

procedure TExtGridRowSelectionModel.SetFMoveEditorOnEnter(Value : Boolean); begin
  FMoveEditorOnEnter := Value;
  JSCode('moveEditorOnEnter:' + VarToJSON([Value]));
end;

procedure TExtGridRowSelectionModel.SetFSingleSelect(Value : Boolean); begin
  FSingleSelect := Value;
  JSCode('singleSelect:' + VarToJSON([Value]));
end;

procedure TExtGridRowSelectionModel.SetFOnBeforerowselect(Value : TExtGridRowSelectionModelOnBeforerowselect); begin
  if Assigned(FOnBeforerowselect) then
    JSCode(JSName+'.events ["beforerowselect"].listeners=[];');
  if Assigned(Value) then
    On('beforerowselect', Ajax('beforerowselect', ['This', '%0.nm','RowIndex', '%1','KeepExisting', '%2','RecordJS', '%3.nm'], true));
  FOnBeforerowselect := Value;
end;

procedure TExtGridRowSelectionModel.SetFOnRowdeselect(Value : TExtGridRowSelectionModelOnRowdeselect); begin
  if Assigned(FOnRowdeselect) then
    JSCode(JSName+'.events ["rowdeselect"].listeners=[];');
  if Assigned(Value) then
    On('rowdeselect', Ajax('rowdeselect', ['This', '%0.nm','RowIndex', '%1','RecordJS', '%2.nm'], true));
  FOnRowdeselect := Value;
end;

procedure TExtGridRowSelectionModel.SetFOnRowselect(Value : TExtGridRowSelectionModelOnRowselect); begin
  if Assigned(FOnRowselect) then
    JSCode(JSName+'.events ["rowselect"].listeners=[];');
  if Assigned(Value) then
    On('rowselect', Ajax('rowselect', ['This', '%0.nm','RowIndex', '%1','R', '%2.nm'], true));
  FOnRowselect := Value;
end;

procedure TExtGridRowSelectionModel.SetFOnSelectionchange(Value : TExtGridRowSelectionModelOnSelectionchange); begin
  if Assigned(FOnSelectionchange) then
    JSCode(JSName+'.events ["selectionchange"].listeners=[];');
  if Assigned(Value) then
    On('selectionchange', Ajax('selectionchange', ['This', '%0.nm'], true));
  FOnSelectionchange := Value;
end;

function TExtGridRowSelectionModel.JSClassName : string; begin
  Result := 'Ext.grid.RowSelectionModel';
end;

{$IFDEF FPC}constructor TExtGridRowSelectionModel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridRowSelectionModel.Create(Config : TExtObject = nil); begin
  CreateVar(JSClassName + '(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

function TExtGridRowSelectionModel.ClearSelections(Fast : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.clearSelections(' + VarToJSON([Fast]) + ');', 'TExtGridRowSelectionModel');
  Result := Self;
end;

function TExtGridRowSelectionModel.DeselectRange(StartRow : Integer; EndRow : Integer) : TExtFunction; begin
  JSCode(JSName + '.deselectRange(' + VarToJSON([StartRow, EndRow]) + ');', 'TExtGridRowSelectionModel');
  Result := Self;
end;

function TExtGridRowSelectionModel.DeselectRow(Row : Integer; PreventViewNotify : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.deselectRow(' + VarToJSON([Row, PreventViewNotify]) + ');', 'TExtGridRowSelectionModel');
  Result := Self;
end;

function TExtGridRowSelectionModel.Each(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.each(' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtGridRowSelectionModel');
  Result := Self;
end;

function TExtGridRowSelectionModel.GetCount : TExtFunction; begin
  JSCode(JSName + '.getCount();', 'TExtGridRowSelectionModel');
  Result := Self;
end;

function TExtGridRowSelectionModel.GetSelected : TExtFunction; begin
  JSCode(JSName + '.getSelected();', 'TExtGridRowSelectionModel');
  Result := Self;
end;

function TExtGridRowSelectionModel.GetSelections : TExtFunction; begin
  JSCode(JSName + '.getSelections();', 'TExtGridRowSelectionModel');
  Result := Self;
end;

function TExtGridRowSelectionModel.HasNext : TExtFunction; begin
  JSCode(JSName + '.hasNext();', 'TExtGridRowSelectionModel');
  Result := Self;
end;

function TExtGridRowSelectionModel.HasPrevious : TExtFunction; begin
  JSCode(JSName + '.hasPrevious();', 'TExtGridRowSelectionModel');
  Result := Self;
end;

function TExtGridRowSelectionModel.HasSelection : TExtFunction; begin
  JSCode(JSName + '.hasSelection();', 'TExtGridRowSelectionModel');
  Result := Self;
end;

function TExtGridRowSelectionModel.IsIdSelected(Id : String) : TExtFunction; begin
  JSCode(JSName + '.isIdSelected(' + VarToJSON([Id]) + ');', 'TExtGridRowSelectionModel');
  Result := Self;
end;

function TExtGridRowSelectionModel.IsSelected(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.isSelected(' + VarToJSON([Index]) + ');', 'TExtGridRowSelectionModel');
  Result := Self;
end;

function TExtGridRowSelectionModel.IsSelected(Index : TExtDataRecord) : TExtFunction; begin
  JSCode(JSName + '.isSelected(' + VarToJSON([Index, false]) + ');', 'TExtGridRowSelectionModel');
  Result := Self;
end;

function TExtGridRowSelectionModel.SelectAll : TExtFunction; begin
  JSCode(JSName + '.selectAll();', 'TExtGridRowSelectionModel');
  Result := Self;
end;

function TExtGridRowSelectionModel.SelectFirstRow : TExtFunction; begin
  JSCode(JSName + '.selectFirstRow();', 'TExtGridRowSelectionModel');
  Result := Self;
end;

function TExtGridRowSelectionModel.SelectLastRow(KeepExisting : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.selectLastRow(' + VarToJSON([KeepExisting]) + ');', 'TExtGridRowSelectionModel');
  Result := Self;
end;

function TExtGridRowSelectionModel.SelectNext(KeepExisting : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.selectNext(' + VarToJSON([KeepExisting]) + ');', 'TExtGridRowSelectionModel');
  Result := Self;
end;

function TExtGridRowSelectionModel.SelectPrevious(KeepExisting : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.selectPrevious(' + VarToJSON([KeepExisting]) + ');', 'TExtGridRowSelectionModel');
  Result := Self;
end;

function TExtGridRowSelectionModel.SelectRange(StartRow : Integer; EndRow : Integer; KeepExisting : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.selectRange(' + VarToJSON([StartRow, EndRow, KeepExisting]) + ');', 'TExtGridRowSelectionModel');
  Result := Self;
end;

function TExtGridRowSelectionModel.SelectRecords(Records : TExtObjectList; KeepExisting : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.selectRecords(' + VarToJSON(Records) + ',' + VarToJSON([KeepExisting]) + ');', 'TExtGridRowSelectionModel');
  Result := Self;
end;

function TExtGridRowSelectionModel.SelectRow(Row : Integer; KeepExisting : Boolean = false; PreventViewNotify : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.selectRow(' + VarToJSON([Row, KeepExisting, PreventViewNotify]) + ');', 'TExtGridRowSelectionModel');
  Result := Self;
end;

function TExtGridRowSelectionModel.SelectRows(Rows : TExtObjectList; KeepExisting : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.selectRows(' + VarToJSON(Rows) + ',' + VarToJSON([KeepExisting]) + ');', 'TExtGridRowSelectionModel');
  Result := Self;
end;

procedure TExtGridRowSelectionModel.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforerowselect') and Assigned(FOnBeforerowselect) then
    FOnBeforerowselect(TExtGridRowSelectionModel(ParamAsObject('This')), ParamAsInteger('RowIndex'), ParamAsBoolean('KeepExisting'), TExtDataRecord(ParamAsObject('RecordJS')))
  else if (AEvtName = 'rowdeselect') and Assigned(FOnRowdeselect) then
    FOnRowdeselect(TExtGridRowSelectionModel(ParamAsObject('This')), ParamAsInteger('RowIndex'), TExtDataRecord(ParamAsObject('RecordJS')))
  else if (AEvtName = 'rowselect') and Assigned(FOnRowselect) then
    FOnRowselect(TExtGridRowSelectionModel(ParamAsObject('This')), ParamAsInteger('RowIndex'), TExtDataRecord(ParamAsObject('R')))
  else if (AEvtName = 'selectionchange') and Assigned(FOnSelectionchange) then
    FOnSelectionchange(TExtGridRowSelectionModel(ParamAsObject('This')));
end;

procedure TExtGridGroupingView.SetFEmptyGroupText(Value : String); begin
  FEmptyGroupText := Value;
  JSCode('emptyGroupText:' + VarToJSON([Value]));
end;

procedure TExtGridGroupingView.SetFEnableGrouping(Value : Boolean); begin
  FEnableGrouping := Value;
  JSCode('enableGrouping:' + VarToJSON([Value]));
end;

procedure TExtGridGroupingView.SetFEnableGroupingMenu(Value : Boolean); begin
  FEnableGroupingMenu := Value;
  JSCode('enableGroupingMenu:' + VarToJSON([Value]));
end;

procedure TExtGridGroupingView.SetFEnableNoGroups(Value : Boolean); begin
  FEnableNoGroups := Value;
  JSCode('enableNoGroups:' + VarToJSON([Value]));
end;

procedure TExtGridGroupingView.SetFGroupByText(Value : String); begin
  FGroupByText := Value;
  JSCode('groupByText:' + VarToJSON([Value]));
end;

procedure TExtGridGroupingView.SetFGroupMode(Value : String); begin
  FGroupMode := Value;
  JSCode('groupMode:' + VarToJSON([Value]));
end;

procedure TExtGridGroupingView.SetFGroupRenderer(Value : TExtFunction); begin
  FGroupRenderer := Value;
  JSCode('groupRenderer:' + VarToJSON([Value, true]));
end;

procedure TExtGridGroupingView.SetFGroupTextTpl(Value : String); begin
  FGroupTextTpl := Value;
  JSCode('groupTextTpl:' + VarToJSON([Value]));
end;

procedure TExtGridGroupingView.SetFHideGroupedColumn(Value : Boolean); begin
  FHideGroupedColumn := Value;
  JSCode('hideGroupedColumn:' + VarToJSON([Value]));
end;

procedure TExtGridGroupingView.SetFIgnoreAdd(Value : Boolean); begin
  FIgnoreAdd := Value;
  JSCode('ignoreAdd:' + VarToJSON([Value]));
end;

procedure TExtGridGroupingView.SetFShowGroupName(Value : Boolean); begin
  FShowGroupName := Value;
  JSCode('showGroupName:' + VarToJSON([Value]));
end;

procedure TExtGridGroupingView.SetFShowGroupsText(Value : String); begin
  FShowGroupsText := Value;
  JSCode('showGroupsText:' + VarToJSON([Value]));
end;

procedure TExtGridGroupingView.SetFStartCollapsed(Value : Boolean); begin
  FStartCollapsed := Value;
  JSCode('startCollapsed:' + VarToJSON([Value]));
end;

function TExtGridGroupingView.JSClassName : string; begin
  Result := 'Ext.grid.GroupingView';
end;

procedure TExtGridGroupingView.InitDefaults; begin
  inherited;
  FEnableGrouping := true;
  FEnableGroupingMenu := true;
  FEnableNoGroups := true;
  FGroupByText := 'Group By This Field';
  FGroupTextTpl := '{text}';
  FShowGroupName := true;
  FShowGroupsText := 'Show in Groups';
end;

{$IFDEF FPC}constructor TExtGridGroupingView.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridGroupingView.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtGridGroupingView.CollapseAllGroups : TExtFunction; begin
  JSCode(JSName + '.collapseAllGroups();', 'TExtGridGroupingView');
  Result := Self;
end;

function TExtGridGroupingView.ExpandAllGroups : TExtFunction; begin
  JSCode(JSName + '.expandAllGroups();', 'TExtGridGroupingView');
  Result := Self;
end;

function TExtGridGroupingView.GetGroupId(Value : String) : TExtFunction; begin
  JSCode(JSName + '.getGroupId(' + VarToJSON([Value]) + ');', 'TExtGridGroupingView');
  Result := Self;
end;

function TExtGridGroupingView.ToggleAllGroups(Expanded : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.toggleAllGroups(' + VarToJSON([Expanded]) + ');', 'TExtGridGroupingView');
  Result := Self;
end;

function TExtGridGroupingView.ToggleGroup(GroupId : String; Expanded : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.toggleGroup(' + VarToJSON([GroupId, Expanded]) + ');', 'TExtGridGroupingView');
  Result := Self;
end;

function TExtGridGroupingView.ToggleRowIndex(RowIndex : Integer; Expanded : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.toggleRowIndex(' + VarToJSON([RowIndex, Expanded]) + ');', 'TExtGridGroupingView');
  Result := Self;
end;

procedure TExtGridCheckboxSelectionModel.SetFCheckOnly(Value : Boolean); begin
  FCheckOnly := Value;
  JSCode('checkOnly:' + VarToJSON([Value]));
end;

procedure TExtGridCheckboxSelectionModel.SetFHeader(Value : String); begin
  FHeader := Value;
  JSCode('header:' + VarToJSON([Value]));
end;

procedure TExtGridCheckboxSelectionModel.SetFSortable(Value : Boolean); begin
  FSortable := Value;
  JSCode('sortable:' + VarToJSON([Value]));
end;

procedure TExtGridCheckboxSelectionModel.SetFWidth(Value : Integer); begin
  FWidth := Value;
  JSCode('width:' + VarToJSON([Value]));
end;

function TExtGridCheckboxSelectionModel.JSClassName : string; begin
  Result := 'Ext.grid.CheckboxSelectionModel';
end;

procedure TExtGridCheckboxSelectionModel.InitDefaults; begin
  inherited;
  FWidth := 20;
end;

{$IFDEF FPC}constructor TExtGridCheckboxSelectionModel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridCheckboxSelectionModel.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtGridGridDragZone.JSClassName : string; begin
  Result := 'Ext.grid.GridDragZone';
end;

procedure TExtGridGridDragZone.InitDefaults; begin
  inherited;
end;

{$IFDEF FPC}constructor TExtGridGridDragZone.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridGridDragZone.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtGridGridDragZone.AfterRepair : TExtFunction; begin
  JSCode(JSName + '.afterRepair();', 'TExtGridGridDragZone');
  Result := Self;
end;

function TExtGridGridDragZone.GetDragData : TExtFunction; begin
  JSCode(JSName + '.getDragData();', 'TExtGridGridDragZone');
  Result := Self;
end;

function TExtGridGridDragZone.GetRepairXY(E : TEventObject) : TExtFunction; begin
  JSCode(JSName + '.getRepairXY(' + VarToJSON([E, false]) + ');', 'TExtGridGridDragZone');
  Result := Self;
end;

function TExtGridGridDragZone.OnInitDrag : TExtFunction; begin
  JSCode(JSName + '.onInitDrag();', 'TExtGridGridDragZone');
  Result := Self;
end;

procedure TExtGridGridPanel.SetFAutoExpandColumn(Value : String); begin
  FAutoExpandColumn := Value;
  JSCode('autoExpandColumn:' + VarToJSON([Value]));
end;

procedure TExtGridGridPanel.SetFAutoExpandMax(Value : Integer); begin
  FAutoExpandMax := Value;
  JSCode('autoExpandMax:' + VarToJSON([Value]));
end;

procedure TExtGridGridPanel.SetFAutoExpandMin(Value : Integer); begin
  FAutoExpandMin := Value;
  JSCode('autoExpandMin:' + VarToJSON([Value]));
end;

procedure TExtGridGridPanel.SetFBubbleEvents(Value : TExtObjectList); begin
  FBubbleEvents := Value;
  Value.DeleteFromGarbage;
  JSCode('bubbleEvents:' + VarToJSON([Value, false]));
end;

procedure TExtGridGridPanel.SetFCm(Value : TExtObject); begin
  FCm := Value;
  Value.DeleteFromGarbage;
  JSCode('cm:' + VarToJSON([Value, false]));
end;

procedure TExtGridGridPanel.SetFColModel(Value : TExtObject); begin
  FColModel := Value;
  Value.DeleteFromGarbage;
  JSCode('colModel:' + VarToJSON([Value, false]));
end;

procedure TExtGridGridPanel.SetFColumnLines(Value : Boolean); begin
  FColumnLines := Value;
  JSCode('columnLines:' + VarToJSON([Value]));
end;

procedure TExtGridGridPanel.SetFColumns(Value : TExtObjectList); begin
  FColumns := Value;
  Value.DeleteFromGarbage;
  JSCode('columns:' + VarToJSON([Value, false]));
end;

procedure TExtGridGridPanel.SetFDdGroup(Value : String); begin
  FDdGroup := Value;
  JSCode('ddGroup:' + VarToJSON([Value]));
end;

procedure TExtGridGridPanel.SetFDdText(Value : String); begin
  FDdText := Value;
  JSCode('ddText:' + VarToJSON([Value]));
end;

procedure TExtGridGridPanel.SetFDeferRowRender(Value : Boolean); begin
  FDeferRowRender := Value;
  JSCode('deferRowRender:' + VarToJSON([Value]));
end;

procedure TExtGridGridPanel.SetFDisableSelection(Value : Boolean); begin
  FDisableSelection := Value;
  JSCode('disableSelection:' + VarToJSON([Value]));
end;

procedure TExtGridGridPanel.SetFEnableColumnHide(Value : Boolean); begin
  FEnableColumnHide := Value;
  JSCode('enableColumnHide:' + VarToJSON([Value]));
end;

procedure TExtGridGridPanel.SetFEnableColumnMove(Value : Boolean); begin
  FEnableColumnMove := Value;
  JSCode('enableColumnMove:' + VarToJSON([Value]));
end;

procedure TExtGridGridPanel.SetFEnableColumnResize(Value : Boolean); begin
  FEnableColumnResize := Value;
  JSCode('enableColumnResize:' + VarToJSON([Value]));
end;

procedure TExtGridGridPanel.SetFEnableDragDrop(Value : Boolean); begin
  FEnableDragDrop := Value;
  JSCode('enableDragDrop:' + VarToJSON([Value]));
end;

procedure TExtGridGridPanel.SetFEnableHdMenu(Value : Boolean); begin
  FEnableHdMenu := Value;
  JSCode('enableHdMenu:' + VarToJSON([Value]));
end;

procedure TExtGridGridPanel.SetFHideHeaders(Value : Boolean); begin
  FHideHeaders := Value;
  JSCode('hideHeaders:' + VarToJSON([Value]));
end;

procedure TExtGridGridPanel.SetFLoadMask(Value : TExtObject); begin
  FLoadMask := Value;
  Value.DeleteFromGarbage;
  JSCode('loadMask:' + VarToJSON([Value, false]));
end;

procedure TExtGridGridPanel.SetFMaxHeight(Value : Integer); begin
  FMaxHeight := Value;
  JSCode('maxHeight:' + VarToJSON([Value]));
end;

procedure TExtGridGridPanel.SetFMinColumnWidth(Value : Integer); begin
  FMinColumnWidth := Value;
  JSCode('minColumnWidth:' + VarToJSON([Value]));
end;

procedure TExtGridGridPanel.SetFSelModel(Value : TExtObject); begin
  FSelModel := Value;
  Value.DeleteFromGarbage;
  JSCode('selModel:' + VarToJSON([Value, false]));
end;

procedure TExtGridGridPanel.SetFSm(Value : TExtObject); begin
  FSm := Value;
  Value.DeleteFromGarbage;
  JSCode('sm:' + VarToJSON([Value, false]));
end;

procedure TExtGridGridPanel.SetFStateEvents(Value : TExtObjectList); begin
  FStateEvents := Value;
  Value.DeleteFromGarbage;
  JSCode('stateEvents:' + VarToJSON([Value, false]));
end;

procedure TExtGridGridPanel.SetFStore(Value : TExtDataStore); begin
  FStore := Value;
  Value.DeleteFromGarbage;
  JSCode('store:' + VarToJSON([Value, false]));
end;

procedure TExtGridGridPanel.SetFStripeRows(Value : Boolean); begin
  FStripeRows := Value;
  JSCode('stripeRows:' + VarToJSON([Value]));
end;

procedure TExtGridGridPanel.SetFTrackMouseOver(Value : Boolean); begin
  FTrackMouseOver := Value;
  JSCode('trackMouseOver:' + VarToJSON([Value]));
end;

procedure TExtGridGridPanel.SetFView(Value : TExtObject); begin
  FView := Value;
  Value.DeleteFromGarbage;
  JSCode('view:' + VarToJSON([Value, false]));
end;

procedure TExtGridGridPanel.SetFViewConfig(Value : TExtObject); begin
  FViewConfig := Value;
  Value.DeleteFromGarbage;
  JSCode('viewConfig:' + VarToJSON([Value, false]));
end;

procedure TExtGridGridPanel.SetFLoadMaskBoolean(Value : Boolean); begin
  FLoadMaskBoolean := Value;
  JSCode('loadMask:' + VarToJSON([Value]));
end;

procedure TExtGridGridPanel.SetFOnBodyscroll(Value : TExtGridGridPanelOnBodyscroll); begin
  if Assigned(FOnBodyscroll) then
    JSCode(JSName+'.events ["bodyscroll"].listeners=[];');
  if Assigned(Value) then
    On('bodyscroll', Ajax('bodyscroll', ['ScrollLeft', '%0','ScrollTop', '%1'], true));
  FOnBodyscroll := Value;
end;

procedure TExtGridGridPanel.SetFOnCellclick(Value : TExtGridGridPanelOnCellclick); begin
  if Assigned(FOnCellclick) then
    JSCode(JSName+'.events ["cellclick"].listeners=[];');
  if Assigned(Value) then
    On('cellclick', Ajax('cellclick', ['This', '%0.nm','RowIndex', '%1','ColumnIndex', '%2','E', '%3.nm'], true));
  FOnCellclick := Value;
end;

procedure TExtGridGridPanel.SetFOnCellcontextmenu(Value : TExtGridGridPanelOnCellcontextmenu); begin
  if Assigned(FOnCellcontextmenu) then
    JSCode(JSName+'.events ["cellcontextmenu"].listeners=[];');
  if Assigned(Value) then
    On('cellcontextmenu', Ajax('cellcontextmenu', ['This', '%0.nm','RowIndex', '%1','CellIndex', '%2','E', '%3.nm'], true));
  FOnCellcontextmenu := Value;
end;

procedure TExtGridGridPanel.SetFOnCelldblclick(Value : TExtGridGridPanelOnCelldblclick); begin
  if Assigned(FOnCelldblclick) then
    JSCode(JSName+'.events ["celldblclick"].listeners=[];');
  if Assigned(Value) then
    On('celldblclick', Ajax('celldblclick', ['This', '%0.nm','RowIndex', '%1','ColumnIndex', '%2','E', '%3.nm'], true));
  FOnCelldblclick := Value;
end;

procedure TExtGridGridPanel.SetFOnCellmousedown(Value : TExtGridGridPanelOnCellmousedown); begin
  if Assigned(FOnCellmousedown) then
    JSCode(JSName+'.events ["cellmousedown"].listeners=[];');
  if Assigned(Value) then
    On('cellmousedown', Ajax('cellmousedown', ['This', '%0.nm','RowIndex', '%1','ColumnIndex', '%2','E', '%3.nm'], true));
  FOnCellmousedown := Value;
end;

procedure TExtGridGridPanel.SetFOnClick(Value : TExtGridGridPanelOnClick); begin
  if Assigned(FOnClick) then
    JSCode(JSName+'.events ["click"].listeners=[];');
  if Assigned(Value) then
    On('click', Ajax('click', ['E', '%0.nm'], true));
  FOnClick := Value;
end;

procedure TExtGridGridPanel.SetFOnColumnmove(Value : TExtGridGridPanelOnColumnmove); begin
  if Assigned(FOnColumnmove) then
    JSCode(JSName+'.events ["columnmove"].listeners=[];');
  if Assigned(Value) then
    On('columnmove', Ajax('columnmove', ['OldIndex', '%0','NewIndex', '%1'], true));
  FOnColumnmove := Value;
end;

procedure TExtGridGridPanel.SetFOnColumnresize(Value : TExtGridGridPanelOnColumnresize); begin
  if Assigned(FOnColumnresize) then
    JSCode(JSName+'.events ["columnresize"].listeners=[];');
  if Assigned(Value) then
    On('columnresize', Ajax('columnresize', ['ColumnIndex', '%0','NewSize', '%1'], true));
  FOnColumnresize := Value;
end;

procedure TExtGridGridPanel.SetFOnContainerclick(Value : TExtGridGridPanelOnContainerclick); begin
  if Assigned(FOnContainerclick) then
    JSCode(JSName+'.events ["containerclick"].listeners=[];');
  if Assigned(Value) then
    On('containerclick', Ajax('containerclick', ['This', '%0.nm','E', '%1.nm'], true));
  FOnContainerclick := Value;
end;

procedure TExtGridGridPanel.SetFOnContainercontextmenu(Value : TExtGridGridPanelOnContainercontextmenu); begin
  if Assigned(FOnContainercontextmenu) then
    JSCode(JSName+'.events ["containercontextmenu"].listeners=[];');
  if Assigned(Value) then
    On('containercontextmenu', Ajax('containercontextmenu', ['This', '%0.nm','E', '%1.nm'], true));
  FOnContainercontextmenu := Value;
end;

procedure TExtGridGridPanel.SetFOnContainerdblclick(Value : TExtGridGridPanelOnContainerdblclick); begin
  if Assigned(FOnContainerdblclick) then
    JSCode(JSName+'.events ["containerdblclick"].listeners=[];');
  if Assigned(Value) then
    On('containerdblclick', Ajax('containerdblclick', ['This', '%0.nm','E', '%1.nm'], true));
  FOnContainerdblclick := Value;
end;

procedure TExtGridGridPanel.SetFOnContainermousedown(Value : TExtGridGridPanelOnContainermousedown); begin
  if Assigned(FOnContainermousedown) then
    JSCode(JSName+'.events ["containermousedown"].listeners=[];');
  if Assigned(Value) then
    On('containermousedown', Ajax('containermousedown', ['This', '%0.nm','E', '%1.nm'], true));
  FOnContainermousedown := Value;
end;

procedure TExtGridGridPanel.SetFOnContextmenu(Value : TExtGridGridPanelOnContextmenu); begin
  if Assigned(FOnContextmenu) then
    JSCode(JSName+'.events ["contextmenu"].listeners=[];');
  if Assigned(Value) then
    On('contextmenu', Ajax('contextmenu', ['E', '%0.nm'], true));
  FOnContextmenu := Value;
end;

procedure TExtGridGridPanel.SetFOnDblclick(Value : TExtGridGridPanelOnDblclick); begin
  if Assigned(FOnDblclick) then
    JSCode(JSName+'.events ["dblclick"].listeners=[];');
  if Assigned(Value) then
    On('dblclick', Ajax('dblclick', ['E', '%0.nm'], true));
  FOnDblclick := Value;
end;

procedure TExtGridGridPanel.SetFOnGroupclick(Value : TExtGridGridPanelOnGroupclick); begin
  if Assigned(FOnGroupclick) then
    JSCode(JSName+'.events ["groupclick"].listeners=[];');
  if Assigned(Value) then
    On('groupclick', Ajax('groupclick', ['This', '%0.nm','GroupField', '%1','GroupValue', '%2','E', '%3.nm'], true));
  FOnGroupclick := Value;
end;

procedure TExtGridGridPanel.SetFOnGroupcontextmenu(Value : TExtGridGridPanelOnGroupcontextmenu); begin
  if Assigned(FOnGroupcontextmenu) then
    JSCode(JSName+'.events ["groupcontextmenu"].listeners=[];');
  if Assigned(Value) then
    On('groupcontextmenu', Ajax('groupcontextmenu', ['This', '%0.nm','GroupField', '%1','GroupValue', '%2','E', '%3.nm'], true));
  FOnGroupcontextmenu := Value;
end;

procedure TExtGridGridPanel.SetFOnGroupdblclick(Value : TExtGridGridPanelOnGroupdblclick); begin
  if Assigned(FOnGroupdblclick) then
    JSCode(JSName+'.events ["groupdblclick"].listeners=[];');
  if Assigned(Value) then
    On('groupdblclick', Ajax('groupdblclick', ['This', '%0.nm','GroupField', '%1','GroupValue', '%2','E', '%3.nm'], true));
  FOnGroupdblclick := Value;
end;

procedure TExtGridGridPanel.SetFOnGroupmousedown(Value : TExtGridGridPanelOnGroupmousedown); begin
  if Assigned(FOnGroupmousedown) then
    JSCode(JSName+'.events ["groupmousedown"].listeners=[];');
  if Assigned(Value) then
    On('groupmousedown', Ajax('groupmousedown', ['This', '%0.nm','GroupField', '%1','GroupValue', '%2','E', '%3.nm'], true));
  FOnGroupmousedown := Value;
end;

procedure TExtGridGridPanel.SetFOnHeaderclick(Value : TExtGridGridPanelOnHeaderclick); begin
  if Assigned(FOnHeaderclick) then
    JSCode(JSName+'.events ["headerclick"].listeners=[];');
  if Assigned(Value) then
    On('headerclick', Ajax('headerclick', ['This', '%0.nm','ColumnIndex', '%1','E', '%2.nm'], true));
  FOnHeaderclick := Value;
end;

procedure TExtGridGridPanel.SetFOnHeadercontextmenu(Value : TExtGridGridPanelOnHeadercontextmenu); begin
  if Assigned(FOnHeadercontextmenu) then
    JSCode(JSName+'.events ["headercontextmenu"].listeners=[];');
  if Assigned(Value) then
    On('headercontextmenu', Ajax('headercontextmenu', ['This', '%0.nm','ColumnIndex', '%1','E', '%2.nm'], true));
  FOnHeadercontextmenu := Value;
end;

procedure TExtGridGridPanel.SetFOnHeaderdblclick(Value : TExtGridGridPanelOnHeaderdblclick); begin
  if Assigned(FOnHeaderdblclick) then
    JSCode(JSName+'.events ["headerdblclick"].listeners=[];');
  if Assigned(Value) then
    On('headerdblclick', Ajax('headerdblclick', ['This', '%0.nm','ColumnIndex', '%1','E', '%2.nm'], true));
  FOnHeaderdblclick := Value;
end;

procedure TExtGridGridPanel.SetFOnHeadermousedown(Value : TExtGridGridPanelOnHeadermousedown); begin
  if Assigned(FOnHeadermousedown) then
    JSCode(JSName+'.events ["headermousedown"].listeners=[];');
  if Assigned(Value) then
    On('headermousedown', Ajax('headermousedown', ['This', '%0.nm','ColumnIndex', '%1','E', '%2.nm'], true));
  FOnHeadermousedown := Value;
end;

procedure TExtGridGridPanel.SetFOnKeydown(Value : TExtGridGridPanelOnKeydown); begin
  if Assigned(FOnKeydown) then
    JSCode(JSName+'.events ["keydown"].listeners=[];');
  if Assigned(Value) then
    On('keydown', Ajax('keydown', ['E', '%0.nm'], true));
  FOnKeydown := Value;
end;

procedure TExtGridGridPanel.SetFOnKeypress(Value : TExtGridGridPanelOnKeypress); begin
  if Assigned(FOnKeypress) then
    JSCode(JSName+'.events ["keypress"].listeners=[];');
  if Assigned(Value) then
    On('keypress', Ajax('keypress', ['E', '%0.nm'], true));
  FOnKeypress := Value;
end;

procedure TExtGridGridPanel.SetFOnMousedown(Value : TExtGridGridPanelOnMousedown); begin
  if Assigned(FOnMousedown) then
    JSCode(JSName+'.events ["mousedown"].listeners=[];');
  if Assigned(Value) then
    On('mousedown', Ajax('mousedown', ['E', '%0.nm'], true));
  FOnMousedown := Value;
end;

procedure TExtGridGridPanel.SetFOnMouseout(Value : TExtGridGridPanelOnMouseout); begin
  if Assigned(FOnMouseout) then
    JSCode(JSName+'.events ["mouseout"].listeners=[];');
  if Assigned(Value) then
    On('mouseout', Ajax('mouseout', ['E', '%0.nm'], true));
  FOnMouseout := Value;
end;

procedure TExtGridGridPanel.SetFOnMouseover(Value : TExtGridGridPanelOnMouseover); begin
  if Assigned(FOnMouseover) then
    JSCode(JSName+'.events ["mouseover"].listeners=[];');
  if Assigned(Value) then
    On('mouseover', Ajax('mouseover', ['E', '%0.nm'], true));
  FOnMouseover := Value;
end;

procedure TExtGridGridPanel.SetFOnMouseup(Value : TExtGridGridPanelOnMouseup); begin
  if Assigned(FOnMouseup) then
    JSCode(JSName+'.events ["mouseup"].listeners=[];');
  if Assigned(Value) then
    On('mouseup', Ajax('mouseup', ['E', '%0.nm'], true));
  FOnMouseup := Value;
end;

procedure TExtGridGridPanel.SetFOnReconfigure(Value : TExtGridGridPanelOnReconfigure); begin
  if Assigned(FOnReconfigure) then
    JSCode(JSName+'.events ["reconfigure"].listeners=[];');
  if Assigned(Value) then
    On('reconfigure', Ajax('reconfigure', ['This', '%0.nm','Store', '%1.nm','ColModel', '%2.nm'], true));
  FOnReconfigure := Value;
end;

procedure TExtGridGridPanel.SetFOnRowbodyclick(Value : TExtGridGridPanelOnRowbodyclick); begin
  if Assigned(FOnRowbodyclick) then
    JSCode(JSName+'.events ["rowbodyclick"].listeners=[];');
  if Assigned(Value) then
    On('rowbodyclick', Ajax('rowbodyclick', ['This', '%0.nm','RowIndex', '%1','E', '%2.nm'], true));
  FOnRowbodyclick := Value;
end;

procedure TExtGridGridPanel.SetFOnRowbodycontextmenu(Value : TExtGridGridPanelOnRowbodycontextmenu); begin
  if Assigned(FOnRowbodycontextmenu) then
    JSCode(JSName+'.events ["rowbodycontextmenu"].listeners=[];');
  if Assigned(Value) then
    On('rowbodycontextmenu', Ajax('rowbodycontextmenu', ['This', '%0.nm','RowIndex', '%1','E', '%2.nm'], true));
  FOnRowbodycontextmenu := Value;
end;

procedure TExtGridGridPanel.SetFOnRowbodydblclick(Value : TExtGridGridPanelOnRowbodydblclick); begin
  if Assigned(FOnRowbodydblclick) then
    JSCode(JSName+'.events ["rowbodydblclick"].listeners=[];');
  if Assigned(Value) then
    On('rowbodydblclick', Ajax('rowbodydblclick', ['This', '%0.nm','RowIndex', '%1','E', '%2.nm'], true));
  FOnRowbodydblclick := Value;
end;

procedure TExtGridGridPanel.SetFOnRowbodymousedown(Value : TExtGridGridPanelOnRowbodymousedown); begin
  if Assigned(FOnRowbodymousedown) then
    JSCode(JSName+'.events ["rowbodymousedown"].listeners=[];');
  if Assigned(Value) then
    On('rowbodymousedown', Ajax('rowbodymousedown', ['This', '%0.nm','RowIndex', '%1','E', '%2.nm'], true));
  FOnRowbodymousedown := Value;
end;

procedure TExtGridGridPanel.SetFOnRowclick(Value : TExtGridGridPanelOnRowclick); begin
  if Assigned(FOnRowclick) then
    JSCode(JSName+'.events ["rowclick"].listeners=[];');
  if Assigned(Value) then
    On('rowclick', Ajax('rowclick', ['This', '%0.nm','RowIndex', '%1','E', '%2.nm'], true));
  FOnRowclick := Value;
end;

procedure TExtGridGridPanel.SetFOnRowcontextmenu(Value : TExtGridGridPanelOnRowcontextmenu); begin
  if Assigned(FOnRowcontextmenu) then
    JSCode(JSName+'.events ["rowcontextmenu"].listeners=[];');
  if Assigned(Value) then
    On('rowcontextmenu', Ajax('rowcontextmenu', ['This', '%0.nm','RowIndex', '%1','E', '%2.nm'], true));
  FOnRowcontextmenu := Value;
end;

procedure TExtGridGridPanel.SetFOnRowdblclick(Value : TExtGridGridPanelOnRowdblclick); begin
  if Assigned(FOnRowdblclick) then
    JSCode(JSName+'.events ["rowdblclick"].listeners=[];');
  if Assigned(Value) then
    On('rowdblclick', Ajax('rowdblclick', ['This', '%0.nm','RowIndex', '%1','E', '%2.nm'], true));
  FOnRowdblclick := Value;
end;

procedure TExtGridGridPanel.SetFOnRowmousedown(Value : TExtGridGridPanelOnRowmousedown); begin
  if Assigned(FOnRowmousedown) then
    JSCode(JSName+'.events ["rowmousedown"].listeners=[];');
  if Assigned(Value) then
    On('rowmousedown', Ajax('rowmousedown', ['This', '%0.nm','RowIndex', '%1','E', '%2.nm'], true));
  FOnRowmousedown := Value;
end;

procedure TExtGridGridPanel.SetFOnSortchange(Value : TExtGridGridPanelOnSortchange); begin
  if Assigned(FOnSortchange) then
    JSCode(JSName+'.events ["sortchange"].listeners=[];');
  if Assigned(Value) then
    On('sortchange', Ajax('sortchange', ['This', '%0.nm','SortInfo', '%1.nm'], true));
  FOnSortchange := Value;
end;

procedure TExtGridGridPanel.SetFOnViewready(Value : TExtGridGridPanelOnViewready); begin
  if Assigned(FOnViewready) then
    JSCode(JSName+'.events ["viewready"].listeners=[];');
  if Assigned(Value) then
    On('viewready', Ajax('viewready', ['This', '%0.nm'], true));
  FOnViewready := Value;
end;

function TExtGridGridPanel.JSClassName : string; begin
  Result := 'Ext.grid.GridPanel';
end;

procedure TExtGridGridPanel.InitDefaults; begin
  inherited;
  FBubbleEvents := TExtObjectList.Create(Self, 'bubbleEvents');
  FCm := TExtObject.CreateInternal(Self, 'cm');
  FColModel := TExtObject.CreateInternal(Self, 'colModel');
  FColumns := TExtObjectList.Create(Self, 'columns');
  FLoadMask := TExtObject.CreateInternal(Self, 'loadMask');
  FSelModel := TExtObject.CreateInternal(Self, 'selModel');
  FSm := TExtObject.CreateInternal(Self, 'sm');
  FStateEvents := TExtObjectList.Create(Self, 'stateEvents');
  FStore := TExtDataStore.CreateInternal(Self, 'store');
  FView := TExtObject.CreateInternal(Self, 'view');
  FViewConfig := TExtObject.CreateInternal(Self, 'viewConfig');
end;

{$IFDEF FPC}constructor TExtGridGridPanel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridGridPanel.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtGridGridPanel.GetColumnModel : TExtFunction; begin
  JSCode(JSName + '.getColumnModel();', 'TExtGridGridPanel');
  Result := Self;
end;

function TExtGridGridPanel.GetDragDropText : TExtFunction; begin
  JSCode(JSName + '.getDragDropText();', 'TExtGridGridPanel');
  Result := Self;
end;

function TExtGridGridPanel.GetGridEl : TExtFunction; begin
  JSCode(JSName + '.getGridEl();', 'TExtGridGridPanel');
  Result := Self;
end;

function TExtGridGridPanel.GetSelectionModel : TExtFunction; begin
  JSCode(JSName + '.getSelectionModel();', 'TExtGridGridPanel');
  Result := Self;
end;

function TExtGridGridPanel.GetStore : TExtFunction; begin
  JSCode(JSName + '.getStore();', 'TExtGridGridPanel');
  Result := Self;
end;

function TExtGridGridPanel.GetView : TExtFunction; begin
  JSCode(JSName + '.getView();', 'TExtGridGridPanel');
  Result := Self;
end;

function TExtGridGridPanel.Reconfigure(Store : TExtDataStore; ColModel : TExtGridColumnModel) : TExtFunction; begin
  JSCode(JSName + '.reconfigure(' + VarToJSON([Store, false, ColModel, false]) + ');', 'TExtGridGridPanel');
  Result := Self;
end;

destructor TExtGridGridPanel.Destroy; begin
  try
    FBubbleEvents.Free;
    FCm.Free;
    FColModel.Free;
    FColumns.Free;
    FLoadMask.Free;
    FSelModel.Free;
    FSm.Free;
    FStateEvents.Free;
    FStore.Free;
    FView.Free;
    FViewConfig.Free;
  except end;
  inherited;
end;

procedure TExtGridGridPanel.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'bodyscroll') and Assigned(FOnBodyscroll) then
    FOnBodyscroll(ParamAsInteger('ScrollLeft'), ParamAsInteger('ScrollTop'))
  else if (AEvtName = 'cellclick') and Assigned(FOnCellclick) then
    FOnCellclick(TExtGridGridPanel(ParamAsObject('This')), ParamAsInteger('RowIndex'), ParamAsInteger('ColumnIndex'), ExtEventObject)
  else if (AEvtName = 'cellcontextmenu') and Assigned(FOnCellcontextmenu) then
    FOnCellcontextmenu(TExtGridGridPanel(ParamAsObject('This')), ParamAsInteger('RowIndex'), ParamAsInteger('CellIndex'), ExtEventObject)
  else if (AEvtName = 'celldblclick') and Assigned(FOnCelldblclick) then
    FOnCelldblclick(TExtGridGridPanel(ParamAsObject('This')), ParamAsInteger('RowIndex'), ParamAsInteger('ColumnIndex'), ExtEventObject)
  else if (AEvtName = 'cellmousedown') and Assigned(FOnCellmousedown) then
    FOnCellmousedown(TExtGridGridPanel(ParamAsObject('This')), ParamAsInteger('RowIndex'), ParamAsInteger('ColumnIndex'), ExtEventObject)
  else if (AEvtName = 'click') and Assigned(FOnClick) then
    FOnClick(ExtEventObject)
  else if (AEvtName = 'columnmove') and Assigned(FOnColumnmove) then
    FOnColumnmove(ParamAsInteger('OldIndex'), ParamAsInteger('NewIndex'))
  else if (AEvtName = 'columnresize') and Assigned(FOnColumnresize) then
    FOnColumnresize(ParamAsInteger('ColumnIndex'), ParamAsInteger('NewSize'))
  else if (AEvtName = 'containerclick') and Assigned(FOnContainerclick) then
    FOnContainerclick(TExtGridGridPanel(ParamAsObject('This')), ExtEventObject)
  else if (AEvtName = 'containercontextmenu') and Assigned(FOnContainercontextmenu) then
    FOnContainercontextmenu(TExtGridGridPanel(ParamAsObject('This')), ExtEventObject)
  else if (AEvtName = 'containerdblclick') and Assigned(FOnContainerdblclick) then
    FOnContainerdblclick(TExtGridGridPanel(ParamAsObject('This')), ExtEventObject)
  else if (AEvtName = 'containermousedown') and Assigned(FOnContainermousedown) then
    FOnContainermousedown(TExtGridGridPanel(ParamAsObject('This')), ExtEventObject)
  else if (AEvtName = 'contextmenu') and Assigned(FOnContextmenu) then
    FOnContextmenu(ExtEventObject)
  else if (AEvtName = 'dblclick') and Assigned(FOnDblclick) then
    FOnDblclick(ExtEventObject)
  else if (AEvtName = 'groupclick') and Assigned(FOnGroupclick) then
    FOnGroupclick(TExtGridGridPanel(ParamAsObject('This')), ParamAsString('GroupField'), ParamAsString('GroupValue'), ExtEventObject)
  else if (AEvtName = 'groupcontextmenu') and Assigned(FOnGroupcontextmenu) then
    FOnGroupcontextmenu(TExtGridGridPanel(ParamAsObject('This')), ParamAsString('GroupField'), ParamAsString('GroupValue'), ExtEventObject)
  else if (AEvtName = 'groupdblclick') and Assigned(FOnGroupdblclick) then
    FOnGroupdblclick(TExtGridGridPanel(ParamAsObject('This')), ParamAsString('GroupField'), ParamAsString('GroupValue'), ExtEventObject)
  else if (AEvtName = 'groupmousedown') and Assigned(FOnGroupmousedown) then
    FOnGroupmousedown(TExtGridGridPanel(ParamAsObject('This')), ParamAsString('GroupField'), ParamAsString('GroupValue'), ExtEventObject)
  else if (AEvtName = 'headerclick') and Assigned(FOnHeaderclick) then
    FOnHeaderclick(TExtGridGridPanel(ParamAsObject('This')), ParamAsInteger('ColumnIndex'), ExtEventObject)
  else if (AEvtName = 'headercontextmenu') and Assigned(FOnHeadercontextmenu) then
    FOnHeadercontextmenu(TExtGridGridPanel(ParamAsObject('This')), ParamAsInteger('ColumnIndex'), ExtEventObject)
  else if (AEvtName = 'headerdblclick') and Assigned(FOnHeaderdblclick) then
    FOnHeaderdblclick(TExtGridGridPanel(ParamAsObject('This')), ParamAsInteger('ColumnIndex'), ExtEventObject)
  else if (AEvtName = 'headermousedown') and Assigned(FOnHeadermousedown) then
    FOnHeadermousedown(TExtGridGridPanel(ParamAsObject('This')), ParamAsInteger('ColumnIndex'), ExtEventObject)
  else if (AEvtName = 'keydown') and Assigned(FOnKeydown) then
    FOnKeydown(ExtEventObject)
  else if (AEvtName = 'keypress') and Assigned(FOnKeypress) then
    FOnKeypress(ExtEventObject)
  else if (AEvtName = 'mousedown') and Assigned(FOnMousedown) then
    FOnMousedown(ExtEventObject)
  else if (AEvtName = 'mouseout') and Assigned(FOnMouseout) then
    FOnMouseout(ExtEventObject)
  else if (AEvtName = 'mouseover') and Assigned(FOnMouseover) then
    FOnMouseover(ExtEventObject)
  else if (AEvtName = 'mouseup') and Assigned(FOnMouseup) then
    FOnMouseup(ExtEventObject)
  else if (AEvtName = 'reconfigure') and Assigned(FOnReconfigure) then
    FOnReconfigure(TExtGridGridPanel(ParamAsObject('This')), TExtDataStore(ParamAsObject('Store')), TExtGridColumnModel(ParamAsObject('ColModel')))
  else if (AEvtName = 'rowbodyclick') and Assigned(FOnRowbodyclick) then
    FOnRowbodyclick(TExtGridGridPanel(ParamAsObject('This')), ParamAsInteger('RowIndex'), ExtEventObject)
  else if (AEvtName = 'rowbodycontextmenu') and Assigned(FOnRowbodycontextmenu) then
    FOnRowbodycontextmenu(TExtGridGridPanel(ParamAsObject('This')), ParamAsInteger('RowIndex'), ExtEventObject)
  else if (AEvtName = 'rowbodydblclick') and Assigned(FOnRowbodydblclick) then
    FOnRowbodydblclick(TExtGridGridPanel(ParamAsObject('This')), ParamAsInteger('RowIndex'), ExtEventObject)
  else if (AEvtName = 'rowbodymousedown') and Assigned(FOnRowbodymousedown) then
    FOnRowbodymousedown(TExtGridGridPanel(ParamAsObject('This')), ParamAsInteger('RowIndex'), ExtEventObject)
  else if (AEvtName = 'rowclick') and Assigned(FOnRowclick) then
    FOnRowclick(TExtGridGridPanel(ParamAsObject('This')), ParamAsInteger('RowIndex'), ExtEventObject)
  else if (AEvtName = 'rowcontextmenu') and Assigned(FOnRowcontextmenu) then
    FOnRowcontextmenu(TExtGridGridPanel(ParamAsObject('This')), ParamAsInteger('RowIndex'), ExtEventObject)
  else if (AEvtName = 'rowdblclick') and Assigned(FOnRowdblclick) then
    FOnRowdblclick(TExtGridGridPanel(ParamAsObject('This')), ParamAsInteger('RowIndex'), ExtEventObject)
  else if (AEvtName = 'rowmousedown') and Assigned(FOnRowmousedown) then
    FOnRowmousedown(TExtGridGridPanel(ParamAsObject('This')), ParamAsInteger('RowIndex'), ExtEventObject)
  else if (AEvtName = 'sortchange') and Assigned(FOnSortchange) then
    FOnSortchange(TExtGridGridPanel(ParamAsObject('This')), TExtObject(ParamAsObject('SortInfo')))
  else if (AEvtName = 'viewready') and Assigned(FOnViewready) then
    FOnViewready(TExtGridGridPanel(ParamAsObject('This')));
end;

procedure TExtGridEditorGridPanel.SetFAutoEncode(Value : Boolean); begin
  FAutoEncode := Value;
  JSCode('autoEncode:' + VarToJSON([Value]));
end;

procedure TExtGridEditorGridPanel.SetFClicksToEdit(Value : Integer); begin
  FClicksToEdit := Value;
  JSCode('clicksToEdit:' + VarToJSON([Value]));
end;

procedure TExtGridEditorGridPanel.SetFForceValidation(Value : Boolean); begin
  FForceValidation := Value;
  JSCode('forceValidation:' + VarToJSON([Value]));
end;

procedure TExtGridEditorGridPanel.SetFSelModel(Value : TExtObject); begin
  FSelModel := Value;
  Value.DeleteFromGarbage;
  JSCode('selModel:' + VarToJSON([Value, false]));
end;

procedure TExtGridEditorGridPanel.SetFOnAfteredit(Value : TExtGridEditorGridPanelOnAfteredit); begin
  if Assigned(FOnAfteredit) then
    JSCode(JSName+'.events ["afteredit"].listeners=[];');
  if Assigned(Value) then
    On('afteredit', Ajax('afteredit', ['E', '%0.nm'], true));
  FOnAfteredit := Value;
end;

procedure TExtGridEditorGridPanel.SetFOnBeforeedit(Value : TExtGridEditorGridPanelOnBeforeedit); begin
  if Assigned(FOnBeforeedit) then
    JSCode(JSName+'.events ["beforeedit"].listeners=[];');
  if Assigned(Value) then
    On('beforeedit', Ajax('beforeedit', ['E', '%0.nm'], true));
  FOnBeforeedit := Value;
end;

procedure TExtGridEditorGridPanel.SetFOnValidateedit(Value : TExtGridEditorGridPanelOnValidateedit); begin
  if Assigned(FOnValidateedit) then
    JSCode(JSName+'.events ["validateedit"].listeners=[];');
  if Assigned(Value) then
    On('validateedit', Ajax('validateedit', ['E', '%0.nm'], true));
  FOnValidateedit := Value;
end;

function TExtGridEditorGridPanel.JSClassName : string; begin
  Result := 'Ext.grid.EditorGridPanel';
end;

procedure TExtGridEditorGridPanel.InitDefaults; begin
  inherited;
  FClicksToEdit := 2;
  FSelModel := TExtObject.CreateInternal(Self, 'selModel');
end;

{$IFDEF FPC}constructor TExtGridEditorGridPanel.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridEditorGridPanel.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtGridEditorGridPanel.StartEditing(RowIndex : Integer; ColIndex : Integer) : TExtFunction; begin
  JSCode(JSName + '.startEditing(' + VarToJSON([RowIndex, ColIndex]) + ');', 'TExtGridEditorGridPanel');
  Result := Self;
end;

function TExtGridEditorGridPanel.StopEditing(Cancel : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.stopEditing(' + VarToJSON([Cancel]) + ');', 'TExtGridEditorGridPanel');
  Result := Self;
end;

destructor TExtGridEditorGridPanel.Destroy; begin
  try
    FSelModel.Free;
  except end;
  inherited;
end;

procedure TExtGridEditorGridPanel.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'afteredit') and Assigned(FOnAfteredit) then
    FOnAfteredit(TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'beforeedit') and Assigned(FOnBeforeedit) then
    FOnBeforeedit(TExtObject(ParamAsObject('E')))
  else if (AEvtName = 'validateedit') and Assigned(FOnValidateedit) then
    FOnValidateedit(TExtObject(ParamAsObject('E')));
end;

procedure TExtGridPropertyGrid.SetFCustomEditors(Value : TExtObject); begin
  FCustomEditors := Value;
  Value.DeleteFromGarbage;
  JSCode('customEditors:' + VarToJSON([Value, false]));
end;

procedure TExtGridPropertyGrid.SetFPropertyNames(Value : TExtObject); begin
  FPropertyNames := Value;
  Value.DeleteFromGarbage;
  JSCode('propertyNames:' + VarToJSON([Value, false]));
end;

procedure TExtGridPropertyGrid.SetFSource(Value : TExtObject); begin
  FSource := Value;
  Value.DeleteFromGarbage;
  if not ConfigAvailable(JSName) then
    SetSource(Value)
  else
    JSCode('source:' + VarToJSON([Value, false]));
end;

procedure TExtGridPropertyGrid.SetFOnBeforepropertychange(Value : TExtGridPropertyGridOnBeforepropertychange); begin
  if Assigned(FOnBeforepropertychange) then
    JSCode(JSName+'.events ["beforepropertychange"].listeners=[];');
  if Assigned(Value) then
    On('beforepropertychange', Ajax('beforepropertychange', ['Source', '%0.nm','RecordId', '%1','Value', '%2','OldValue', '%3'], true));
  FOnBeforepropertychange := Value;
end;

procedure TExtGridPropertyGrid.SetFOnPropertychange(Value : TExtGridPropertyGridOnPropertychange); begin
  if Assigned(FOnPropertychange) then
    JSCode(JSName+'.events ["propertychange"].listeners=[];');
  if Assigned(Value) then
    On('propertychange', Ajax('propertychange', ['Source', '%0.nm','RecordId', '%1','Value', '%2','OldValue', '%3'], true));
  FOnPropertychange := Value;
end;

function TExtGridPropertyGrid.JSClassName : string; begin
  Result := 'Ext.grid.PropertyGrid';
end;

procedure TExtGridPropertyGrid.InitDefaults; begin
  inherited;
  FCustomEditors := TExtObject.CreateInternal(Self, 'customEditors');
  FPropertyNames := TExtObject.CreateInternal(Self, 'propertyNames');
  FSource := TExtObject.CreateInternal(Self, 'source');
end;

{$IFDEF FPC}constructor TExtGridPropertyGrid.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtGridPropertyGrid.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtGridPropertyGrid.GetSource : TExtFunction; begin
  JSCode(JSName + '.getSource();', 'TExtGridPropertyGrid');
  Result := Self;
end;

function TExtGridPropertyGrid.SetSource(Source : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.setSource(' + VarToJSON([Source, false]) + ');', 'TExtGridPropertyGrid');
  Result := Self;
end;

destructor TExtGridPropertyGrid.Destroy; begin
  try
    FCustomEditors.Free;
    FPropertyNames.Free;
    FSource.Free;
  except end;
  inherited;
end;

procedure TExtGridPropertyGrid.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforepropertychange') and Assigned(FOnBeforepropertychange) then
    FOnBeforepropertychange(TExtObject(ParamAsObject('Source')), ParamAsString('RecordId'), ParamAsString('Value'), ParamAsString('OldValue'))
  else if (AEvtName = 'propertychange') and Assigned(FOnPropertychange) then
    FOnPropertychange(TExtObject(ParamAsObject('Source')), ParamAsString('RecordId'), ParamAsString('Value'), ParamAsString('OldValue'));
end;

end.