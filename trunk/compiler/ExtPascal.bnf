Goal : (Program | Unit | Library | Package).
Program : 'PROGRAM' Ident ['(' IdentList ')'] ';' ProgramBlock '.'.
Unit : 'UNIT' Ident ';'
        InterfaceSection
        ImplementationSection
        InitSection '.'.
Library : 'LIBRARY' Ident ';'
          ProgramBlock '.'.
Package : 'PACKAGE' Ident ';'
          [RequiresClause]
          [ContainsClause]
          'END' '.'.
ProgramBlock : [UsesClause]
                Block.
UsesClause : 'USES' IdentList ';'.
InterfaceSection : 'INTERFACE'
                   [UsesClause]
                   [InterfaceDecl]*.
InterfaceDecl : (ConstSection | TypeSection | VarSection | ExportedHeading).
ExportedHeading : (ProcedureHeading ';' DirectiveList | FunctionHeading ';' DirectiveList).
ImplementationSection : 'IMPLEMENTATION'
                         [UsesClause]
                         [DeclSection]*.
Block : [DeclSection]
         CompoundStmt.
DeclSection : (ConstSection | TypeSection | VarSection | ProcedureDeclSection | LabelDeclSection)*.
LabelDeclSection : 'LABEL' LabelId.
ConstSection : 'CONST' (ConstantDecl ';')*.
ConstantDecl : Ident ('=' ConstExpr | ':' TypeId '=' TypedConstant).
TypeSection : 'TYPE' (TypeDecl ';')*.
TypeDecl : Ident '=' (Type | RestrictedType).
TypedConstant : (ConstExpr | ArrayConstant | RecordConstant).
ArrayConstant : '(' (TypedConstant ','/)* ')'.
RecordConstant : '(' (RecordFieldConstant';'/)* ')'.
RecordFieldConstant : Ident ':' TypedConstant.
Type : (TypeId | SimpleType | StrucType | PointerType | StringType
        | ProcedureType | ClassRefType).
RestrictedType : (ObjectType | ClassType | InterfaceType).
ClassRefType : 'CLASS' 'OF' TypeId.
SimpleType : (OrdinalType | RealType).
// Real48 abolido
RealType : ('REAL' | 'SINGLE' | 'DOUBLE' | 'EXTENDED' | 'CURRENCY' | 'COMP').
OrdinalType : (SubrangeType | EnumeratedType | OrdIdent).
// Acresentado Cardinal e UInt64
OrdIdent : ('INTEGER' | 'CHAR' | 'BOOLEAN' | 'BYTE' | 'WORD' | 'CARDINAL' | 'LONGINT' | 'INT64' | 'UINT64' |
            'WIDECHAR' | 'LONGWORD' | 'SHORTINT' | 'SMALLINT' | 'PCHAR').
// Variant abolido
SubrangeType : ConstExpr '..' ConstExpr.
EnumeratedType : '(' IdentList ')'.
// Ansistring abolido
StringType : ('STRING' | 'WIDESTRING' | 'STRING' '[' ConstExpr ']').
StrucType : ['PACKED'] (ArrayType | SetType | FileType | RecType).
ArrayType : 'ARRAY' ['[' (OrdinalType ','/)* ']'] 'OF' Type.
RecType : 'RECORD' [FieldList] 'END'.
FieldList : (FieldDecl ';'/)* [VariantSection] [';'].
FieldDecl : IdentList ':' Type.
VariantSection : 'CASE' [Ident ':'] TypeId 'OF' (RecVariant ';'/)*.
RecVariant : (ConstExpr ','/)* ':' '(' [FieldList] ')'.
// set com até 2G
SetType : 'SET' 'OF' OrdinalType.
// Acrescentado TEXT e untyped File
FileType : ('FILE' ['OF' TypeId] | 'TEXT').
PointerType : '^' TypeId.
ProcedureType : (ProcedureHeading | FunctionHeading) ['OF' 'OBJECT'].
VarSection : 'VAR' (VarDecl ';')*.
// Absolute em endereços fixos abolido
VarDecl : IdentList ':' Type [('ABSOLUTE' Ident) | '=' ConstExpr].
Expression : SimpleExpression [RelOp SimpleExpression]*.
SimpleExpression : ['+' | '-'] Term [AddOp Term]*.
Term : Factor [MulOp Factor]*.
Factor : (Designator ['(' ExprList ')'] | '' Designator | Number | String | 'NIL' |
         '(' Expression ')' | 'NOT' Factor | SetConstructor | TypeId '(' Expression ')').
RelOp : ('>' | '<' | '<=' | '>=' | '<>' | 'IN' | 'IS' | 'AS').
AddOp : ('+' | '-' | 'OR' | 'XOR').
//Acrescido **
MulOp : ('*' | '/' | 'DIV' | 'MOD' | 'AND' | 'SHL' | 'SHR' | '**').
Designator : QualId ['.' Ident | '[' ExprList ']' | '^']*.
SetConstructor : '[' [SetElement ','/]* ']'.
SetElement : Expression ['..' Expression].
ExprList : (Expression ','/)*.
Statement : [LabelId ':'] [SimpleStatement | StructStmt].
StmtList : (Statement [';'])*.
// Depois do inherited pode vir um designator gramática errada!
SimpleStatement : (Designator ['(' ExprList ')'] | '' Designator ':=' Expression | 'INHERITED' | 'GOTO' LabelId).
// Acrescentado Asm
StructStmt : (CompoundStmt | ConditionalStmt | LoopStmt | WithStmt | AsmStmt).
CompoundStmt : 'BEGIN' StmtList 'END'.
AsmStmt : 'ASM' AsmList 'END'.
ConditionalStmt : (IfStmt | CaseStmt).
IfStmt : 'IF' Expression 'THEN' Statement ['ELSE' Statement].
// Case aceitando qualquer expressão
CaseStmt : 'CASE' Expression 'OF' (CaseSelector ';')* ['ELSE' Statement [';']] 'END'.
CaseSelector : (CaseLabel ','/)* ':' Statement.
CaseLabel : ConstExpr ['..' ConstExpr].
LoopStmt : (RepeatStmt | WhileStmt | ForStmt).
RepeatStmt : 'REPEAT' Statement 'UNTIL' Expression.
WhileStmt : 'WHILE' Expression 'DO' Statement.
ForStmt : 'FOR' QualId ':=' Expression ('TO' | 'DOWNTO') Expression 'DO' Statement.
WithStmt : 'WITH' IdentList 'DO' Statement.
ProcedureDeclSection : (ProcedureDecl | FunctionDecl).
//Corrigido só aceitava uma diretiva e sem ; no final
ProcedureDecl : ProcedureHeading ';' DirectiveList Block ';'.
FunctionDecl : FunctionHeading ';' DirectiveList Block ';'.
// Trocado SimpleType por TypeId
FunctionHeading : 'FUNCTION' Ident [FormalParameters] ':' (TypeId | 'STRING').
ProcedureHeading : 'PROCEDURE' Ident [FormalParameters].
FormalParameters : '(' (FormalParm ';'/)* ')'.
FormalParm : ['VAR' | 'CONST' | 'OUT'] Parameter.
// Acrescentado array of const e trocado SimpleType por TypeId
Parameter : (IdentList  [':' (TypeId | 'STRING' | 'FILE' | 'ARRAY' 'OF' ('CONST' | TypeId)] )] |
             Ident ':' TypeId '=' ConstExpr).
Directive : ('CDECL' | 'REGISTER' | 'DYNAMIC' | 'VIRTUAL' | 'EXPORT' | 'EXTERNAL' | 'FAR' | 'FORWARD' | 'MESSAGE' |
              'OVERRIDE' | 'OVERLOAD' | 'PASCAL' | 'REINTRODUCE' | 'SAFECALL' | 'STDCALL').
DirectiveList : [Directive ';']*
ObjectType : 'OBJECT' [ObjHeritage] [ObjFieldList] [MethodList] 'END'.
ObjHeritage : '(' QualId ')'.
// Só aceitava a diretiva virtual e tinha erro no ;
MethodList : (MethodHeading ';' DirectiveList)*.
MethodHeading : (ProcedureHeading | FunctionHeading | ConstructorHeading | DestructorHeading).
ConstructorHeading : 'CONSTRUCTOR' Ident [FormalParameters].
DestructorHeading : 'DESTRUCTOR' Ident [FormalParameters].
// erro no ;
ObjFieldList : (IdentList ':' Type ';')*.
InitSection : ('INITIALIZATION' StmtList ['FINALIZATION' StmtList] | ['BEGIN' StmtList]) 'END'.
ClassType : 'CLASS' [ClassHeritage]
             [ClassFieldList]
             [ClassMethodList]
             [ClassPropertyList]
             'END'.
ClassHeritage : '(' IdentList ')'.
// Acrescentado Automated
ClassVisibility : ['PUBLIC' | 'PROTECTED' | 'PRIVATE' | 'PUBLISHED' | 'AUTOMATED'].
ClassFieldList : (ClassVisibility ObjFieldList)*.
ClassMethodList : (ClassVisibility MethodList)*.
ClassPropertyList : (ClassVisibility PropertyList)*.
PropertyList : ('PROPERTY' Ident [PropertyInterface] PropertySpecifiers)*.
PropertyInterface : [PropertyParameterList] ':' Ident.
PropertyParameterList : '[' (IdentList ':' TypeId ';')* ']'.
PropertySpecifiers : ['INDEX' ConstExpr] ['READ' Ident] ['WRITE' Ident] ['STORED' (Ident | Constant)]
                     ['DEFAULT' ConstExpr | 'NODEFAULT'] ['IMPLEMENTS' TypeId]
// Trocado classmethodlist e classpropertylist por methodlist e propertylist
InterfaceType : 'INTERFACE' [InterfaceHeritage]
                [MethodList]
                [PropertyList]
                'END'.
InterfaceHeritage : '(' IdentList ')'.
RequiresClause : ['REQUIRES' IdentList ';'].
ContainsClause : ['CONTAINS' IdentList ';'].
IdentList : (Ident ','/)*.
QualId : [UnitId '.'] Ident.
TypeId : [UnitId '.'] <TypeIdentifier>.
Ident : <Identifier>.
ConstExpr : <ConstantExpression>.
UnitId : <UnitIdentifier>.
Number : <Number>.
String : <StringConstant>.
