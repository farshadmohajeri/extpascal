unit ExtUxGrid;

// Generated by ExtToPascal v.0.9.8, at 7/1/2010 09:28:02
// from "C:\Trabalho\ext-3.0.0\docs\output" detected as ExtJS v.3

interface

uses
  StrUtils, ExtPascal, ExtPascalUtils, ExtGrid, ExtUtil, Ext;

type
  TExtUxGridCheckColumn = class;
  TExtUxGridGroupSummary = class;
  TExtUxGridRowExpander = class;
  TExtUxGridHybridSummary = class;
  TExtUxGridBufferView = class;
  TExtUxGridRowEditor = class;
  TExtUxGridTableGrid = class;

  TExtUxGridCheckColumn = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtUxGridGroupSummary = class(TExtUtilObservable)
  private
    FSummaryRenderer : TExtFunction;
    FSummaryType : string;
    FCalculations : TExtObject;
    procedure SetFSummaryRenderer(Value : TExtFunction);
    procedure SetFSummaryType(Value : string);
    procedure SetFCalculations(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function ShowSummaryMsg(GroupValue : string; Msg : string) : TExtFunction;
    function ToggleSummaries(Visible : Boolean) : TExtFunction;
    destructor Destroy; override;
    property SummaryRenderer : TExtFunction read FSummaryRenderer write SetFSummaryRenderer;
    property SummaryType : string read FSummaryType write SetFSummaryType;
    property Calculations : TExtObject read FCalculations write SetFCalculations;
  end;

  // Procedural types for events TExtUxGridRowExpander
  TExtUxGridRowExpanderOnBeforecollapse = procedure(This : TExtUxGridRowExpander; ExtDataRecord : TExtObject; Body : TExtObject; RowIndex : Integer) of object;
  TExtUxGridRowExpanderOnBeforeexpand = procedure(This : TExtUxGridRowExpander; ExtDataRecord : TExtObject; Body : TExtObject; RowIndex : Integer) of object;
  TExtUxGridRowExpanderOnCollapse = procedure(This : TExtUxGridRowExpander; ExtDataRecord : TExtObject; Body : TExtObject; RowIndex : Integer) of object;
  TExtUxGridRowExpanderOnExpand = procedure(This : TExtUxGridRowExpander; ExtDataRecord : TExtObject; Body : TExtObject; RowIndex : Integer) of object;

  TExtUxGridRowExpander = class(TExtUtilObservable)
  private
    FExpandOnDblClick : Boolean; // true
    FExpandOnEnter : Boolean; // true
    FOnBeforecollapse : TExtUxGridRowExpanderOnBeforecollapse;
    FOnBeforeexpand : TExtUxGridRowExpanderOnBeforeexpand;
    FOnCollapse : TExtUxGridRowExpanderOnCollapse;
    FOnExpand : TExtUxGridRowExpanderOnExpand;
    procedure SetFExpandOnDblClick(Value : Boolean);
    procedure SetFExpandOnEnter(Value : Boolean);
    procedure SetFOnBeforecollapse(Value : TExtUxGridRowExpanderOnBeforecollapse);
    procedure SetFOnBeforeexpand(Value : TExtUxGridRowExpanderOnBeforeexpand);
    procedure SetFOnCollapse(Value : TExtUxGridRowExpanderOnCollapse);
    procedure SetFOnExpand(Value : TExtUxGridRowExpanderOnExpand);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    property ExpandOnDblClick : Boolean read FExpandOnDblClick write SetFExpandOnDblClick;
    property ExpandOnEnter : Boolean read FExpandOnEnter write SetFExpandOnEnter;
    property OnBeforecollapse : TExtUxGridRowExpanderOnBeforecollapse read FOnBeforecollapse write SetFOnBeforecollapse;
    property OnBeforeexpand : TExtUxGridRowExpanderOnBeforeexpand read FOnBeforeexpand write SetFOnBeforeexpand;
    property OnCollapse : TExtUxGridRowExpanderOnCollapse read FOnCollapse write SetFOnCollapse;
    property OnExpand : TExtUxGridRowExpanderOnExpand read FOnExpand write SetFOnExpand;
  end;

  TExtUxGridHybridSummary = class(TExtUxGridGroupSummary)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function GetSummaryData(GroupValue : string) : TExtFunction;
    function UpdateSummaryData(GroupValue : string; Data : TExtObject; SkipRefresh : Boolean = false) : TExtFunction;
  end;

  TExtUxGridBufferView = class(TExtGridGridView)
  private
    FBorderHeight : Integer;
    FCacheSize : Integer;
    FCleanDelay : Integer;
    FRowHeight : Integer;
    FScrollDelay : Boolean;
    FScrollDelayNumber : Integer;
    procedure SetFBorderHeight(Value : Integer);
    procedure SetFCacheSize(Value : Integer);
    procedure SetFCleanDelay(Value : Integer);
    procedure SetFRowHeight(Value : Integer);
    procedure SetFScrollDelay(Value : Boolean);
    procedure SetFScrollDelayNumber(Value : Integer);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    property BorderHeight : Integer read FBorderHeight write SetFBorderHeight;
    property CacheSize : Integer read FCacheSize write SetFCacheSize;
    property CleanDelay : Integer read FCleanDelay write SetFCleanDelay;
    property RowHeight : Integer read FRowHeight write SetFRowHeight;
    property ScrollDelay : Boolean read FScrollDelay write SetFScrollDelay;
    property ScrollDelayNumber : Integer read FScrollDelayNumber write SetFScrollDelayNumber;
  end;

  // Procedural types for events TExtUxGridRowEditor
  TExtUxGridRowEditorOnAfteredit = procedure(Roweditor : TExtUxGridRowEditor; Changes : TExtObject; R : TExtDataRecord; RowIndex : Integer) of object;
  TExtUxGridRowEditorOnBeforeedit = procedure(Roweditor : TExtUxGridRowEditor; RowIndex : Integer) of object;
  TExtUxGridRowEditorOnValidateedit = procedure(Roweditor : TExtUxGridRowEditor; Changes : TExtObject; R : TExtDataRecord; RowIndex : Integer) of object;

  TExtUxGridRowEditor = class(TExtPanel)
  private
    FOnAfteredit : TExtUxGridRowEditorOnAfteredit;
    FOnBeforeedit : TExtUxGridRowEditorOnBeforeedit;
    FOnValidateedit : TExtUxGridRowEditorOnValidateedit;
    procedure SetFOnAfteredit(Value : TExtUxGridRowEditorOnAfteredit);
    procedure SetFOnBeforeedit(Value : TExtUxGridRowEditorOnBeforeedit);
    procedure SetFOnValidateedit(Value : TExtUxGridRowEditorOnValidateedit);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    property OnAfteredit : TExtUxGridRowEditorOnAfteredit read FOnAfteredit write SetFOnAfteredit;
    property OnBeforeedit : TExtUxGridRowEditorOnBeforeedit read FOnBeforeedit write SetFOnBeforeedit;
    property OnValidateedit : TExtUxGridRowEditorOnValidateedit read FOnValidateedit write SetFOnValidateedit;
  end;

  TExtUxGridTableGrid = class(TExtGridGridPanel)
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
  end;

implementation

function TExtUxGridCheckColumn.JSClassName : string; begin
  Result := 'Ext.ux.grid.CheckColumn';
end;

{$IFDEF FPC}constructor TExtUxGridCheckColumn.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtUxGridGroupSummary.SetFSummaryRenderer(Value : TExtFunction); begin
  FSummaryRenderer := Value;
  JSCode('summaryRenderer:' + VarToJSON([Value, true]));
end;

procedure TExtUxGridGroupSummary.SetFSummaryType(Value : string); begin
  FSummaryType := Value;
  JSCode('summaryType:' + VarToJSON([Value]));
end;

procedure TExtUxGridGroupSummary.SetFCalculations(Value : TExtObject); begin
  FCalculations := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.calculations=' + VarToJSON([Value, false]) + ';');
end;

function TExtUxGridGroupSummary.JSClassName : string; begin
  Result := 'Ext.ux.grid.GroupSummary';
end;

procedure TExtUxGridGroupSummary.InitDefaults; begin
  inherited;
  FCalculations := TExtObject.CreateInternal(Self, 'calculations');
end;

{$IFDEF FPC}constructor TExtUxGridGroupSummary.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtUxGridGroupSummary.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtUxGridGroupSummary.ShowSummaryMsg(GroupValue : string; Msg : string) : TExtFunction; begin
  JSCode(JSName + '.showSummaryMsg(' + VarToJSON([GroupValue, Msg]) + ');', 'TExtUxGridGroupSummary');
  Result := Self;
end;

function TExtUxGridGroupSummary.ToggleSummaries(Visible : Boolean) : TExtFunction; begin
  JSCode(JSName + '.toggleSummaries(' + VarToJSON([Visible]) + ');', 'TExtUxGridGroupSummary');
  Result := Self;
end;

destructor TExtUxGridGroupSummary.Destroy; begin
  try
    FCalculations.Free;
  except end;
  inherited;
end;

procedure TExtUxGridRowExpander.SetFExpandOnDblClick(Value : Boolean); begin
  FExpandOnDblClick := Value;
  JSCode('expandOnDblClick:' + VarToJSON([Value]));
end;

procedure TExtUxGridRowExpander.SetFExpandOnEnter(Value : Boolean); begin
  FExpandOnEnter := Value;
  JSCode('expandOnEnter:' + VarToJSON([Value]));
end;

procedure TExtUxGridRowExpander.SetFOnBeforecollapse(Value : TExtUxGridRowExpanderOnBeforecollapse); begin
  if Assigned(FOnBeforecollapse) then
    JSCode(JSName+'.events ["beforecollapse"].listeners=[];');
  if Assigned(Value) then
    On('beforecollapse', Ajax('beforecollapse', ['This', '%0.nm','ExtDataRecord', '%1.nm','Body', '%2.nm','RowIndex', '%3'], true));
  FOnBeforecollapse := Value;
end;

procedure TExtUxGridRowExpander.SetFOnBeforeexpand(Value : TExtUxGridRowExpanderOnBeforeexpand); begin
  if Assigned(FOnBeforeexpand) then
    JSCode(JSName+'.events ["beforeexpand"].listeners=[];');
  if Assigned(Value) then
    On('beforeexpand', Ajax('beforeexpand', ['This', '%0.nm','ExtDataRecord', '%1.nm','Body', '%2.nm','RowIndex', '%3'], true));
  FOnBeforeexpand := Value;
end;

procedure TExtUxGridRowExpander.SetFOnCollapse(Value : TExtUxGridRowExpanderOnCollapse); begin
  if Assigned(FOnCollapse) then
    JSCode(JSName+'.events ["collapse"].listeners=[];');
  if Assigned(Value) then
    On('collapse', Ajax('collapse', ['This', '%0.nm','ExtDataRecord', '%1.nm','Body', '%2.nm','RowIndex', '%3'], true));
  FOnCollapse := Value;
end;

procedure TExtUxGridRowExpander.SetFOnExpand(Value : TExtUxGridRowExpanderOnExpand); begin
  if Assigned(FOnExpand) then
    JSCode(JSName+'.events ["expand"].listeners=[];');
  if Assigned(Value) then
    On('expand', Ajax('expand', ['This', '%0.nm','ExtDataRecord', '%1.nm','Body', '%2.nm','RowIndex', '%3'], true));
  FOnExpand := Value;
end;

function TExtUxGridRowExpander.JSClassName : string; begin
  Result := 'Ext.ux.grid.RowExpander';
end;

procedure TExtUxGridRowExpander.InitDefaults; begin
  inherited;
  FExpandOnDblClick := true;
  FExpandOnEnter := true;
end;

{$IFDEF FPC}constructor TExtUxGridRowExpander.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtUxGridRowExpander.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

procedure TExtUxGridRowExpander.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforecollapse') and Assigned(FOnBeforecollapse) then
    FOnBeforecollapse(TExtUxGridRowExpander(ParamAsObject('This')), TExtObject(ParamAsObject('ExtDataRecord')), TExtObject(ParamAsObject('Body')), ParamAsInteger('RowIndex'))
  else if (AEvtName = 'beforeexpand') and Assigned(FOnBeforeexpand) then
    FOnBeforeexpand(TExtUxGridRowExpander(ParamAsObject('This')), TExtObject(ParamAsObject('ExtDataRecord')), TExtObject(ParamAsObject('Body')), ParamAsInteger('RowIndex'))
  else if (AEvtName = 'collapse') and Assigned(FOnCollapse) then
    FOnCollapse(TExtUxGridRowExpander(ParamAsObject('This')), TExtObject(ParamAsObject('ExtDataRecord')), TExtObject(ParamAsObject('Body')), ParamAsInteger('RowIndex'))
  else if (AEvtName = 'expand') and Assigned(FOnExpand) then
    FOnExpand(TExtUxGridRowExpander(ParamAsObject('This')), TExtObject(ParamAsObject('ExtDataRecord')), TExtObject(ParamAsObject('Body')), ParamAsInteger('RowIndex'));
end;

function TExtUxGridHybridSummary.JSClassName : string; begin
  Result := 'Ext.ux.grid.HybridSummary';
end;

{$IFDEF FPC}constructor TExtUxGridHybridSummary.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtUxGridHybridSummary.GetSummaryData(GroupValue : string) : TExtFunction; begin
  JSCode(JSName + '.getSummaryData(' + VarToJSON([GroupValue]) + ');', 'TExtUxGridHybridSummary');
  Result := Self;
end;

function TExtUxGridHybridSummary.UpdateSummaryData(GroupValue : string; Data : TExtObject; SkipRefresh : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.updateSummaryData(' + VarToJSON([GroupValue, Data, false, SkipRefresh]) + ');', 'TExtUxGridHybridSummary');
  Result := Self;
end;

procedure TExtUxGridBufferView.SetFBorderHeight(Value : Integer); begin
  FBorderHeight := Value;
  JSCode('borderHeight:' + VarToJSON([Value]));
end;

procedure TExtUxGridBufferView.SetFCacheSize(Value : Integer); begin
  FCacheSize := Value;
  JSCode('cacheSize:' + VarToJSON([Value]));
end;

procedure TExtUxGridBufferView.SetFCleanDelay(Value : Integer); begin
  FCleanDelay := Value;
  JSCode('cleanDelay:' + VarToJSON([Value]));
end;

procedure TExtUxGridBufferView.SetFRowHeight(Value : Integer); begin
  FRowHeight := Value;
  JSCode('rowHeight:' + VarToJSON([Value]));
end;

procedure TExtUxGridBufferView.SetFScrollDelay(Value : Boolean); begin
  FScrollDelay := Value;
  JSCode('scrollDelay:' + VarToJSON([Value]));
end;

procedure TExtUxGridBufferView.SetFScrollDelayNumber(Value : Integer); begin
  FScrollDelayNumber := Value;
  JSCode('scrollDelay:' + VarToJSON([Value]));
end;

function TExtUxGridBufferView.JSClassName : string; begin
  Result := 'Ext.ux.grid.BufferView';
end;

procedure TExtUxGridBufferView.InitDefaults; begin
  inherited;
end;

{$IFDEF FPC}constructor TExtUxGridBufferView.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtUxGridBufferView.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

procedure TExtUxGridRowEditor.SetFOnAfteredit(Value : TExtUxGridRowEditorOnAfteredit); begin
  if Assigned(FOnAfteredit) then
    JSCode(JSName+'.events ["afteredit"].listeners=[];');
  if Assigned(Value) then
    On('afteredit', Ajax('afteredit', ['Roweditor', '%0.nm','Changes', '%1.nm','R', '%2.nm','RowIndex', '%3'], true));
  FOnAfteredit := Value;
end;

procedure TExtUxGridRowEditor.SetFOnBeforeedit(Value : TExtUxGridRowEditorOnBeforeedit); begin
  if Assigned(FOnBeforeedit) then
    JSCode(JSName+'.events ["beforeedit"].listeners=[];');
  if Assigned(Value) then
    On('beforeedit', Ajax('beforeedit', ['Roweditor', '%0.nm','RowIndex', '%1'], true));
  FOnBeforeedit := Value;
end;

procedure TExtUxGridRowEditor.SetFOnValidateedit(Value : TExtUxGridRowEditorOnValidateedit); begin
  if Assigned(FOnValidateedit) then
    JSCode(JSName+'.events ["validateedit"].listeners=[];');
  if Assigned(Value) then
    On('validateedit', Ajax('validateedit', ['Roweditor', '%0.nm','Changes', '%1.nm','R', '%2.nm','RowIndex', '%3'], true));
  FOnValidateedit := Value;
end;

function TExtUxGridRowEditor.JSClassName : string; begin
  Result := 'Ext.ux.grid.RowEditor';
end;

procedure TExtUxGridRowEditor.InitDefaults; begin
  inherited;
end;

{$IFDEF FPC}constructor TExtUxGridRowEditor.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtUxGridRowEditor.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

procedure TExtUxGridRowEditor.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'afteredit') and Assigned(FOnAfteredit) then
    FOnAfteredit(TExtUxGridRowEditor(ParamAsObject('Roweditor')), TExtObject(ParamAsObject('Changes')), TExtDataRecord(ParamAsObject('R')), ParamAsInteger('RowIndex'))
  else if (AEvtName = 'beforeedit') and Assigned(FOnBeforeedit) then
    FOnBeforeedit(TExtUxGridRowEditor(ParamAsObject('Roweditor')), ParamAsInteger('RowIndex'))
  else if (AEvtName = 'validateedit') and Assigned(FOnValidateedit) then
    FOnValidateedit(TExtUxGridRowEditor(ParamAsObject('Roweditor')), TExtObject(ParamAsObject('Changes')), TExtDataRecord(ParamAsObject('R')), ParamAsInteger('RowIndex'));
end;

function TExtUxGridTableGrid.JSClassName : string; begin
  Result := 'Ext.ux.grid.TableGrid';
end;

procedure TExtUxGridTableGrid.InitDefaults; begin
  inherited;
end;

{$IFDEF FPC}constructor TExtUxGridTableGrid.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtUxGridTableGrid.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

end.