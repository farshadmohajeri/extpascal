unit ExtData;

// Generated by ExtToPascal v.0.9.8, at 23/3/2010 15:01:39
// from "C:\Trabalho\ext\docs\output" detected as ExtJS v.3

interface

uses
  StrUtils, ExtPascal, ExtPascalUtils, Ext, ExtUtil;

type
  TExtDataField = class;
  TExtDataJsonReaderError = class;
  TExtDataDataReader = class;
  TExtDataDataWriter = class;
  TExtDataResponse = class;
  TExtDataSortTypesSingleton = class;
  TExtDataRecord = class;
  TExtDataRequest = class;
  TExtDataApiSingleton = class;
  TExtDataJsonWriter = class;
  TExtDataStore = class;
  TExtDataJsonReader = class;
  TExtDataApiError = class;
  TExtDataNode = class;
  TExtDataStoreError = class;
  TExtDataConnection = class;
  TExtDataDataReaderError = class;
  TExtDataXmlWriter = class;
  TExtDataDataProxy = class;
  TExtDataTree = class;
  TExtDataXmlReader = class;
  TExtDataDataProxyError = class;
  TExtDataScriptTagProxy = class;
  TExtDataXmlStore = class;
  TExtDataGroupingStore = class;
  TExtDataHttpProxy = class;
  TExtDataDirectProxy = class;
  TExtDataDirectStore = class;
  TExtDataArrayStore = class;
  TExtDataArrayReader = class;
  TExtDataJsonStore = class;
  TExtDataMemoryProxy = class;

  TExtDataField = class(TExtFunction)
  private
    FAllowBlank : Boolean;
    FConvert : TExtFunction;
    FDateFormat : String;
    FDefaultValue : String;
    FMapping : String;
    FMappingNumber : Integer;
    FName : String;
    FSortDir : String;
    FSortType : TExtFunction;
    FTypeJS : String;
    procedure SetFAllowBlank(Value : Boolean);
    procedure SetFConvert(Value : TExtFunction);
    procedure SetFDateFormat(Value : String);
    procedure SetFDefaultValue(Value : String);
    procedure SetFMapping(Value : String);
    procedure SetFMappingNumber(Value : Integer);
    procedure SetFName(Value : String);
    procedure SetFSortDir(Value : String);
    procedure SetFSortType(Value : TExtFunction);
    procedure SetFTypeJS(Value : String);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property AllowBlank : Boolean read FAllowBlank write SetFAllowBlank;
    property Convert : TExtFunction read FConvert write SetFConvert;
    property DateFormat : String read FDateFormat write SetFDateFormat;
    property DefaultValue : String read FDefaultValue write SetFDefaultValue;
    property Mapping : String read FMapping write SetFMapping;
    property MappingNumber : Integer read FMappingNumber write SetFMappingNumber;
    property Name : String read FName write SetFName;
    property SortDir : String read FSortDir write SetFSortDir;
    property SortType : TExtFunction read FSortType write SetFSortType;
    property TypeJS : String read FTypeJS write SetFTypeJS;
  end;

  TExtDataJsonReaderError = class(TExtFunction)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtDataDataReader = class(TExtFunction)
  private
    FFields : TExtObjectList;
    FFieldsObject : TExtObject;
    FMessageProperty : String;
    FBuildExtractors : TExtObject;
    FExtractData : TExtObject;
    FExtractValues : TExtObject;
    FGetId : TExtObject;
    FGetMessage : TExtObject;
    FGetRoot : TExtObject;
    FGetSuccess : TExtObject;
    FGetTotal : TExtObject;
    FMeta : String;
    procedure SetFFields(Value : TExtObjectList);
    procedure SetFFieldsObject(Value : TExtObject);
    procedure SetFMessageProperty(Value : String);
    procedure SetFBuildExtractors(Value : TExtObject);
    procedure SetFExtractData(Value : TExtObject);
    procedure SetFExtractValues(Value : TExtObject);
    procedure SetFGetId(Value : TExtObject);
    procedure SetFGetMessage(Value : TExtObject);
    procedure SetFGetRoot(Value : TExtObject);
    procedure SetFGetSuccess(Value : TExtObject);
    procedure SetFGetTotal(Value : TExtObject);
    procedure SetFMeta(Value : String);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function IsData(Data : TExtObject) : TExtFunction;
    function Realize(RecordJS : TExtDataRecord; Data : TExtObject) : TExtFunction; overload;
    function Realize(RecordJS : TExtObjectList; Data : TExtObject) : TExtFunction; overload;
    function Realize(RecordJS : TExtObjectList; Data : TExtObjectList) : TExtFunction; overload;
    function Realize(RecordJS : TExtDataRecord; Data : TExtObjectList) : TExtFunction; overload;
    function Update(Rs : TExtDataRecord; Data : TExtObject) : TExtFunction; overload;
    function Update(Rs : TExtObjectList; Data : TExtObject) : TExtFunction; overload;
    function Update(Rs : TExtObjectList; Data : TExtObjectList) : TExtFunction; overload;
    function Update(Rs : TExtDataRecord; Data : TExtObjectList) : TExtFunction; overload;
    destructor Destroy; override;
    property Fields : TExtObjectList read FFields write SetFFields;
    property FieldsObject : TExtObject read FFieldsObject write SetFFieldsObject;
    property MessageProperty : String read FMessageProperty write SetFMessageProperty;
    property BuildExtractors : TExtObject read FBuildExtractors write SetFBuildExtractors;
    property ExtractData : TExtObject read FExtractData write SetFExtractData;
    property ExtractValues : TExtObject read FExtractValues write SetFExtractValues;
    property GetId : TExtObject read FGetId write SetFGetId;
    property GetMessage : TExtObject read FGetMessage write SetFGetMessage;
    property GetRoot : TExtObject read FGetRoot write SetFGetRoot;
    property GetSuccess : TExtObject read FGetSuccess write SetFGetSuccess;
    property GetTotal : TExtObject read FGetTotal write SetFGetTotal;
    property Meta : String read FMeta write SetFMeta;
  end;

  TExtDataDataWriter = class(TExtFunction)
  private
    FCreateRecord : TExtFunction;
    FDestroyRecord : TExtFunction;
    FListful : Boolean;
    FUpdateRecord : TExtFunction;
    FWriteAllFields : Boolean;
    procedure SetFCreateRecord(Value : TExtFunction);
    procedure SetFDestroyRecord(Value : TExtFunction);
    procedure SetFListful(Value : Boolean);
    procedure SetFUpdateRecord(Value : TExtFunction);
    procedure SetFWriteAllFields(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Meta : TExtObject; RecordType : TExtObject);
    function Apply(Params : TExtObject; BaseParams : TExtObject; Action : String; Rs : TExtDataRecord) : TExtFunction; overload;
    function Apply(Params : TExtObject; BaseParams : TExtObject; Action : String; Rs : TExtObjectList) : TExtFunction; overload;
    function Render(Action : String; Rs : TExtObjectList; Params : TExtObject; Data : TExtObject) : TExtFunction;
    function ToArray(Data : THash) : TExtFunction;
    function ToHash(E : TExtDataRecord; Config : TExtObject = nil) : TExtFunction;
    property CreateRecord : TExtFunction read FCreateRecord write SetFCreateRecord;
    property DestroyRecord : TExtFunction read FDestroyRecord write SetFDestroyRecord;
    property Listful : Boolean read FListful write SetFListful;
    property UpdateRecord : TExtFunction read FUpdateRecord write SetFUpdateRecord;
    property WriteAllFields : Boolean read FWriteAllFields write SetFWriteAllFields;
  end;

  TExtDataResponse = class(TExtFunction)
  private
    FAction : String;
    FData : TExtObjectList;
    FDataObject : TExtObject;
    FMessage : String;
    FRaw : TExtObject;
    FRecords : TExtDataRecord;
    FRecordsExtDataRecord : TExtObjectList;
    FSuccess : Boolean;
    procedure SetFAction(Value : String);
    procedure SetFData(Value : TExtObjectList);
    procedure SetFDataObject(Value : TExtObject);
    procedure SetFMessage(Value : String);
    procedure SetFRaw(Value : TExtObject);
    procedure SetFRecords(Value : TExtDataRecord);
    procedure SetFRecordsExtDataRecord(Value : TExtObjectList);
    procedure SetFSuccess(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property Action : String read FAction write SetFAction;
    property Data : TExtObjectList read FData write SetFData;
    property DataObject : TExtObject read FDataObject write SetFDataObject;
    property Message : String read FMessage write SetFMessage;
    property Raw : TExtObject read FRaw write SetFRaw;
    property Records : TExtDataRecord read FRecords write SetFRecords;
    property RecordsExtDataRecord : TExtObjectList read FRecordsExtDataRecord write SetFRecordsExtDataRecord;
    property Success : Boolean read FSuccess write SetFSuccess;
  end;

  TExtDataSortTypesSingleton = class(TExtFunction)
  private
    FStripTagsRE : TRegExp;
    procedure SetFStripTagsRE(Value : TRegExp);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function AsDate(S : String) : TExtFunction;
    function AsFloat(S : String) : TExtFunction;
    function AsInt(S : String) : TExtFunction;
    function AsText(S : String) : TExtFunction;
    function AsUCString(S : String) : TExtFunction;
    function AsUCText(S : String) : TExtFunction;
    function None(S : String) : TExtFunction;
    property StripTagsRE : TRegExp read FStripTagsRE write SetFStripTagsRE;
  end;

  TExtDataRecord = class(TExtFunction)
  private
    FData : TExtObject;
    FDirty : Boolean;
    FFields : TExtObjectList;
    FId : TExtObject;
    FJson : TExtObjectList;
    FJsonObject : TExtObject;
    FModified : TExtObject;
    FNode : TXMLElement;
    FPhantom : Boolean;
    FStore : TExtDataStore;
    procedure SetFData(Value : TExtObject);
    procedure SetFDirty(Value : Boolean);
    procedure SetFFields(Value : TExtObjectList);
    procedure SetFId(Value : TExtObject);
    procedure SetFJson(Value : TExtObjectList);
    procedure SetFJsonObject(Value : TExtObject);
    procedure SetFModified(Value : TExtObject);
    procedure SetFNode(Value : TXMLElement);
    procedure SetFPhantom(Value : Boolean);
    procedure SetFStore(Value : TExtDataStore);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Data : TExtObjectList);
    function TheGeneratedConstructorHasTheSameSignatureAsThisConstructor : TExtFunction;
    function BeginEdit : TExtFunction;
    function CancelEdit : TExtFunction;
    function Commit(Silent : Boolean = false) : TExtFunction;
    function Copy(Id : String = '') : TExtFunction;
    function Field : TExtFunction;
    function Get(Name : String) : TExtFunction;
    function GetChanges : TExtFunction;
    function IsModified(FieldName : String) : TExtFunction;
    function IsValid : TExtFunction;
    function MarkDirty : TExtFunction;
    function Reject(Silent : Boolean = false) : TExtFunction;
    function SetJS(Name : String; Value : String) : TExtFunction; overload;
    function SetJS(Name : String; Value : TExtObject) : TExtFunction; overload;
    function SetJS(Name : String; Value : TExtObjectList) : TExtFunction; overload;
    destructor Destroy; override;
    property Data : TExtObject read FData write SetFData;
    property Dirty : Boolean read FDirty write SetFDirty;
    property Fields : TExtObjectList read FFields write SetFFields;
    property Id : TExtObject read FId write SetFId;
    property Json : TExtObjectList read FJson write SetFJson;
    property JsonObject : TExtObject read FJsonObject write SetFJsonObject;
    property Modified : TExtObject read FModified write SetFModified;
    property Node : TXMLElement read FNode write SetFNode;
    property Phantom : Boolean read FPhantom write SetFPhantom;
    property Store : TExtDataStore read FStore write SetFStore;
  end;

  TExtDataRequest = class(TExtFunction)
  private
    FAction : String;
    FCallback : TExtFunction;
    FParams : TExtObject;
    FReader : TExtDataDataReader;
    FRs : TExtObjectList;
    FRsExtDataRecord : TExtDataRecord;
    FScope : TExtObject;
    procedure SetFAction(Value : String);
    procedure SetFCallback(Value : TExtFunction);
    procedure SetFParams(Value : TExtObject);
    procedure SetFReader(Value : TExtDataDataReader);
    procedure SetFRs(Value : TExtObjectList);
    procedure SetFRsExtDataRecord(Value : TExtDataRecord);
    procedure SetFScope(Value : TExtObject);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    property Action : String read FAction write SetFAction;
    property Callback : TExtFunction read FCallback write SetFCallback;
    property Params : TExtObject read FParams write SetFParams;
    property Reader : TExtDataDataReader read FReader write SetFReader;
    property Rs : TExtObjectList read FRs write SetFRs;
    property RsExtDataRecord : TExtDataRecord read FRsExtDataRecord write SetFRsExtDataRecord;
    property Scope : TExtObject read FScope write SetFScope;
  end;

  TExtDataApiSingleton = class(TExtFunction)
  private
    FActions : TExtObject;
    FRestActions : TExtObject;
    procedure SetFActions(Value : TExtObject);
    procedure SetFRestActions(Value : TExtObject);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function Response : TExtFunction;
    function GetVerb(Name : String) : TExtFunction;
    function HasUniqueUrl(Proxy : TExtDataDataProxy; Verb : String) : TExtFunction;
    function IsAction(Action : String) : TExtFunction;
    function IsValid : TExtFunction;
    function Prepare(Proxy : TExtDataDataProxy) : TExtFunction;
    function Restify(Proxy : TExtDataDataProxy) : TExtFunction;
    destructor Destroy; override;
    property Actions : TExtObject read FActions write SetFActions;
    property RestActions : TExtObject read FRestActions write SetFRestActions;
  end;

  TExtDataJsonWriter = class(TExtDataDataWriter)
  private
    FEncode : Boolean;
    FEncodeDelete : Boolean;
    procedure SetFEncode(Value : Boolean);
    procedure SetFEncodeDelete(Value : Boolean);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    function CreateRecord(Rec : TExtDataRecord) : TExtFunction;
    function DestroyRecord(Rec : TExtDataRecord) : TExtFunction;
    function Render(Http : TExtObject; BaseParams : TExtObject; Data : TExtObject) : TExtFunction; overload;
    function Render(Http : TExtObject; BaseParams : TExtObject; Data : TExtObjectList) : TExtFunction; overload;
    function UpdateRecord(Rec : TExtDataRecord) : TExtFunction;
    property Encode : Boolean read FEncode write SetFEncode;
    property EncodeDelete : Boolean read FEncodeDelete write SetFEncodeDelete;
  end;

  // Procedural types for events TExtDataStore
  TExtDataStoreOnAdd = procedure(This : TExtDataStore; Records : TExtObjectList; Index : Integer) of object;
  TExtDataStoreOnBeforeload = procedure(This : TExtDataStore; Options : TExtObject) of object;
  TExtDataStoreOnBeforesave = procedure(Store : TExtDataStore; Data : TExtObject) of object;
  TExtDataStoreOnBeforewrite = procedure(Store : TExtDataStore; Action : String; Rs : TExtDataRecord; Options : TExtObject; Arg : TExtObject) of object;
  TExtDataStoreOnClear = procedure(This : TExtDataStore; The : TExtObjectList) of object;
  TExtDataStoreOnDatachanged = procedure(This : TExtDataStore) of object;
  TExtDataStoreOnException = procedure(Misc : TMisc) of object;
  TExtDataStoreOnLoad = procedure(This : TExtDataStore; Records : TExtObjectList; Options : TExtObject) of object;
  TExtDataStoreOnLoadexception = procedure(Misc : TMisc) of object;
  TExtDataStoreOnMetachange = procedure(This : TExtDataStore; Meta : TExtObject) of object;
  TExtDataStoreOnRemove = procedure(This : TExtDataStore; RecordJS : TExtDataRecord; Index : Integer) of object;
  TExtDataStoreOnSave = procedure(Store : TExtDataStore; Batch : Integer; Data : TExtObject) of object;
  TExtDataStoreOnUpdate = procedure(This : TExtDataStore; RecordJS : TExtDataRecord; Operation : String) of object;
  TExtDataStoreOnWrite = procedure(Store : TExtDataStore; Action : String; ResultJS : TExtObject; Res : TExtDirectTransaction; Rs : TExtDataRecord) of object;

  TExtDataStore = class(TExtUtilObservable)
  private
    FAutoDestroy : Boolean;
    FAutoLoad : Boolean;
    FAutoLoadObject : TExtObject;
    FAutoSave : Boolean;
    FBaseParams : TExtObject;
    FBatch : Boolean;
    FData : TExtObjectList;
    FDefaultParamNames : TExtObject;
    FParamNames : TExtObject;
    FProxy : TExtDataDataProxy;
    FPruneModifiedRecords : Boolean; // true
    FReader : TExtDataDataReader;
    FRemoteSort : Boolean;
    FRestful : Boolean;
    FSortInfo : TExtObject;
    FStoreId : String;
    FUrl : String;
    FWriter : TExtDataDataWriter;
    FBaseParams_ : TExtObject;
    FFields : TExtObjectList;
    FLastOptions : TExtObject;
    FRecordType : TExtFunction;
    FOnAdd : TExtDataStoreOnAdd;
    FOnBeforeload : TExtDataStoreOnBeforeload;
    FOnBeforesave : TExtDataStoreOnBeforesave;
    FOnBeforewrite : TExtDataStoreOnBeforewrite;
    FOnClear : TExtDataStoreOnClear;
    FOnDatachanged : TExtDataStoreOnDatachanged;
    FOnException : TExtDataStoreOnException;
    FOnLoad : TExtDataStoreOnLoad;
    FOnLoadexception : TExtDataStoreOnLoadexception;
    FOnMetachange : TExtDataStoreOnMetachange;
    FOnRemove : TExtDataStoreOnRemove;
    FOnSave : TExtDataStoreOnSave;
    FOnUpdate : TExtDataStoreOnUpdate;
    FOnWrite : TExtDataStoreOnWrite;
    procedure SetFAutoDestroy(Value : Boolean);
    procedure SetFAutoLoad(Value : Boolean);
    procedure SetFAutoLoadObject(Value : TExtObject);
    procedure SetFAutoSave(Value : Boolean);
    procedure SetFBaseParams(Value : TExtObject);
    procedure SetFBatch(Value : Boolean);
    procedure SetFData(Value : TExtObjectList);
    procedure SetFDefaultParamNames(Value : TExtObject);
    procedure SetFParamNames(Value : TExtObject);
    procedure SetFProxy(Value : TExtDataDataProxy);
    procedure SetFPruneModifiedRecords(Value : Boolean);
    procedure SetFReader(Value : TExtDataDataReader);
    procedure SetFRemoteSort(Value : Boolean);
    procedure SetFRestful(Value : Boolean);
    procedure SetFSortInfo(Value : TExtObject);
    procedure SetFStoreId(Value : String);
    procedure SetFUrl(Value : String);
    procedure SetFWriter(Value : TExtDataDataWriter);
    procedure SetFBaseParams_(Value : TExtObject);
    procedure SetFFields(Value : TExtObjectList);
    procedure SetFLastOptions(Value : TExtObject);
    procedure SetFRecordType(Value : TExtFunction);
    procedure SetFOnAdd(Value : TExtDataStoreOnAdd);
    procedure SetFOnBeforeload(Value : TExtDataStoreOnBeforeload);
    procedure SetFOnBeforesave(Value : TExtDataStoreOnBeforesave);
    procedure SetFOnBeforewrite(Value : TExtDataStoreOnBeforewrite);
    procedure SetFOnClear(Value : TExtDataStoreOnClear);
    procedure SetFOnDatachanged(Value : TExtDataStoreOnDatachanged);
    procedure SetFOnException(Value : TExtDataStoreOnException);
    procedure SetFOnLoad(Value : TExtDataStoreOnLoad);
    procedure SetFOnLoadexception(Value : TExtDataStoreOnLoadexception);
    procedure SetFOnMetachange(Value : TExtDataStoreOnMetachange);
    procedure SetFOnRemove(Value : TExtDataStoreOnRemove);
    procedure SetFOnSave(Value : TExtDataStoreOnSave);
    procedure SetFOnUpdate(Value : TExtDataStoreOnUpdate);
    procedure SetFOnWrite(Value : TExtDataStoreOnWrite);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function Add(Records : TExtObjectList) : TExtFunction;
    function AddSorted(RecordJS : TExtDataRecord) : TExtFunction;
    function ClearFilter(SuppressEvent : Boolean) : TExtFunction;
    function Collect(DataIndex : String; AllowNull : Boolean = false; BypassFilter : Boolean = false) : TExtFunction;
    function CommitChanges : TExtFunction;
    function DestroyJS : TExtFunction; override;
    function Each(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction;
    function Filter(Field : String; Value : String; AnyMatch : Boolean = false; CaseSensitive : Boolean = false) : TExtFunction; overload;
    function Filter(Field : String; Value : TRegExp; AnyMatch : Boolean = false; CaseSensitive : Boolean = false) : TExtFunction; overload;
    function FilterBy(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction;
    function Find(FieldName : String; Value : String; StartIndex : Integer = 0; AnyMatch : Boolean = false; CaseSensitive : Boolean = false) : TExtFunction; overload;
    function Find(FieldName : String; Value : TRegExp; StartIndex : Integer = 0; AnyMatch : Boolean = false; CaseSensitive : Boolean = false) : TExtFunction; overload;
    function FindBy(Fn : TExtFunction; Scope : TExtObject = nil; StartIndex : Integer = 0) : TExtFunction;
    function FindExact(FieldName : String; Value : String; StartIndex : Integer = 0) : TExtFunction;
    function GetAt(Index : Integer) : TExtFunction;
    function GetById(Id : String) : TExtFunction;
    function GetCount : TExtFunction;
    function GetModifiedRecords : TExtFunction;
    function GetRange(StartIndex : Integer = 0; EndIndex : Integer = 0) : TExtFunction;
    function GetSortState : TExtFunction;
    function GetTotalCount : TExtFunction;
    function IndexOf(RecordJS : TExtDataRecord) : TExtFunction;
    function IndexOfId(Id : String) : TExtFunction;
    function Insert(Index : Integer; Records : TExtObjectList) : TExtFunction;
    function IsFiltered : TExtFunction;
    function Load(Options : TExtObject) : TExtFunction;
    function LoadData(Data : TExtObject; Append : Boolean = false) : TExtFunction;
    function Query(Field : String; Value : String; AnyMatch : Boolean = false; CaseSensitive : Boolean = false) : TExtFunction; overload;
    function Query(Field : String; Value : TRegExp; AnyMatch : Boolean = false; CaseSensitive : Boolean = false) : TExtFunction; overload;
    function QueryBy(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction;
    function RejectChanges : TExtFunction;
    function Reload(Options : TExtObject) : TExtFunction;
    function Remove(RecordJS : TExtDataRecord) : TExtFunction; overload;
    function Remove(RecordJS : TExtObjectList) : TExtFunction; overload;
    procedure RemoveAll(Silent : Boolean = false);
    function RemoveAt(Index : Integer) : TExtFunction;
    function Save : TExtFunction;
    function SetBaseParam(Name : String; Value : String) : TExtFunction;
    function SetDefaultSort(FieldName : String; Dir : String = '') : TExtFunction;
    function Sort(FieldName : String; Dir : String = '') : TExtFunction;
    function Sum(PropertyJS : String; Start : Integer = 0; EndJS : Integer = 0) : TExtFunction;
    destructor Destroy; override;
    property AutoDestroy : Boolean read FAutoDestroy write SetFAutoDestroy;
    property AutoLoad : Boolean read FAutoLoad write SetFAutoLoad;
    property AutoLoadObject : TExtObject read FAutoLoadObject write SetFAutoLoadObject;
    property AutoSave : Boolean read FAutoSave write SetFAutoSave;
    property BaseParams : TExtObject read FBaseParams write SetFBaseParams;
    property Batch : Boolean read FBatch write SetFBatch;
    property Data : TExtObjectList read FData write SetFData;
    property DefaultParamNames : TExtObject read FDefaultParamNames write SetFDefaultParamNames;
    property ParamNames : TExtObject read FParamNames write SetFParamNames;
    property Proxy : TExtDataDataProxy read FProxy write SetFProxy;
    property PruneModifiedRecords : Boolean read FPruneModifiedRecords write SetFPruneModifiedRecords;
    property Reader : TExtDataDataReader read FReader write SetFReader;
    property RemoteSort : Boolean read FRemoteSort write SetFRemoteSort;
    property Restful : Boolean read FRestful write SetFRestful;
    property SortInfo : TExtObject read FSortInfo write SetFSortInfo;
    property StoreId : String read FStoreId write SetFStoreId;
    property Url : String read FUrl write SetFUrl;
    property Writer : TExtDataDataWriter read FWriter write SetFWriter;
    property BaseParams_ : TExtObject read FBaseParams_ write SetFBaseParams_;
    property Fields : TExtObjectList read FFields write SetFFields;
    property LastOptions : TExtObject read FLastOptions write SetFLastOptions;
    property RecordType : TExtFunction read FRecordType write SetFRecordType;
    property OnAdd : TExtDataStoreOnAdd read FOnAdd write SetFOnAdd;
    property OnBeforeload : TExtDataStoreOnBeforeload read FOnBeforeload write SetFOnBeforeload;
    property OnBeforesave : TExtDataStoreOnBeforesave read FOnBeforesave write SetFOnBeforesave;
    property OnBeforewrite : TExtDataStoreOnBeforewrite read FOnBeforewrite write SetFOnBeforewrite;
    property OnClear : TExtDataStoreOnClear read FOnClear write SetFOnClear;
    property OnDatachanged : TExtDataStoreOnDatachanged read FOnDatachanged write SetFOnDatachanged;
    property OnException : TExtDataStoreOnException read FOnException write SetFOnException;
    property OnLoad : TExtDataStoreOnLoad read FOnLoad write SetFOnLoad;
    property OnLoadexception : TExtDataStoreOnLoadexception read FOnLoadexception write SetFOnLoadexception;
    property OnMetachange : TExtDataStoreOnMetachange read FOnMetachange write SetFOnMetachange;
    property OnRemove : TExtDataStoreOnRemove read FOnRemove write SetFOnRemove;
    property OnSave : TExtDataStoreOnSave read FOnSave write SetFOnSave;
    property OnUpdate : TExtDataStoreOnUpdate read FOnUpdate write SetFOnUpdate;
    property OnWrite : TExtDataStoreOnWrite read FOnWrite write SetFOnWrite;
  end;

  TExtDataJsonReader = class(TExtDataDataReader)
  private
    FIdProperty : String;
    FRoot : String;
    FSuccessProperty : String;
    FTotalProperty : String;
    FJsonData : TExtObject;
    FMeta : String;
    procedure SetFIdProperty(Value : String);
    procedure SetFRoot(Value : String);
    procedure SetFSuccessProperty(Value : String);
    procedure SetFTotalProperty(Value : String);
    procedure SetFJsonData(Value : TExtObject);
    procedure SetFMeta(Value : String);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Meta : TExtObject = nil; RecordType : TExtDataRecord = nil);
    function Read(Response : TExtObject) : TExtFunction;
    function ReadRecords(O : TExtObject) : TExtFunction;
    function ReadResponse(Action : String; Response : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property IdProperty : String read FIdProperty write SetFIdProperty;
    property Root : String read FRoot write SetFRoot;
    property SuccessProperty : String read FSuccessProperty write SetFSuccessProperty;
    property TotalProperty : String read FTotalProperty write SetFTotalProperty;
    property JsonData : TExtObject read FJsonData write SetFJsonData;
    property Meta : String read FMeta write SetFMeta;
  end;

  TExtDataApiError = class(TExtError)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  // Procedural types for events TExtDataNode
  TExtDataNodeOnAppend = procedure(Tree : TExtDataTree; This : TExtDataNode; Node : TExtDataNode; Index : Integer) of object;
  TExtDataNodeOnBeforeappend = procedure(Tree : TExtDataTree; This : TExtDataNode; Node : TExtDataNode) of object;
  TExtDataNodeOnBeforeinsert = procedure(Tree : TExtDataTree; This : TExtDataNode; Node : TExtDataNode; RefNode : TExtDataNode) of object;
  TExtDataNodeOnBeforemove = procedure(Tree : TExtDataTree; This : TExtDataNode; OldParent : TExtDataNode; NewParent : TExtDataNode; Index : Integer) of object;
  TExtDataNodeOnBeforeremove = procedure(Tree : TExtDataTree; This : TExtDataNode; Node : TExtDataNode) of object;
  TExtDataNodeOnInsert = procedure(Tree : TExtDataTree; This : TExtDataNode; Node : TExtDataNode; RefNode : TExtDataNode) of object;
  TExtDataNodeOnMove = procedure(Tree : TExtDataTree; This : TExtDataNode; OldParent : TExtDataNode; NewParent : TExtDataNode; Index : Integer) of object;
  TExtDataNodeOnRemove = procedure(Tree : TExtDataTree; This : TExtDataNode; Node : TExtDataNode) of object;

  TExtDataNode = class(TExtUtilObservable)
  private
    FId : String;
    FLeaf : Boolean;
    FAttributes : TExtObject;
    FChildNodes : TExtObjectList;
    FFirstChild : TExtDataNode;
    FId_ : String;
    FLastChild : TExtDataNode;
    FNextSibling : TExtDataNode;
    FParentNode : TExtDataNode;
    FPreviousSibling : TExtDataNode;
    FOnAppend : TExtDataNodeOnAppend;
    FOnBeforeappend : TExtDataNodeOnBeforeappend;
    FOnBeforeinsert : TExtDataNodeOnBeforeinsert;
    FOnBeforemove : TExtDataNodeOnBeforemove;
    FOnBeforeremove : TExtDataNodeOnBeforeremove;
    FOnInsert : TExtDataNodeOnInsert;
    FOnMove : TExtDataNodeOnMove;
    FOnRemove : TExtDataNodeOnRemove;
    procedure SetFId(Value : String);
    procedure SetFLeaf(Value : Boolean);
    procedure SetFAttributes(Value : TExtObject);
    procedure SetFChildNodes(Value : TExtObjectList);
    procedure SetFFirstChild(Value : TExtDataNode);
    procedure SetFId_(Value : String);
    procedure SetFLastChild(Value : TExtDataNode);
    procedure SetFNextSibling(Value : TExtDataNode);
    procedure SetFParentNode(Value : TExtDataNode);
    procedure SetFPreviousSibling(Value : TExtDataNode);
    procedure SetFOnAppend(Value : TExtDataNodeOnAppend);
    procedure SetFOnBeforeappend(Value : TExtDataNodeOnBeforeappend);
    procedure SetFOnBeforeinsert(Value : TExtDataNodeOnBeforeinsert);
    procedure SetFOnBeforemove(Value : TExtDataNodeOnBeforemove);
    procedure SetFOnBeforeremove(Value : TExtDataNodeOnBeforeremove);
    procedure SetFOnInsert(Value : TExtDataNodeOnInsert);
    procedure SetFOnMove(Value : TExtDataNodeOnMove);
    procedure SetFOnRemove(Value : TExtDataNodeOnRemove);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function AppendChild(Node : TExtDataNode) : TExtFunction; overload;
    function AppendChild(Node : TExtObjectList) : TExtFunction; overload;
    function Bubble(Fn : TExtFunction; Scope : TExtObject = nil; Args : TExtObjectList = nil) : TExtFunction;
    function Cascade(Fn : TExtFunction; Scope : TExtObject = nil; Args : TExtObjectList = nil) : TExtFunction;
    function Contains(Node : TExtDataNode) : TExtFunction;
    function DestroyJS : TExtFunction; override;
    function EachChild(Fn : TExtFunction; Scope : TExtObject = nil; Args : TExtObjectList = nil) : TExtFunction;
    function FindChild(Attribute : String; Value : String) : TExtFunction;
    function FindChildBy(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction;
    function GetDepth : TExtFunction;
    function GetOwnerTree : TExtFunction;
    function GetPath(Attr : String = '') : TExtFunction;
    function HasChildNodes : TExtFunction;
    function IndexOf(Node : TExtDataNode) : TExtFunction;
    function InsertBefore(Node : TExtDataNode; RefNode : TExtDataNode) : TExtFunction;
    function IsAncestor(Node : TExtDataNode) : TExtFunction;
    function IsExpandable : TExtFunction;
    function IsFirst : TExtFunction;
    function IsLast : TExtFunction;
    function IsLeaf : TExtFunction;
    function Item(Index : Integer) : TExtFunction;
    function Remove(DestroyJS : Boolean) : TExtFunction;
    function RemoveAll(DestroyJS : Boolean) : TExtFunction;
    function RemoveChild(Node : TExtDataNode; DestroyJS : Boolean) : TExtFunction;
    function ReplaceChild(NewChild : TExtDataNode; OldChild : TExtDataNode) : TExtFunction;
    function SetId(Id : String) : TExtFunction;
    function Sort(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction;
    destructor Destroy; override;
    property Id : String read FId write SetFId;
    property Leaf : Boolean read FLeaf write SetFLeaf;
    property Attributes : TExtObject read FAttributes write SetFAttributes;
    property ChildNodes : TExtObjectList read FChildNodes write SetFChildNodes;
    property FirstChild : TExtDataNode read FFirstChild write SetFFirstChild;
    property Id_ : String read FId_ write SetFId_;
    property LastChild : TExtDataNode read FLastChild write SetFLastChild;
    property NextSibling : TExtDataNode read FNextSibling write SetFNextSibling;
    property ParentNode : TExtDataNode read FParentNode write SetFParentNode;
    property PreviousSibling : TExtDataNode read FPreviousSibling write SetFPreviousSibling;
    property OnAppend : TExtDataNodeOnAppend read FOnAppend write SetFOnAppend;
    property OnBeforeappend : TExtDataNodeOnBeforeappend read FOnBeforeappend write SetFOnBeforeappend;
    property OnBeforeinsert : TExtDataNodeOnBeforeinsert read FOnBeforeinsert write SetFOnBeforeinsert;
    property OnBeforemove : TExtDataNodeOnBeforemove read FOnBeforemove write SetFOnBeforemove;
    property OnBeforeremove : TExtDataNodeOnBeforeremove read FOnBeforeremove write SetFOnBeforeremove;
    property OnInsert : TExtDataNodeOnInsert read FOnInsert write SetFOnInsert;
    property OnMove : TExtDataNodeOnMove read FOnMove write SetFOnMove;
    property OnRemove : TExtDataNodeOnRemove read FOnRemove write SetFOnRemove;
  end;

  TExtDataStoreError = class(TExtError)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  // Procedural types for events TExtDataConnection
  TExtDataConnectionOnBeforerequest = procedure(Conn : TExtDataConnection; Options : TExtObject) of object;
  TExtDataConnectionOnRequestcomplete = procedure(Conn : TExtDataConnection; Response : TExtObject; Options : TExtObject) of object;
  TExtDataConnectionOnRequestexception = procedure(Conn : TExtDataConnection; Response : TExtObject; Options : TExtObject) of object;

  TExtDataConnection = class(TExtUtilObservable)
  private
    FAutoAbort : Boolean;
    FDefaultHeaders : TExtObject;
    FDisableCaching : Boolean; // true
    FDisableCachingParam : String;
    FExtraParams : TExtObject;
    FMethod : String; // 'output/Ext.data.Connection.html#Ext.data.Connection-request'
    FTimeout : Integer; // 30000
    FUrl : String;
    FOnBeforerequest : TExtDataConnectionOnBeforerequest;
    FOnRequestcomplete : TExtDataConnectionOnRequestcomplete;
    FOnRequestexception : TExtDataConnectionOnRequestexception;
    procedure SetFAutoAbort(Value : Boolean);
    procedure SetFDefaultHeaders(Value : TExtObject);
    procedure SetFDisableCaching(Value : Boolean);
    procedure SetFDisableCachingParam(Value : String);
    procedure SetFExtraParams(Value : TExtObject);
    procedure SetFMethod(Value : String);
    procedure SetFTimeout(Value : Integer);
    procedure SetFUrl(Value : String);
    procedure SetFOnBeforerequest(Value : TExtDataConnectionOnBeforerequest);
    procedure SetFOnRequestcomplete(Value : TExtDataConnectionOnRequestcomplete);
    procedure SetFOnRequestexception(Value : TExtDataConnectionOnRequestexception);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function Abort(TransactionId : Integer = 0) : TExtFunction;
    function IsLoading(TransactionId : Integer = 0) : TExtFunction;
    function Request(Options : TExtObject) : TExtFunction;
    destructor Destroy; override;
    property AutoAbort : Boolean read FAutoAbort write SetFAutoAbort;
    property DefaultHeaders : TExtObject read FDefaultHeaders write SetFDefaultHeaders;
    property DisableCaching : Boolean read FDisableCaching write SetFDisableCaching;
    property DisableCachingParam : String read FDisableCachingParam write SetFDisableCachingParam;
    property ExtraParams : TExtObject read FExtraParams write SetFExtraParams;
    property Method : String read FMethod write SetFMethod;
    property Timeout : Integer read FTimeout write SetFTimeout;
    property Url : String read FUrl write SetFUrl;
    property OnBeforerequest : TExtDataConnectionOnBeforerequest read FOnBeforerequest write SetFOnBeforerequest;
    property OnRequestcomplete : TExtDataConnectionOnRequestcomplete read FOnRequestcomplete write SetFOnRequestcomplete;
    property OnRequestexception : TExtDataConnectionOnRequestexception read FOnRequestexception write SetFOnRequestexception;
  end;

  TExtDataDataReaderError = class(TExtError)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  TExtDataXmlWriter = class(TExtDataDataWriter)
  private
    FDocumentRoot : String;
    FForceDocumentRoot : Boolean;
    FRoot : String;
    FTpl : String;
    FTplExtXTemplate : TExtXTemplate;
    FXmlEncoding : String;
    FXmlVersion : String;
    procedure SetFDocumentRoot(Value : String);
    procedure SetFForceDocumentRoot(Value : Boolean);
    procedure SetFRoot(Value : String);
    procedure SetFTpl(Value : String);
    procedure SetFTplExtXTemplate(Value : TExtXTemplate);
    procedure SetFXmlEncoding(Value : String);
    procedure SetFXmlVersion(Value : String);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function CreateRecord(Rec : TExtDataRecord) : TExtFunction;
    function DestroyRecord(Rec : TExtDataRecord) : TExtFunction;
    function Render(Params : TExtObject; BaseParams : TExtObject; Data : TExtObject) : TExtFunction; overload;
    function Render(Params : TExtObject; BaseParams : TExtObject; Data : TExtObjectList) : TExtFunction; overload;
    function UpdateRecord(Rec : TExtDataRecord) : TExtFunction;
    destructor Destroy; override;
    property DocumentRoot : String read FDocumentRoot write SetFDocumentRoot;
    property ForceDocumentRoot : Boolean read FForceDocumentRoot write SetFForceDocumentRoot;
    property Root : String read FRoot write SetFRoot;
    property Tpl : String read FTpl write SetFTpl;
    property TplExtXTemplate : TExtXTemplate read FTplExtXTemplate write SetFTplExtXTemplate;
    property XmlEncoding : String read FXmlEncoding write SetFXmlEncoding;
    property XmlVersion : String read FXmlVersion write SetFXmlVersion;
  end;

  // Procedural types for events TExtDataDataProxy
  TExtDataDataProxyOnBeforeload = procedure(This : TExtDataDataProxy; Params : TExtObject) of object;
  TExtDataDataProxyOnBeforewrite = procedure(This : TExtDataDataProxy; Action : String; Rs : TExtDataRecord; Params : TExtObject) of object;
  TExtDataDataProxyOnException = procedure(This : TExtDataDataProxy; TypeJS : String; Action : String; Options : TExtObject; Response : TExtObject; Arg : String) of object;
  TExtDataDataProxyOnLoad = procedure(This : TExtDataDataProxy; O : TExtObject; Options : TExtObject) of object;
  TExtDataDataProxyOnLoadexception = procedure(Misc : TMisc) of object;
  TExtDataDataProxyOnWrite_ = procedure(This : TExtDataDataProxy; Action : String; Data : TExtObject; Response : TExtObject; Rs : TExtDataRecord; Options : TExtObject) of object;

  TExtDataDataProxy = class(TExtUtilObservable)
  private
    FApi : TExtObject;
    FDoRequest : TExtFunction;
    FOnRead : TExtFunction;
    FOnWrite : TExtFunction;
    FRestful : Boolean;
    FOnBeforeload : TExtDataDataProxyOnBeforeload;
    FOnBeforewrite : TExtDataDataProxyOnBeforewrite;
    FOnException : TExtDataDataProxyOnException;
    FOnLoad : TExtDataDataProxyOnLoad;
    FOnLoadexception : TExtDataDataProxyOnLoadexception;
    FOnWrite_ : TExtDataDataProxyOnWrite_;
    procedure SetFApi(Value : TExtObject);
    procedure SetFDoRequest(Value : TExtFunction);
    procedure SetFOnRead(Value : TExtFunction);
    procedure SetFOnWrite(Value : TExtFunction);
    procedure SetFRestful(Value : Boolean);
    procedure SetFOnBeforeload(Value : TExtDataDataProxyOnBeforeload);
    procedure SetFOnBeforewrite(Value : TExtDataDataProxyOnBeforewrite);
    procedure SetFOnException(Value : TExtDataDataProxyOnException);
    procedure SetFOnLoad(Value : TExtDataDataProxyOnLoad);
    procedure SetFOnLoadexception(Value : TExtDataDataProxyOnLoadexception);
    procedure SetFOnWrite_(Value : TExtDataDataProxyOnWrite_);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function DestroyJS : TExtFunction; override;
    function IsApiAction(ExtDataApiCREATEREADUPDATEDESTROY : String) : TExtFunction;
    function Load(Params : TExtObject; Reader : TExtObject; Callback : TExtObject; Scope : TExtObject; Arg : TExtObject) : TExtFunction;
    function Request(Action : String; Rs : TExtDataRecord; Params : TExtObject; Reader : TExtDataDataReader; Callback : TExtFunction; Scope : TExtObject; Options : TExtObject) : TExtFunction; overload;
    function Request(Action : String; Rs : TExtObjectList; Params : TExtObject; Reader : TExtDataDataReader; Callback : TExtFunction; Scope : TExtObject; Options : TExtObject) : TExtFunction; overload;
    function Request(Action : String; Rs : TNull; Params : TExtObject; Reader : TExtDataDataReader; Callback : TExtFunction; Scope : TExtObject; Options : TExtObject) : TExtFunction; overload;
    function SetApi(Api : String; Url : String) : TExtFunction; overload;
    function SetApi(Api : TExtObject; Url : String) : TExtFunction; overload;
    function SetApi(Api : TExtObject; Url : TExtFunction) : TExtFunction; overload;
    function SetApi(Api : String; Url : TExtFunction) : TExtFunction; overload;
    destructor Destroy; override;
    property Api : TExtObject read FApi write SetFApi;
    property DoRequest : TExtFunction read FDoRequest write SetFDoRequest;
    property OnRead : TExtFunction read FOnRead write SetFOnRead;
    property OnWrite : TExtFunction read FOnWrite write SetFOnWrite;
    property Restful : Boolean read FRestful write SetFRestful;
    property OnBeforeload : TExtDataDataProxyOnBeforeload read FOnBeforeload write SetFOnBeforeload;
    property OnBeforewrite : TExtDataDataProxyOnBeforewrite read FOnBeforewrite write SetFOnBeforewrite;
    property OnException : TExtDataDataProxyOnException read FOnException write SetFOnException;
    property OnLoad : TExtDataDataProxyOnLoad read FOnLoad write SetFOnLoad;
    property OnLoadexception : TExtDataDataProxyOnLoadexception read FOnLoadexception write SetFOnLoadexception;
    property OnWrite_ : TExtDataDataProxyOnWrite_ read FOnWrite_ write SetFOnWrite_;
  end;

  // Procedural types for events TExtDataTree
  TExtDataTreeOnAppend = procedure(Tree : TExtDataTree; Parent : TExtDataNode; Node : TExtDataNode; Index : Integer) of object;
  TExtDataTreeOnBeforeappend = procedure(Tree : TExtDataTree; Parent : TExtDataNode; Node : TExtDataNode) of object;
  TExtDataTreeOnBeforeinsert = procedure(Tree : TExtDataTree; Parent : TExtDataNode; Node : TExtDataNode; RefNode : TExtDataNode) of object;
  TExtDataTreeOnBeforemove = procedure(Tree : TExtDataTree; Node : TExtDataNode; OldParent : TExtDataNode; NewParent : TExtDataNode; Index : Integer) of object;
  TExtDataTreeOnBeforeremove = procedure(Tree : TExtDataTree; Parent : TExtDataNode; Node : TExtDataNode) of object;
  TExtDataTreeOnInsert = procedure(Tree : TExtDataTree; Parent : TExtDataNode; Node : TExtDataNode; RefNode : TExtDataNode) of object;
  TExtDataTreeOnMove = procedure(Tree : TExtDataTree; Node : TExtDataNode; OldParent : TExtDataNode; NewParent : TExtDataNode; Index : Integer) of object;
  TExtDataTreeOnRemove = procedure(Tree : TExtDataTree; Parent : TExtDataNode; Node : TExtDataNode) of object;

  TExtDataTree = class(TExtUtilObservable)
  private
    FPathSeparator : String; // '/'
    FRoot : TExtDataNode;
    FOnAppend : TExtDataTreeOnAppend;
    FOnBeforeappend : TExtDataTreeOnBeforeappend;
    FOnBeforeinsert : TExtDataTreeOnBeforeinsert;
    FOnBeforemove : TExtDataTreeOnBeforemove;
    FOnBeforeremove : TExtDataTreeOnBeforeremove;
    FOnInsert : TExtDataTreeOnInsert;
    FOnMove : TExtDataTreeOnMove;
    FOnRemove : TExtDataTreeOnRemove;
    procedure SetFPathSeparator(Value : String);
    procedure SetFRoot(Value : TExtDataNode);
    procedure SetFOnAppend(Value : TExtDataTreeOnAppend);
    procedure SetFOnBeforeappend(Value : TExtDataTreeOnBeforeappend);
    procedure SetFOnBeforeinsert(Value : TExtDataTreeOnBeforeinsert);
    procedure SetFOnBeforemove(Value : TExtDataTreeOnBeforemove);
    procedure SetFOnBeforeremove(Value : TExtDataTreeOnBeforeremove);
    procedure SetFOnInsert(Value : TExtDataTreeOnInsert);
    procedure SetFOnMove(Value : TExtDataTreeOnMove);
    procedure SetFOnRemove(Value : TExtDataTreeOnRemove);
  protected
    procedure InitDefaults; override;
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function GetNodeById(Id : String) : TExtFunction;
    function GetRootNode : TExtFunction;
    function SetRootNode(Node : TExtDataNode) : TExtFunction;
    property PathSeparator : String read FPathSeparator write SetFPathSeparator;
    property Root : TExtDataNode read FRoot write SetFRoot;
    property OnAppend : TExtDataTreeOnAppend read FOnAppend write SetFOnAppend;
    property OnBeforeappend : TExtDataTreeOnBeforeappend read FOnBeforeappend write SetFOnBeforeappend;
    property OnBeforeinsert : TExtDataTreeOnBeforeinsert read FOnBeforeinsert write SetFOnBeforeinsert;
    property OnBeforemove : TExtDataTreeOnBeforemove read FOnBeforemove write SetFOnBeforemove;
    property OnBeforeremove : TExtDataTreeOnBeforeremove read FOnBeforeremove write SetFOnBeforeremove;
    property OnInsert : TExtDataTreeOnInsert read FOnInsert write SetFOnInsert;
    property OnMove : TExtDataTreeOnMove read FOnMove write SetFOnMove;
    property OnRemove : TExtDataTreeOnRemove read FOnRemove write SetFOnRemove;
  end;

  TExtDataXmlReader = class(TExtDataDataReader)
  private
    FIdPath : String;
    FRecordJS : String;
    FRecordJS_ : String;
    FSuccessProperty : String;
    FTotalProperty : String;
    FXmlData : TXMLDocument;
    procedure SetFIdPath(Value : String);
    procedure SetFRecordJS(Value : String);
    procedure SetFRecordJS_(Value : String);
    procedure SetFSuccessProperty(Value : String);
    procedure SetFTotalProperty(Value : String);
    procedure SetFXmlData(Value : TXMLDocument);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Meta : TExtObject; RecordType : TExtObject);
    function Read(Response : TExtObject) : TExtFunction;
    function ReadRecords(Doc : TExtObject) : TExtFunction;
    function ReadResponse(Action : String; Response : TExtObject) : TExtFunction;
    property IdPath : String read FIdPath write SetFIdPath;
    property RecordJS : String read FRecordJS write SetFRecordJS;
    property RecordJS_ : String read FRecordJS_ write SetFRecordJS_;
    property SuccessProperty : String read FSuccessProperty write SetFSuccessProperty;
    property TotalProperty : String read FTotalProperty write SetFTotalProperty;
    property XmlData : TXMLDocument read FXmlData write SetFXmlData;
  end;

  TExtDataDataProxyError = class(TExtError)
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
  end;

  // Procedural types for events TExtDataScriptTagProxy
  TExtDataScriptTagProxyOnLoadexception = procedure(This : TExtDataScriptTagProxy; Options : TExtObject; Arg : TExtObject; E : string) of object;

  TExtDataScriptTagProxy = class(TExtDataDataProxy)
  private
    FCallbackParam : String;
    FNocache : Boolean;
    FTimeout : Integer;
    FUrl : String;
    FOnLoadexception : TExtDataScriptTagProxyOnLoadexception;
    procedure SetFCallbackParam(Value : String);
    procedure SetFNocache(Value : Boolean);
    procedure SetFTimeout(Value : Integer);
    procedure SetFUrl(Value : String);
    procedure SetFOnLoadexception(Value : TExtDataScriptTagProxyOnLoadexception);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Config : TExtObject = nil);
    function Abort : TExtFunction;
    function DoRequest(Action : String; Rs : TExtDataRecord; Params : TExtObject; Reader : TExtDataDataReader; Callback : TExtFunction; Scope : TExtObject; Arg : TExtObject) : TExtFunction; overload;
    function DoRequest(Action : String; Rs : TExtObjectList; Params : TExtObject; Reader : TExtDataDataReader; Callback : TExtFunction; Scope : TExtObject; Arg : TExtObject) : TExtFunction; overload;
    function OnRead(Action : String; Trans : TExtObject; Res : TExtObject) : TExtFunction;
    function OnWrite(Action : String; Trans : TExtObject; Res : TExtObject) : TExtFunction;
    property CallbackParam : String read FCallbackParam write SetFCallbackParam;
    property Nocache : Boolean read FNocache write SetFNocache;
    property Timeout : Integer read FTimeout write SetFTimeout;
    property Url : String read FUrl write SetFUrl;
    property OnLoadexception : TExtDataScriptTagProxyOnLoadexception read FOnLoadexception write SetFOnLoadexception;
  end;

  TExtDataXmlStore = class(TExtDataStore)
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
  end;

  TExtDataGroupingStore = class(TExtDataStore)
  private
    FGroupField : String;
    FGroupOnSort : Boolean;
    FRemoteGroup : Boolean;
    procedure SetFGroupField(Value : String);
    procedure SetFGroupOnSort(Value : Boolean);
    procedure SetFRemoteGroup(Value : Boolean);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function ClearGrouping : TExtFunction;
    function GroupBy(Field : String; ForceRegroup : Boolean = false) : TExtFunction;
    property GroupField : String read FGroupField write SetFGroupField;
    property GroupOnSort : Boolean read FGroupOnSort write SetFGroupOnSort;
    property RemoteGroup : Boolean read FRemoteGroup write SetFRemoteGroup;
  end;

  TExtDataHttpProxy = class(TExtDataDataProxy)
  private
    FConn : TExtDataConnection;
    procedure SetFConn(Value : TExtDataConnection);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Conn : TExtDataConnection);
    function DoRequest(Action : String; Rs : TExtDataRecord; Params : TExtObject; Reader : TExtDataDataReader; Callback : TExtFunction; Scope : TExtObject; Arg : TExtObject) : TExtFunction; overload;
    function DoRequest(Action : String; Rs : TExtObjectList; Params : TExtObject; Reader : TExtDataDataReader; Callback : TExtFunction; Scope : TExtObject; Arg : TExtObject) : TExtFunction; overload;
    function GetConnection : TExtFunction;
    function OnRead(Action : String; O : TExtObject; Res : TExtObject) : TExtFunction;
    function OnWrite(Action : String; Trans : TExtObject; Res : TExtObject) : TExtFunction;
    function SetUrl(Url : String; MakePermanent : Boolean = false) : TExtFunction;
    destructor Destroy; override;
    property Conn : TExtDataConnection read FConn write SetFConn;
  end;

  TExtDataDirectProxy = class(TExtDataDataProxy)
  private
    FDirectFn : TExtFunction;
    FParamOrder : TExtObjectList;
    FParamOrderString : String;
    FParamsAsHash : Boolean; // true
    procedure SetFDirectFn(Value : TExtFunction);
    procedure SetFParamOrder(Value : TExtObjectList);
    procedure SetFParamOrderString(Value : String);
    procedure SetFParamsAsHash(Value : Boolean);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    function DoRequest(Action : String; Rs : TExtDataRecord; Params : TExtObject; Reader : TExtDataDataReader; Callback : TExtFunction; Scope : TExtObject; Arg : TExtObject) : TExtFunction; overload;
    function DoRequest(Action : String; Rs : TExtObjectList; Params : TExtObject; Reader : TExtDataDataReader; Callback : TExtFunction; Scope : TExtObject; Arg : TExtObject) : TExtFunction; overload;
    function OnRead(Action : String; Trans : TExtObject; ResultJS : TExtObject; Res : TExtObject) : TExtFunction;
    function OnWrite(Action : String; Trans : TExtObject; ResultJS : TExtObject; Res : TExtObject; Rs : TExtDataRecord) : TExtFunction; overload;
    function OnWrite(Action : String; Trans : TExtObject; ResultJS : TExtObject; Res : TExtObject; Rs : TExtObjectList) : TExtFunction; overload;
    destructor Destroy; override;
    property DirectFn : TExtFunction read FDirectFn write SetFDirectFn;
    property ParamOrder : TExtObjectList read FParamOrder write SetFParamOrder;
    property ParamOrderString : String read FParamOrderString write SetFParamOrderString;
    property ParamsAsHash : Boolean read FParamsAsHash write SetFParamsAsHash;
  end;

  TExtDataDirectStore = class(TExtDataStore)
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
  end;

  TExtDataArrayStore = class(TExtDataStore)
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
  end;

  TExtDataArrayReader = class(TExtDataJsonReader)
  private
    FId : Integer;
    FIdIndex : Integer;
    procedure SetFId(Value : Integer);
    procedure SetFIdIndex(Value : Integer);
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Meta : TExtObject; RecordType : TExtObjectList); overload;
    constructor Create(Meta : TExtObject; RecordType : TExtObject); overload;
    function ReadRecords(O : TExtObject) : TExtFunction;
    property Id : Integer read FId write SetFId;
    property IdIndex : Integer read FIdIndex write SetFIdIndex;
  end;

  TExtDataJsonStore = class(TExtDataStore)
  private
    FId : String;
    FRoot : String;
    FSuccessProperty : String;
    FTotalProperty : String;
    procedure SetFId(Value : String);
    procedure SetFRoot(Value : String);
    procedure SetFSuccessProperty(Value : String);
    procedure SetFTotalProperty(Value : String);
  protected
    procedure InitDefaults; override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create;
    property Id : String read FId write SetFId;
    property Root : String read FRoot write SetFRoot;
    property SuccessProperty : String read FSuccessProperty write SetFSuccessProperty;
    property TotalProperty : String read FTotalProperty write SetFTotalProperty;
  end;

  // Procedural types for events TExtDataMemoryProxy
  TExtDataMemoryProxyOnLoadexception = procedure(This : TExtDataMemoryProxy; Arg : TExtObject; Null : TExtObject; E : string) of object;

  TExtDataMemoryProxy = class(TExtDataDataProxy)
  private
    FOnLoadexception : TExtDataMemoryProxyOnLoadexception;
    procedure SetFOnLoadexception(Value : TExtDataMemoryProxyOnLoadexception);
  protected
    procedure HandleEvent(const AEvtName: string); override;
  public
    function JSClassName : string; override;
    {$IFDEF FPC}constructor AddTo(List : TExtObjectList);{$ENDIF}
    constructor Create(Data : TExtObject);
    function DoRequest(Action : String; Rs : TExtDataRecord; Params : TExtObject; Reader : TExtDataDataReader; Callback : TExtFunction; Scope : TExtObject; Arg : TExtObject) : TExtFunction; overload;
    function DoRequest(Action : String; Rs : TExtObjectList; Params : TExtObject; Reader : TExtDataDataReader; Callback : TExtFunction; Scope : TExtObject; Arg : TExtObject) : TExtFunction; overload;
    property OnLoadexception : TExtDataMemoryProxyOnLoadexception read FOnLoadexception write SetFOnLoadexception;
  end;

var
  ExtDataSortTypes : TExtDataSortTypesSingleton;
  ExtDataApi : TExtDataApiSingleton;

implementation

procedure TExtDataField.SetFAllowBlank(Value : Boolean); begin
  FAllowBlank := Value;
  JSCode('allowBlank:' + VarToJSON([Value]));
end;

procedure TExtDataField.SetFConvert(Value : TExtFunction); begin
  FConvert := Value;
  JSCode('convert:' + VarToJSON([Value, true]));
end;

procedure TExtDataField.SetFDateFormat(Value : String); begin
  FDateFormat := Value;
  JSCode('dateFormat:' + VarToJSON([Value]));
end;

procedure TExtDataField.SetFDefaultValue(Value : String); begin
  FDefaultValue := Value;
  JSCode('defaultValue:' + VarToJSON([Value]));
end;

procedure TExtDataField.SetFMapping(Value : String); begin
  FMapping := Value;
  JSCode('mapping:' + VarToJSON([Value]));
end;

procedure TExtDataField.SetFMappingNumber(Value : Integer); begin
  FMappingNumber := Value;
  JSCode('mapping:' + VarToJSON([Value]));
end;

procedure TExtDataField.SetFName(Value : String); begin
  FName := Value;
  JSCode('name:' + VarToJSON([Value]));
end;

procedure TExtDataField.SetFSortDir(Value : String); begin
  FSortDir := Value;
  JSCode('sortDir:' + VarToJSON([Value]));
end;

procedure TExtDataField.SetFSortType(Value : TExtFunction); begin
  FSortType := Value;
  JSCode('sortType:' + VarToJSON([Value, true]));
end;

procedure TExtDataField.SetFTypeJS(Value : String); begin
  FTypeJS := Value;
  JSCode('typeJS:' + VarToJSON([Value]));
end;

function TExtDataField.JSClassName : string; begin
  Result := 'Ext.data.Field';
end;

{$IFDEF FPC}constructor TExtDataField.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataJsonReaderError.JSClassName : string; begin
  Result := 'Ext.data.JsonReader.Error';
end;

{$IFDEF FPC}constructor TExtDataJsonReaderError.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtDataDataReader.SetFFields(Value : TExtObjectList); begin
  FFields := Value;
  Value.DeleteFromGarbage;
  JSCode('fields:' + VarToJSON([Value, false]));
end;

procedure TExtDataDataReader.SetFFieldsObject(Value : TExtObject); begin
  FFieldsObject := Value;
  Value.DeleteFromGarbage;
  JSCode('fields:' + VarToJSON([Value, false]));
end;

procedure TExtDataDataReader.SetFMessageProperty(Value : String); begin
  FMessageProperty := Value;
  JSCode('messageProperty:' + VarToJSON([Value]));
end;

procedure TExtDataDataReader.SetFBuildExtractors(Value : TExtObject); begin
  FBuildExtractors := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.buildExtractors=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataDataReader.SetFExtractData(Value : TExtObject); begin
  FExtractData := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.extractData=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataDataReader.SetFExtractValues(Value : TExtObject); begin
  FExtractValues := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.extractValues=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataDataReader.SetFGetId(Value : TExtObject); begin
  FGetId := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.getId=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataDataReader.SetFGetMessage(Value : TExtObject); begin
  FGetMessage := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.getMessage=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataDataReader.SetFGetRoot(Value : TExtObject); begin
  FGetRoot := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.getRoot=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataDataReader.SetFGetSuccess(Value : TExtObject); begin
  FGetSuccess := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.getSuccess=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataDataReader.SetFGetTotal(Value : TExtObject); begin
  FGetTotal := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.getTotal=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataDataReader.SetFMeta(Value : String); begin
  FMeta := Value;
  JSCode(JSName + '.meta=' + VarToJSON([Value]) + ';');
end;

function TExtDataDataReader.JSClassName : string; begin
  Result := 'Ext.data.DataReader';
end;

procedure TExtDataDataReader.InitDefaults; begin
  inherited;
  FFields := TExtObjectList.Create(Self, 'fields');
  FFieldsObject := TExtObject.CreateInternal(Self, 'fields');
  FBuildExtractors := TExtObject.CreateInternal(Self, 'buildExtractors');
  FExtractData := TExtObject.CreateInternal(Self, 'extractData');
  FExtractValues := TExtObject.CreateInternal(Self, 'extractValues');
  FGetId := TExtObject.CreateInternal(Self, 'getId');
  FGetMessage := TExtObject.CreateInternal(Self, 'getMessage');
  FGetRoot := TExtObject.CreateInternal(Self, 'getRoot');
  FGetSuccess := TExtObject.CreateInternal(Self, 'getSuccess');
  FGetTotal := TExtObject.CreateInternal(Self, 'getTotal');
end;

{$IFDEF FPC}constructor TExtDataDataReader.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataDataReader.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDataDataReader.IsData(Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.isData(' + VarToJSON([Data, false]) + ');', 'TExtDataDataReader');
  Result := Self;
end;

function TExtDataDataReader.Realize(RecordJS : TExtDataRecord; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.realize(' + VarToJSON([RecordJS, false, Data, false]) + ');', 'TExtDataDataReader');
  Result := Self;
end;

function TExtDataDataReader.Realize(RecordJS : TExtObjectList; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.realize(' + VarToJSON(RecordJS) + ',' + VarToJSON([Data, false]) + ');', 'TExtDataDataReader');
  Result := Self;
end;

function TExtDataDataReader.Realize(RecordJS : TExtObjectList; Data : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.realize(' + VarToJSON(RecordJS) + ',' + VarToJSON(Data) + ');', 'TExtDataDataReader');
  Result := Self;
end;

function TExtDataDataReader.Realize(RecordJS : TExtDataRecord; Data : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.realize(' + VarToJSON([RecordJS, false]) + ',' + VarToJSON(Data) + ');', 'TExtDataDataReader');
  Result := Self;
end;

function TExtDataDataReader.Update(Rs : TExtDataRecord; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.update(' + VarToJSON([Rs, false, Data, false]) + ');', 'TExtDataDataReader');
  Result := Self;
end;

function TExtDataDataReader.Update(Rs : TExtObjectList; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.update(' + VarToJSON(Rs) + ',' + VarToJSON([Data, false]) + ');', 'TExtDataDataReader');
  Result := Self;
end;

function TExtDataDataReader.Update(Rs : TExtObjectList; Data : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.update(' + VarToJSON(Rs) + ',' + VarToJSON(Data) + ');', 'TExtDataDataReader');
  Result := Self;
end;

function TExtDataDataReader.Update(Rs : TExtDataRecord; Data : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.update(' + VarToJSON([Rs, false]) + ',' + VarToJSON(Data) + ');', 'TExtDataDataReader');
  Result := Self;
end;

destructor TExtDataDataReader.Destroy; begin
  try
    FFields.Free;
    FFieldsObject.Free;
    FBuildExtractors.Free;
    FExtractData.Free;
    FExtractValues.Free;
    FGetId.Free;
    FGetMessage.Free;
    FGetRoot.Free;
    FGetSuccess.Free;
    FGetTotal.Free;
  except end;
  inherited;
end;

procedure TExtDataDataWriter.SetFCreateRecord(Value : TExtFunction); begin
  FCreateRecord := Value;
  JSCode('createRecord:' + VarToJSON([Value, true]));
end;

procedure TExtDataDataWriter.SetFDestroyRecord(Value : TExtFunction); begin
  FDestroyRecord := Value;
  JSCode('destroyRecord:' + VarToJSON([Value, true]));
end;

procedure TExtDataDataWriter.SetFListful(Value : Boolean); begin
  FListful := Value;
  JSCode('listful:' + VarToJSON([Value]));
end;

procedure TExtDataDataWriter.SetFUpdateRecord(Value : TExtFunction); begin
  FUpdateRecord := Value;
  JSCode('updateRecord:' + VarToJSON([Value, true]));
end;

procedure TExtDataDataWriter.SetFWriteAllFields(Value : Boolean); begin
  FWriteAllFields := Value;
  JSCode('writeAllFields:' + VarToJSON([Value]));
end;

function TExtDataDataWriter.JSClassName : string; begin
  Result := 'Ext.data.DataWriter';
end;

{$IFDEF FPC}constructor TExtDataDataWriter.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataDataWriter.Create(Meta : TExtObject; RecordType : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Meta, false, RecordType, false]) + ');');
  InitDefaults;
end;

function TExtDataDataWriter.Apply(Params : TExtObject; BaseParams : TExtObject; Action : String; Rs : TExtDataRecord) : TExtFunction; begin
  JSCode(JSName + '.apply(' + VarToJSON([Params, false, BaseParams, false, Action, Rs, false]) + ');', 'TExtDataDataWriter');
  Result := Self;
end;

function TExtDataDataWriter.Apply(Params : TExtObject; BaseParams : TExtObject; Action : String; Rs : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.apply(' + VarToJSON([Params, false, BaseParams, false, Action]) + ',' + VarToJSON(Rs) + ');', 'TExtDataDataWriter');
  Result := Self;
end;

function TExtDataDataWriter.Render(Action : String; Rs : TExtObjectList; Params : TExtObject; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.render(' + VarToJSON([Action]) + ',' + VarToJSON(Rs) + ',' + VarToJSON([Params, false, Data, false]) + ');', 'TExtDataDataWriter');
  Result := Self;
end;

function TExtDataDataWriter.ToArray(Data : THash) : TExtFunction; begin
  JSCode(JSName + '.toArray(' + VarToJSON([Data, false]) + ');', 'TExtDataDataWriter');
  Result := Self;
end;

function TExtDataDataWriter.ToHash(E : TExtDataRecord; Config : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.toHash(' + VarToJSON([E, false, Config, false]) + ');', 'TExtDataDataWriter');
  Result := Self;
end;

procedure TExtDataResponse.SetFAction(Value : String); begin
  FAction := Value;
  JSCode('action:' + VarToJSON([Value]));
end;

procedure TExtDataResponse.SetFData(Value : TExtObjectList); begin
  FData := Value;
  Value.DeleteFromGarbage;
  JSCode('data:' + VarToJSON([Value, false]));
end;

procedure TExtDataResponse.SetFDataObject(Value : TExtObject); begin
  FDataObject := Value;
  Value.DeleteFromGarbage;
  JSCode('data:' + VarToJSON([Value, false]));
end;

procedure TExtDataResponse.SetFMessage(Value : String); begin
  FMessage := Value;
  JSCode('message:' + VarToJSON([Value]));
end;

procedure TExtDataResponse.SetFRaw(Value : TExtObject); begin
  FRaw := Value;
  Value.DeleteFromGarbage;
  JSCode('raw:' + VarToJSON([Value, false]));
end;

procedure TExtDataResponse.SetFRecords(Value : TExtDataRecord); begin
  FRecords := Value;
  Value.DeleteFromGarbage;
  JSCode('records:' + VarToJSON([Value, false]));
end;

procedure TExtDataResponse.SetFRecordsExtDataRecord(Value : TExtObjectList); begin
  FRecordsExtDataRecord := Value;
  Value.DeleteFromGarbage;
  JSCode('records:' + VarToJSON([Value, false]));
end;

procedure TExtDataResponse.SetFSuccess(Value : Boolean); begin
  FSuccess := Value;
  JSCode('success:' + VarToJSON([Value]));
end;

function TExtDataResponse.JSClassName : string; begin
  Result := 'Ext.data.Response';
end;

{$IFDEF FPC}constructor TExtDataResponse.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtDataSortTypesSingleton.SetFStripTagsRE(Value : TRegExp); begin
  FStripTagsRE := Value;
  JSCode(JSName + '.stripTagsRE=' + VarToJSON([#3 +Value]) + ';');
end;

function TExtDataSortTypesSingleton.JSClassName : string; begin
  Result := 'Ext.data.SortTypes';
end;

{$IFDEF FPC}constructor TExtDataSortTypesSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataSortTypesSingleton.AsDate(S : String) : TExtFunction; begin
  JSCode(JSName + '.asDate(' + VarToJSON([S]) + ');', 'TExtDataSortTypesSingleton');
  Result := Self;
end;

function TExtDataSortTypesSingleton.AsFloat(S : String) : TExtFunction; begin
  JSCode(JSName + '.asFloat(' + VarToJSON([S]) + ');', 'TExtDataSortTypesSingleton');
  Result := Self;
end;

function TExtDataSortTypesSingleton.AsInt(S : String) : TExtFunction; begin
  JSCode(JSName + '.asInt(' + VarToJSON([S]) + ');', 'TExtDataSortTypesSingleton');
  Result := Self;
end;

function TExtDataSortTypesSingleton.AsText(S : String) : TExtFunction; begin
  JSCode(JSName + '.asText(' + VarToJSON([S]) + ');', 'TExtDataSortTypesSingleton');
  Result := Self;
end;

function TExtDataSortTypesSingleton.AsUCString(S : String) : TExtFunction; begin
  JSCode(JSName + '.asUCString(' + VarToJSON([S]) + ');', 'TExtDataSortTypesSingleton');
  Result := Self;
end;

function TExtDataSortTypesSingleton.AsUCText(S : String) : TExtFunction; begin
  JSCode(JSName + '.asUCText(' + VarToJSON([S]) + ');', 'TExtDataSortTypesSingleton');
  Result := Self;
end;

function TExtDataSortTypesSingleton.None(S : String) : TExtFunction; begin
  JSCode(JSName + '.none(' + VarToJSON([S]) + ');', 'TExtDataSortTypesSingleton');
  Result := Self;
end;

procedure TExtDataRecord.SetFData(Value : TExtObject); begin
  FData := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.data=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataRecord.SetFDirty(Value : Boolean); begin
  FDirty := Value;
  JSCode(JSName + '.dirty=' + VarToJSON([Value]) + ';');
end;

procedure TExtDataRecord.SetFFields(Value : TExtObjectList); begin
  FFields := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.fields=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataRecord.SetFId(Value : TExtObject); begin
  FId := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.id=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataRecord.SetFJson(Value : TExtObjectList); begin
  FJson := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.json=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataRecord.SetFJsonObject(Value : TExtObject); begin
  FJsonObject := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.json=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataRecord.SetFModified(Value : TExtObject); begin
  FModified := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.modified=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataRecord.SetFNode(Value : TXMLElement); begin
  FNode := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.node=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataRecord.SetFPhantom(Value : Boolean); begin
  FPhantom := Value;
  JSCode(JSName + '.phantom=' + VarToJSON([Value]) + ';');
end;

procedure TExtDataRecord.SetFStore(Value : TExtDataStore); begin
  FStore := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.store=' + VarToJSON([Value, false]) + ';');
end;

function TExtDataRecord.JSClassName : string; begin
  Result := 'Ext.data.Record';
end;

procedure TExtDataRecord.InitDefaults; begin
  inherited;
  FData := TExtObject.CreateInternal(Self, 'data');
  FFields := TExtObjectList.Create(Self, 'fields');
  FId := TExtObject.CreateInternal(Self, 'id');
  FJson := TExtObjectList.Create(Self, 'json');
  FJsonObject := TExtObject.CreateInternal(Self, 'json');
  FModified := TExtObject.CreateInternal(Self, 'modified');
  FStore := TExtDataStore.CreateInternal(Self, 'store');
end;

{$IFDEF FPC}constructor TExtDataRecord.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataRecord.Create(Data : TExtObjectList); begin
  CreateVarAlt(JSClassName + '.create(' + VarToJSON(Data) + ');');
  InitDefaults;
end;

function TExtDataRecord.TheGeneratedConstructorHasTheSameSignatureAsThisConstructor : TExtFunction; begin
  JSCode(JSName + '.The generated constructor has the same signature as this constructor.();', 'TExtDataRecord');
  Result := Self;
end;

function TExtDataRecord.BeginEdit : TExtFunction; begin
  JSCode(JSName + '.beginEdit();', 'TExtDataRecord');
  Result := Self;
end;

function TExtDataRecord.CancelEdit : TExtFunction; begin
  JSCode(JSName + '.cancelEdit();', 'TExtDataRecord');
  Result := Self;
end;

function TExtDataRecord.Commit(Silent : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.commit(' + VarToJSON([Silent]) + ');', 'TExtDataRecord');
  Result := Self;
end;

function TExtDataRecord.Copy(Id : String = '') : TExtFunction; begin
  JSCode(JSName + '.copy(' + VarToJSON([Id]) + ');', 'TExtDataRecord');
  Result := Self;
end;

function TExtDataRecord.Field : TExtFunction; begin
  JSCode(JSName + '.Field();', 'TExtDataRecord');
  Result := Self;
end;

function TExtDataRecord.Get(Name : String) : TExtFunction; begin
  JSCode(JSName + '.get(' + VarToJSON([Name]) + ');', 'TExtDataRecord');
  Result := Self;
end;

function TExtDataRecord.GetChanges : TExtFunction; begin
  JSCode(JSName + '.getChanges();', 'TExtDataRecord');
  Result := Self;
end;

function TExtDataRecord.IsModified(FieldName : String) : TExtFunction; begin
  JSCode(JSName + '.isModified(' + VarToJSON([FieldName]) + ');', 'TExtDataRecord');
  Result := Self;
end;

function TExtDataRecord.IsValid : TExtFunction; begin
  JSCode(JSName + '.isValid();', 'TExtDataRecord');
  Result := Self;
end;

function TExtDataRecord.MarkDirty : TExtFunction; begin
  JSCode(JSName + '.markDirty();', 'TExtDataRecord');
  Result := Self;
end;

function TExtDataRecord.Reject(Silent : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.reject(' + VarToJSON([Silent]) + ');', 'TExtDataRecord');
  Result := Self;
end;

function TExtDataRecord.SetJS(Name : String; Value : String) : TExtFunction; begin
  JSCode(JSName + '.set(' + VarToJSON([Name, Value]) + ');', 'TExtDataRecord');
  Result := Self;
end;

function TExtDataRecord.SetJS(Name : String; Value : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.set(' + VarToJSON([Name, Value, false]) + ');', 'TExtDataRecord');
  Result := Self;
end;

function TExtDataRecord.SetJS(Name : String; Value : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.set(' + VarToJSON([Name]) + ',' + VarToJSON(Value) + ');', 'TExtDataRecord');
  Result := Self;
end;

destructor TExtDataRecord.Destroy; begin
  try
    FData.Free;
    FFields.Free;
    FId.Free;
    FJson.Free;
    FJsonObject.Free;
    FModified.Free;
    FStore.Free;
  except end;
  inherited;
end;

procedure TExtDataRequest.SetFAction(Value : String); begin
  FAction := Value;
  JSCode('action:' + VarToJSON([Value]));
end;

procedure TExtDataRequest.SetFCallback(Value : TExtFunction); begin
  FCallback := Value;
  JSCode('callback:' + VarToJSON([Value, true]));
end;

procedure TExtDataRequest.SetFParams(Value : TExtObject); begin
  FParams := Value;
  Value.DeleteFromGarbage;
  JSCode('params:' + VarToJSON([Value, false]));
end;

procedure TExtDataRequest.SetFReader(Value : TExtDataDataReader); begin
  FReader := Value;
  Value.DeleteFromGarbage;
  JSCode('reader:' + VarToJSON([Value, false]));
end;

procedure TExtDataRequest.SetFRs(Value : TExtObjectList); begin
  FRs := Value;
  Value.DeleteFromGarbage;
  JSCode('rs:' + VarToJSON([Value, false]));
end;

procedure TExtDataRequest.SetFRsExtDataRecord(Value : TExtDataRecord); begin
  FRsExtDataRecord := Value;
  Value.DeleteFromGarbage;
  JSCode('rs:' + VarToJSON([Value, false]));
end;

procedure TExtDataRequest.SetFScope(Value : TExtObject); begin
  FScope := Value;
  Value.DeleteFromGarbage;
  JSCode('scope:' + VarToJSON([Value, false]));
end;

function TExtDataRequest.JSClassName : string; begin
  Result := 'Ext.data.Request';
end;

{$IFDEF FPC}constructor TExtDataRequest.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtDataApiSingleton.SetFActions(Value : TExtObject); begin
  FActions := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.actions=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataApiSingleton.SetFRestActions(Value : TExtObject); begin
  FRestActions := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.restActions=' + VarToJSON([Value, false]) + ';');
end;

function TExtDataApiSingleton.JSClassName : string; begin
  Result := 'Ext.data.Api';
end;

procedure TExtDataApiSingleton.InitDefaults; begin
  inherited;
  FActions := TExtObject.CreateInternal(Self, 'actions');
  FRestActions := TExtObject.CreateInternal(Self, 'restActions');
end;

{$IFDEF FPC}constructor TExtDataApiSingleton.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataApiSingleton.Response : TExtFunction; begin
  JSCode(JSName + '.Response();', 'TExtDataApiSingleton');
  Result := Self;
end;

function TExtDataApiSingleton.GetVerb(Name : String) : TExtFunction; begin
  JSCode(JSName + '.getVerb(' + VarToJSON([Name]) + ');', 'TExtDataApiSingleton');
  Result := Self;
end;

function TExtDataApiSingleton.HasUniqueUrl(Proxy : TExtDataDataProxy; Verb : String) : TExtFunction; begin
  JSCode(JSName + '.hasUniqueUrl(' + VarToJSON([Proxy, false, Verb]) + ');', 'TExtDataApiSingleton');
  Result := Self;
end;

function TExtDataApiSingleton.IsAction(Action : String) : TExtFunction; begin
  JSCode(JSName + '.isAction(' + VarToJSON([Action]) + ');', 'TExtDataApiSingleton');
  Result := Self;
end;

function TExtDataApiSingleton.IsValid : TExtFunction; begin
  JSCode(JSName + '.isValid();', 'TExtDataApiSingleton');
  Result := Self;
end;

function TExtDataApiSingleton.Prepare(Proxy : TExtDataDataProxy) : TExtFunction; begin
  JSCode(JSName + '.prepare(' + VarToJSON([Proxy, false]) + ');', 'TExtDataApiSingleton');
  Result := Self;
end;

function TExtDataApiSingleton.Restify(Proxy : TExtDataDataProxy) : TExtFunction; begin
  JSCode(JSName + '.restify(' + VarToJSON([Proxy, false]) + ');', 'TExtDataApiSingleton');
  Result := Self;
end;

destructor TExtDataApiSingleton.Destroy; begin
  try
    FActions.Free;
    FRestActions.Free;
  except end;
  inherited;
end;

procedure TExtDataJsonWriter.SetFEncode(Value : Boolean); begin
  FEncode := Value;
  JSCode('encode:' + VarToJSON([Value]));
end;

procedure TExtDataJsonWriter.SetFEncodeDelete(Value : Boolean); begin
  FEncodeDelete := Value;
  JSCode('encodeDelete:' + VarToJSON([Value]));
end;

function TExtDataJsonWriter.JSClassName : string; begin
  Result := 'Ext.data.JsonWriter';
end;

{$IFDEF FPC}constructor TExtDataJsonWriter.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

function TExtDataJsonWriter.CreateRecord(Rec : TExtDataRecord) : TExtFunction; begin
  JSCode(JSName + '.createRecord(' + VarToJSON([Rec, false]) + ');', 'TExtDataJsonWriter');
  Result := Self;
end;

function TExtDataJsonWriter.DestroyRecord(Rec : TExtDataRecord) : TExtFunction; begin
  JSCode(JSName + '.destroyRecord(' + VarToJSON([Rec, false]) + ');', 'TExtDataJsonWriter');
  Result := Self;
end;

function TExtDataJsonWriter.Render(Http : TExtObject; BaseParams : TExtObject; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.render(' + VarToJSON([Http, false, BaseParams, false, Data, false]) + ');', 'TExtDataJsonWriter');
  Result := Self;
end;

function TExtDataJsonWriter.Render(Http : TExtObject; BaseParams : TExtObject; Data : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.render(' + VarToJSON([Http, false, BaseParams, false]) + ',' + VarToJSON(Data) + ');', 'TExtDataJsonWriter');
  Result := Self;
end;

function TExtDataJsonWriter.UpdateRecord(Rec : TExtDataRecord) : TExtFunction; begin
  JSCode(JSName + '.updateRecord(' + VarToJSON([Rec, false]) + ');', 'TExtDataJsonWriter');
  Result := Self;
end;

procedure TExtDataStore.SetFAutoDestroy(Value : Boolean); begin
  FAutoDestroy := Value;
  JSCode('autoDestroy:' + VarToJSON([Value]));
end;

procedure TExtDataStore.SetFAutoLoad(Value : Boolean); begin
  FAutoLoad := Value;
  JSCode('autoLoad:' + VarToJSON([Value]));
end;

procedure TExtDataStore.SetFAutoLoadObject(Value : TExtObject); begin
  FAutoLoadObject := Value;
  Value.DeleteFromGarbage;
  JSCode('autoLoad:' + VarToJSON([Value, false]));
end;

procedure TExtDataStore.SetFAutoSave(Value : Boolean); begin
  FAutoSave := Value;
  JSCode('autoSave:' + VarToJSON([Value]));
end;

procedure TExtDataStore.SetFBaseParams(Value : TExtObject); begin
  FBaseParams := Value;
  Value.DeleteFromGarbage;
  JSCode('baseParams:' + VarToJSON([Value, false]));
end;

procedure TExtDataStore.SetFBatch(Value : Boolean); begin
  FBatch := Value;
  JSCode('batch:' + VarToJSON([Value]));
end;

procedure TExtDataStore.SetFData(Value : TExtObjectList); begin
  FData := Value;
  Value.DeleteFromGarbage;
  JSCode('data:' + VarToJSON([Value, false]));
end;

procedure TExtDataStore.SetFDefaultParamNames(Value : TExtObject); begin
  FDefaultParamNames := Value;
  Value.DeleteFromGarbage;
  JSCode('defaultParamNames:' + VarToJSON([Value, false]));
end;

procedure TExtDataStore.SetFParamNames(Value : TExtObject); begin
  FParamNames := Value;
  Value.DeleteFromGarbage;
  JSCode('paramNames:' + VarToJSON([Value, false]));
end;

procedure TExtDataStore.SetFProxy(Value : TExtDataDataProxy); begin
  FProxy := Value;
  Value.DeleteFromGarbage;
  JSCode('proxy:' + VarToJSON([Value, false]));
end;

procedure TExtDataStore.SetFPruneModifiedRecords(Value : Boolean); begin
  FPruneModifiedRecords := Value;
  JSCode('pruneModifiedRecords:' + VarToJSON([Value]));
end;

procedure TExtDataStore.SetFReader(Value : TExtDataDataReader); begin
  FReader := Value;
  Value.DeleteFromGarbage;
  JSCode('reader:' + VarToJSON([Value, false]));
end;

procedure TExtDataStore.SetFRemoteSort(Value : Boolean); begin
  FRemoteSort := Value;
  JSCode('remoteSort:' + VarToJSON([Value]));
end;

procedure TExtDataStore.SetFRestful(Value : Boolean); begin
  FRestful := Value;
  JSCode('restful:' + VarToJSON([Value]));
end;

procedure TExtDataStore.SetFSortInfo(Value : TExtObject); begin
  FSortInfo := Value;
  Value.DeleteFromGarbage;
  JSCode('sortInfo:' + VarToJSON([Value, false]));
end;

procedure TExtDataStore.SetFStoreId(Value : String); begin
  FStoreId := Value;
  JSCode('storeId:' + VarToJSON([Value]));
end;

procedure TExtDataStore.SetFUrl(Value : String); begin
  FUrl := Value;
  JSCode('url:' + VarToJSON([Value]));
end;

procedure TExtDataStore.SetFWriter(Value : TExtDataDataWriter); begin
  FWriter := Value;
  Value.DeleteFromGarbage;
  JSCode('writer:' + VarToJSON([Value, false]));
end;

procedure TExtDataStore.SetFBaseParams_(Value : TExtObject); begin
  FBaseParams_ := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.baseParams=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataStore.SetFFields(Value : TExtObjectList); begin
  FFields := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.fields=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataStore.SetFLastOptions(Value : TExtObject); begin
  FLastOptions := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.lastOptions=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataStore.SetFRecordType(Value : TExtFunction); begin
  FRecordType := Value;
  JSCode(JSName + '.recordType=' + VarToJSON([Value, true]) + ';');
end;

procedure TExtDataStore.SetFOnAdd(Value : TExtDataStoreOnAdd); begin
  if Assigned(FOnAdd) then
    JSCode(JSName+'.events ["add"].listeners=[];');
  if Assigned(Value) then
    On('add', Ajax('add', ['This', '%0.nm','Records', '%1.nm','Index', '%2'], true));
  FOnAdd := Value;
end;

procedure TExtDataStore.SetFOnBeforeload(Value : TExtDataStoreOnBeforeload); begin
  if Assigned(FOnBeforeload) then
    JSCode(JSName+'.events ["beforeload"].listeners=[];');
  if Assigned(Value) then
    On('beforeload', Ajax('beforeload', ['This', '%0.nm','Options', '%1.nm'], true));
  FOnBeforeload := Value;
end;

procedure TExtDataStore.SetFOnBeforesave(Value : TExtDataStoreOnBeforesave); begin
  if Assigned(FOnBeforesave) then
    JSCode(JSName+'.events ["beforesave"].listeners=[];');
  if Assigned(Value) then
    On('beforesave', Ajax('beforesave', ['Store', '%0.nm','Data', '%1.nm'], true));
  FOnBeforesave := Value;
end;

procedure TExtDataStore.SetFOnBeforewrite(Value : TExtDataStoreOnBeforewrite); begin
  if Assigned(FOnBeforewrite) then
    JSCode(JSName+'.events ["beforewrite"].listeners=[];');
  if Assigned(Value) then
    On('beforewrite', Ajax('beforewrite', ['Store', '%0.nm','Action', '%1','Rs', '%2.nm','Options', '%3.nm','Arg', '%4.nm'], true));
  FOnBeforewrite := Value;
end;

procedure TExtDataStore.SetFOnClear(Value : TExtDataStoreOnClear); begin
  if Assigned(FOnClear) then
    JSCode(JSName+'.events ["clear"].listeners=[];');
  if Assigned(Value) then
    On('clear', Ajax('clear', ['This', '%0.nm','The', '%1.nm'], true));
  FOnClear := Value;
end;

procedure TExtDataStore.SetFOnDatachanged(Value : TExtDataStoreOnDatachanged); begin
  if Assigned(FOnDatachanged) then
    JSCode(JSName+'.events ["datachanged"].listeners=[];');
  if Assigned(Value) then
    On('datachanged', Ajax('datachanged', ['This', '%0.nm'], true));
  FOnDatachanged := Value;
end;

procedure TExtDataStore.SetFOnException(Value : TExtDataStoreOnException); begin
  if Assigned(FOnException) then
    JSCode(JSName+'.events ["exception"].listeners=[];');
  if Assigned(Value) then
    On('exception', Ajax('exception', ['Misc', '%0.nm'], true));
  FOnException := Value;
end;

procedure TExtDataStore.SetFOnLoad(Value : TExtDataStoreOnLoad); begin
  if Assigned(FOnLoad) then
    JSCode(JSName+'.events ["load"].listeners=[];');
  if Assigned(Value) then
    On('load', Ajax('load', ['This', '%0.nm','Records', '%1.nm','Options', '%2.nm'], true));
  FOnLoad := Value;
end;

procedure TExtDataStore.SetFOnLoadexception(Value : TExtDataStoreOnLoadexception); begin
  if Assigned(FOnLoadexception) then
    JSCode(JSName+'.events ["loadexception"].listeners=[];');
  if Assigned(Value) then
    On('loadexception', Ajax('loadexception', ['Misc', '%0.nm'], true));
  FOnLoadexception := Value;
end;

procedure TExtDataStore.SetFOnMetachange(Value : TExtDataStoreOnMetachange); begin
  if Assigned(FOnMetachange) then
    JSCode(JSName+'.events ["metachange"].listeners=[];');
  if Assigned(Value) then
    On('metachange', Ajax('metachange', ['This', '%0.nm','Meta', '%1.nm'], true));
  FOnMetachange := Value;
end;

procedure TExtDataStore.SetFOnRemove(Value : TExtDataStoreOnRemove); begin
  if Assigned(FOnRemove) then
    JSCode(JSName+'.events ["remove"].listeners=[];');
  if Assigned(Value) then
    On('remove', Ajax('remove', ['This', '%0.nm','RecordJS', '%1.nm','Index', '%2'], true));
  FOnRemove := Value;
end;

procedure TExtDataStore.SetFOnSave(Value : TExtDataStoreOnSave); begin
  if Assigned(FOnSave) then
    JSCode(JSName+'.events ["save"].listeners=[];');
  if Assigned(Value) then
    On('save', Ajax('save', ['Store', '%0.nm','Batch', '%1','Data', '%2.nm'], true));
  FOnSave := Value;
end;

procedure TExtDataStore.SetFOnUpdate(Value : TExtDataStoreOnUpdate); begin
  if Assigned(FOnUpdate) then
    JSCode(JSName+'.events ["update"].listeners=[];');
  if Assigned(Value) then
    On('update', Ajax('update', ['This', '%0.nm','RecordJS', '%1.nm','Operation', '%2'], true));
  FOnUpdate := Value;
end;

procedure TExtDataStore.SetFOnWrite(Value : TExtDataStoreOnWrite); begin
  if Assigned(FOnWrite) then
    JSCode(JSName+'.events ["write"].listeners=[];');
  if Assigned(Value) then
    On('write', Ajax('write', ['Store', '%0.nm','Action', '%1','ResultJS', '%2.nm','Res', '%3.nm','Rs', '%4.nm'], true));
  FOnWrite := Value;
end;

function TExtDataStore.JSClassName : string; begin
  Result := 'Ext.data.Store';
end;

procedure TExtDataStore.InitDefaults; begin
  inherited;
  FAutoLoadObject := TExtObject.CreateInternal(Self, 'autoLoad');
  FBaseParams := TExtObject.CreateInternal(Self, 'baseParams');
  FData := TExtObjectList.Create(Self, 'data');
  FDefaultParamNames := TExtObject.CreateInternal(Self, 'defaultParamNames');
  FParamNames := TExtObject.CreateInternal(Self, 'paramNames');
  FProxy := TExtDataDataProxy.CreateInternal(Self, 'proxy');
  FPruneModifiedRecords := true;
  FReader := TExtDataDataReader.CreateInternal(Self, 'reader');
  FSortInfo := TExtObject.CreateInternal(Self, 'sortInfo');
  FWriter := TExtDataDataWriter.CreateInternal(Self, 'writer');
  FBaseParams_ := TExtObject.CreateInternal(Self, 'baseParams');
  FFields := TExtObjectList.Create(Self, 'fields');
  FLastOptions := TExtObject.CreateInternal(Self, 'lastOptions');
end;

{$IFDEF FPC}constructor TExtDataStore.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataStore.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDataStore.Add(Records : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.add(' + VarToJSON(Records) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.AddSorted(RecordJS : TExtDataRecord) : TExtFunction; begin
  JSCode(JSName + '.addSorted(' + VarToJSON([RecordJS, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.ClearFilter(SuppressEvent : Boolean) : TExtFunction; begin
  JSCode(JSName + '.clearFilter(' + VarToJSON([SuppressEvent]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Collect(DataIndex : String; AllowNull : Boolean = false; BypassFilter : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.collect(' + VarToJSON([DataIndex, AllowNull, BypassFilter]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.CommitChanges : TExtFunction; begin
  JSCode(JSName + '.commitChanges();', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.DestroyJS : TExtFunction; begin
  JSCode(JSName + '.destroy();', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Each(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.each(' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Filter(Field : String; Value : String; AnyMatch : Boolean = false; CaseSensitive : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.filter(' + VarToJSON([Field, Value, AnyMatch, CaseSensitive]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Filter(Field : String; Value : TRegExp; AnyMatch : Boolean = false; CaseSensitive : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.filter(' + VarToJSON([Field, #3 + Value, AnyMatch, CaseSensitive]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.FilterBy(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.filterBy(' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Find(FieldName : String; Value : String; StartIndex : Integer = 0; AnyMatch : Boolean = false; CaseSensitive : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.find(' + VarToJSON([FieldName, Value, StartIndex, AnyMatch, CaseSensitive]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Find(FieldName : String; Value : TRegExp; StartIndex : Integer = 0; AnyMatch : Boolean = false; CaseSensitive : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.find(' + VarToJSON([FieldName, #3 + Value, StartIndex, AnyMatch, CaseSensitive]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.FindBy(Fn : TExtFunction; Scope : TExtObject = nil; StartIndex : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.findBy(' + VarToJSON([Fn, true, Scope, false, StartIndex]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.FindExact(FieldName : String; Value : String; StartIndex : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.findExact(' + VarToJSON([FieldName, Value, StartIndex]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.GetAt(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.getAt(' + VarToJSON([Index]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.GetById(Id : String) : TExtFunction; begin
  JSCode(JSName + '.getById(' + VarToJSON([Id]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.GetCount : TExtFunction; begin
  JSCode(JSName + '.getCount();', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.GetModifiedRecords : TExtFunction; begin
  JSCode(JSName + '.getModifiedRecords();', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.GetRange(StartIndex : Integer = 0; EndIndex : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.getRange(' + VarToJSON([StartIndex, EndIndex]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.GetSortState : TExtFunction; begin
  JSCode(JSName + '.getSortState();', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.GetTotalCount : TExtFunction; begin
  JSCode(JSName + '.getTotalCount();', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.IndexOf(RecordJS : TExtDataRecord) : TExtFunction; begin
  JSCode(JSName + '.indexOf(' + VarToJSON([RecordJS, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.IndexOfId(Id : String) : TExtFunction; begin
  JSCode(JSName + '.indexOfId(' + VarToJSON([Id]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Insert(Index : Integer; Records : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.insert(' + VarToJSON([Index]) + ',' + VarToJSON(Records) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.IsFiltered : TExtFunction; begin
  JSCode(JSName + '.isFiltered();', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Load(Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.load(' + VarToJSON([Options, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.LoadData(Data : TExtObject; Append : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.loadData(' + VarToJSON([Data, false, Append]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Query(Field : String; Value : String; AnyMatch : Boolean = false; CaseSensitive : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.query(' + VarToJSON([Field, Value, AnyMatch, CaseSensitive]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Query(Field : String; Value : TRegExp; AnyMatch : Boolean = false; CaseSensitive : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.query(' + VarToJSON([Field, #3 + Value, AnyMatch, CaseSensitive]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.QueryBy(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.queryBy(' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.RejectChanges : TExtFunction; begin
  JSCode(JSName + '.rejectChanges();', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Reload(Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.reload(' + VarToJSON([Options, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Remove(RecordJS : TExtDataRecord) : TExtFunction; begin
  JSCode(JSName + '.remove(' + VarToJSON([RecordJS, false]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Remove(RecordJS : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.remove(' + VarToJSON(RecordJS) + ');', 'TExtDataStore');
  Result := Self;
end;

procedure TExtDataStore.RemoveAll(Silent : Boolean = false); begin
  JSCode(JSName + '.removeAll(' + VarToJSON([Silent]) + ');', 'TExtDataStore');
end;

function TExtDataStore.RemoveAt(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.removeAt(' + VarToJSON([Index]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Save : TExtFunction; begin
  JSCode(JSName + '.save();', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.SetBaseParam(Name : String; Value : String) : TExtFunction; begin
  JSCode(JSName + '.setBaseParam(' + VarToJSON([Name, Value]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.SetDefaultSort(FieldName : String; Dir : String = '') : TExtFunction; begin
  JSCode(JSName + '.setDefaultSort(' + VarToJSON([FieldName, Dir]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Sort(FieldName : String; Dir : String = '') : TExtFunction; begin
  JSCode(JSName + '.sort(' + VarToJSON([FieldName, Dir]) + ');', 'TExtDataStore');
  Result := Self;
end;

function TExtDataStore.Sum(PropertyJS : String; Start : Integer = 0; EndJS : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.sum(' + VarToJSON([PropertyJS, Start, EndJS]) + ');', 'TExtDataStore');
  Result := Self;
end;

destructor TExtDataStore.Destroy; begin
  try
    FAutoLoadObject.Free;
    FBaseParams.Free;
    FData.Free;
    FDefaultParamNames.Free;
    FParamNames.Free;
    FProxy.Free;
    FReader.Free;
    FSortInfo.Free;
    FWriter.Free;
    FBaseParams_.Free;
    FFields.Free;
    FLastOptions.Free;
  except end;
  inherited;
end;

procedure TExtDataStore.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'add') and Assigned(FOnAdd) then
    FOnAdd(TExtDataStore(ParamAsObject('This')), TExtObjectList(ParamAsObject('Records')), ParamAsInteger('Index'))
  else if (AEvtName = 'beforeload') and Assigned(FOnBeforeload) then
    FOnBeforeload(TExtDataStore(ParamAsObject('This')), TExtObject(ParamAsObject('Options')))
  else if (AEvtName = 'beforesave') and Assigned(FOnBeforesave) then
    FOnBeforesave(TExtDataStore(ParamAsObject('Store')), TExtObject(ParamAsObject('Data')))
  else if (AEvtName = 'beforewrite') and Assigned(FOnBeforewrite) then
    FOnBeforewrite(TExtDataStore(ParamAsObject('Store')), ParamAsString('Action'), TExtDataRecord(ParamAsObject('Rs')), TExtObject(ParamAsObject('Options')), TExtObject(ParamAsObject('Arg')))
  else if (AEvtName = 'clear') and Assigned(FOnClear) then
    FOnClear(TExtDataStore(ParamAsObject('This')), TExtObjectList(ParamAsObject('The')))
  else if (AEvtName = 'datachanged') and Assigned(FOnDatachanged) then
    FOnDatachanged(TExtDataStore(ParamAsObject('This')))
  else if (AEvtName = 'exception') and Assigned(FOnException) then
    FOnException(TMisc(ParamAsObject('Misc')))
  else if (AEvtName = 'load') and Assigned(FOnLoad) then
    FOnLoad(TExtDataStore(ParamAsObject('This')), TExtObjectList(ParamAsObject('Records')), TExtObject(ParamAsObject('Options')))
  else if (AEvtName = 'loadexception') and Assigned(FOnLoadexception) then
    FOnLoadexception(TMisc(ParamAsObject('Misc')))
  else if (AEvtName = 'metachange') and Assigned(FOnMetachange) then
    FOnMetachange(TExtDataStore(ParamAsObject('This')), TExtObject(ParamAsObject('Meta')))
  else if (AEvtName = 'remove') and Assigned(FOnRemove) then
    FOnRemove(TExtDataStore(ParamAsObject('This')), TExtDataRecord(ParamAsObject('RecordJS')), ParamAsInteger('Index'))
  else if (AEvtName = 'save') and Assigned(FOnSave) then
    FOnSave(TExtDataStore(ParamAsObject('Store')), ParamAsInteger('Batch'), TExtObject(ParamAsObject('Data')))
  else if (AEvtName = 'update') and Assigned(FOnUpdate) then
    FOnUpdate(TExtDataStore(ParamAsObject('This')), TExtDataRecord(ParamAsObject('RecordJS')), ParamAsString('Operation'))
  else if (AEvtName = 'write') and Assigned(FOnWrite) then
    FOnWrite(TExtDataStore(ParamAsObject('Store')), ParamAsString('Action'), TExtObject(ParamAsObject('ResultJS')), TExtDirectTransaction(ParamAsObject('Res')), TExtDataRecord(ParamAsObject('Rs')));
end;

procedure TExtDataJsonReader.SetFIdProperty(Value : String); begin
  FIdProperty := Value;
  JSCode('idProperty:' + VarToJSON([Value]));
end;

procedure TExtDataJsonReader.SetFRoot(Value : String); begin
  FRoot := Value;
  JSCode('root:' + VarToJSON([Value]));
end;

procedure TExtDataJsonReader.SetFSuccessProperty(Value : String); begin
  FSuccessProperty := Value;
  JSCode('successProperty:' + VarToJSON([Value]));
end;

procedure TExtDataJsonReader.SetFTotalProperty(Value : String); begin
  FTotalProperty := Value;
  JSCode('totalProperty:' + VarToJSON([Value]));
end;

procedure TExtDataJsonReader.SetFJsonData(Value : TExtObject); begin
  FJsonData := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.jsonData=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataJsonReader.SetFMeta(Value : String); begin
  FMeta := Value;
  JSCode(JSName + '.meta=' + VarToJSON([Value]) + ';');
end;

function TExtDataJsonReader.JSClassName : string; begin
  Result := 'Ext.data.JsonReader';
end;

procedure TExtDataJsonReader.InitDefaults; begin
  inherited;
  FJsonData := TExtObject.CreateInternal(Self, 'jsonData');
end;

{$IFDEF FPC}constructor TExtDataJsonReader.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataJsonReader.Create(Meta : TExtObject = nil; RecordType : TExtDataRecord = nil); begin
  CreateVar(JSClassName + '(' + VarToJSON([Meta, false, RecordType, false]) + ');');
  InitDefaults;
end;

function TExtDataJsonReader.Read(Response : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.read(' + VarToJSON([Response, false]) + ');', 'TExtDataJsonReader');
  Result := Self;
end;

function TExtDataJsonReader.ReadRecords(O : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.readRecords(' + VarToJSON([O, false]) + ');', 'TExtDataJsonReader');
  Result := Self;
end;

function TExtDataJsonReader.ReadResponse(Action : String; Response : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.readResponse(' + VarToJSON([Action, Response, false]) + ');', 'TExtDataJsonReader');
  Result := Self;
end;

destructor TExtDataJsonReader.Destroy; begin
  try
    FJsonData.Free;
  except end;
  inherited;
end;

function TExtDataApiError.JSClassName : string; begin
  Result := 'Ext.data.Api.Error';
end;

{$IFDEF FPC}constructor TExtDataApiError.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtDataNode.SetFId(Value : String); begin
  FId := Value;
  if not ConfigAvailable(JSName) then
    SetId(Value)
  else
    JSCode('id:' + VarToJSON([Value]));
end;

procedure TExtDataNode.SetFLeaf(Value : Boolean); begin
  FLeaf := Value;
  JSCode('leaf:' + VarToJSON([Value]));
end;

procedure TExtDataNode.SetFAttributes(Value : TExtObject); begin
  FAttributes := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.attributes=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataNode.SetFChildNodes(Value : TExtObjectList); begin
  FChildNodes := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.childNodes=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataNode.SetFFirstChild(Value : TExtDataNode); begin
  FFirstChild := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.firstChild=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataNode.SetFId_(Value : String); begin
  FId_ := Value;
  JSCode(JSName + '.id=' + VarToJSON([Value]) + ';');
end;

procedure TExtDataNode.SetFLastChild(Value : TExtDataNode); begin
  FLastChild := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.lastChild=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataNode.SetFNextSibling(Value : TExtDataNode); begin
  FNextSibling := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.nextSibling=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataNode.SetFParentNode(Value : TExtDataNode); begin
  FParentNode := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.parentNode=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataNode.SetFPreviousSibling(Value : TExtDataNode); begin
  FPreviousSibling := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.previousSibling=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataNode.SetFOnAppend(Value : TExtDataNodeOnAppend); begin
  if Assigned(FOnAppend) then
    JSCode(JSName+'.events ["append"].listeners=[];');
  if Assigned(Value) then
    On('append', Ajax('append', ['Tree', '%0.nm','This', '%1.nm','Node', '%2.nm','Index', '%3'], true));
  FOnAppend := Value;
end;

procedure TExtDataNode.SetFOnBeforeappend(Value : TExtDataNodeOnBeforeappend); begin
  if Assigned(FOnBeforeappend) then
    JSCode(JSName+'.events ["beforeappend"].listeners=[];');
  if Assigned(Value) then
    On('beforeappend', Ajax('beforeappend', ['Tree', '%0.nm','This', '%1.nm','Node', '%2.nm'], true));
  FOnBeforeappend := Value;
end;

procedure TExtDataNode.SetFOnBeforeinsert(Value : TExtDataNodeOnBeforeinsert); begin
  if Assigned(FOnBeforeinsert) then
    JSCode(JSName+'.events ["beforeinsert"].listeners=[];');
  if Assigned(Value) then
    On('beforeinsert', Ajax('beforeinsert', ['Tree', '%0.nm','This', '%1.nm','Node', '%2.nm','RefNode', '%3.nm'], true));
  FOnBeforeinsert := Value;
end;

procedure TExtDataNode.SetFOnBeforemove(Value : TExtDataNodeOnBeforemove); begin
  if Assigned(FOnBeforemove) then
    JSCode(JSName+'.events ["beforemove"].listeners=[];');
  if Assigned(Value) then
    On('beforemove', Ajax('beforemove', ['Tree', '%0.nm','This', '%1.nm','OldParent', '%2.nm','NewParent', '%3.nm','Index', '%4'], true));
  FOnBeforemove := Value;
end;

procedure TExtDataNode.SetFOnBeforeremove(Value : TExtDataNodeOnBeforeremove); begin
  if Assigned(FOnBeforeremove) then
    JSCode(JSName+'.events ["beforeremove"].listeners=[];');
  if Assigned(Value) then
    On('beforeremove', Ajax('beforeremove', ['Tree', '%0.nm','This', '%1.nm','Node', '%2.nm'], true));
  FOnBeforeremove := Value;
end;

procedure TExtDataNode.SetFOnInsert(Value : TExtDataNodeOnInsert); begin
  if Assigned(FOnInsert) then
    JSCode(JSName+'.events ["insert"].listeners=[];');
  if Assigned(Value) then
    On('insert', Ajax('insert', ['Tree', '%0.nm','This', '%1.nm','Node', '%2.nm','RefNode', '%3.nm'], true));
  FOnInsert := Value;
end;

procedure TExtDataNode.SetFOnMove(Value : TExtDataNodeOnMove); begin
  if Assigned(FOnMove) then
    JSCode(JSName+'.events ["move"].listeners=[];');
  if Assigned(Value) then
    On('move', Ajax('move', ['Tree', '%0.nm','This', '%1.nm','OldParent', '%2.nm','NewParent', '%3.nm','Index', '%4'], true));
  FOnMove := Value;
end;

procedure TExtDataNode.SetFOnRemove(Value : TExtDataNodeOnRemove); begin
  if Assigned(FOnRemove) then
    JSCode(JSName+'.events ["remove"].listeners=[];');
  if Assigned(Value) then
    On('remove', Ajax('remove', ['Tree', '%0.nm','This', '%1.nm','Node', '%2.nm'], true));
  FOnRemove := Value;
end;

function TExtDataNode.JSClassName : string; begin
  Result := 'Ext.data.Node';
end;

procedure TExtDataNode.InitDefaults; begin
  inherited;
  FAttributes := TExtObject.CreateInternal(Self, 'attributes');
  FChildNodes := TExtObjectList.Create(Self, 'childNodes');
  FFirstChild := TExtDataNode.CreateInternal(Self, 'firstChild');
  FLastChild := TExtDataNode.CreateInternal(Self, 'lastChild');
  FNextSibling := TExtDataNode.CreateInternal(Self, 'nextSibling');
  FParentNode := TExtDataNode.CreateInternal(Self, 'parentNode');
  FPreviousSibling := TExtDataNode.CreateInternal(Self, 'previousSibling');
end;

{$IFDEF FPC}constructor TExtDataNode.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataNode.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDataNode.AppendChild(Node : TExtDataNode) : TExtFunction; begin
  JSCode(JSName + '.appendChild(' + VarToJSON([Node, false]) + ');', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.AppendChild(Node : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.appendChild(' + VarToJSON(Node) + ');', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.Bubble(Fn : TExtFunction; Scope : TExtObject = nil; Args : TExtObjectList = nil) : TExtFunction; begin
  JSCode(JSName + '.bubble(' + VarToJSON([Fn, true, Scope, false]) + ',' + VarToJSON(Args) + ');', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.Cascade(Fn : TExtFunction; Scope : TExtObject = nil; Args : TExtObjectList = nil) : TExtFunction; begin
  JSCode(JSName + '.cascade(' + VarToJSON([Fn, true, Scope, false]) + ',' + VarToJSON(Args) + ');', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.Contains(Node : TExtDataNode) : TExtFunction; begin
  JSCode(JSName + '.contains(' + VarToJSON([Node, false]) + ');', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.DestroyJS : TExtFunction; begin
  JSCode(JSName + '.destroy();', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.EachChild(Fn : TExtFunction; Scope : TExtObject = nil; Args : TExtObjectList = nil) : TExtFunction; begin
  JSCode(JSName + '.eachChild(' + VarToJSON([Fn, true, Scope, false]) + ',' + VarToJSON(Args) + ');', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.FindChild(Attribute : String; Value : String) : TExtFunction; begin
  JSCode(JSName + '.findChild(' + VarToJSON([Attribute, Value]) + ');', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.FindChildBy(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.findChildBy(' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.GetDepth : TExtFunction; begin
  JSCode(JSName + '.getDepth();', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.GetOwnerTree : TExtFunction; begin
  JSCode(JSName + '.getOwnerTree();', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.GetPath(Attr : String = '') : TExtFunction; begin
  JSCode(JSName + '.getPath(' + VarToJSON([Attr]) + ');', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.HasChildNodes : TExtFunction; begin
  JSCode(JSName + '.hasChildNodes();', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.IndexOf(Node : TExtDataNode) : TExtFunction; begin
  JSCode(JSName + '.indexOf(' + VarToJSON([Node, false]) + ');', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.InsertBefore(Node : TExtDataNode; RefNode : TExtDataNode) : TExtFunction; begin
  JSCode(JSName + '.insertBefore(' + VarToJSON([Node, false, RefNode, false]) + ');', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.IsAncestor(Node : TExtDataNode) : TExtFunction; begin
  JSCode(JSName + '.isAncestor(' + VarToJSON([Node, false]) + ');', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.IsExpandable : TExtFunction; begin
  JSCode(JSName + '.isExpandable();', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.IsFirst : TExtFunction; begin
  JSCode(JSName + '.isFirst();', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.IsLast : TExtFunction; begin
  JSCode(JSName + '.isLast();', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.IsLeaf : TExtFunction; begin
  JSCode(JSName + '.isLeaf();', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.Item(Index : Integer) : TExtFunction; begin
  JSCode(JSName + '.item(' + VarToJSON([Index]) + ');', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.Remove(DestroyJS : Boolean) : TExtFunction; begin
  JSCode(JSName + '.remove(' + VarToJSON([DestroyJS]) + ');', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.RemoveAll(DestroyJS : Boolean) : TExtFunction; begin
  JSCode(JSName + '.removeAll(' + VarToJSON([DestroyJS]) + ');', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.RemoveChild(Node : TExtDataNode; DestroyJS : Boolean) : TExtFunction; begin
  JSCode(JSName + '.removeChild(' + VarToJSON([Node, false, DestroyJS]) + ');', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.ReplaceChild(NewChild : TExtDataNode; OldChild : TExtDataNode) : TExtFunction; begin
  JSCode(JSName + '.replaceChild(' + VarToJSON([NewChild, false, OldChild, false]) + ');', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.SetId(Id : String) : TExtFunction; begin
  JSCode(JSName + '.setId(' + VarToJSON([Id]) + ');', 'TExtDataNode');
  Result := Self;
end;

function TExtDataNode.Sort(Fn : TExtFunction; Scope : TExtObject = nil) : TExtFunction; begin
  JSCode(JSName + '.sort(' + VarToJSON([Fn, true, Scope, false]) + ');', 'TExtDataNode');
  Result := Self;
end;

destructor TExtDataNode.Destroy; begin
  try
    FAttributes.Free;
    FChildNodes.Free;
    FFirstChild.Free;
    FLastChild.Free;
    FNextSibling.Free;
    FParentNode.Free;
    FPreviousSibling.Free;
  except end;
  inherited;
end;

procedure TExtDataNode.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'append') and Assigned(FOnAppend) then
    FOnAppend(TExtDataTree(ParamAsObject('Tree')), TExtDataNode(ParamAsObject('This')), TExtDataNode(ParamAsObject('Node')), ParamAsInteger('Index'))
  else if (AEvtName = 'beforeappend') and Assigned(FOnBeforeappend) then
    FOnBeforeappend(TExtDataTree(ParamAsObject('Tree')), TExtDataNode(ParamAsObject('This')), TExtDataNode(ParamAsObject('Node')))
  else if (AEvtName = 'beforeinsert') and Assigned(FOnBeforeinsert) then
    FOnBeforeinsert(TExtDataTree(ParamAsObject('Tree')), TExtDataNode(ParamAsObject('This')), TExtDataNode(ParamAsObject('Node')), TExtDataNode(ParamAsObject('RefNode')))
  else if (AEvtName = 'beforemove') and Assigned(FOnBeforemove) then
    FOnBeforemove(TExtDataTree(ParamAsObject('Tree')), TExtDataNode(ParamAsObject('This')), TExtDataNode(ParamAsObject('OldParent')), TExtDataNode(ParamAsObject('NewParent')), ParamAsInteger('Index'))
  else if (AEvtName = 'beforeremove') and Assigned(FOnBeforeremove) then
    FOnBeforeremove(TExtDataTree(ParamAsObject('Tree')), TExtDataNode(ParamAsObject('This')), TExtDataNode(ParamAsObject('Node')))
  else if (AEvtName = 'insert') and Assigned(FOnInsert) then
    FOnInsert(TExtDataTree(ParamAsObject('Tree')), TExtDataNode(ParamAsObject('This')), TExtDataNode(ParamAsObject('Node')), TExtDataNode(ParamAsObject('RefNode')))
  else if (AEvtName = 'move') and Assigned(FOnMove) then
    FOnMove(TExtDataTree(ParamAsObject('Tree')), TExtDataNode(ParamAsObject('This')), TExtDataNode(ParamAsObject('OldParent')), TExtDataNode(ParamAsObject('NewParent')), ParamAsInteger('Index'))
  else if (AEvtName = 'remove') and Assigned(FOnRemove) then
    FOnRemove(TExtDataTree(ParamAsObject('Tree')), TExtDataNode(ParamAsObject('This')), TExtDataNode(ParamAsObject('Node')));
end;

function TExtDataStoreError.JSClassName : string; begin
  Result := 'Ext.data.Store.Error';
end;

{$IFDEF FPC}constructor TExtDataStoreError.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtDataConnection.SetFAutoAbort(Value : Boolean); begin
  FAutoAbort := Value;
  JSCode('autoAbort:' + VarToJSON([Value]));
end;

procedure TExtDataConnection.SetFDefaultHeaders(Value : TExtObject); begin
  FDefaultHeaders := Value;
  Value.DeleteFromGarbage;
  JSCode('defaultHeaders:' + VarToJSON([Value, false]));
end;

procedure TExtDataConnection.SetFDisableCaching(Value : Boolean); begin
  FDisableCaching := Value;
  JSCode('disableCaching:' + VarToJSON([Value]));
end;

procedure TExtDataConnection.SetFDisableCachingParam(Value : String); begin
  FDisableCachingParam := Value;
  JSCode('disableCachingParam:' + VarToJSON([Value]));
end;

procedure TExtDataConnection.SetFExtraParams(Value : TExtObject); begin
  FExtraParams := Value;
  Value.DeleteFromGarbage;
  JSCode('extraParams:' + VarToJSON([Value, false]));
end;

procedure TExtDataConnection.SetFMethod(Value : String); begin
  FMethod := Value;
  JSCode('method:' + VarToJSON([Value]));
end;

procedure TExtDataConnection.SetFTimeout(Value : Integer); begin
  FTimeout := Value;
  JSCode('timeout:' + VarToJSON([Value]));
end;

procedure TExtDataConnection.SetFUrl(Value : String); begin
  FUrl := Value;
  JSCode('url:' + VarToJSON([Value]));
end;

procedure TExtDataConnection.SetFOnBeforerequest(Value : TExtDataConnectionOnBeforerequest); begin
  if Assigned(FOnBeforerequest) then
    JSCode(JSName+'.events ["beforerequest"].listeners=[];');
  if Assigned(Value) then
    On('beforerequest', Ajax('beforerequest', ['Conn', '%0.nm','Options', '%1.nm'], true));
  FOnBeforerequest := Value;
end;

procedure TExtDataConnection.SetFOnRequestcomplete(Value : TExtDataConnectionOnRequestcomplete); begin
  if Assigned(FOnRequestcomplete) then
    JSCode(JSName+'.events ["requestcomplete"].listeners=[];');
  if Assigned(Value) then
    On('requestcomplete', Ajax('requestcomplete', ['Conn', '%0.nm','Response', '%1.nm','Options', '%2.nm'], true));
  FOnRequestcomplete := Value;
end;

procedure TExtDataConnection.SetFOnRequestexception(Value : TExtDataConnectionOnRequestexception); begin
  if Assigned(FOnRequestexception) then
    JSCode(JSName+'.events ["requestexception"].listeners=[];');
  if Assigned(Value) then
    On('requestexception', Ajax('requestexception', ['Conn', '%0.nm','Response', '%1.nm','Options', '%2.nm'], true));
  FOnRequestexception := Value;
end;

function TExtDataConnection.JSClassName : string; begin
  Result := 'Ext.data.Connection';
end;

procedure TExtDataConnection.InitDefaults; begin
  inherited;
  FDefaultHeaders := TExtObject.CreateInternal(Self, 'defaultHeaders');
  FDisableCaching := true;
  FExtraParams := TExtObject.CreateInternal(Self, 'extraParams');
  FMethod := 'output/Ext.data.Connection.html#Ext.data.Connection-request';
  FTimeout := 30000;
end;

{$IFDEF FPC}constructor TExtDataConnection.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataConnection.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDataConnection.Abort(TransactionId : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.abort(' + VarToJSON([TransactionId]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.IsLoading(TransactionId : Integer = 0) : TExtFunction; begin
  JSCode(JSName + '.isLoading(' + VarToJSON([TransactionId]) + ');', 'TExtDataConnection');
  Result := Self;
end;

function TExtDataConnection.Request(Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.request(' + VarToJSON([Options, false]) + ');', 'TExtDataConnection');
  Result := Self;
end;

destructor TExtDataConnection.Destroy; begin
  try
    FDefaultHeaders.Free;
    FExtraParams.Free;
  except end;
  inherited;
end;

procedure TExtDataConnection.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforerequest') and Assigned(FOnBeforerequest) then
    FOnBeforerequest(TExtDataConnection(ParamAsObject('Conn')), TExtObject(ParamAsObject('Options')))
  else if (AEvtName = 'requestcomplete') and Assigned(FOnRequestcomplete) then
    FOnRequestcomplete(TExtDataConnection(ParamAsObject('Conn')), TExtObject(ParamAsObject('Response')), TExtObject(ParamAsObject('Options')))
  else if (AEvtName = 'requestexception') and Assigned(FOnRequestexception) then
    FOnRequestexception(TExtDataConnection(ParamAsObject('Conn')), TExtObject(ParamAsObject('Response')), TExtObject(ParamAsObject('Options')));
end;

function TExtDataDataReaderError.JSClassName : string; begin
  Result := 'Ext.data.DataReader.Error';
end;

{$IFDEF FPC}constructor TExtDataDataReaderError.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtDataXmlWriter.SetFDocumentRoot(Value : String); begin
  FDocumentRoot := Value;
  JSCode('documentRoot:' + VarToJSON([Value]));
end;

procedure TExtDataXmlWriter.SetFForceDocumentRoot(Value : Boolean); begin
  FForceDocumentRoot := Value;
  JSCode('forceDocumentRoot:' + VarToJSON([Value]));
end;

procedure TExtDataXmlWriter.SetFRoot(Value : String); begin
  FRoot := Value;
  JSCode('root:' + VarToJSON([Value]));
end;

procedure TExtDataXmlWriter.SetFTpl(Value : String); begin
  FTpl := Value;
  JSCode('tpl:' + VarToJSON([Value]));
end;

procedure TExtDataXmlWriter.SetFTplExtXTemplate(Value : TExtXTemplate); begin
  FTplExtXTemplate := Value;
  Value.DeleteFromGarbage;
  JSCode('tpl:' + VarToJSON([Value, false]));
end;

procedure TExtDataXmlWriter.SetFXmlEncoding(Value : String); begin
  FXmlEncoding := Value;
  JSCode('xmlEncoding:' + VarToJSON([Value]));
end;

procedure TExtDataXmlWriter.SetFXmlVersion(Value : String); begin
  FXmlVersion := Value;
  JSCode('xmlVersion:' + VarToJSON([Value]));
end;

function TExtDataXmlWriter.JSClassName : string; begin
  Result := 'Ext.data.XmlWriter';
end;

procedure TExtDataXmlWriter.InitDefaults; begin
  inherited;
  FTplExtXTemplate := TExtXTemplate.CreateInternal(Self, 'tpl');
end;

{$IFDEF FPC}constructor TExtDataXmlWriter.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataXmlWriter.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDataXmlWriter.CreateRecord(Rec : TExtDataRecord) : TExtFunction; begin
  JSCode(JSName + '.createRecord(' + VarToJSON([Rec, false]) + ');', 'TExtDataXmlWriter');
  Result := Self;
end;

function TExtDataXmlWriter.DestroyRecord(Rec : TExtDataRecord) : TExtFunction; begin
  JSCode(JSName + '.destroyRecord(' + VarToJSON([Rec, false]) + ');', 'TExtDataXmlWriter');
  Result := Self;
end;

function TExtDataXmlWriter.Render(Params : TExtObject; BaseParams : TExtObject; Data : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.render(' + VarToJSON([Params, false, BaseParams, false, Data, false]) + ');', 'TExtDataXmlWriter');
  Result := Self;
end;

function TExtDataXmlWriter.Render(Params : TExtObject; BaseParams : TExtObject; Data : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.render(' + VarToJSON([Params, false, BaseParams, false]) + ',' + VarToJSON(Data) + ');', 'TExtDataXmlWriter');
  Result := Self;
end;

function TExtDataXmlWriter.UpdateRecord(Rec : TExtDataRecord) : TExtFunction; begin
  JSCode(JSName + '.updateRecord(' + VarToJSON([Rec, false]) + ');', 'TExtDataXmlWriter');
  Result := Self;
end;

destructor TExtDataXmlWriter.Destroy; begin
  try
    FTplExtXTemplate.Free;
  except end;
  inherited;
end;

procedure TExtDataDataProxy.SetFApi(Value : TExtObject); begin
  FApi := Value;
  Value.DeleteFromGarbage;
  JSCode('api:' + VarToJSON([Value, false]));
end;

procedure TExtDataDataProxy.SetFDoRequest(Value : TExtFunction); begin
  FDoRequest := Value;
  JSCode('doRequest:' + VarToJSON([Value, true]));
end;

procedure TExtDataDataProxy.SetFOnRead(Value : TExtFunction); begin
  FOnRead := Value;
  JSCode('onRead:' + VarToJSON([Value, true]));
end;

procedure TExtDataDataProxy.SetFOnWrite(Value : TExtFunction); begin
  FOnWrite := Value;
  JSCode('onWrite:' + VarToJSON([Value, true]));
end;

procedure TExtDataDataProxy.SetFRestful(Value : Boolean); begin
  FRestful := Value;
  JSCode('restful:' + VarToJSON([Value]));
end;

procedure TExtDataDataProxy.SetFOnBeforeload(Value : TExtDataDataProxyOnBeforeload); begin
  if Assigned(FOnBeforeload) then
    JSCode(JSName+'.events ["beforeload"].listeners=[];');
  if Assigned(Value) then
    On('beforeload', Ajax('beforeload', ['This', '%0.nm','Params', '%1.nm'], true));
  FOnBeforeload := Value;
end;

procedure TExtDataDataProxy.SetFOnBeforewrite(Value : TExtDataDataProxyOnBeforewrite); begin
  if Assigned(FOnBeforewrite) then
    JSCode(JSName+'.events ["beforewrite"].listeners=[];');
  if Assigned(Value) then
    On('beforewrite', Ajax('beforewrite', ['This', '%0.nm','Action', '%1','Rs', '%2.nm','Params', '%3.nm'], true));
  FOnBeforewrite := Value;
end;

procedure TExtDataDataProxy.SetFOnException(Value : TExtDataDataProxyOnException); begin
  if Assigned(FOnException) then
    JSCode(JSName+'.events ["exception"].listeners=[];');
  if Assigned(Value) then
    On('exception', Ajax('exception', ['This', '%0.nm','TypeJS', '%1','Action', '%2','Options', '%3.nm','Response', '%4.nm','Arg', '%5'], true));
  FOnException := Value;
end;

procedure TExtDataDataProxy.SetFOnLoad(Value : TExtDataDataProxyOnLoad); begin
  if Assigned(FOnLoad) then
    JSCode(JSName+'.events ["load"].listeners=[];');
  if Assigned(Value) then
    On('load', Ajax('load', ['This', '%0.nm','O', '%1.nm','Options', '%2.nm'], true));
  FOnLoad := Value;
end;

procedure TExtDataDataProxy.SetFOnLoadexception(Value : TExtDataDataProxyOnLoadexception); begin
  if Assigned(FOnLoadexception) then
    JSCode(JSName+'.events ["loadexception"].listeners=[];');
  if Assigned(Value) then
    On('loadexception', Ajax('loadexception', ['Misc', '%0.nm'], true));
  FOnLoadexception := Value;
end;

procedure TExtDataDataProxy.SetFOnWrite_(Value : TExtDataDataProxyOnWrite_); begin
  if Assigned(FOnWrite_) then
    JSCode(JSName+'.events ["write"].listeners=[];');
  if Assigned(Value) then
    On('write', Ajax('write', ['This', '%0.nm','Action', '%1','Data', '%2.nm','Response', '%3.nm','Rs', '%4.nm','Options', '%5.nm'], true));
  FOnWrite_ := Value;
end;

function TExtDataDataProxy.JSClassName : string; begin
  Result := 'Ext.data.DataProxy';
end;

procedure TExtDataDataProxy.InitDefaults; begin
  inherited;
  FApi := TExtObject.CreateInternal(Self, 'api');
end;

{$IFDEF FPC}constructor TExtDataDataProxy.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataDataProxy.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDataDataProxy.DestroyJS : TExtFunction; begin
  JSCode(JSName + '.destroy();', 'TExtDataDataProxy');
  Result := Self;
end;

function TExtDataDataProxy.IsApiAction(ExtDataApiCREATEREADUPDATEDESTROY : String) : TExtFunction; begin
  JSCode(JSName + '.isApiAction(' + VarToJSON([ExtDataApiCREATEREADUPDATEDESTROY]) + ');', 'TExtDataDataProxy');
  Result := Self;
end;

function TExtDataDataProxy.Load(Params : TExtObject; Reader : TExtObject; Callback : TExtObject; Scope : TExtObject; Arg : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.load(' + VarToJSON([Params, false, Reader, false, Callback, false, Scope, false, Arg, false]) + ');', 'TExtDataDataProxy');
  Result := Self;
end;

function TExtDataDataProxy.Request(Action : String; Rs : TExtDataRecord; Params : TExtObject; Reader : TExtDataDataReader; Callback : TExtFunction; Scope : TExtObject; Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.request(' + VarToJSON([Action, Rs, false, Params, false, Reader, false, Callback, true, Scope, false, Options, false]) + ');', 'TExtDataDataProxy');
  Result := Self;
end;

function TExtDataDataProxy.Request(Action : String; Rs : TExtObjectList; Params : TExtObject; Reader : TExtDataDataReader; Callback : TExtFunction; Scope : TExtObject; Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.request(' + VarToJSON([Action]) + ',' + VarToJSON(Rs) + ',' + VarToJSON([Params, false, Reader, false, Callback, true, Scope, false, Options, false]) + ');', 'TExtDataDataProxy');
  Result := Self;
end;

function TExtDataDataProxy.Request(Action : String; Rs : TNull; Params : TExtObject; Reader : TExtDataDataReader; Callback : TExtFunction; Scope : TExtObject; Options : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.request(' + VarToJSON([Action, Rs, false, Params, false, Reader, false, Callback, true, Scope, false, Options, false]) + ');', 'TExtDataDataProxy');
  Result := Self;
end;

function TExtDataDataProxy.SetApi(Api : String; Url : String) : TExtFunction; begin
  JSCode(JSName + '.setApi(' + VarToJSON([Api, Url]) + ');', 'TExtDataDataProxy');
  Result := Self;
end;

function TExtDataDataProxy.SetApi(Api : TExtObject; Url : String) : TExtFunction; begin
  JSCode(JSName + '.setApi(' + VarToJSON([Api, false, Url]) + ');', 'TExtDataDataProxy');
  Result := Self;
end;

function TExtDataDataProxy.SetApi(Api : TExtObject; Url : TExtFunction) : TExtFunction; begin
  JSCode(JSName + '.setApi(' + VarToJSON([Api, false, Url, true]) + ');', 'TExtDataDataProxy');
  Result := Self;
end;

function TExtDataDataProxy.SetApi(Api : String; Url : TExtFunction) : TExtFunction; begin
  JSCode(JSName + '.setApi(' + VarToJSON([Api, Url, true]) + ');', 'TExtDataDataProxy');
  Result := Self;
end;

destructor TExtDataDataProxy.Destroy; begin
  try
    FApi.Free;
  except end;
  inherited;
end;

procedure TExtDataDataProxy.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'beforeload') and Assigned(FOnBeforeload) then
    FOnBeforeload(TExtDataDataProxy(ParamAsObject('This')), TExtObject(ParamAsObject('Params')))
  else if (AEvtName = 'beforewrite') and Assigned(FOnBeforewrite) then
    FOnBeforewrite(TExtDataDataProxy(ParamAsObject('This')), ParamAsString('Action'), TExtDataRecord(ParamAsObject('Rs')), TExtObject(ParamAsObject('Params')))
  else if (AEvtName = 'exception') and Assigned(FOnException) then
    FOnException(TExtDataDataProxy(ParamAsObject('This')), ParamAsString('TypeJS'), ParamAsString('Action'), TExtObject(ParamAsObject('Options')), TExtObject(ParamAsObject('Response')), ParamAsString('Arg'))
  else if (AEvtName = 'load') and Assigned(FOnLoad) then
    FOnLoad(TExtDataDataProxy(ParamAsObject('This')), TExtObject(ParamAsObject('O')), TExtObject(ParamAsObject('Options')))
  else if (AEvtName = 'loadexception') and Assigned(FOnLoadexception) then
    FOnLoadexception(TMisc(ParamAsObject('Misc')))
  else if (AEvtName = 'write') and Assigned(FOnWrite_) then
    FOnWrite_(TExtDataDataProxy(ParamAsObject('This')), ParamAsString('Action'), TExtObject(ParamAsObject('Data')), TExtObject(ParamAsObject('Response')), TExtDataRecord(ParamAsObject('Rs')), TExtObject(ParamAsObject('Options')));
end;

procedure TExtDataTree.SetFPathSeparator(Value : String); begin
  FPathSeparator := Value;
  JSCode('pathSeparator:' + VarToJSON([Value]));
end;

procedure TExtDataTree.SetFRoot(Value : TExtDataNode); begin
  FRoot := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.root=' + VarToJSON([Value, false]) + ';');
end;

procedure TExtDataTree.SetFOnAppend(Value : TExtDataTreeOnAppend); begin
  if Assigned(FOnAppend) then
    JSCode(JSName+'.events ["append"].listeners=[];');
  if Assigned(Value) then
    On('append', Ajax('append', ['Tree', '%0.nm','Parent', '%1.nm','Node', '%2.nm','Index', '%3'], true));
  FOnAppend := Value;
end;

procedure TExtDataTree.SetFOnBeforeappend(Value : TExtDataTreeOnBeforeappend); begin
  if Assigned(FOnBeforeappend) then
    JSCode(JSName+'.events ["beforeappend"].listeners=[];');
  if Assigned(Value) then
    On('beforeappend', Ajax('beforeappend', ['Tree', '%0.nm','Parent', '%1.nm','Node', '%2.nm'], true));
  FOnBeforeappend := Value;
end;

procedure TExtDataTree.SetFOnBeforeinsert(Value : TExtDataTreeOnBeforeinsert); begin
  if Assigned(FOnBeforeinsert) then
    JSCode(JSName+'.events ["beforeinsert"].listeners=[];');
  if Assigned(Value) then
    On('beforeinsert', Ajax('beforeinsert', ['Tree', '%0.nm','Parent', '%1.nm','Node', '%2.nm','RefNode', '%3.nm'], true));
  FOnBeforeinsert := Value;
end;

procedure TExtDataTree.SetFOnBeforemove(Value : TExtDataTreeOnBeforemove); begin
  if Assigned(FOnBeforemove) then
    JSCode(JSName+'.events ["beforemove"].listeners=[];');
  if Assigned(Value) then
    On('beforemove', Ajax('beforemove', ['Tree', '%0.nm','Node', '%1.nm','OldParent', '%2.nm','NewParent', '%3.nm','Index', '%4'], true));
  FOnBeforemove := Value;
end;

procedure TExtDataTree.SetFOnBeforeremove(Value : TExtDataTreeOnBeforeremove); begin
  if Assigned(FOnBeforeremove) then
    JSCode(JSName+'.events ["beforeremove"].listeners=[];');
  if Assigned(Value) then
    On('beforeremove', Ajax('beforeremove', ['Tree', '%0.nm','Parent', '%1.nm','Node', '%2.nm'], true));
  FOnBeforeremove := Value;
end;

procedure TExtDataTree.SetFOnInsert(Value : TExtDataTreeOnInsert); begin
  if Assigned(FOnInsert) then
    JSCode(JSName+'.events ["insert"].listeners=[];');
  if Assigned(Value) then
    On('insert', Ajax('insert', ['Tree', '%0.nm','Parent', '%1.nm','Node', '%2.nm','RefNode', '%3.nm'], true));
  FOnInsert := Value;
end;

procedure TExtDataTree.SetFOnMove(Value : TExtDataTreeOnMove); begin
  if Assigned(FOnMove) then
    JSCode(JSName+'.events ["move"].listeners=[];');
  if Assigned(Value) then
    On('move', Ajax('move', ['Tree', '%0.nm','Node', '%1.nm','OldParent', '%2.nm','NewParent', '%3.nm','Index', '%4'], true));
  FOnMove := Value;
end;

procedure TExtDataTree.SetFOnRemove(Value : TExtDataTreeOnRemove); begin
  if Assigned(FOnRemove) then
    JSCode(JSName+'.events ["remove"].listeners=[];');
  if Assigned(Value) then
    On('remove', Ajax('remove', ['Tree', '%0.nm','Parent', '%1.nm','Node', '%2.nm'], true));
  FOnRemove := Value;
end;

function TExtDataTree.JSClassName : string; begin
  Result := 'Ext.data.Tree';
end;

procedure TExtDataTree.InitDefaults; begin
  inherited;
  FPathSeparator := '/';
  FRoot := TExtDataNode.CreateInternal(Self, 'root');
end;

{$IFDEF FPC}constructor TExtDataTree.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataTree.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDataTree.GetNodeById(Id : String) : TExtFunction; begin
  JSCode(JSName + '.getNodeById(' + VarToJSON([Id]) + ');', 'TExtDataTree');
  Result := Self;
end;

function TExtDataTree.GetRootNode : TExtFunction; begin
  JSCode(JSName + '.getRootNode();', 'TExtDataTree');
  Result := Self;
end;

function TExtDataTree.SetRootNode(Node : TExtDataNode) : TExtFunction; begin
  JSCode(JSName + '.setRootNode(' + VarToJSON([Node, false]) + ');', 'TExtDataTree');
  Result := Self;
end;

procedure TExtDataTree.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'append') and Assigned(FOnAppend) then
    FOnAppend(TExtDataTree(ParamAsObject('Tree')), TExtDataNode(ParamAsObject('Parent')), TExtDataNode(ParamAsObject('Node')), ParamAsInteger('Index'))
  else if (AEvtName = 'beforeappend') and Assigned(FOnBeforeappend) then
    FOnBeforeappend(TExtDataTree(ParamAsObject('Tree')), TExtDataNode(ParamAsObject('Parent')), TExtDataNode(ParamAsObject('Node')))
  else if (AEvtName = 'beforeinsert') and Assigned(FOnBeforeinsert) then
    FOnBeforeinsert(TExtDataTree(ParamAsObject('Tree')), TExtDataNode(ParamAsObject('Parent')), TExtDataNode(ParamAsObject('Node')), TExtDataNode(ParamAsObject('RefNode')))
  else if (AEvtName = 'beforemove') and Assigned(FOnBeforemove) then
    FOnBeforemove(TExtDataTree(ParamAsObject('Tree')), TExtDataNode(ParamAsObject('Node')), TExtDataNode(ParamAsObject('OldParent')), TExtDataNode(ParamAsObject('NewParent')), ParamAsInteger('Index'))
  else if (AEvtName = 'beforeremove') and Assigned(FOnBeforeremove) then
    FOnBeforeremove(TExtDataTree(ParamAsObject('Tree')), TExtDataNode(ParamAsObject('Parent')), TExtDataNode(ParamAsObject('Node')))
  else if (AEvtName = 'insert') and Assigned(FOnInsert) then
    FOnInsert(TExtDataTree(ParamAsObject('Tree')), TExtDataNode(ParamAsObject('Parent')), TExtDataNode(ParamAsObject('Node')), TExtDataNode(ParamAsObject('RefNode')))
  else if (AEvtName = 'move') and Assigned(FOnMove) then
    FOnMove(TExtDataTree(ParamAsObject('Tree')), TExtDataNode(ParamAsObject('Node')), TExtDataNode(ParamAsObject('OldParent')), TExtDataNode(ParamAsObject('NewParent')), ParamAsInteger('Index'))
  else if (AEvtName = 'remove') and Assigned(FOnRemove) then
    FOnRemove(TExtDataTree(ParamAsObject('Tree')), TExtDataNode(ParamAsObject('Parent')), TExtDataNode(ParamAsObject('Node')));
end;

procedure TExtDataXmlReader.SetFIdPath(Value : String); begin
  FIdPath := Value;
  JSCode('idPath:' + VarToJSON([Value]));
end;

procedure TExtDataXmlReader.SetFRecordJS(Value : String); begin
  FRecordJS := Value;
  JSCode('recordJS:' + VarToJSON([Value]));
end;

procedure TExtDataXmlReader.SetFRecordJS_(Value : String); begin
  FRecordJS_ := Value;
  JSCode('recordJS:' + VarToJSON([Value]));
end;

procedure TExtDataXmlReader.SetFSuccessProperty(Value : String); begin
  FSuccessProperty := Value;
  JSCode('successProperty:' + VarToJSON([Value]));
end;

procedure TExtDataXmlReader.SetFTotalProperty(Value : String); begin
  FTotalProperty := Value;
  JSCode('totalProperty:' + VarToJSON([Value]));
end;

procedure TExtDataXmlReader.SetFXmlData(Value : TXMLDocument); begin
  FXmlData := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.xmlData=' + VarToJSON([Value, false]) + ';');
end;

function TExtDataXmlReader.JSClassName : string; begin
  Result := 'Ext.data.XmlReader';
end;

{$IFDEF FPC}constructor TExtDataXmlReader.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataXmlReader.Create(Meta : TExtObject; RecordType : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Meta, false, RecordType, false]) + ');');
  InitDefaults;
end;

function TExtDataXmlReader.Read(Response : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.read(' + VarToJSON([Response, false]) + ');', 'TExtDataXmlReader');
  Result := Self;
end;

function TExtDataXmlReader.ReadRecords(Doc : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.readRecords(' + VarToJSON([Doc, false]) + ');', 'TExtDataXmlReader');
  Result := Self;
end;

function TExtDataXmlReader.ReadResponse(Action : String; Response : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.readResponse(' + VarToJSON([Action, Response, false]) + ');', 'TExtDataXmlReader');
  Result := Self;
end;

function TExtDataDataProxyError.JSClassName : string; begin
  Result := 'Ext.data.DataProxy.Error';
end;

{$IFDEF FPC}constructor TExtDataDataProxyError.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

procedure TExtDataScriptTagProxy.SetFCallbackParam(Value : String); begin
  FCallbackParam := Value;
  JSCode('callbackParam:' + VarToJSON([Value]));
end;

procedure TExtDataScriptTagProxy.SetFNocache(Value : Boolean); begin
  FNocache := Value;
  JSCode('nocache:' + VarToJSON([Value]));
end;

procedure TExtDataScriptTagProxy.SetFTimeout(Value : Integer); begin
  FTimeout := Value;
  JSCode('timeout:' + VarToJSON([Value]));
end;

procedure TExtDataScriptTagProxy.SetFUrl(Value : String); begin
  FUrl := Value;
  JSCode('url:' + VarToJSON([Value]));
end;

procedure TExtDataScriptTagProxy.SetFOnLoadexception(Value : TExtDataScriptTagProxyOnLoadexception); begin
  if Assigned(FOnLoadexception) then
    JSCode(JSName+'.events ["loadexception"].listeners=[];');
  if Assigned(Value) then
    On('loadexception', Ajax('loadexception', ['This', '%0.nm','Options', '%1.nm','Arg', '%2.nm','E', '%3'], true));
  FOnLoadexception := Value;
end;

function TExtDataScriptTagProxy.JSClassName : string; begin
  Result := 'Ext.data.ScriptTagProxy';
end;

{$IFDEF FPC}constructor TExtDataScriptTagProxy.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataScriptTagProxy.Create(Config : TExtObject = nil); begin
  CreateVar(JSClassName + '(' + VarToJSON([Config, false]) + ');');
  InitDefaults;
end;

function TExtDataScriptTagProxy.Abort : TExtFunction; begin
  JSCode(JSName + '.abort();', 'TExtDataScriptTagProxy');
  Result := Self;
end;

function TExtDataScriptTagProxy.DoRequest(Action : String; Rs : TExtDataRecord; Params : TExtObject; Reader : TExtDataDataReader; Callback : TExtFunction; Scope : TExtObject; Arg : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.doRequest(' + VarToJSON([Action, Rs, false, Params, false, Reader, false, Callback, true, Scope, false, Arg, false]) + ');', 'TExtDataScriptTagProxy');
  Result := Self;
end;

function TExtDataScriptTagProxy.DoRequest(Action : String; Rs : TExtObjectList; Params : TExtObject; Reader : TExtDataDataReader; Callback : TExtFunction; Scope : TExtObject; Arg : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.doRequest(' + VarToJSON([Action]) + ',' + VarToJSON(Rs) + ',' + VarToJSON([Params, false, Reader, false, Callback, true, Scope, false, Arg, false]) + ');', 'TExtDataScriptTagProxy');
  Result := Self;
end;

function TExtDataScriptTagProxy.OnRead(Action : String; Trans : TExtObject; Res : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.onRead(' + VarToJSON([Action, Trans, false, Res, false]) + ');', 'TExtDataScriptTagProxy');
  Result := Self;
end;

function TExtDataScriptTagProxy.OnWrite(Action : String; Trans : TExtObject; Res : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.onWrite(' + VarToJSON([Action, Trans, false, Res, false]) + ');', 'TExtDataScriptTagProxy');
  Result := Self;
end;

procedure TExtDataScriptTagProxy.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'loadexception') and Assigned(FOnLoadexception) then
    FOnLoadexception(TExtDataScriptTagProxy(ParamAsObject('This')), TExtObject(ParamAsObject('Options')), TExtObject(ParamAsObject('Arg')), ParamAsstring('E'));
end;

function TExtDataXmlStore.JSClassName : string; begin
  Result := 'Ext.data.XmlStore';
end;

procedure TExtDataXmlStore.InitDefaults; begin
  inherited;
end;

{$IFDEF FPC}constructor TExtDataXmlStore.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataXmlStore.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

procedure TExtDataGroupingStore.SetFGroupField(Value : String); begin
  FGroupField := Value;
  JSCode('groupField:' + VarToJSON([Value]));
end;

procedure TExtDataGroupingStore.SetFGroupOnSort(Value : Boolean); begin
  FGroupOnSort := Value;
  JSCode('groupOnSort:' + VarToJSON([Value]));
end;

procedure TExtDataGroupingStore.SetFRemoteGroup(Value : Boolean); begin
  FRemoteGroup := Value;
  JSCode('remoteGroup:' + VarToJSON([Value]));
end;

function TExtDataGroupingStore.JSClassName : string; begin
  Result := 'Ext.data.GroupingStore';
end;

procedure TExtDataGroupingStore.InitDefaults; begin
  inherited;
end;

{$IFDEF FPC}constructor TExtDataGroupingStore.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataGroupingStore.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDataGroupingStore.ClearGrouping : TExtFunction; begin
  JSCode(JSName + '.clearGrouping();', 'TExtDataGroupingStore');
  Result := Self;
end;

function TExtDataGroupingStore.GroupBy(Field : String; ForceRegroup : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.groupBy(' + VarToJSON([Field, ForceRegroup]) + ');', 'TExtDataGroupingStore');
  Result := Self;
end;

procedure TExtDataHttpProxy.SetFConn(Value : TExtDataConnection); begin
  FConn := Value;
  Value.DeleteFromGarbage;
  JSCode(JSName + '.conn=' + VarToJSON([Value, false]) + ';');
end;

function TExtDataHttpProxy.JSClassName : string; begin
  Result := 'Ext.data.HttpProxy';
end;

procedure TExtDataHttpProxy.InitDefaults; begin
  inherited;
  FConn := TExtDataConnection.CreateInternal(Self, 'conn');
end;

{$IFDEF FPC}constructor TExtDataHttpProxy.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataHttpProxy.Create(Conn : TExtDataConnection); begin
  CreateVar(JSClassName + '(' + VarToJSON([Conn, false]) + ');');
  InitDefaults;
end;

function TExtDataHttpProxy.DoRequest(Action : String; Rs : TExtDataRecord; Params : TExtObject; Reader : TExtDataDataReader; Callback : TExtFunction; Scope : TExtObject; Arg : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.doRequest(' + VarToJSON([Action, Rs, false, Params, false, Reader, false, Callback, true, Scope, false, Arg, false]) + ');', 'TExtDataHttpProxy');
  Result := Self;
end;

function TExtDataHttpProxy.DoRequest(Action : String; Rs : TExtObjectList; Params : TExtObject; Reader : TExtDataDataReader; Callback : TExtFunction; Scope : TExtObject; Arg : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.doRequest(' + VarToJSON([Action]) + ',' + VarToJSON(Rs) + ',' + VarToJSON([Params, false, Reader, false, Callback, true, Scope, false, Arg, false]) + ');', 'TExtDataHttpProxy');
  Result := Self;
end;

function TExtDataHttpProxy.GetConnection : TExtFunction; begin
  JSCode(JSName + '.getConnection();', 'TExtDataHttpProxy');
  Result := Self;
end;

function TExtDataHttpProxy.OnRead(Action : String; O : TExtObject; Res : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.onRead(' + VarToJSON([Action, O, false, Res, false]) + ');', 'TExtDataHttpProxy');
  Result := Self;
end;

function TExtDataHttpProxy.OnWrite(Action : String; Trans : TExtObject; Res : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.onWrite(' + VarToJSON([Action, Trans, false, Res, false]) + ');', 'TExtDataHttpProxy');
  Result := Self;
end;

function TExtDataHttpProxy.SetUrl(Url : String; MakePermanent : Boolean = false) : TExtFunction; begin
  JSCode(JSName + '.setUrl(' + VarToJSON([Url, MakePermanent]) + ');', 'TExtDataHttpProxy');
  Result := Self;
end;

destructor TExtDataHttpProxy.Destroy; begin
  try
    FConn.Free;
  except end;
  inherited;
end;

procedure TExtDataDirectProxy.SetFDirectFn(Value : TExtFunction); begin
  FDirectFn := Value;
  JSCode('directFn:' + VarToJSON([Value, true]));
end;

procedure TExtDataDirectProxy.SetFParamOrder(Value : TExtObjectList); begin
  FParamOrder := Value;
  Value.DeleteFromGarbage;
  JSCode('paramOrder:' + VarToJSON([Value, false]));
end;

procedure TExtDataDirectProxy.SetFParamOrderString(Value : String); begin
  FParamOrderString := Value;
  JSCode('paramOrder:' + VarToJSON([Value]));
end;

procedure TExtDataDirectProxy.SetFParamsAsHash(Value : Boolean); begin
  FParamsAsHash := Value;
  JSCode('paramsAsHash:' + VarToJSON([Value]));
end;

function TExtDataDirectProxy.JSClassName : string; begin
  Result := 'Ext.data.DirectProxy';
end;

procedure TExtDataDirectProxy.InitDefaults; begin
  inherited;
  FParamOrder := TExtObjectList.Create(Self, 'paramOrder');
  FParamsAsHash := true;
end;

{$IFDEF FPC}constructor TExtDataDirectProxy.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataDirectProxy.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDataDirectProxy.DoRequest(Action : String; Rs : TExtDataRecord; Params : TExtObject; Reader : TExtDataDataReader; Callback : TExtFunction; Scope : TExtObject; Arg : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.doRequest(' + VarToJSON([Action, Rs, false, Params, false, Reader, false, Callback, true, Scope, false, Arg, false]) + ');', 'TExtDataDirectProxy');
  Result := Self;
end;

function TExtDataDirectProxy.DoRequest(Action : String; Rs : TExtObjectList; Params : TExtObject; Reader : TExtDataDataReader; Callback : TExtFunction; Scope : TExtObject; Arg : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.doRequest(' + VarToJSON([Action]) + ',' + VarToJSON(Rs) + ',' + VarToJSON([Params, false, Reader, false, Callback, true, Scope, false, Arg, false]) + ');', 'TExtDataDirectProxy');
  Result := Self;
end;

function TExtDataDirectProxy.OnRead(Action : String; Trans : TExtObject; ResultJS : TExtObject; Res : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.onRead(' + VarToJSON([Action, Trans, false, ResultJS, false, Res, false]) + ');', 'TExtDataDirectProxy');
  Result := Self;
end;

function TExtDataDirectProxy.OnWrite(Action : String; Trans : TExtObject; ResultJS : TExtObject; Res : TExtObject; Rs : TExtDataRecord) : TExtFunction; begin
  JSCode(JSName + '.onWrite(' + VarToJSON([Action, Trans, false, ResultJS, false, Res, false, Rs, false]) + ');', 'TExtDataDirectProxy');
  Result := Self;
end;

function TExtDataDirectProxy.OnWrite(Action : String; Trans : TExtObject; ResultJS : TExtObject; Res : TExtObject; Rs : TExtObjectList) : TExtFunction; begin
  JSCode(JSName + '.onWrite(' + VarToJSON([Action, Trans, false, ResultJS, false, Res, false]) + ',' + VarToJSON(Rs) + ');', 'TExtDataDirectProxy');
  Result := Self;
end;

destructor TExtDataDirectProxy.Destroy; begin
  try
    FParamOrder.Free;
  except end;
  inherited;
end;

function TExtDataDirectStore.JSClassName : string; begin
  Result := 'Ext.data.DirectStore';
end;

procedure TExtDataDirectStore.InitDefaults; begin
  inherited;
end;

{$IFDEF FPC}constructor TExtDataDirectStore.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataDirectStore.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

function TExtDataArrayStore.JSClassName : string; begin
  Result := 'Ext.data.ArrayStore';
end;

procedure TExtDataArrayStore.InitDefaults; begin
  inherited;
end;

{$IFDEF FPC}constructor TExtDataArrayStore.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataArrayStore.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

procedure TExtDataArrayReader.SetFId(Value : Integer); begin
  FId := Value;
  JSCode('id:' + VarToJSON([Value]));
end;

procedure TExtDataArrayReader.SetFIdIndex(Value : Integer); begin
  FIdIndex := Value;
  JSCode('idIndex:' + VarToJSON([Value]));
end;

function TExtDataArrayReader.JSClassName : string; begin
  Result := 'Ext.data.ArrayReader';
end;

{$IFDEF FPC}constructor TExtDataArrayReader.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataArrayReader.Create(Meta : TExtObject; RecordType : TExtObjectList); begin
  CreateVar(JSClassName + '(' + VarToJSON([Meta, false]) + ',' + VarToJSON(RecordType) + ');');
  InitDefaults;
end;

constructor TExtDataArrayReader.Create(Meta : TExtObject; RecordType : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Meta, false, RecordType, false]) + ');');
  InitDefaults;
end;

function TExtDataArrayReader.ReadRecords(O : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.readRecords(' + VarToJSON([O, false]) + ');', 'TExtDataArrayReader');
  Result := Self;
end;

procedure TExtDataJsonStore.SetFId(Value : String); begin
  FId := Value;
  JSCode('id:' + VarToJSON([Value]));
end;

procedure TExtDataJsonStore.SetFRoot(Value : String); begin
  FRoot := Value;
  JSCode('root:' + VarToJSON([Value]));
end;

procedure TExtDataJsonStore.SetFSuccessProperty(Value : String); begin
  FSuccessProperty := Value;
  JSCode('successProperty:' + VarToJSON([Value]));
end;

procedure TExtDataJsonStore.SetFTotalProperty(Value : String); begin
  FTotalProperty := Value;
  JSCode('totalProperty:' + VarToJSON([Value]));
end;

function TExtDataJsonStore.JSClassName : string; begin
  Result := 'Ext.data.JsonStore';
end;

procedure TExtDataJsonStore.InitDefaults; begin
  inherited;
end;

{$IFDEF FPC}constructor TExtDataJsonStore.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataJsonStore.Create; begin
  CreateVar(JSClassName + '({});');
  InitDefaults;
end;

procedure TExtDataMemoryProxy.SetFOnLoadexception(Value : TExtDataMemoryProxyOnLoadexception); begin
  if Assigned(FOnLoadexception) then
    JSCode(JSName+'.events ["loadexception"].listeners=[];');
  if Assigned(Value) then
    On('loadexception', Ajax('loadexception', ['This', '%0.nm','Arg', '%1.nm','Null', '%2.nm','E', '%3'], true));
  FOnLoadexception := Value;
end;

function TExtDataMemoryProxy.JSClassName : string; begin
  Result := 'Ext.data.MemoryProxy';
end;

{$IFDEF FPC}constructor TExtDataMemoryProxy.AddTo(List : TExtObjectList);begin inherited end;{$ENDIF}

constructor TExtDataMemoryProxy.Create(Data : TExtObject); begin
  CreateVar(JSClassName + '(' + VarToJSON([Data, false]) + ');');
  InitDefaults;
end;

function TExtDataMemoryProxy.DoRequest(Action : String; Rs : TExtDataRecord; Params : TExtObject; Reader : TExtDataDataReader; Callback : TExtFunction; Scope : TExtObject; Arg : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.doRequest(' + VarToJSON([Action, Rs, false, Params, false, Reader, false, Callback, true, Scope, false, Arg, false]) + ');', 'TExtDataMemoryProxy');
  Result := Self;
end;

function TExtDataMemoryProxy.DoRequest(Action : String; Rs : TExtObjectList; Params : TExtObject; Reader : TExtDataDataReader; Callback : TExtFunction; Scope : TExtObject; Arg : TExtObject) : TExtFunction; begin
  JSCode(JSName + '.doRequest(' + VarToJSON([Action]) + ',' + VarToJSON(Rs) + ',' + VarToJSON([Params, false, Reader, false, Callback, true, Scope, false, Arg, false]) + ');', 'TExtDataMemoryProxy');
  Result := Self;
end;

procedure TExtDataMemoryProxy.HandleEvent(const AEvtName : string); begin
  inherited;
  if (AEvtName = 'loadexception') and Assigned(FOnLoadexception) then
    FOnLoadexception(TExtDataMemoryProxy(ParamAsObject('This')), TExtObject(ParamAsObject('Arg')), TExtObject(ParamAsObject('Null')), ParamAsstring('E'));
end;

initialization
  ExtDataSortTypes := TExtDataSortTypesSingleton.CreateSingleton;
  ExtDataApi := TExtDataApiSingleton.CreateSingleton;

finalization
  ExtDataApi.Destroy;
  ExtDataSortTypes.Destroy;
end.